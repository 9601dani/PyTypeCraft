
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ANY BOOLEAN BREAK CADENA COLON COMA CONCAT CONSOLE CONTINUE DISTINTO_QUE DIVIDE DOBLE_IGUAL ELSE FOR FUNCTION IF IGUAL INTERFACE LET LITERAL LOG L_CORCHETE L_LLAVE L_PAREN MAS MAYOR_IGUAL_QUE MAYOR_QUE MENOR_IGUAL_QUE MENOR_QUE MENOS MOD NOT NULL NUMBER OR PUNTO RETURN R_CORCHETE R_LLAVE R_PAREN SEMI_COLON SPLIT STRING TIMES TOEXPONENTIAL TOFIXED TOLOWERCASE TOSTRING TOUPPERCASE WHILEinit            : instruccionesinstrucciones    : instrucciones instruccioninstrucciones    : instruccioninstruccion      : console_proconsole_pro      : CONSOLE PUNTO LOG L_PAREN expresion R_PAREN SEMI_COLON expresion      : CADENA\n                      | LITERAL'
    
_lr_action_items = {'CONSOLE':([0,2,3,4,6,14,],[5,5,-3,-4,-2,-5,]),'$end':([1,2,3,4,6,14,],[0,-1,-3,-4,-2,-5,]),'PUNTO':([5,],[7,]),'LOG':([7,],[8,]),'L_PAREN':([8,],[9,]),'CADENA':([9,],[11,]),'LITERAL':([9,],[12,]),'R_PAREN':([10,11,12,],[13,-6,-7,]),'SEMI_COLON':([13,],[14,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'init':([0,],[1,]),'instrucciones':([0,],[2,]),'instruccion':([0,2,],[3,6,]),'console_pro':([0,2,],[4,4,]),'expresion':([9,],[10,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> init","S'",1,None,None,None),
  ('init -> instrucciones','init',1,'p_init','grammar.py',203),
  ('instrucciones -> instrucciones instruccion','instrucciones',2,'p_instrucciones_lista','grammar.py',207),
  ('instrucciones -> instruccion','instrucciones',1,'p_instrucciones_instruccion','grammar.py',214),
  ('instruccion -> console_pro','instruccion',1,'p_instruccion','grammar.py',221),
  ('console_pro -> CONSOLE PUNTO LOG L_PAREN expresion R_PAREN SEMI_COLON','console_pro',7,'p_instruccion_console','grammar.py',225),
  ('expresion -> CADENA','expresion',1,'p_instruccion_expresion','grammar.py',229),
  ('expresion -> LITERAL','expresion',1,'p_instruccion_expresion','grammar.py',230),
]
