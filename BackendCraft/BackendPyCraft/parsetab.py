
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ANY BOOLEAN BREAK CADENA COLON COMA CONCAT CONSOLE CONTINUE DECIMAL DISTINTO_QUE DIVIDE ELSE ENTERO FOR FUNCTION IF IGUAL INTERFACE LET LITERAL LOG L_CORCHETE L_LLAVE L_PAREN MAS MAYOR_IGUAL_QUE MAYOR_QUE MENOR_IGUAL_QUE MENOR_QUE MENOS MOD NOT NULL NUMBER OF OR POTENCIA PUNTO RETURN R_CORCHETE R_LLAVE R_PAREN SEMI_COLON SPLIT STRING TIMES TOEXPONENTIAL TOFIXED TOLOWERCASE TOSTRING TOUPPERCASE TRIPLE_IGUAL WHILEinit            : instruccionesinstrucciones    : instrucciones instruccioninstrucciones    : instruccioninstruccion      : console_pro sc\n                        | declaration_instruction sc\n                        | assig_pro sc\n                        | if_pro sc\n                        | while_pro sc\n                        | for_pro sc\n                        | for_each_pro sc\n                        | interface_pro sc\n                        | sumadores scsc   : SEMI_COLON\n            |interface_pro    : INTERFACE LITERAL L_LLAVE interface_atributos R_LLAVEinterface_atributos  : interface_atributos interface_atributo scinterface_atributos  : interface_atributo   : LITERAL COLON typeinterface_atributo   : LITERALdeclaration_instruction      : LET declaracion_listdeclaracion_list      : declaracion_list COMA assignacion_instructiondeclaracion_list      : assignacion_instructionassignacion_instruction      : LITERAL COLON type IGUAL aassignacion_instruction      : LITERAL COLON typeassignacion_instruction      : LITERAL IGUAL atype      : NUMBER\n                 | STRING\n                 | BOOLEAN\n                 | ANY assig_pro      : LITERAL IGUAL aif_pro      : IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_proelse_pro      : ELSE IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_proelse_pro      : ELSE L_LLAVE instrucciones R_LLAVEelse_pro      : while_pro      : WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVEfor_pro      : FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE\n                    | FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVEfor_each_pro : FOR L_PAREN for_each_dec R_PAREN L_LLAVE instrucciones R_LLAVEfor_each_dec : LET LITERAL OF afor_each_dec : LET LITERAL COLON type OF aconsole_pro      : CONSOLE PUNTO LOG L_PAREN expresion R_PARENexpresion      : expresion COMA aexpresion      : aa      : a OR ba      : b b      : b AND c b      : c c      : NOT d c      : d  d     : d DISTINTO_QUE e\n                | d MENOR_QUE e\n                | d MENOR_IGUAL_QUE e\n                | d MAYOR_QUE e\n                | d MAYOR_IGUAL_QUE e\n                | d TRIPLE_IGUAL e  d     : e  e     : e MAS f\n                | e MENOS f  e     : f  f     : f TIMES g\n                | f DIVIDE g\n                | f MOD g\n                | f POTENCIA g f     : g f    : g PUNTO nativeFun L_PAREN expresion R_PAREN g     : ENTERO\n              | DECIMAL\n              | CADENA\n              | LITERAL\n              | interface_assi g     : L_PAREN a R_PAREN sumadores     : LITERAL MAS MAS\n                          | LITERAL MENOS MENOS interface_assi   : L_LLAVE atributos_assi R_LLAVEatributos_assi   : atributos_assi COMA LITERAL COLON aatributos_assi   : LITERAL COLON anativeFun    : TOSTRING\n                    | TOFIXED\n                    | TOEXPONENTIAL\n                    | TOLOWERCASE\n                    | TOUPPERCASE\n                    | SPLIT\n                    | CONCAT'
    
_lr_action_items = {'CONSOLE':([0,2,3,4,5,6,7,8,9,10,11,12,20,21,22,23,24,25,26,27,28,29,30,32,33,46,47,48,49,51,52,53,54,56,57,58,59,61,62,72,73,74,75,76,77,78,81,108,109,110,111,112,113,114,115,116,117,118,119,120,121,130,131,134,135,138,142,144,146,150,151,154,162,163,166,169,171,177,178,179,181,182,183,185,186,187,189,190,191,192,],[13,13,-3,-14,-14,-14,-14,-14,-14,-14,-14,-14,-2,-4,-13,-5,-6,-7,-8,-9,-10,-11,-12,-20,-22,-69,-30,-45,-47,-49,-56,-59,-64,-66,-67,-68,-70,-72,-73,-21,-24,-26,-27,-28,-29,-25,-48,-44,-46,-50,-51,-52,-53,-54,-55,-57,-58,-60,-61,-62,-63,-71,-74,13,13,13,-15,-41,-23,13,13,13,-34,-35,-38,-65,-31,13,13,13,13,13,13,-33,-36,-37,13,13,-34,-32,]),'LET':([0,2,3,4,5,6,7,8,9,10,11,12,20,21,22,23,24,25,26,27,28,29,30,32,33,40,46,47,48,49,51,52,53,54,56,57,58,59,61,62,72,73,74,75,76,77,78,81,108,109,110,111,112,113,114,115,116,117,118,119,120,121,130,131,134,135,138,142,144,146,150,151,154,162,163,166,169,171,177,178,179,181,182,183,185,186,187,189,190,191,192,],[14,14,-3,-14,-14,-14,-14,-14,-14,-14,-14,-14,-2,-4,-13,-5,-6,-7,-8,-9,-10,-11,-12,-20,-22,68,-69,-30,-45,-47,-49,-56,-59,-64,-66,-67,-68,-70,-72,-73,-21,-24,-26,-27,-28,-29,-25,-48,-44,-46,-50,-51,-52,-53,-54,-55,-57,-58,-60,-61,-62,-63,-71,-74,14,14,14,-15,-41,-23,14,14,14,-34,-35,-38,-65,-31,14,14,14,14,14,14,-33,-36,-37,14,14,-34,-32,]),'LITERAL':([0,2,3,4,5,6,7,8,9,10,11,12,14,19,20,21,22,23,24,25,26,27,28,29,30,32,33,35,38,39,40,43,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,68,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,100,101,104,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,130,131,132,133,134,135,138,139,141,142,143,144,145,146,147,150,151,152,153,154,158,161,162,163,166,167,168,169,171,177,178,179,180,181,182,183,185,186,187,189,190,191,192,],[15,15,-3,-14,-14,-14,-14,-14,-14,-14,-14,-14,34,41,-2,-4,-13,-5,-6,-7,-8,-9,-10,-11,-12,-20,-22,46,46,46,69,34,46,-69,-30,-45,-47,46,-49,-56,-59,-64,46,-66,-67,-68,-70,97,-72,-73,103,-17,46,-21,-24,-26,-27,-28,-29,-25,46,46,-48,46,46,46,46,46,46,46,46,46,46,46,46,46,46,141,46,-44,-46,-50,-51,-52,-53,-54,-55,-57,-58,-60,-61,-62,-63,-71,-74,148,46,15,15,15,46,-19,-15,-14,-41,46,-23,46,15,15,69,69,15,-16,46,-34,-35,-38,46,-18,-65,-31,15,15,15,46,15,15,15,-33,-36,-37,15,15,-34,-32,]),'IF':([0,2,3,4,5,6,7,8,9,10,11,12,20,21,22,23,24,25,26,27,28,29,30,32,33,46,47,48,49,51,52,53,54,56,57,58,59,61,62,72,73,74,75,76,77,78,81,108,109,110,111,112,113,114,115,116,117,118,119,120,121,130,131,134,135,138,142,144,146,150,151,154,162,163,166,169,171,172,177,178,179,181,182,183,185,186,187,189,190,191,192,],[16,16,-3,-14,-14,-14,-14,-14,-14,-14,-14,-14,-2,-4,-13,-5,-6,-7,-8,-9,-10,-11,-12,-20,-22,-69,-30,-45,-47,-49,-56,-59,-64,-66,-67,-68,-70,-72,-73,-21,-24,-26,-27,-28,-29,-25,-48,-44,-46,-50,-51,-52,-53,-54,-55,-57,-58,-60,-61,-62,-63,-71,-74,16,16,16,-15,-41,-23,16,16,16,-34,-35,-38,-65,-31,176,16,16,16,16,16,16,-33,-36,-37,16,16,-34,-32,]),'WHILE':([0,2,3,4,5,6,7,8,9,10,11,12,20,21,22,23,24,25,26,27,28,29,30,32,33,46,47,48,49,51,52,53,54,56,57,58,59,61,62,72,73,74,75,76,77,78,81,108,109,110,111,112,113,114,115,116,117,118,119,120,121,130,131,134,135,138,142,144,146,150,151,154,162,163,166,169,171,177,178,179,181,182,183,185,186,187,189,190,191,192,],[17,17,-3,-14,-14,-14,-14,-14,-14,-14,-14,-14,-2,-4,-13,-5,-6,-7,-8,-9,-10,-11,-12,-20,-22,-69,-30,-45,-47,-49,-56,-59,-64,-66,-67,-68,-70,-72,-73,-21,-24,-26,-27,-28,-29,-25,-48,-44,-46,-50,-51,-52,-53,-54,-55,-57,-58,-60,-61,-62,-63,-71,-74,17,17,17,-15,-41,-23,17,17,17,-34,-35,-38,-65,-31,17,17,17,17,17,17,-33,-36,-37,17,17,-34,-32,]),'FOR':([0,2,3,4,5,6,7,8,9,10,11,12,20,21,22,23,24,25,26,27,28,29,30,32,33,46,47,48,49,51,52,53,54,56,57,58,59,61,62,72,73,74,75,76,77,78,81,108,109,110,111,112,113,114,115,116,117,118,119,120,121,130,131,134,135,138,142,144,146,150,151,154,162,163,166,169,171,177,178,179,181,182,183,185,186,187,189,190,191,192,],[18,18,-3,-14,-14,-14,-14,-14,-14,-14,-14,-14,-2,-4,-13,-5,-6,-7,-8,-9,-10,-11,-12,-20,-22,-69,-30,-45,-47,-49,-56,-59,-64,-66,-67,-68,-70,-72,-73,-21,-24,-26,-27,-28,-29,-25,-48,-44,-46,-50,-51,-52,-53,-54,-55,-57,-58,-60,-61,-62,-63,-71,-74,18,18,18,-15,-41,-23,18,18,18,-34,-35,-38,-65,-31,18,18,18,18,18,18,-33,-36,-37,18,18,-34,-32,]),'INTERFACE':([0,2,3,4,5,6,7,8,9,10,11,12,20,21,22,23,24,25,26,27,28,29,30,32,33,46,47,48,49,51,52,53,54,56,57,58,59,61,62,72,73,74,75,76,77,78,81,108,109,110,111,112,113,114,115,116,117,118,119,120,121,130,131,134,135,138,142,144,146,150,151,154,162,163,166,169,171,177,178,179,181,182,183,185,186,187,189,190,191,192,],[19,19,-3,-14,-14,-14,-14,-14,-14,-14,-14,-14,-2,-4,-13,-5,-6,-7,-8,-9,-10,-11,-12,-20,-22,-69,-30,-45,-47,-49,-56,-59,-64,-66,-67,-68,-70,-72,-73,-21,-24,-26,-27,-28,-29,-25,-48,-44,-46,-50,-51,-52,-53,-54,-55,-57,-58,-60,-61,-62,-63,-71,-74,19,19,19,-15,-41,-23,19,19,19,-34,-35,-38,-65,-31,19,19,19,19,19,19,-33,-36,-37,19,19,-34,-32,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,12,20,21,22,23,24,25,26,27,28,29,30,32,33,46,47,48,49,51,52,53,54,56,57,58,59,61,62,72,73,74,75,76,77,78,81,108,109,110,111,112,113,114,115,116,117,118,119,120,121,130,131,142,144,146,162,163,166,169,171,185,186,187,191,192,],[0,-1,-3,-14,-14,-14,-14,-14,-14,-14,-14,-14,-2,-4,-13,-5,-6,-7,-8,-9,-10,-11,-12,-20,-22,-69,-30,-45,-47,-49,-56,-59,-64,-66,-67,-68,-70,-72,-73,-21,-24,-26,-27,-28,-29,-25,-48,-44,-46,-50,-51,-52,-53,-54,-55,-57,-58,-60,-61,-62,-63,-71,-74,-15,-41,-23,-34,-35,-38,-65,-31,-33,-36,-37,-34,-32,]),'R_LLAVE':([3,4,5,6,7,8,9,10,11,12,20,21,22,23,24,25,26,27,28,29,30,32,33,46,47,48,49,51,52,53,54,56,57,58,59,61,62,70,72,73,74,75,76,77,78,81,96,104,108,109,110,111,112,113,114,115,116,117,118,119,120,121,130,131,141,142,143,144,146,149,150,151,154,158,162,163,166,168,169,170,171,181,182,183,185,186,187,190,191,192,],[-3,-14,-14,-14,-14,-14,-14,-14,-14,-14,-2,-4,-13,-5,-6,-7,-8,-9,-10,-11,-12,-20,-22,-69,-30,-45,-47,-49,-56,-59,-64,-66,-67,-68,-70,-72,-73,-17,-21,-24,-26,-27,-28,-29,-25,-48,131,142,-44,-46,-50,-51,-52,-53,-54,-55,-57,-58,-60,-61,-62,-63,-71,-74,-19,-15,-14,-41,-23,-76,162,163,166,-16,-34,-35,-38,-18,-65,-75,-31,185,186,187,-33,-36,-37,191,-34,-32,]),'SEMI_COLON':([4,5,6,7,8,9,10,11,12,32,33,46,47,48,49,51,52,53,54,56,57,58,59,61,62,65,66,72,73,74,75,76,77,78,81,108,109,110,111,112,113,114,115,116,117,118,119,120,121,130,131,136,137,141,142,143,144,146,156,162,163,166,168,169,171,185,186,187,191,192,],[22,22,22,22,22,22,22,22,22,-20,-22,-69,-30,-45,-47,-49,-56,-59,-64,-66,-67,-68,-70,-72,-73,100,101,-21,-24,-26,-27,-28,-29,-25,-48,-44,-46,-50,-51,-52,-53,-54,-55,-57,-58,-60,-61,-62,-63,-71,-74,152,153,-19,-15,22,-41,-23,-24,-34,-35,-38,-18,-65,-31,-33,-36,-37,-34,-32,]),'PUNTO':([13,46,54,56,57,58,59,130,131,],[31,-69,94,-66,-67,-68,-70,-71,-74,]),'IGUAL':([15,34,69,73,74,75,76,77,103,156,],[35,45,35,107,-26,-27,-28,-29,45,107,]),'MAS':([15,36,46,52,53,54,56,57,58,59,110,111,112,113,114,115,116,117,118,119,120,121,130,131,169,],[36,61,-69,88,-59,-64,-66,-67,-68,-70,88,88,88,88,88,88,-57,-58,-60,-61,-62,-63,-71,-74,-65,]),'MENOS':([15,37,46,52,53,54,56,57,58,59,110,111,112,113,114,115,116,117,118,119,120,121,130,131,169,],[37,62,-69,89,-59,-64,-66,-67,-68,-70,89,89,89,89,89,89,-57,-58,-60,-61,-62,-63,-71,-74,-65,]),'L_PAREN':([16,17,18,35,38,39,42,45,50,55,71,79,80,82,83,84,85,86,87,88,89,90,91,92,93,100,101,107,122,123,124,125,126,127,128,129,133,139,145,147,161,167,176,180,],[38,39,40,55,55,55,71,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,147,-77,-78,-79,-80,-81,-82,-83,55,55,55,55,55,55,180,55,]),'LOG':([31,],[42,]),'COMA':([32,33,46,48,49,51,52,53,54,56,57,58,59,72,73,74,75,76,77,78,81,96,105,106,108,109,110,111,112,113,114,115,116,117,118,119,120,121,130,131,146,149,156,159,160,169,170,],[43,-22,-69,-45,-47,-49,-56,-59,-64,-66,-67,-68,-70,-21,-24,-26,-27,-28,-29,-25,-48,132,145,-43,-44,-46,-50,-51,-52,-53,-54,-55,-57,-58,-60,-61,-62,-63,-71,-74,-23,-76,-24,-42,145,-65,-75,]),'COLON':([34,97,103,141,148,],[44,133,140,157,161,]),'NOT':([35,38,39,45,55,71,79,80,100,101,107,133,139,145,147,161,167,180,],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'ENTERO':([35,38,39,45,50,55,71,79,80,82,83,84,85,86,87,88,89,90,91,92,93,100,101,107,133,139,145,147,161,167,180,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'DECIMAL':([35,38,39,45,50,55,71,79,80,82,83,84,85,86,87,88,89,90,91,92,93,100,101,107,133,139,145,147,161,167,180,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'CADENA':([35,38,39,45,50,55,71,79,80,82,83,84,85,86,87,88,89,90,91,92,93,100,101,107,133,139,145,147,161,167,180,],[58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'L_LLAVE':([35,38,39,41,45,50,55,71,79,80,82,83,84,85,86,87,88,89,90,91,92,93,98,99,100,101,102,107,133,139,145,147,161,167,172,173,174,180,188,],[60,60,60,70,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,134,135,60,60,138,60,60,60,60,60,60,60,177,178,179,60,189,]),'NUMBER':([44,140,157,],[74,74,74,]),'STRING':([44,140,157,],[75,75,75,]),'BOOLEAN':([44,140,157,],[76,76,76,]),'ANY':([44,140,157,],[77,77,77,]),'TIMES':([46,53,54,56,57,58,59,116,117,118,119,120,121,130,131,169,],[-69,90,-64,-66,-67,-68,-70,90,90,-60,-61,-62,-63,-71,-74,-65,]),'DIVIDE':([46,53,54,56,57,58,59,116,117,118,119,120,121,130,131,169,],[-69,91,-64,-66,-67,-68,-70,91,91,-60,-61,-62,-63,-71,-74,-65,]),'MOD':([46,53,54,56,57,58,59,116,117,118,119,120,121,130,131,169,],[-69,92,-64,-66,-67,-68,-70,92,92,-60,-61,-62,-63,-71,-74,-65,]),'POTENCIA':([46,53,54,56,57,58,59,116,117,118,119,120,121,130,131,169,],[-69,93,-64,-66,-67,-68,-70,93,93,-60,-61,-62,-63,-71,-74,-65,]),'DISTINTO_QUE':([46,51,52,53,54,56,57,58,59,81,110,111,112,113,114,115,116,117,118,119,120,121,130,131,169,],[-69,82,-56,-59,-64,-66,-67,-68,-70,82,-50,-51,-52,-53,-54,-55,-57,-58,-60,-61,-62,-63,-71,-74,-65,]),'MENOR_QUE':([46,51,52,53,54,56,57,58,59,81,110,111,112,113,114,115,116,117,118,119,120,121,130,131,169,],[-69,83,-56,-59,-64,-66,-67,-68,-70,83,-50,-51,-52,-53,-54,-55,-57,-58,-60,-61,-62,-63,-71,-74,-65,]),'MENOR_IGUAL_QUE':([46,51,52,53,54,56,57,58,59,81,110,111,112,113,114,115,116,117,118,119,120,121,130,131,169,],[-69,84,-56,-59,-64,-66,-67,-68,-70,84,-50,-51,-52,-53,-54,-55,-57,-58,-60,-61,-62,-63,-71,-74,-65,]),'MAYOR_QUE':([46,51,52,53,54,56,57,58,59,81,110,111,112,113,114,115,116,117,118,119,120,121,130,131,169,],[-69,85,-56,-59,-64,-66,-67,-68,-70,85,-50,-51,-52,-53,-54,-55,-57,-58,-60,-61,-62,-63,-71,-74,-65,]),'MAYOR_IGUAL_QUE':([46,51,52,53,54,56,57,58,59,81,110,111,112,113,114,115,116,117,118,119,120,121,130,131,169,],[-69,86,-56,-59,-64,-66,-67,-68,-70,86,-50,-51,-52,-53,-54,-55,-57,-58,-60,-61,-62,-63,-71,-74,-65,]),'TRIPLE_IGUAL':([46,51,52,53,54,56,57,58,59,81,110,111,112,113,114,115,116,117,118,119,120,121,130,131,169,],[-69,87,-56,-59,-64,-66,-67,-68,-70,87,-50,-51,-52,-53,-54,-55,-57,-58,-60,-61,-62,-63,-71,-74,-65,]),'AND':([46,48,49,51,52,53,54,56,57,58,59,81,108,109,110,111,112,113,114,115,116,117,118,119,120,121,130,131,169,],[-69,80,-47,-49,-56,-59,-64,-66,-67,-68,-70,-48,80,-46,-50,-51,-52,-53,-54,-55,-57,-58,-60,-61,-62,-63,-71,-74,-65,]),'OR':([46,47,48,49,51,52,53,54,56,57,58,59,63,64,78,81,95,106,108,109,110,111,112,113,114,115,116,117,118,119,120,121,130,131,136,137,146,149,155,159,169,170,175,184,],[-69,79,-45,-47,-49,-56,-59,-64,-66,-67,-68,-70,79,79,79,-48,79,79,-44,-46,-50,-51,-52,-53,-54,-55,-57,-58,-60,-61,-62,-63,-71,-74,79,79,79,79,79,79,-65,79,79,79,]),'R_PAREN':([46,47,48,49,51,52,53,54,56,57,58,59,63,64,67,81,95,105,106,108,109,110,111,112,113,114,115,116,117,118,119,120,121,130,131,155,159,160,164,165,169,175,184,],[-69,-30,-45,-47,-49,-56,-59,-64,-66,-67,-68,-70,98,99,102,-48,130,144,-43,-44,-46,-50,-51,-52,-53,-54,-55,-57,-58,-60,-61,-62,-63,-71,-74,-39,-42,169,173,174,-65,-40,188,]),'OF':([74,75,76,77,103,156,],[-26,-27,-28,-29,139,167,]),'TOSTRING':([94,],[123,]),'TOFIXED':([94,],[124,]),'TOEXPONENTIAL':([94,],[125,]),'TOLOWERCASE':([94,],[126,]),'TOUPPERCASE':([94,],[127,]),'SPLIT':([94,],[128,]),'CONCAT':([94,],[129,]),'ELSE':([162,191,],[172,172,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'init':([0,],[1,]),'instrucciones':([0,134,135,138,177,178,179,189,],[2,150,151,154,181,182,183,190,]),'instruccion':([0,2,134,135,138,150,151,154,177,178,179,181,182,183,189,190,],[3,20,3,3,3,20,20,20,3,3,3,20,20,20,3,20,]),'console_pro':([0,2,134,135,138,150,151,154,177,178,179,181,182,183,189,190,],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'declaration_instruction':([0,2,40,134,135,138,150,151,154,177,178,179,181,182,183,189,190,],[5,5,65,5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'assig_pro':([0,2,40,134,135,138,150,151,152,153,154,177,178,179,181,182,183,189,190,],[6,6,66,6,6,6,6,6,164,165,6,6,6,6,6,6,6,6,6,]),'if_pro':([0,2,134,135,138,150,151,154,177,178,179,181,182,183,189,190,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'while_pro':([0,2,134,135,138,150,151,154,177,178,179,181,182,183,189,190,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'for_pro':([0,2,134,135,138,150,151,154,177,178,179,181,182,183,189,190,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'for_each_pro':([0,2,134,135,138,150,151,154,177,178,179,181,182,183,189,190,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'interface_pro':([0,2,134,135,138,150,151,154,177,178,179,181,182,183,189,190,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'sumadores':([0,2,134,135,138,150,151,154,177,178,179,181,182,183,189,190,],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'sc':([4,5,6,7,8,9,10,11,12,143,],[21,23,24,25,26,27,28,29,30,158,]),'declaracion_list':([14,68,],[32,32,]),'assignacion_instruction':([14,43,68,],[33,72,33,]),'a':([35,38,39,45,55,71,100,101,107,133,139,145,147,161,167,180,],[47,63,64,78,95,106,136,137,146,149,155,159,106,170,175,184,]),'b':([35,38,39,45,55,71,79,100,101,107,133,139,145,147,161,167,180,],[48,48,48,48,48,48,108,48,48,48,48,48,48,48,48,48,48,]),'c':([35,38,39,45,55,71,79,80,100,101,107,133,139,145,147,161,167,180,],[49,49,49,49,49,49,49,109,49,49,49,49,49,49,49,49,49,49,]),'d':([35,38,39,45,50,55,71,79,80,100,101,107,133,139,145,147,161,167,180,],[51,51,51,51,81,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'e':([35,38,39,45,50,55,71,79,80,82,83,84,85,86,87,100,101,107,133,139,145,147,161,167,180,],[52,52,52,52,52,52,52,52,52,110,111,112,113,114,115,52,52,52,52,52,52,52,52,52,52,]),'f':([35,38,39,45,50,55,71,79,80,82,83,84,85,86,87,88,89,100,101,107,133,139,145,147,161,167,180,],[53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,116,117,53,53,53,53,53,53,53,53,53,53,]),'g':([35,38,39,45,50,55,71,79,80,82,83,84,85,86,87,88,89,90,91,92,93,100,101,107,133,139,145,147,161,167,180,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,118,119,120,121,54,54,54,54,54,54,54,54,54,54,]),'interface_assi':([35,38,39,45,50,55,71,79,80,82,83,84,85,86,87,88,89,90,91,92,93,100,101,107,133,139,145,147,161,167,180,],[59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,]),'for_each_dec':([40,],[67,]),'type':([44,140,157,],[73,156,168,]),'atributos_assi':([60,],[96,]),'interface_atributos':([70,],[104,]),'expresion':([71,147,],[105,160,]),'nativeFun':([94,],[122,]),'interface_atributo':([104,],[143,]),'else_pro':([162,191,],[171,192,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> init","S'",1,None,None,None),
  ('init -> instrucciones','init',1,'p_init','grammar.py',279),
  ('instrucciones -> instrucciones instruccion','instrucciones',2,'p_instrucciones_lista','grammar.py',283),
  ('instrucciones -> instruccion','instrucciones',1,'p_instrucciones_instruccion','grammar.py',290),
  ('instruccion -> console_pro sc','instruccion',2,'p_instruccion','grammar.py',297),
  ('instruccion -> declaration_instruction sc','instruccion',2,'p_instruccion','grammar.py',298),
  ('instruccion -> assig_pro sc','instruccion',2,'p_instruccion','grammar.py',299),
  ('instruccion -> if_pro sc','instruccion',2,'p_instruccion','grammar.py',300),
  ('instruccion -> while_pro sc','instruccion',2,'p_instruccion','grammar.py',301),
  ('instruccion -> for_pro sc','instruccion',2,'p_instruccion','grammar.py',302),
  ('instruccion -> for_each_pro sc','instruccion',2,'p_instruccion','grammar.py',303),
  ('instruccion -> interface_pro sc','instruccion',2,'p_instruccion','grammar.py',304),
  ('instruccion -> sumadores sc','instruccion',2,'p_instruccion','grammar.py',305),
  ('sc -> SEMI_COLON','sc',1,'p_semi_colon','grammar.py',309),
  ('sc -> <empty>','sc',0,'p_semi_colon','grammar.py',310),
  ('interface_pro -> INTERFACE LITERAL L_LLAVE interface_atributos R_LLAVE','interface_pro',5,'p_instruccion_declarationInterface','grammar.py',316),
  ('interface_atributos -> interface_atributos interface_atributo sc','interface_atributos',3,'p_instruccion_interfaceAtributos','grammar.py',320),
  ('interface_atributos -> <empty>','interface_atributos',0,'p_instruccion_interfaceAtributos2','grammar.py',323),
  ('interface_atributo -> LITERAL COLON type','interface_atributo',3,'p_intruccion_interfaceAtributo','grammar.py',326),
  ('interface_atributo -> LITERAL','interface_atributo',1,'p_instruccion_interfaceAtributo2','grammar.py',329),
  ('declaration_instruction -> LET declaracion_list','declaration_instruction',2,'p_instruccion_declarationInstruction','grammar.py',333),
  ('declaracion_list -> declaracion_list COMA assignacion_instruction','declaracion_list',3,'p_instruccion_declaracion_list','grammar.py',337),
  ('declaracion_list -> assignacion_instruction','declaracion_list',1,'p_instruccion_declaracion_list2','grammar.py',341),
  ('assignacion_instruction -> LITERAL COLON type IGUAL a','assignacion_instruction',5,'p_instruccion_assignacion_instruction','grammar.py',346),
  ('assignacion_instruction -> LITERAL COLON type','assignacion_instruction',3,'p_instruccion_assingnacion_instruction2','grammar.py',350),
  ('assignacion_instruction -> LITERAL IGUAL a','assignacion_instruction',3,'p_instruccion_assignacion_instruction3','grammar.py',354),
  ('type -> NUMBER','type',1,'p_instruccion_type','grammar.py',357),
  ('type -> STRING','type',1,'p_instruccion_type','grammar.py',358),
  ('type -> BOOLEAN','type',1,'p_instruccion_type','grammar.py',359),
  ('type -> ANY','type',1,'p_instruccion_type','grammar.py',360),
  ('assig_pro -> LITERAL IGUAL a','assig_pro',3,'p_instruccion_assig_pro','grammar.py',364),
  ('if_pro -> IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro','if_pro',8,'p_instruccion_if_pro','grammar.py',368),
  ('else_pro -> ELSE IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro','else_pro',9,'p_instruccion_else_pro','grammar.py',374),
  ('else_pro -> ELSE L_LLAVE instrucciones R_LLAVE','else_pro',4,'p_instruccion_else_pro2','grammar.py',378),
  ('else_pro -> <empty>','else_pro',0,'p_instruccion_else_pro3','grammar.py',382),
  ('while_pro -> WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE','while_pro',7,'p_instruccion_while_pro','grammar.py',387),
  ('for_pro -> FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE','for_pro',11,'p_instruccion_for_pro','grammar.py',392),
  ('for_pro -> FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE','for_pro',11,'p_instruccion_for_pro','grammar.py',393),
  ('for_each_pro -> FOR L_PAREN for_each_dec R_PAREN L_LLAVE instrucciones R_LLAVE','for_each_pro',7,'p_instruccion_for_each_pro','grammar.py',400),
  ('for_each_dec -> LET LITERAL OF a','for_each_dec',4,'p_instruccion_fore_dec','grammar.py',403),
  ('for_each_dec -> LET LITERAL COLON type OF a','for_each_dec',6,'p_instruccion_fore_dec_type','grammar.py',406),
  ('console_pro -> CONSOLE PUNTO LOG L_PAREN expresion R_PAREN','console_pro',6,'p_instruccion_console','grammar.py',411),
  ('expresion -> expresion COMA a','expresion',3,'p_instruccion_expresion','grammar.py',416),
  ('expresion -> a','expresion',1,'p_instruccion_expresion2','grammar.py',419),
  ('a -> a OR b','a',3,'p_instruccion_expresion3','grammar.py',424),
  ('a -> b','a',1,'p_instruccion_expresion4','grammar.py',427),
  ('b -> b AND c','b',3,'p_instruccion_expresion5','grammar.py',431),
  ('b -> c','b',1,'p_instruccion_expresion6','grammar.py',435),
  ('c -> NOT d','c',2,'p_instruccion_expresion7','grammar.py',439),
  ('c -> d','c',1,'p_instruccion_expresion8','grammar.py',443),
  ('d -> d DISTINTO_QUE e','d',3,'p_instruccion_expresion9','grammar.py',447),
  ('d -> d MENOR_QUE e','d',3,'p_instruccion_expresion9','grammar.py',448),
  ('d -> d MENOR_IGUAL_QUE e','d',3,'p_instruccion_expresion9','grammar.py',449),
  ('d -> d MAYOR_QUE e','d',3,'p_instruccion_expresion9','grammar.py',450),
  ('d -> d MAYOR_IGUAL_QUE e','d',3,'p_instruccion_expresion9','grammar.py',451),
  ('d -> d TRIPLE_IGUAL e','d',3,'p_instruccion_expresion9','grammar.py',452),
  ('d -> e','d',1,'p_instruccion_expresion10','grammar.py',456),
  ('e -> e MAS f','e',3,'p_instruccion_expresion11','grammar.py',460),
  ('e -> e MENOS f','e',3,'p_instruccion_expresion11','grammar.py',461),
  ('e -> f','e',1,'p_instruccion_expresion12','grammar.py',465),
  ('f -> f TIMES g','f',3,'p_instruccion_expresion13','grammar.py',469),
  ('f -> f DIVIDE g','f',3,'p_instruccion_expresion13','grammar.py',470),
  ('f -> f MOD g','f',3,'p_instruccion_expresion13','grammar.py',471),
  ('f -> f POTENCIA g','f',3,'p_instruccion_expresion13','grammar.py',472),
  ('f -> g','f',1,'p_instruccion_expresion14','grammar.py',476),
  ('f -> g PUNTO nativeFun L_PAREN expresion R_PAREN','f',6,'p_instruccion_expresion15','grammar.py',480),
  ('g -> ENTERO','g',1,'p_instruccion_expresion16','grammar.py',483),
  ('g -> DECIMAL','g',1,'p_instruccion_expresion16','grammar.py',484),
  ('g -> CADENA','g',1,'p_instruccion_expresion16','grammar.py',485),
  ('g -> LITERAL','g',1,'p_instruccion_expresion16','grammar.py',486),
  ('g -> interface_assi','g',1,'p_instruccion_expresion16','grammar.py',487),
  ('g -> L_PAREN a R_PAREN','g',3,'p_instruccion_expresion17','grammar.py',491),
  ('sumadores -> LITERAL MAS MAS','sumadores',3,'p_instruccion_sumadores','grammar.py',496),
  ('sumadores -> LITERAL MENOS MENOS','sumadores',3,'p_instruccion_sumadores','grammar.py',497),
  ('interface_assi -> L_LLAVE atributos_assi R_LLAVE','interface_assi',3,'p_instruccion_interfaceAssi','grammar.py',504),
  ('atributos_assi -> atributos_assi COMA LITERAL COLON a','atributos_assi',5,'p_instruccion_inter_atributesAssi','grammar.py',508),
  ('atributos_assi -> LITERAL COLON a','atributos_assi',3,'p_instruccion_inter_atributesAssi2','grammar.py',511),
  ('nativeFun -> TOSTRING','nativeFun',1,'p_instruccion_nativas','grammar.py',517),
  ('nativeFun -> TOFIXED','nativeFun',1,'p_instruccion_nativas','grammar.py',518),
  ('nativeFun -> TOEXPONENTIAL','nativeFun',1,'p_instruccion_nativas','grammar.py',519),
  ('nativeFun -> TOLOWERCASE','nativeFun',1,'p_instruccion_nativas','grammar.py',520),
  ('nativeFun -> TOUPPERCASE','nativeFun',1,'p_instruccion_nativas','grammar.py',521),
  ('nativeFun -> SPLIT','nativeFun',1,'p_instruccion_nativas','grammar.py',522),
  ('nativeFun -> CONCAT','nativeFun',1,'p_instruccion_nativas','grammar.py',523),
]
