
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ANY BOOLEAN BREAK CADENA COLON COMA CONCAT CONSOLE CONTINUE DECIMAL DISTINTO_QUE DIVIDE ELSE ENTERO FOR FUNCTION IF IGUAL INTERFACE LET LITERAL LOG L_CORCHETE L_LLAVE L_PAREN MAS MAYOR_IGUAL_QUE MAYOR_QUE MENOR_IGUAL_QUE MENOR_QUE MENOS MOD NOT NULL NUMBER OF OR POTENCIA PUNTO RETURN R_CORCHETE R_LLAVE R_PAREN SEMI_COLON SPLIT STRING TIMES TOEXPONENTIAL TOFIXED TOLOWERCASE TOSTRING TOUPPERCASE TRIPLE_IGUAL WHILEinit            : instruccionesinstrucciones    : instrucciones instruccioninstrucciones    : instruccioninstruccion      : console_pro sc\n                        | declaration_instruction sc\n                        | assig_pro sc\n                        | if_pro sc\n                        | while_pro sc\n                        | for_pro sc\n                        | for_each_pro sc\n                        | interface_pro sc\n                        | continue_pro sc\n                        | break_pro sc\n                        | return_pro sc\n                        | function_pro sc\n                        | sumadores scsc   : SEMI_COLON\n            |function_pro : FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVEfunction_pro : FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVEparameters_pro   : parameters_pro COMA parameter_proparameters_pro   : parameter_proparameter_pro    : LITERAL COLON typeparameter_pro    : LITERALcontinue_pro : CONTINUEbreak_pro : BREAKreturn_pro : RETURNreturn_pro : RETURN ainterface_pro    : INTERFACE LITERAL L_LLAVE interface_atributos R_LLAVEinterface_atributos  : interface_atributos interface_atributo scinterface_atributos  : interface_atributo   : LITERAL COLON typeinterface_atributo   : LITERALdeclaration_instruction      : LET declaracion_listdeclaracion_list      : declaracion_list COMA assignacion_instructiondeclaracion_list      : assignacion_instructionassignacion_instruction      : LITERAL COLON type IGUAL aassignacion_instruction      : LITERAL COLON typeassignacion_instruction      : LITERAL IGUAL atype      : NUMBER\n                 | STRING\n                 | BOOLEAN\n                 | ANY\n                 | LITERALassig_pro      : LITERAL IGUAL aif_pro      : IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_proelse_pro      : ELSE IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_proelse_pro      : ELSE L_LLAVE instrucciones R_LLAVEelse_pro      : while_pro      : WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVEfor_pro      : FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE\n                    | FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVEfor_each_pro : FOR L_PAREN for_each_dec R_PAREN L_LLAVE instrucciones R_LLAVEfor_each_dec : LET LITERAL OF afor_each_dec : LET LITERAL COLON type OF aconsole_pro      : CONSOLE PUNTO LOG L_PAREN expresion R_PARENexpresion      : expresion COMA aexpresion      : aa      : a OR ba      : b b      : b AND c b      : c c      : NOT d c      : d  d     : d DISTINTO_QUE e\n                | d MENOR_QUE e\n                | d MENOR_IGUAL_QUE e\n                | d MAYOR_QUE e\n                | d MAYOR_IGUAL_QUE e\n                | d TRIPLE_IGUAL e  d     : e  e     : e MAS f\n                | e MENOS f  e     : f  f     : f TIMES g\n                | f DIVIDE g\n                | f MOD g\n                | f POTENCIA g f     : g f    : g PUNTO nativeFun L_PAREN expresion R_PAREN g     : ENTERO\n              | DECIMAL\n              | CADENA\n              | LITERAL\n              | interface_assi g     : L_PAREN a R_PAREN sumadores     : LITERAL MAS MAS\n                          | LITERAL MENOS MENOS interface_assi   : L_LLAVE atributos_assi R_LLAVEatributos_assi   : atributos_assi COMA LITERAL COLON aatributos_assi   : LITERAL COLON anativeFun    : TOSTRING\n                    | TOFIXED\n                    | TOEXPONENTIAL\n                    | TOLOWERCASE\n                    | TOUPPERCASE\n                    | SPLIT\n                    | CONCAT'
    
_lr_action_items = {'CONSOLE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,24,25,26,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,44,45,54,55,56,58,59,60,61,63,64,65,66,67,74,75,76,87,106,107,108,109,110,111,112,113,121,122,123,124,125,126,127,128,129,130,131,132,133,134,143,144,154,155,158,162,170,171,173,174,175,178,186,188,190,191,194,197,199,200,201,206,208,209,210,212,213,214,216,217,218,220,221,222,223,],[17,17,-3,-18,-18,-18,-18,-18,-18,-18,-18,-18,-18,-18,-18,-18,-25,-26,-27,-2,-4,-17,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-34,-36,-28,-60,-62,-64,-71,-74,-79,-81,-82,-83,-84,-85,-45,-87,-88,-63,-35,-44,-38,-40,-41,-42,-43,-39,-59,-61,-65,-66,-67,-68,-69,-70,-72,-73,-75,-76,-77,-78,-86,-89,17,17,17,-29,17,-56,-37,17,17,17,17,17,-49,-50,-53,-80,17,-20,-46,-19,17,17,17,17,17,17,-48,-51,-52,17,17,-49,-47,]),'LET':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,24,25,26,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,44,45,52,54,55,56,58,59,60,61,63,64,65,66,67,74,75,76,87,106,107,108,109,110,111,112,113,121,122,123,124,125,126,127,128,129,130,131,132,133,134,143,144,154,155,158,162,170,171,173,174,175,178,186,188,190,191,194,197,199,200,201,206,208,209,210,212,213,214,216,217,218,220,221,222,223,],[18,18,-3,-18,-18,-18,-18,-18,-18,-18,-18,-18,-18,-18,-18,-18,-25,-26,-27,-2,-4,-17,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-34,-36,82,-28,-60,-62,-64,-71,-74,-79,-81,-82,-83,-84,-85,-45,-87,-88,-63,-35,-44,-38,-40,-41,-42,-43,-39,-59,-61,-65,-66,-67,-68,-69,-70,-72,-73,-75,-76,-77,-78,-86,-89,18,18,18,-29,18,-56,-37,18,18,18,18,18,-49,-50,-53,-80,18,-20,-46,-19,18,18,18,18,18,18,-48,-51,-52,18,18,-49,-47,]),'LITERAL':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,18,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,44,45,47,50,51,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,71,72,73,74,75,76,82,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,104,105,106,107,108,109,110,111,112,113,116,117,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,143,144,145,146,153,154,155,158,159,160,161,162,163,164,167,169,170,171,172,173,174,175,176,177,178,181,182,184,186,188,190,191,194,195,196,197,199,200,201,206,208,209,210,211,212,213,214,216,217,218,220,221,222,223,],[19,19,-3,-18,-18,-18,-18,-18,-18,-18,-18,-18,-18,-18,-18,-18,46,53,-25,-26,66,69,-2,-4,-17,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-34,-36,66,66,66,83,-28,-60,-62,66,-64,-71,-74,-79,66,-81,-82,-83,-84,-85,103,46,107,66,-45,-87,-88,119,-31,66,66,-63,66,66,66,66,66,66,66,66,66,66,66,66,147,66,-35,-44,-38,-40,-41,-42,-43,-39,66,66,161,-59,-61,-65,-66,-67,-68,-69,-70,-72,-73,-75,-76,-77,-78,-86,-89,165,66,66,19,19,19,66,107,-33,-29,-18,66,107,147,19,-56,66,-37,19,19,83,83,19,107,-30,66,19,19,-49,-50,-53,66,-32,-80,19,-20,-46,-19,19,19,19,66,19,19,19,-48,-51,-52,19,19,-49,-47,]),'IF':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,24,25,26,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,44,45,54,55,56,58,59,60,61,63,64,65,66,67,74,75,76,87,106,107,108,109,110,111,112,113,121,122,123,124,125,126,127,128,129,130,131,132,133,134,143,144,154,155,158,162,170,171,173,174,175,178,186,188,190,191,194,197,199,200,201,202,206,208,209,210,212,213,214,216,217,218,220,221,222,223,],[20,20,-3,-18,-18,-18,-18,-18,-18,-18,-18,-18,-18,-18,-18,-18,-25,-26,-27,-2,-4,-17,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-34,-36,-28,-60,-62,-64,-71,-74,-79,-81,-82,-83,-84,-85,-45,-87,-88,-63,-35,-44,-38,-40,-41,-42,-43,-39,-59,-61,-65,-66,-67,-68,-69,-70,-72,-73,-75,-76,-77,-78,-86,-89,20,20,20,-29,20,-56,-37,20,20,20,20,20,-49,-50,-53,-80,20,-20,-46,207,-19,20,20,20,20,20,20,-48,-51,-52,20,20,-49,-47,]),'WHILE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,24,25,26,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,44,45,54,55,56,58,59,60,61,63,64,65,66,67,74,75,76,87,106,107,108,109,110,111,112,113,121,122,123,124,125,126,127,128,129,130,131,132,133,134,143,144,154,155,158,162,170,171,173,174,175,178,186,188,190,191,194,197,199,200,201,206,208,209,210,212,213,214,216,217,218,220,221,222,223,],[21,21,-3,-18,-18,-18,-18,-18,-18,-18,-18,-18,-18,-18,-18,-18,-25,-26,-27,-2,-4,-17,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-34,-36,-28,-60,-62,-64,-71,-74,-79,-81,-82,-83,-84,-85,-45,-87,-88,-63,-35,-44,-38,-40,-41,-42,-43,-39,-59,-61,-65,-66,-67,-68,-69,-70,-72,-73,-75,-76,-77,-78,-86,-89,21,21,21,-29,21,-56,-37,21,21,21,21,21,-49,-50,-53,-80,21,-20,-46,-19,21,21,21,21,21,21,-48,-51,-52,21,21,-49,-47,]),'FOR':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,24,25,26,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,44,45,54,55,56,58,59,60,61,63,64,65,66,67,74,75,76,87,106,107,108,109,110,111,112,113,121,122,123,124,125,126,127,128,129,130,131,132,133,134,143,144,154,155,158,162,170,171,173,174,175,178,186,188,190,191,194,197,199,200,201,206,208,209,210,212,213,214,216,217,218,220,221,222,223,],[22,22,-3,-18,-18,-18,-18,-18,-18,-18,-18,-18,-18,-18,-18,-18,-25,-26,-27,-2,-4,-17,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-34,-36,-28,-60,-62,-64,-71,-74,-79,-81,-82,-83,-84,-85,-45,-87,-88,-63,-35,-44,-38,-40,-41,-42,-43,-39,-59,-61,-65,-66,-67,-68,-69,-70,-72,-73,-75,-76,-77,-78,-86,-89,22,22,22,-29,22,-56,-37,22,22,22,22,22,-49,-50,-53,-80,22,-20,-46,-19,22,22,22,22,22,22,-48,-51,-52,22,22,-49,-47,]),'INTERFACE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,24,25,26,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,44,45,54,55,56,58,59,60,61,63,64,65,66,67,74,75,76,87,106,107,108,109,110,111,112,113,121,122,123,124,125,126,127,128,129,130,131,132,133,134,143,144,154,155,158,162,170,171,173,174,175,178,186,188,190,191,194,197,199,200,201,206,208,209,210,212,213,214,216,217,218,220,221,222,223,],[23,23,-3,-18,-18,-18,-18,-18,-18,-18,-18,-18,-18,-18,-18,-18,-25,-26,-27,-2,-4,-17,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-34,-36,-28,-60,-62,-64,-71,-74,-79,-81,-82,-83,-84,-85,-45,-87,-88,-63,-35,-44,-38,-40,-41,-42,-43,-39,-59,-61,-65,-66,-67,-68,-69,-70,-72,-73,-75,-76,-77,-78,-86,-89,23,23,23,-29,23,-56,-37,23,23,23,23,23,-49,-50,-53,-80,23,-20,-46,-19,23,23,23,23,23,23,-48,-51,-52,23,23,-49,-47,]),'CONTINUE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,24,25,26,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,44,45,54,55,56,58,59,60,61,63,64,65,66,67,74,75,76,87,106,107,108,109,110,111,112,113,121,122,123,124,125,126,127,128,129,130,131,132,133,134,143,144,154,155,158,162,170,171,173,174,175,178,186,188,190,191,194,197,199,200,201,206,208,209,210,212,213,214,216,217,218,220,221,222,223,],[24,24,-3,-18,-18,-18,-18,-18,-18,-18,-18,-18,-18,-18,-18,-18,-25,-26,-27,-2,-4,-17,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-34,-36,-28,-60,-62,-64,-71,-74,-79,-81,-82,-83,-84,-85,-45,-87,-88,-63,-35,-44,-38,-40,-41,-42,-43,-39,-59,-61,-65,-66,-67,-68,-69,-70,-72,-73,-75,-76,-77,-78,-86,-89,24,24,24,-29,24,-56,-37,24,24,24,24,24,-49,-50,-53,-80,24,-20,-46,-19,24,24,24,24,24,24,-48,-51,-52,24,24,-49,-47,]),'BREAK':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,24,25,26,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,44,45,54,55,56,58,59,60,61,63,64,65,66,67,74,75,76,87,106,107,108,109,110,111,112,113,121,122,123,124,125,126,127,128,129,130,131,132,133,134,143,144,154,155,158,162,170,171,173,174,175,178,186,188,190,191,194,197,199,200,201,206,208,209,210,212,213,214,216,217,218,220,221,222,223,],[25,25,-3,-18,-18,-18,-18,-18,-18,-18,-18,-18,-18,-18,-18,-18,-25,-26,-27,-2,-4,-17,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-34,-36,-28,-60,-62,-64,-71,-74,-79,-81,-82,-83,-84,-85,-45,-87,-88,-63,-35,-44,-38,-40,-41,-42,-43,-39,-59,-61,-65,-66,-67,-68,-69,-70,-72,-73,-75,-76,-77,-78,-86,-89,25,25,25,-29,25,-56,-37,25,25,25,25,25,-49,-50,-53,-80,25,-20,-46,-19,25,25,25,25,25,25,-48,-51,-52,25,25,-49,-47,]),'RETURN':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,24,25,26,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,44,45,54,55,56,58,59,60,61,63,64,65,66,67,74,75,76,87,106,107,108,109,110,111,112,113,121,122,123,124,125,126,127,128,129,130,131,132,133,134,143,144,154,155,158,162,170,171,173,174,175,178,186,188,190,191,194,197,199,200,201,206,208,209,210,212,213,214,216,217,218,220,221,222,223,],[26,26,-3,-18,-18,-18,-18,-18,-18,-18,-18,-18,-18,-18,-18,-18,-25,-26,-27,-2,-4,-17,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-34,-36,-28,-60,-62,-64,-71,-74,-79,-81,-82,-83,-84,-85,-45,-87,-88,-63,-35,-44,-38,-40,-41,-42,-43,-39,-59,-61,-65,-66,-67,-68,-69,-70,-72,-73,-75,-76,-77,-78,-86,-89,26,26,26,-29,26,-56,-37,26,26,26,26,26,-49,-50,-53,-80,26,-20,-46,-19,26,26,26,26,26,26,-48,-51,-52,26,26,-49,-47,]),'FUNCTION':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,24,25,26,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,44,45,54,55,56,58,59,60,61,63,64,65,66,67,74,75,76,87,106,107,108,109,110,111,112,113,121,122,123,124,125,126,127,128,129,130,131,132,133,134,143,144,154,155,158,162,170,171,173,174,175,178,186,188,190,191,194,197,199,200,201,206,208,209,210,212,213,214,216,217,218,220,221,222,223,],[27,27,-3,-18,-18,-18,-18,-18,-18,-18,-18,-18,-18,-18,-18,-18,-25,-26,-27,-2,-4,-17,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-34,-36,-28,-60,-62,-64,-71,-74,-79,-81,-82,-83,-84,-85,-45,-87,-88,-63,-35,-44,-38,-40,-41,-42,-43,-39,-59,-61,-65,-66,-67,-68,-69,-70,-72,-73,-75,-76,-77,-78,-86,-89,27,27,27,-29,27,-56,-37,27,27,27,27,27,-49,-50,-53,-80,27,-20,-46,-19,27,27,27,27,27,27,-48,-51,-52,27,27,-49,-47,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,24,25,26,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,44,45,54,55,56,58,59,60,61,63,64,65,66,67,74,75,76,87,106,107,108,109,110,111,112,113,121,122,123,124,125,126,127,128,129,130,131,132,133,134,143,144,162,171,173,190,191,194,197,200,201,206,216,217,218,222,223,],[0,-1,-3,-18,-18,-18,-18,-18,-18,-18,-18,-18,-18,-18,-18,-18,-25,-26,-27,-2,-4,-17,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-34,-36,-28,-60,-62,-64,-71,-74,-79,-81,-82,-83,-84,-85,-45,-87,-88,-63,-35,-44,-38,-40,-41,-42,-43,-39,-59,-61,-65,-66,-67,-68,-69,-70,-72,-73,-75,-76,-77,-78,-86,-89,-29,-56,-37,-49,-50,-53,-80,-20,-46,-19,-48,-51,-52,-49,-47,]),'R_LLAVE':([3,4,5,6,7,8,9,10,11,12,13,14,15,16,24,25,26,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,44,45,54,55,56,58,59,60,61,63,64,65,66,67,74,75,76,84,87,102,106,107,108,109,110,111,112,113,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,143,144,161,162,163,166,171,173,174,175,178,182,188,190,191,194,196,197,198,199,200,201,206,212,213,214,216,217,218,221,222,223,],[-3,-18,-18,-18,-18,-18,-18,-18,-18,-18,-18,-18,-18,-18,-25,-26,-27,-2,-4,-17,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-34,-36,-28,-60,-62,-64,-71,-74,-79,-81,-82,-83,-84,-85,-45,-87,-88,-31,-63,144,-35,-44,-38,-40,-41,-42,-43,-39,162,-59,-61,-65,-66,-67,-68,-69,-70,-72,-73,-75,-76,-77,-78,-86,-89,-33,-29,-18,-91,-56,-37,190,191,194,-30,200,-49,-50,-53,-32,-80,-90,206,-20,-46,-19,216,217,218,-48,-51,-52,222,-49,-47,]),'SEMI_COLON':([4,5,6,7,8,9,10,11,12,13,14,15,16,24,25,26,44,45,54,55,56,58,59,60,61,63,64,65,66,67,74,75,76,79,80,87,106,107,108,109,110,111,112,113,121,122,123,124,125,126,127,128,129,130,131,132,133,134,143,144,156,157,161,162,163,171,173,180,190,191,194,196,197,200,201,206,216,217,218,222,223,],[30,30,30,30,30,30,30,30,30,30,30,30,30,-25,-26,-27,-34,-36,-28,-60,-62,-64,-71,-74,-79,-81,-82,-83,-84,-85,-45,-87,-88,116,117,-63,-35,-44,-38,-40,-41,-42,-43,-39,-59,-61,-65,-66,-67,-68,-69,-70,-72,-73,-75,-76,-77,-78,-86,-89,176,177,-33,-29,30,-56,-37,-38,-49,-50,-53,-32,-80,-20,-46,-19,-48,-51,-52,-49,-47,]),'PUNTO':([17,61,63,64,65,66,67,143,144,],[43,100,-81,-82,-83,-84,-85,-86,-89,]),'IGUAL':([19,46,83,107,108,109,110,111,112,119,180,],[47,73,47,-44,153,-40,-41,-42,-43,73,153,]),'MAS':([19,48,59,60,61,63,64,65,66,67,123,124,125,126,127,128,129,130,131,132,133,134,143,144,197,],[48,75,94,-74,-79,-81,-82,-83,-84,-85,94,94,94,94,94,94,-72,-73,-75,-76,-77,-78,-86,-89,-80,]),'MENOS':([19,49,59,60,61,63,64,65,66,67,123,124,125,126,127,128,129,130,131,132,133,134,143,144,197,],[49,76,95,-74,-79,-81,-82,-83,-84,-85,95,95,95,95,95,95,-72,-73,-75,-76,-77,-78,-86,-89,-80,]),'L_PAREN':([20,21,22,26,47,50,51,57,62,69,70,73,85,86,88,89,90,91,92,93,94,95,96,97,98,99,105,116,117,135,136,137,138,139,140,141,142,146,153,159,164,172,184,195,207,211,],[50,51,52,62,62,62,62,62,62,104,105,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,164,-92,-93,-94,-95,-96,-97,-98,62,62,62,62,62,62,62,211,62,]),'NOT':([26,47,50,51,62,73,85,86,105,116,117,146,153,159,164,172,184,195,211,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'ENTERO':([26,47,50,51,57,62,73,85,86,88,89,90,91,92,93,94,95,96,97,98,99,105,116,117,146,153,159,164,172,184,195,211,],[63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,]),'DECIMAL':([26,47,50,51,57,62,73,85,86,88,89,90,91,92,93,94,95,96,97,98,99,105,116,117,146,153,159,164,172,184,195,211,],[64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,]),'CADENA':([26,47,50,51,57,62,73,85,86,88,89,90,91,92,93,94,95,96,97,98,99,105,116,117,146,153,159,164,172,184,195,211,],[65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,]),'L_LLAVE':([26,47,50,51,53,57,62,73,85,86,88,89,90,91,92,93,94,95,96,97,98,99,105,114,115,116,117,118,146,149,153,159,164,168,172,184,195,202,203,204,211,219,],[68,68,68,68,84,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,154,155,68,68,158,68,170,68,68,68,186,68,68,68,208,209,210,68,220,]),'LOG':([43,],[70,]),'COMA':([44,45,55,56,58,59,60,61,63,64,65,66,67,87,102,106,107,108,109,110,111,112,113,121,122,123,124,125,126,127,128,129,130,131,132,133,134,143,144,147,148,150,151,152,166,173,180,183,185,187,189,197,198,],[71,-36,-60,-62,-64,-71,-74,-79,-81,-82,-83,-84,-85,-63,145,-35,-44,-38,-40,-41,-42,-43,-39,-59,-61,-65,-66,-67,-68,-69,-70,-72,-73,-75,-76,-77,-78,-86,-89,-24,169,-22,172,-58,-91,-37,-38,172,-23,-21,-57,-80,-90,]),'COLON':([46,103,119,147,161,165,],[72,146,160,167,181,184,]),'OR':([54,55,56,58,59,60,61,63,64,65,66,67,74,77,78,87,101,113,121,122,123,124,125,126,127,128,129,130,131,132,133,134,143,144,152,156,157,166,173,179,189,197,198,205,215,],[85,-60,-62,-64,-71,-74,-79,-81,-82,-83,-84,-85,85,85,85,-63,85,85,-59,-61,-65,-66,-67,-68,-69,-70,-72,-73,-75,-76,-77,-78,-86,-89,85,85,85,85,85,85,85,-80,85,85,85,]),'R_PAREN':([55,56,58,59,60,61,63,64,65,66,67,74,77,78,81,87,101,104,107,109,110,111,112,121,122,123,124,125,126,127,128,129,130,131,132,133,134,143,144,147,148,150,151,152,179,183,185,187,189,192,193,197,205,215,],[-60,-62,-64,-71,-74,-79,-81,-82,-83,-84,-85,-45,114,115,118,-63,143,149,-44,-40,-41,-42,-43,-59,-61,-65,-66,-67,-68,-69,-70,-72,-73,-75,-76,-77,-78,-86,-89,-24,168,-22,171,-58,-54,197,-23,-21,-57,203,204,-80,-55,219,]),'AND':([55,56,58,59,60,61,63,64,65,66,67,87,121,122,123,124,125,126,127,128,129,130,131,132,133,134,143,144,197,],[86,-62,-64,-71,-74,-79,-81,-82,-83,-84,-85,-63,86,-61,-65,-66,-67,-68,-69,-70,-72,-73,-75,-76,-77,-78,-86,-89,-80,]),'DISTINTO_QUE':([58,59,60,61,63,64,65,66,67,87,123,124,125,126,127,128,129,130,131,132,133,134,143,144,197,],[88,-71,-74,-79,-81,-82,-83,-84,-85,88,-65,-66,-67,-68,-69,-70,-72,-73,-75,-76,-77,-78,-86,-89,-80,]),'MENOR_QUE':([58,59,60,61,63,64,65,66,67,87,123,124,125,126,127,128,129,130,131,132,133,134,143,144,197,],[89,-71,-74,-79,-81,-82,-83,-84,-85,89,-65,-66,-67,-68,-69,-70,-72,-73,-75,-76,-77,-78,-86,-89,-80,]),'MENOR_IGUAL_QUE':([58,59,60,61,63,64,65,66,67,87,123,124,125,126,127,128,129,130,131,132,133,134,143,144,197,],[90,-71,-74,-79,-81,-82,-83,-84,-85,90,-65,-66,-67,-68,-69,-70,-72,-73,-75,-76,-77,-78,-86,-89,-80,]),'MAYOR_QUE':([58,59,60,61,63,64,65,66,67,87,123,124,125,126,127,128,129,130,131,132,133,134,143,144,197,],[91,-71,-74,-79,-81,-82,-83,-84,-85,91,-65,-66,-67,-68,-69,-70,-72,-73,-75,-76,-77,-78,-86,-89,-80,]),'MAYOR_IGUAL_QUE':([58,59,60,61,63,64,65,66,67,87,123,124,125,126,127,128,129,130,131,132,133,134,143,144,197,],[92,-71,-74,-79,-81,-82,-83,-84,-85,92,-65,-66,-67,-68,-69,-70,-72,-73,-75,-76,-77,-78,-86,-89,-80,]),'TRIPLE_IGUAL':([58,59,60,61,63,64,65,66,67,87,123,124,125,126,127,128,129,130,131,132,133,134,143,144,197,],[93,-71,-74,-79,-81,-82,-83,-84,-85,93,-65,-66,-67,-68,-69,-70,-72,-73,-75,-76,-77,-78,-86,-89,-80,]),'TIMES':([60,61,63,64,65,66,67,129,130,131,132,133,134,143,144,197,],[96,-79,-81,-82,-83,-84,-85,96,96,-75,-76,-77,-78,-86,-89,-80,]),'DIVIDE':([60,61,63,64,65,66,67,129,130,131,132,133,134,143,144,197,],[97,-79,-81,-82,-83,-84,-85,97,97,-75,-76,-77,-78,-86,-89,-80,]),'MOD':([60,61,63,64,65,66,67,129,130,131,132,133,134,143,144,197,],[98,-79,-81,-82,-83,-84,-85,98,98,-75,-76,-77,-78,-86,-89,-80,]),'POTENCIA':([60,61,63,64,65,66,67,129,130,131,132,133,134,143,144,197,],[99,-79,-81,-82,-83,-84,-85,99,99,-75,-76,-77,-78,-86,-89,-80,]),'NUMBER':([72,160,167,181,],[109,109,109,109,]),'STRING':([72,160,167,181,],[110,110,110,110,]),'BOOLEAN':([72,160,167,181,],[111,111,111,111,]),'ANY':([72,160,167,181,],[112,112,112,112,]),'TOSTRING':([100,],[136,]),'TOFIXED':([100,],[137,]),'TOEXPONENTIAL':([100,],[138,]),'TOLOWERCASE':([100,],[139,]),'TOUPPERCASE':([100,],[140,]),'SPLIT':([100,],[141,]),'CONCAT':([100,],[142,]),'OF':([107,109,110,111,112,119,180,],[-44,-40,-41,-42,-43,159,195,]),'ELSE':([190,222,],[202,202,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'init':([0,],[1,]),'instrucciones':([0,154,155,158,170,186,208,209,210,220,],[2,174,175,178,188,199,212,213,214,221,]),'instruccion':([0,2,154,155,158,170,174,175,178,186,188,199,208,209,210,212,213,214,220,221,],[3,28,3,3,3,3,28,28,28,3,28,28,3,3,3,28,28,28,3,28,]),'console_pro':([0,2,154,155,158,170,174,175,178,186,188,199,208,209,210,212,213,214,220,221,],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'declaration_instruction':([0,2,52,154,155,158,170,174,175,178,186,188,199,208,209,210,212,213,214,220,221,],[5,5,79,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'assig_pro':([0,2,52,154,155,158,170,174,175,176,177,178,186,188,199,208,209,210,212,213,214,220,221,],[6,6,80,6,6,6,6,6,6,192,193,6,6,6,6,6,6,6,6,6,6,6,6,]),'if_pro':([0,2,154,155,158,170,174,175,178,186,188,199,208,209,210,212,213,214,220,221,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'while_pro':([0,2,154,155,158,170,174,175,178,186,188,199,208,209,210,212,213,214,220,221,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'for_pro':([0,2,154,155,158,170,174,175,178,186,188,199,208,209,210,212,213,214,220,221,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'for_each_pro':([0,2,154,155,158,170,174,175,178,186,188,199,208,209,210,212,213,214,220,221,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'interface_pro':([0,2,154,155,158,170,174,175,178,186,188,199,208,209,210,212,213,214,220,221,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'continue_pro':([0,2,154,155,158,170,174,175,178,186,188,199,208,209,210,212,213,214,220,221,],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'break_pro':([0,2,154,155,158,170,174,175,178,186,188,199,208,209,210,212,213,214,220,221,],[13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'return_pro':([0,2,154,155,158,170,174,175,178,186,188,199,208,209,210,212,213,214,220,221,],[14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'function_pro':([0,2,154,155,158,170,174,175,178,186,188,199,208,209,210,212,213,214,220,221,],[15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'sumadores':([0,2,154,155,158,170,174,175,178,186,188,199,208,209,210,212,213,214,220,221,],[16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'sc':([4,5,6,7,8,9,10,11,12,13,14,15,16,163,],[29,31,32,33,34,35,36,37,38,39,40,41,42,182,]),'declaracion_list':([18,82,],[44,44,]),'assignacion_instruction':([18,71,82,],[45,106,45,]),'a':([26,47,50,51,62,73,105,116,117,146,153,159,164,172,184,195,211,],[54,74,77,78,101,113,152,156,157,166,173,179,152,189,198,205,215,]),'b':([26,47,50,51,62,73,85,105,116,117,146,153,159,164,172,184,195,211,],[55,55,55,55,55,55,121,55,55,55,55,55,55,55,55,55,55,55,]),'c':([26,47,50,51,62,73,85,86,105,116,117,146,153,159,164,172,184,195,211,],[56,56,56,56,56,56,56,122,56,56,56,56,56,56,56,56,56,56,56,]),'d':([26,47,50,51,57,62,73,85,86,105,116,117,146,153,159,164,172,184,195,211,],[58,58,58,58,87,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'e':([26,47,50,51,57,62,73,85,86,88,89,90,91,92,93,105,116,117,146,153,159,164,172,184,195,211,],[59,59,59,59,59,59,59,59,59,123,124,125,126,127,128,59,59,59,59,59,59,59,59,59,59,59,]),'f':([26,47,50,51,57,62,73,85,86,88,89,90,91,92,93,94,95,105,116,117,146,153,159,164,172,184,195,211,],[60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,129,130,60,60,60,60,60,60,60,60,60,60,60,]),'g':([26,47,50,51,57,62,73,85,86,88,89,90,91,92,93,94,95,96,97,98,99,105,116,117,146,153,159,164,172,184,195,211,],[61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,131,132,133,134,61,61,61,61,61,61,61,61,61,61,61,]),'interface_assi':([26,47,50,51,57,62,73,85,86,88,89,90,91,92,93,94,95,96,97,98,99,105,116,117,146,153,159,164,172,184,195,211,],[67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,]),'for_each_dec':([52,],[81,]),'atributos_assi':([68,],[102,]),'type':([72,160,167,181,],[108,180,185,196,]),'interface_atributos':([84,],[120,]),'nativeFun':([100,],[135,]),'parameters_pro':([104,],[148,]),'parameter_pro':([104,169,],[150,187,]),'expresion':([105,164,],[151,183,]),'interface_atributo':([120,],[163,]),'else_pro':([190,222,],[201,223,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> init","S'",1,None,None,None),
  ('init -> instrucciones','init',1,'p_init','grammar.py',279),
  ('instrucciones -> instrucciones instruccion','instrucciones',2,'p_instrucciones_lista','grammar.py',283),
  ('instrucciones -> instruccion','instrucciones',1,'p_instrucciones_instruccion','grammar.py',290),
  ('instruccion -> console_pro sc','instruccion',2,'p_instruccion','grammar.py',297),
  ('instruccion -> declaration_instruction sc','instruccion',2,'p_instruccion','grammar.py',298),
  ('instruccion -> assig_pro sc','instruccion',2,'p_instruccion','grammar.py',299),
  ('instruccion -> if_pro sc','instruccion',2,'p_instruccion','grammar.py',300),
  ('instruccion -> while_pro sc','instruccion',2,'p_instruccion','grammar.py',301),
  ('instruccion -> for_pro sc','instruccion',2,'p_instruccion','grammar.py',302),
  ('instruccion -> for_each_pro sc','instruccion',2,'p_instruccion','grammar.py',303),
  ('instruccion -> interface_pro sc','instruccion',2,'p_instruccion','grammar.py',304),
  ('instruccion -> continue_pro sc','instruccion',2,'p_instruccion','grammar.py',305),
  ('instruccion -> break_pro sc','instruccion',2,'p_instruccion','grammar.py',306),
  ('instruccion -> return_pro sc','instruccion',2,'p_instruccion','grammar.py',307),
  ('instruccion -> function_pro sc','instruccion',2,'p_instruccion','grammar.py',308),
  ('instruccion -> sumadores sc','instruccion',2,'p_instruccion','grammar.py',309),
  ('sc -> SEMI_COLON','sc',1,'p_semi_colon','grammar.py',313),
  ('sc -> <empty>','sc',0,'p_semi_colon','grammar.py',314),
  ('function_pro -> FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE','function_pro',8,'p_instruccion_function','grammar.py',319),
  ('function_pro -> FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE','function_pro',7,'p_instruccion_function2','grammar.py',322),
  ('parameters_pro -> parameters_pro COMA parameter_pro','parameters_pro',3,'p_instruccion_parameters','grammar.py',327),
  ('parameters_pro -> parameter_pro','parameters_pro',1,'p_instruccion_parameters2','grammar.py',330),
  ('parameter_pro -> LITERAL COLON type','parameter_pro',3,'p_instruccion_parameter','grammar.py',334),
  ('parameter_pro -> LITERAL','parameter_pro',1,'p_instruccion_parameter2','grammar.py',337),
  ('continue_pro -> CONTINUE','continue_pro',1,'p_instruccion_continue','grammar.py',344),
  ('break_pro -> BREAK','break_pro',1,'p_instruccion_break','grammar.py',347),
  ('return_pro -> RETURN','return_pro',1,'p_instruccion_return','grammar.py',350),
  ('return_pro -> RETURN a','return_pro',2,'p_instruccion_return2','grammar.py',353),
  ('interface_pro -> INTERFACE LITERAL L_LLAVE interface_atributos R_LLAVE','interface_pro',5,'p_instruccion_declarationInterface','grammar.py',358),
  ('interface_atributos -> interface_atributos interface_atributo sc','interface_atributos',3,'p_instruccion_interfaceAtributos','grammar.py',362),
  ('interface_atributos -> <empty>','interface_atributos',0,'p_instruccion_interfaceAtributos2','grammar.py',365),
  ('interface_atributo -> LITERAL COLON type','interface_atributo',3,'p_intruccion_interfaceAtributo','grammar.py',368),
  ('interface_atributo -> LITERAL','interface_atributo',1,'p_instruccion_interfaceAtributo2','grammar.py',371),
  ('declaration_instruction -> LET declaracion_list','declaration_instruction',2,'p_instruccion_declarationInstruction','grammar.py',375),
  ('declaracion_list -> declaracion_list COMA assignacion_instruction','declaracion_list',3,'p_instruccion_declaracion_list','grammar.py',379),
  ('declaracion_list -> assignacion_instruction','declaracion_list',1,'p_instruccion_declaracion_list2','grammar.py',383),
  ('assignacion_instruction -> LITERAL COLON type IGUAL a','assignacion_instruction',5,'p_instruccion_assignacion_instruction','grammar.py',388),
  ('assignacion_instruction -> LITERAL COLON type','assignacion_instruction',3,'p_instruccion_assingnacion_instruction2','grammar.py',392),
  ('assignacion_instruction -> LITERAL IGUAL a','assignacion_instruction',3,'p_instruccion_assignacion_instruction3','grammar.py',396),
  ('type -> NUMBER','type',1,'p_instruccion_type','grammar.py',399),
  ('type -> STRING','type',1,'p_instruccion_type','grammar.py',400),
  ('type -> BOOLEAN','type',1,'p_instruccion_type','grammar.py',401),
  ('type -> ANY','type',1,'p_instruccion_type','grammar.py',402),
  ('type -> LITERAL','type',1,'p_instruccion_type','grammar.py',403),
  ('assig_pro -> LITERAL IGUAL a','assig_pro',3,'p_instruccion_assig_pro','grammar.py',407),
  ('if_pro -> IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro','if_pro',8,'p_instruccion_if_pro','grammar.py',411),
  ('else_pro -> ELSE IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro','else_pro',9,'p_instruccion_else_pro','grammar.py',417),
  ('else_pro -> ELSE L_LLAVE instrucciones R_LLAVE','else_pro',4,'p_instruccion_else_pro2','grammar.py',421),
  ('else_pro -> <empty>','else_pro',0,'p_instruccion_else_pro3','grammar.py',425),
  ('while_pro -> WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE','while_pro',7,'p_instruccion_while_pro','grammar.py',430),
  ('for_pro -> FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE','for_pro',11,'p_instruccion_for_pro','grammar.py',435),
  ('for_pro -> FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE','for_pro',11,'p_instruccion_for_pro','grammar.py',436),
  ('for_each_pro -> FOR L_PAREN for_each_dec R_PAREN L_LLAVE instrucciones R_LLAVE','for_each_pro',7,'p_instruccion_for_each_pro','grammar.py',443),
  ('for_each_dec -> LET LITERAL OF a','for_each_dec',4,'p_instruccion_fore_dec','grammar.py',446),
  ('for_each_dec -> LET LITERAL COLON type OF a','for_each_dec',6,'p_instruccion_fore_dec_type','grammar.py',449),
  ('console_pro -> CONSOLE PUNTO LOG L_PAREN expresion R_PAREN','console_pro',6,'p_instruccion_console','grammar.py',454),
  ('expresion -> expresion COMA a','expresion',3,'p_instruccion_expresion','grammar.py',459),
  ('expresion -> a','expresion',1,'p_instruccion_expresion2','grammar.py',462),
  ('a -> a OR b','a',3,'p_instruccion_expresion3','grammar.py',467),
  ('a -> b','a',1,'p_instruccion_expresion4','grammar.py',470),
  ('b -> b AND c','b',3,'p_instruccion_expresion5','grammar.py',474),
  ('b -> c','b',1,'p_instruccion_expresion6','grammar.py',478),
  ('c -> NOT d','c',2,'p_instruccion_expresion7','grammar.py',482),
  ('c -> d','c',1,'p_instruccion_expresion8','grammar.py',486),
  ('d -> d DISTINTO_QUE e','d',3,'p_instruccion_expresion9','grammar.py',490),
  ('d -> d MENOR_QUE e','d',3,'p_instruccion_expresion9','grammar.py',491),
  ('d -> d MENOR_IGUAL_QUE e','d',3,'p_instruccion_expresion9','grammar.py',492),
  ('d -> d MAYOR_QUE e','d',3,'p_instruccion_expresion9','grammar.py',493),
  ('d -> d MAYOR_IGUAL_QUE e','d',3,'p_instruccion_expresion9','grammar.py',494),
  ('d -> d TRIPLE_IGUAL e','d',3,'p_instruccion_expresion9','grammar.py',495),
  ('d -> e','d',1,'p_instruccion_expresion10','grammar.py',499),
  ('e -> e MAS f','e',3,'p_instruccion_expresion11','grammar.py',503),
  ('e -> e MENOS f','e',3,'p_instruccion_expresion11','grammar.py',504),
  ('e -> f','e',1,'p_instruccion_expresion12','grammar.py',508),
  ('f -> f TIMES g','f',3,'p_instruccion_expresion13','grammar.py',512),
  ('f -> f DIVIDE g','f',3,'p_instruccion_expresion13','grammar.py',513),
  ('f -> f MOD g','f',3,'p_instruccion_expresion13','grammar.py',514),
  ('f -> f POTENCIA g','f',3,'p_instruccion_expresion13','grammar.py',515),
  ('f -> g','f',1,'p_instruccion_expresion14','grammar.py',519),
  ('f -> g PUNTO nativeFun L_PAREN expresion R_PAREN','f',6,'p_instruccion_expresion15','grammar.py',523),
  ('g -> ENTERO','g',1,'p_instruccion_expresion16','grammar.py',526),
  ('g -> DECIMAL','g',1,'p_instruccion_expresion16','grammar.py',527),
  ('g -> CADENA','g',1,'p_instruccion_expresion16','grammar.py',528),
  ('g -> LITERAL','g',1,'p_instruccion_expresion16','grammar.py',529),
  ('g -> interface_assi','g',1,'p_instruccion_expresion16','grammar.py',530),
  ('g -> L_PAREN a R_PAREN','g',3,'p_instruccion_expresion17','grammar.py',534),
  ('sumadores -> LITERAL MAS MAS','sumadores',3,'p_instruccion_sumadores','grammar.py',539),
  ('sumadores -> LITERAL MENOS MENOS','sumadores',3,'p_instruccion_sumadores','grammar.py',540),
  ('interface_assi -> L_LLAVE atributos_assi R_LLAVE','interface_assi',3,'p_instruccion_interfaceAssi','grammar.py',547),
  ('atributos_assi -> atributos_assi COMA LITERAL COLON a','atributos_assi',5,'p_instruccion_inter_atributesAssi','grammar.py',551),
  ('atributos_assi -> LITERAL COLON a','atributos_assi',3,'p_instruccion_inter_atributesAssi2','grammar.py',554),
  ('nativeFun -> TOSTRING','nativeFun',1,'p_instruccion_nativas','grammar.py',560),
  ('nativeFun -> TOFIXED','nativeFun',1,'p_instruccion_nativas','grammar.py',561),
  ('nativeFun -> TOEXPONENTIAL','nativeFun',1,'p_instruccion_nativas','grammar.py',562),
  ('nativeFun -> TOLOWERCASE','nativeFun',1,'p_instruccion_nativas','grammar.py',563),
  ('nativeFun -> TOUPPERCASE','nativeFun',1,'p_instruccion_nativas','grammar.py',564),
  ('nativeFun -> SPLIT','nativeFun',1,'p_instruccion_nativas','grammar.py',565),
  ('nativeFun -> CONCAT','nativeFun',1,'p_instruccion_nativas','grammar.py',566),
]
