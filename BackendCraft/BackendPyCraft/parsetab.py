
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ANY BOOLEAN BREAK CADENA COLON COMA CONCAT CONSOLE CONTINUE DECIMAL DISTINTO_QUE DIVIDE ELSE ENTERO FOR FUNCTION IF IGUAL INTERFACE LET LITERAL LOG L_CORCHETE L_LLAVE L_PAREN MAS MAYOR_IGUAL_QUE MAYOR_QUE MENOR_IGUAL_QUE MENOR_QUE MENOS MOD NOT NULL NUMBER OF OR POTENCIA PUNTO RETURN R_CORCHETE R_LLAVE R_PAREN SEMI_COLON SPLIT STRING TIMES TOEXPONENTIAL TOFIXED TOLOWERCASE TOSTRING TOUPPERCASE TRIPLE_IGUAL WHILEinit            : instruccionesinstrucciones    : instrucciones instruccioninstrucciones    : instruccioninstruccion      : console_pro sc\n                        | declaration_instruction sc\n                        | assig_pro sc\n                        | if_pro sc\n                        | while_pro sc\n                        | for_pro sc\n                        | for_each_pro sc\n                        | interface_pro sc\n                        | sumadores scsc   : SEMI_COLON\n            |interface_pro    : INTERFACE LITERAL L_LLAVE interface_atributos R_LLAVEinterface_atributos  : interface_atributos interface_atributo scinterface_atributos  : interface_atributo   : LITERAL COLON typeinterface_atributo   : LITERALdeclaration_instruction      : LET declaracion_listdeclaracion_list      : declaracion_list COMA assignacion_instructiondeclaracion_list      : assignacion_instructionassignacion_instruction      : LITERAL COLON type IGUAL aassignacion_instruction      : LITERAL COLON typeassignacion_instruction      : LITERAL IGUAL atype      : NUMBER\n                 | STRING\n                 | BOOLEAN\n                 | ANY\n                 | LITERALassig_pro      : LITERAL IGUAL aif_pro      : IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_proelse_pro      : ELSE IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_proelse_pro      : ELSE L_LLAVE instrucciones R_LLAVEelse_pro      : while_pro      : WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVEfor_pro      : FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE\n                    | FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVEfor_each_pro : FOR L_PAREN for_each_dec R_PAREN L_LLAVE instrucciones R_LLAVEfor_each_dec : LET LITERAL OF afor_each_dec : LET LITERAL COLON type OF aconsole_pro      : CONSOLE PUNTO LOG L_PAREN expresion R_PARENexpresion      : expresion COMA aexpresion      : aa      : a OR ba      : b b      : b AND c b      : c c      : NOT d c      : d  d     : d DISTINTO_QUE e\n                | d MENOR_QUE e\n                | d MENOR_IGUAL_QUE e\n                | d MAYOR_QUE e\n                | d MAYOR_IGUAL_QUE e\n                | d TRIPLE_IGUAL e  d     : e  e     : e MAS f\n                | e MENOS f  e     : f  f     : f TIMES g\n                | f DIVIDE g\n                | f MOD g\n                | f POTENCIA g f     : g f    : g PUNTO nativeFun L_PAREN expresion R_PAREN g     : ENTERO\n              | DECIMAL\n              | CADENA\n              | LITERAL\n              | interface_assi g     : L_PAREN a R_PAREN sumadores     : LITERAL MAS MAS\n                          | LITERAL MENOS MENOS interface_assi   : L_LLAVE atributos_assi R_LLAVEatributos_assi   : atributos_assi COMA LITERAL COLON aatributos_assi   : LITERAL COLON anativeFun    : TOSTRING\n                    | TOFIXED\n                    | TOEXPONENTIAL\n                    | TOLOWERCASE\n                    | TOUPPERCASE\n                    | SPLIT\n                    | CONCAT'
    
_lr_action_items = {'CONSOLE':([0,2,3,4,5,6,7,8,9,10,11,12,20,21,22,23,24,25,26,27,28,29,30,32,33,46,47,48,49,51,52,53,54,56,57,58,59,61,62,72,73,74,75,76,77,78,79,82,109,110,111,112,113,114,115,116,117,118,119,120,121,122,131,132,135,136,139,143,145,147,151,152,155,163,164,167,170,172,178,179,180,182,183,184,186,187,188,190,191,192,193,],[13,13,-3,-14,-14,-14,-14,-14,-14,-14,-14,-14,-2,-4,-13,-5,-6,-7,-8,-9,-10,-11,-12,-20,-22,-70,-31,-46,-48,-50,-57,-60,-65,-67,-68,-69,-71,-73,-74,-21,-30,-24,-26,-27,-28,-29,-25,-49,-45,-47,-51,-52,-53,-54,-55,-56,-58,-59,-61,-62,-63,-64,-72,-75,13,13,13,-15,-42,-23,13,13,13,-35,-36,-39,-66,-32,13,13,13,13,13,13,-34,-37,-38,13,13,-35,-33,]),'LET':([0,2,3,4,5,6,7,8,9,10,11,12,20,21,22,23,24,25,26,27,28,29,30,32,33,40,46,47,48,49,51,52,53,54,56,57,58,59,61,62,72,73,74,75,76,77,78,79,82,109,110,111,112,113,114,115,116,117,118,119,120,121,122,131,132,135,136,139,143,145,147,151,152,155,163,164,167,170,172,178,179,180,182,183,184,186,187,188,190,191,192,193,],[14,14,-3,-14,-14,-14,-14,-14,-14,-14,-14,-14,-2,-4,-13,-5,-6,-7,-8,-9,-10,-11,-12,-20,-22,68,-70,-31,-46,-48,-50,-57,-60,-65,-67,-68,-69,-71,-73,-74,-21,-30,-24,-26,-27,-28,-29,-25,-49,-45,-47,-51,-52,-53,-54,-55,-56,-58,-59,-61,-62,-63,-64,-72,-75,14,14,14,-15,-42,-23,14,14,14,-35,-36,-39,-66,-32,14,14,14,14,14,14,-34,-37,-38,14,14,-35,-33,]),'LITERAL':([0,2,3,4,5,6,7,8,9,10,11,12,14,19,20,21,22,23,24,25,26,27,28,29,30,32,33,35,38,39,40,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,68,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,101,102,105,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,131,132,133,134,135,136,139,140,141,142,143,144,145,146,147,148,151,152,153,154,155,158,159,162,163,164,167,168,169,170,172,178,179,180,181,182,183,184,186,187,188,190,191,192,193,],[15,15,-3,-14,-14,-14,-14,-14,-14,-14,-14,-14,34,41,-2,-4,-13,-5,-6,-7,-8,-9,-10,-11,-12,-20,-22,46,46,46,69,34,73,46,-70,-31,-46,-48,46,-50,-57,-60,-65,46,-67,-68,-69,-71,98,-73,-74,104,-17,46,-21,-30,-24,-26,-27,-28,-29,-25,46,46,-49,46,46,46,46,46,46,46,46,46,46,46,46,46,46,142,46,-45,-47,-51,-52,-53,-54,-55,-56,-58,-59,-61,-62,-63,-64,-72,-75,149,46,15,15,15,46,73,-19,-15,-14,-42,46,-23,46,15,15,69,69,15,73,-16,46,-35,-36,-39,46,-18,-66,-32,15,15,15,46,15,15,15,-34,-37,-38,15,15,-35,-33,]),'IF':([0,2,3,4,5,6,7,8,9,10,11,12,20,21,22,23,24,25,26,27,28,29,30,32,33,46,47,48,49,51,52,53,54,56,57,58,59,61,62,72,73,74,75,76,77,78,79,82,109,110,111,112,113,114,115,116,117,118,119,120,121,122,131,132,135,136,139,143,145,147,151,152,155,163,164,167,170,172,173,178,179,180,182,183,184,186,187,188,190,191,192,193,],[16,16,-3,-14,-14,-14,-14,-14,-14,-14,-14,-14,-2,-4,-13,-5,-6,-7,-8,-9,-10,-11,-12,-20,-22,-70,-31,-46,-48,-50,-57,-60,-65,-67,-68,-69,-71,-73,-74,-21,-30,-24,-26,-27,-28,-29,-25,-49,-45,-47,-51,-52,-53,-54,-55,-56,-58,-59,-61,-62,-63,-64,-72,-75,16,16,16,-15,-42,-23,16,16,16,-35,-36,-39,-66,-32,177,16,16,16,16,16,16,-34,-37,-38,16,16,-35,-33,]),'WHILE':([0,2,3,4,5,6,7,8,9,10,11,12,20,21,22,23,24,25,26,27,28,29,30,32,33,46,47,48,49,51,52,53,54,56,57,58,59,61,62,72,73,74,75,76,77,78,79,82,109,110,111,112,113,114,115,116,117,118,119,120,121,122,131,132,135,136,139,143,145,147,151,152,155,163,164,167,170,172,178,179,180,182,183,184,186,187,188,190,191,192,193,],[17,17,-3,-14,-14,-14,-14,-14,-14,-14,-14,-14,-2,-4,-13,-5,-6,-7,-8,-9,-10,-11,-12,-20,-22,-70,-31,-46,-48,-50,-57,-60,-65,-67,-68,-69,-71,-73,-74,-21,-30,-24,-26,-27,-28,-29,-25,-49,-45,-47,-51,-52,-53,-54,-55,-56,-58,-59,-61,-62,-63,-64,-72,-75,17,17,17,-15,-42,-23,17,17,17,-35,-36,-39,-66,-32,17,17,17,17,17,17,-34,-37,-38,17,17,-35,-33,]),'FOR':([0,2,3,4,5,6,7,8,9,10,11,12,20,21,22,23,24,25,26,27,28,29,30,32,33,46,47,48,49,51,52,53,54,56,57,58,59,61,62,72,73,74,75,76,77,78,79,82,109,110,111,112,113,114,115,116,117,118,119,120,121,122,131,132,135,136,139,143,145,147,151,152,155,163,164,167,170,172,178,179,180,182,183,184,186,187,188,190,191,192,193,],[18,18,-3,-14,-14,-14,-14,-14,-14,-14,-14,-14,-2,-4,-13,-5,-6,-7,-8,-9,-10,-11,-12,-20,-22,-70,-31,-46,-48,-50,-57,-60,-65,-67,-68,-69,-71,-73,-74,-21,-30,-24,-26,-27,-28,-29,-25,-49,-45,-47,-51,-52,-53,-54,-55,-56,-58,-59,-61,-62,-63,-64,-72,-75,18,18,18,-15,-42,-23,18,18,18,-35,-36,-39,-66,-32,18,18,18,18,18,18,-34,-37,-38,18,18,-35,-33,]),'INTERFACE':([0,2,3,4,5,6,7,8,9,10,11,12,20,21,22,23,24,25,26,27,28,29,30,32,33,46,47,48,49,51,52,53,54,56,57,58,59,61,62,72,73,74,75,76,77,78,79,82,109,110,111,112,113,114,115,116,117,118,119,120,121,122,131,132,135,136,139,143,145,147,151,152,155,163,164,167,170,172,178,179,180,182,183,184,186,187,188,190,191,192,193,],[19,19,-3,-14,-14,-14,-14,-14,-14,-14,-14,-14,-2,-4,-13,-5,-6,-7,-8,-9,-10,-11,-12,-20,-22,-70,-31,-46,-48,-50,-57,-60,-65,-67,-68,-69,-71,-73,-74,-21,-30,-24,-26,-27,-28,-29,-25,-49,-45,-47,-51,-52,-53,-54,-55,-56,-58,-59,-61,-62,-63,-64,-72,-75,19,19,19,-15,-42,-23,19,19,19,-35,-36,-39,-66,-32,19,19,19,19,19,19,-34,-37,-38,19,19,-35,-33,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,12,20,21,22,23,24,25,26,27,28,29,30,32,33,46,47,48,49,51,52,53,54,56,57,58,59,61,62,72,73,74,75,76,77,78,79,82,109,110,111,112,113,114,115,116,117,118,119,120,121,122,131,132,143,145,147,163,164,167,170,172,186,187,188,192,193,],[0,-1,-3,-14,-14,-14,-14,-14,-14,-14,-14,-14,-2,-4,-13,-5,-6,-7,-8,-9,-10,-11,-12,-20,-22,-70,-31,-46,-48,-50,-57,-60,-65,-67,-68,-69,-71,-73,-74,-21,-30,-24,-26,-27,-28,-29,-25,-49,-45,-47,-51,-52,-53,-54,-55,-56,-58,-59,-61,-62,-63,-64,-72,-75,-15,-42,-23,-35,-36,-39,-66,-32,-34,-37,-38,-35,-33,]),'R_LLAVE':([3,4,5,6,7,8,9,10,11,12,20,21,22,23,24,25,26,27,28,29,30,32,33,46,47,48,49,51,52,53,54,56,57,58,59,61,62,70,72,73,74,75,76,77,78,79,82,97,105,109,110,111,112,113,114,115,116,117,118,119,120,121,122,131,132,142,143,144,145,147,150,151,152,155,159,163,164,167,169,170,171,172,182,183,184,186,187,188,191,192,193,],[-3,-14,-14,-14,-14,-14,-14,-14,-14,-14,-2,-4,-13,-5,-6,-7,-8,-9,-10,-11,-12,-20,-22,-70,-31,-46,-48,-50,-57,-60,-65,-67,-68,-69,-71,-73,-74,-17,-21,-30,-24,-26,-27,-28,-29,-25,-49,132,143,-45,-47,-51,-52,-53,-54,-55,-56,-58,-59,-61,-62,-63,-64,-72,-75,-19,-15,-14,-42,-23,-77,163,164,167,-16,-35,-36,-39,-18,-66,-76,-32,186,187,188,-34,-37,-38,192,-35,-33,]),'SEMI_COLON':([4,5,6,7,8,9,10,11,12,32,33,46,47,48,49,51,52,53,54,56,57,58,59,61,62,65,66,72,73,74,75,76,77,78,79,82,109,110,111,112,113,114,115,116,117,118,119,120,121,122,131,132,137,138,142,143,144,145,147,157,163,164,167,169,170,172,186,187,188,192,193,],[22,22,22,22,22,22,22,22,22,-20,-22,-70,-31,-46,-48,-50,-57,-60,-65,-67,-68,-69,-71,-73,-74,101,102,-21,-30,-24,-26,-27,-28,-29,-25,-49,-45,-47,-51,-52,-53,-54,-55,-56,-58,-59,-61,-62,-63,-64,-72,-75,153,154,-19,-15,22,-42,-23,-24,-35,-36,-39,-18,-66,-32,-34,-37,-38,-35,-33,]),'PUNTO':([13,46,54,56,57,58,59,131,132,],[31,-70,95,-67,-68,-69,-71,-72,-75,]),'IGUAL':([15,34,69,73,74,75,76,77,78,104,157,],[35,45,35,-30,108,-26,-27,-28,-29,45,108,]),'MAS':([15,36,46,52,53,54,56,57,58,59,111,112,113,114,115,116,117,118,119,120,121,122,131,132,170,],[36,61,-70,89,-60,-65,-67,-68,-69,-71,89,89,89,89,89,89,-58,-59,-61,-62,-63,-64,-72,-75,-66,]),'MENOS':([15,37,46,52,53,54,56,57,58,59,111,112,113,114,115,116,117,118,119,120,121,122,131,132,170,],[37,62,-70,90,-60,-65,-67,-68,-69,-71,90,90,90,90,90,90,-58,-59,-61,-62,-63,-64,-72,-75,-66,]),'L_PAREN':([16,17,18,35,38,39,42,45,50,55,71,80,81,83,84,85,86,87,88,89,90,91,92,93,94,101,102,108,123,124,125,126,127,128,129,130,134,140,146,148,162,168,177,181,],[38,39,40,55,55,55,71,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,148,-78,-79,-80,-81,-82,-83,-84,55,55,55,55,55,55,181,55,]),'LOG':([31,],[42,]),'COMA':([32,33,46,48,49,51,52,53,54,56,57,58,59,72,73,74,75,76,77,78,79,82,97,106,107,109,110,111,112,113,114,115,116,117,118,119,120,121,122,131,132,147,150,157,160,161,170,171,],[43,-22,-70,-46,-48,-50,-57,-60,-65,-67,-68,-69,-71,-21,-30,-24,-26,-27,-28,-29,-25,-49,133,146,-44,-45,-47,-51,-52,-53,-54,-55,-56,-58,-59,-61,-62,-63,-64,-72,-75,-23,-77,-24,-43,146,-66,-76,]),'COLON':([34,98,104,142,149,],[44,134,141,158,162,]),'NOT':([35,38,39,45,55,71,80,81,101,102,108,134,140,146,148,162,168,181,],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'ENTERO':([35,38,39,45,50,55,71,80,81,83,84,85,86,87,88,89,90,91,92,93,94,101,102,108,134,140,146,148,162,168,181,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'DECIMAL':([35,38,39,45,50,55,71,80,81,83,84,85,86,87,88,89,90,91,92,93,94,101,102,108,134,140,146,148,162,168,181,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'CADENA':([35,38,39,45,50,55,71,80,81,83,84,85,86,87,88,89,90,91,92,93,94,101,102,108,134,140,146,148,162,168,181,],[58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'L_LLAVE':([35,38,39,41,45,50,55,71,80,81,83,84,85,86,87,88,89,90,91,92,93,94,99,100,101,102,103,108,134,140,146,148,162,168,173,174,175,181,189,],[60,60,60,70,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,135,136,60,60,139,60,60,60,60,60,60,60,178,179,180,60,190,]),'NUMBER':([44,141,158,],[75,75,75,]),'STRING':([44,141,158,],[76,76,76,]),'BOOLEAN':([44,141,158,],[77,77,77,]),'ANY':([44,141,158,],[78,78,78,]),'TIMES':([46,53,54,56,57,58,59,117,118,119,120,121,122,131,132,170,],[-70,91,-65,-67,-68,-69,-71,91,91,-61,-62,-63,-64,-72,-75,-66,]),'DIVIDE':([46,53,54,56,57,58,59,117,118,119,120,121,122,131,132,170,],[-70,92,-65,-67,-68,-69,-71,92,92,-61,-62,-63,-64,-72,-75,-66,]),'MOD':([46,53,54,56,57,58,59,117,118,119,120,121,122,131,132,170,],[-70,93,-65,-67,-68,-69,-71,93,93,-61,-62,-63,-64,-72,-75,-66,]),'POTENCIA':([46,53,54,56,57,58,59,117,118,119,120,121,122,131,132,170,],[-70,94,-65,-67,-68,-69,-71,94,94,-61,-62,-63,-64,-72,-75,-66,]),'DISTINTO_QUE':([46,51,52,53,54,56,57,58,59,82,111,112,113,114,115,116,117,118,119,120,121,122,131,132,170,],[-70,83,-57,-60,-65,-67,-68,-69,-71,83,-51,-52,-53,-54,-55,-56,-58,-59,-61,-62,-63,-64,-72,-75,-66,]),'MENOR_QUE':([46,51,52,53,54,56,57,58,59,82,111,112,113,114,115,116,117,118,119,120,121,122,131,132,170,],[-70,84,-57,-60,-65,-67,-68,-69,-71,84,-51,-52,-53,-54,-55,-56,-58,-59,-61,-62,-63,-64,-72,-75,-66,]),'MENOR_IGUAL_QUE':([46,51,52,53,54,56,57,58,59,82,111,112,113,114,115,116,117,118,119,120,121,122,131,132,170,],[-70,85,-57,-60,-65,-67,-68,-69,-71,85,-51,-52,-53,-54,-55,-56,-58,-59,-61,-62,-63,-64,-72,-75,-66,]),'MAYOR_QUE':([46,51,52,53,54,56,57,58,59,82,111,112,113,114,115,116,117,118,119,120,121,122,131,132,170,],[-70,86,-57,-60,-65,-67,-68,-69,-71,86,-51,-52,-53,-54,-55,-56,-58,-59,-61,-62,-63,-64,-72,-75,-66,]),'MAYOR_IGUAL_QUE':([46,51,52,53,54,56,57,58,59,82,111,112,113,114,115,116,117,118,119,120,121,122,131,132,170,],[-70,87,-57,-60,-65,-67,-68,-69,-71,87,-51,-52,-53,-54,-55,-56,-58,-59,-61,-62,-63,-64,-72,-75,-66,]),'TRIPLE_IGUAL':([46,51,52,53,54,56,57,58,59,82,111,112,113,114,115,116,117,118,119,120,121,122,131,132,170,],[-70,88,-57,-60,-65,-67,-68,-69,-71,88,-51,-52,-53,-54,-55,-56,-58,-59,-61,-62,-63,-64,-72,-75,-66,]),'AND':([46,48,49,51,52,53,54,56,57,58,59,82,109,110,111,112,113,114,115,116,117,118,119,120,121,122,131,132,170,],[-70,81,-48,-50,-57,-60,-65,-67,-68,-69,-71,-49,81,-47,-51,-52,-53,-54,-55,-56,-58,-59,-61,-62,-63,-64,-72,-75,-66,]),'OR':([46,47,48,49,51,52,53,54,56,57,58,59,63,64,79,82,96,107,109,110,111,112,113,114,115,116,117,118,119,120,121,122,131,132,137,138,147,150,156,160,170,171,176,185,],[-70,80,-46,-48,-50,-57,-60,-65,-67,-68,-69,-71,80,80,80,-49,80,80,-45,-47,-51,-52,-53,-54,-55,-56,-58,-59,-61,-62,-63,-64,-72,-75,80,80,80,80,80,80,-66,80,80,80,]),'R_PAREN':([46,47,48,49,51,52,53,54,56,57,58,59,63,64,67,82,96,106,107,109,110,111,112,113,114,115,116,117,118,119,120,121,122,131,132,156,160,161,165,166,170,176,185,],[-70,-31,-46,-48,-50,-57,-60,-65,-67,-68,-69,-71,99,100,103,-49,131,145,-44,-45,-47,-51,-52,-53,-54,-55,-56,-58,-59,-61,-62,-63,-64,-72,-75,-40,-43,170,174,175,-66,-41,189,]),'OF':([73,75,76,77,78,104,157,],[-30,-26,-27,-28,-29,140,168,]),'TOSTRING':([95,],[124,]),'TOFIXED':([95,],[125,]),'TOEXPONENTIAL':([95,],[126,]),'TOLOWERCASE':([95,],[127,]),'TOUPPERCASE':([95,],[128,]),'SPLIT':([95,],[129,]),'CONCAT':([95,],[130,]),'ELSE':([163,192,],[173,173,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'init':([0,],[1,]),'instrucciones':([0,135,136,139,178,179,180,190,],[2,151,152,155,182,183,184,191,]),'instruccion':([0,2,135,136,139,151,152,155,178,179,180,182,183,184,190,191,],[3,20,3,3,3,20,20,20,3,3,3,20,20,20,3,20,]),'console_pro':([0,2,135,136,139,151,152,155,178,179,180,182,183,184,190,191,],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'declaration_instruction':([0,2,40,135,136,139,151,152,155,178,179,180,182,183,184,190,191,],[5,5,65,5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'assig_pro':([0,2,40,135,136,139,151,152,153,154,155,178,179,180,182,183,184,190,191,],[6,6,66,6,6,6,6,6,165,166,6,6,6,6,6,6,6,6,6,]),'if_pro':([0,2,135,136,139,151,152,155,178,179,180,182,183,184,190,191,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'while_pro':([0,2,135,136,139,151,152,155,178,179,180,182,183,184,190,191,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'for_pro':([0,2,135,136,139,151,152,155,178,179,180,182,183,184,190,191,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'for_each_pro':([0,2,135,136,139,151,152,155,178,179,180,182,183,184,190,191,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'interface_pro':([0,2,135,136,139,151,152,155,178,179,180,182,183,184,190,191,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'sumadores':([0,2,135,136,139,151,152,155,178,179,180,182,183,184,190,191,],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'sc':([4,5,6,7,8,9,10,11,12,144,],[21,23,24,25,26,27,28,29,30,159,]),'declaracion_list':([14,68,],[32,32,]),'assignacion_instruction':([14,43,68,],[33,72,33,]),'a':([35,38,39,45,55,71,101,102,108,134,140,146,148,162,168,181,],[47,63,64,79,96,107,137,138,147,150,156,160,107,171,176,185,]),'b':([35,38,39,45,55,71,80,101,102,108,134,140,146,148,162,168,181,],[48,48,48,48,48,48,109,48,48,48,48,48,48,48,48,48,48,]),'c':([35,38,39,45,55,71,80,81,101,102,108,134,140,146,148,162,168,181,],[49,49,49,49,49,49,49,110,49,49,49,49,49,49,49,49,49,49,]),'d':([35,38,39,45,50,55,71,80,81,101,102,108,134,140,146,148,162,168,181,],[51,51,51,51,82,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'e':([35,38,39,45,50,55,71,80,81,83,84,85,86,87,88,101,102,108,134,140,146,148,162,168,181,],[52,52,52,52,52,52,52,52,52,111,112,113,114,115,116,52,52,52,52,52,52,52,52,52,52,]),'f':([35,38,39,45,50,55,71,80,81,83,84,85,86,87,88,89,90,101,102,108,134,140,146,148,162,168,181,],[53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,117,118,53,53,53,53,53,53,53,53,53,53,]),'g':([35,38,39,45,50,55,71,80,81,83,84,85,86,87,88,89,90,91,92,93,94,101,102,108,134,140,146,148,162,168,181,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,119,120,121,122,54,54,54,54,54,54,54,54,54,54,]),'interface_assi':([35,38,39,45,50,55,71,80,81,83,84,85,86,87,88,89,90,91,92,93,94,101,102,108,134,140,146,148,162,168,181,],[59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,]),'for_each_dec':([40,],[67,]),'type':([44,141,158,],[74,157,169,]),'atributos_assi':([60,],[97,]),'interface_atributos':([70,],[105,]),'expresion':([71,148,],[106,161,]),'nativeFun':([95,],[123,]),'interface_atributo':([105,],[144,]),'else_pro':([163,192,],[172,193,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> init","S'",1,None,None,None),
  ('init -> instrucciones','init',1,'p_init','grammar.py',279),
  ('instrucciones -> instrucciones instruccion','instrucciones',2,'p_instrucciones_lista','grammar.py',283),
  ('instrucciones -> instruccion','instrucciones',1,'p_instrucciones_instruccion','grammar.py',290),
  ('instruccion -> console_pro sc','instruccion',2,'p_instruccion','grammar.py',297),
  ('instruccion -> declaration_instruction sc','instruccion',2,'p_instruccion','grammar.py',298),
  ('instruccion -> assig_pro sc','instruccion',2,'p_instruccion','grammar.py',299),
  ('instruccion -> if_pro sc','instruccion',2,'p_instruccion','grammar.py',300),
  ('instruccion -> while_pro sc','instruccion',2,'p_instruccion','grammar.py',301),
  ('instruccion -> for_pro sc','instruccion',2,'p_instruccion','grammar.py',302),
  ('instruccion -> for_each_pro sc','instruccion',2,'p_instruccion','grammar.py',303),
  ('instruccion -> interface_pro sc','instruccion',2,'p_instruccion','grammar.py',304),
  ('instruccion -> sumadores sc','instruccion',2,'p_instruccion','grammar.py',305),
  ('sc -> SEMI_COLON','sc',1,'p_semi_colon','grammar.py',309),
  ('sc -> <empty>','sc',0,'p_semi_colon','grammar.py',310),
  ('interface_pro -> INTERFACE LITERAL L_LLAVE interface_atributos R_LLAVE','interface_pro',5,'p_instruccion_declarationInterface','grammar.py',316),
  ('interface_atributos -> interface_atributos interface_atributo sc','interface_atributos',3,'p_instruccion_interfaceAtributos','grammar.py',320),
  ('interface_atributos -> <empty>','interface_atributos',0,'p_instruccion_interfaceAtributos2','grammar.py',323),
  ('interface_atributo -> LITERAL COLON type','interface_atributo',3,'p_intruccion_interfaceAtributo','grammar.py',326),
  ('interface_atributo -> LITERAL','interface_atributo',1,'p_instruccion_interfaceAtributo2','grammar.py',329),
  ('declaration_instruction -> LET declaracion_list','declaration_instruction',2,'p_instruccion_declarationInstruction','grammar.py',333),
  ('declaracion_list -> declaracion_list COMA assignacion_instruction','declaracion_list',3,'p_instruccion_declaracion_list','grammar.py',337),
  ('declaracion_list -> assignacion_instruction','declaracion_list',1,'p_instruccion_declaracion_list2','grammar.py',341),
  ('assignacion_instruction -> LITERAL COLON type IGUAL a','assignacion_instruction',5,'p_instruccion_assignacion_instruction','grammar.py',346),
  ('assignacion_instruction -> LITERAL COLON type','assignacion_instruction',3,'p_instruccion_assingnacion_instruction2','grammar.py',350),
  ('assignacion_instruction -> LITERAL IGUAL a','assignacion_instruction',3,'p_instruccion_assignacion_instruction3','grammar.py',354),
  ('type -> NUMBER','type',1,'p_instruccion_type','grammar.py',357),
  ('type -> STRING','type',1,'p_instruccion_type','grammar.py',358),
  ('type -> BOOLEAN','type',1,'p_instruccion_type','grammar.py',359),
  ('type -> ANY','type',1,'p_instruccion_type','grammar.py',360),
  ('type -> LITERAL','type',1,'p_instruccion_type','grammar.py',361),
  ('assig_pro -> LITERAL IGUAL a','assig_pro',3,'p_instruccion_assig_pro','grammar.py',365),
  ('if_pro -> IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro','if_pro',8,'p_instruccion_if_pro','grammar.py',369),
  ('else_pro -> ELSE IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro','else_pro',9,'p_instruccion_else_pro','grammar.py',375),
  ('else_pro -> ELSE L_LLAVE instrucciones R_LLAVE','else_pro',4,'p_instruccion_else_pro2','grammar.py',379),
  ('else_pro -> <empty>','else_pro',0,'p_instruccion_else_pro3','grammar.py',383),
  ('while_pro -> WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE','while_pro',7,'p_instruccion_while_pro','grammar.py',388),
  ('for_pro -> FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE','for_pro',11,'p_instruccion_for_pro','grammar.py',393),
  ('for_pro -> FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE','for_pro',11,'p_instruccion_for_pro','grammar.py',394),
  ('for_each_pro -> FOR L_PAREN for_each_dec R_PAREN L_LLAVE instrucciones R_LLAVE','for_each_pro',7,'p_instruccion_for_each_pro','grammar.py',401),
  ('for_each_dec -> LET LITERAL OF a','for_each_dec',4,'p_instruccion_fore_dec','grammar.py',404),
  ('for_each_dec -> LET LITERAL COLON type OF a','for_each_dec',6,'p_instruccion_fore_dec_type','grammar.py',407),
  ('console_pro -> CONSOLE PUNTO LOG L_PAREN expresion R_PAREN','console_pro',6,'p_instruccion_console','grammar.py',412),
  ('expresion -> expresion COMA a','expresion',3,'p_instruccion_expresion','grammar.py',417),
  ('expresion -> a','expresion',1,'p_instruccion_expresion2','grammar.py',420),
  ('a -> a OR b','a',3,'p_instruccion_expresion3','grammar.py',425),
  ('a -> b','a',1,'p_instruccion_expresion4','grammar.py',428),
  ('b -> b AND c','b',3,'p_instruccion_expresion5','grammar.py',432),
  ('b -> c','b',1,'p_instruccion_expresion6','grammar.py',436),
  ('c -> NOT d','c',2,'p_instruccion_expresion7','grammar.py',440),
  ('c -> d','c',1,'p_instruccion_expresion8','grammar.py',444),
  ('d -> d DISTINTO_QUE e','d',3,'p_instruccion_expresion9','grammar.py',448),
  ('d -> d MENOR_QUE e','d',3,'p_instruccion_expresion9','grammar.py',449),
  ('d -> d MENOR_IGUAL_QUE e','d',3,'p_instruccion_expresion9','grammar.py',450),
  ('d -> d MAYOR_QUE e','d',3,'p_instruccion_expresion9','grammar.py',451),
  ('d -> d MAYOR_IGUAL_QUE e','d',3,'p_instruccion_expresion9','grammar.py',452),
  ('d -> d TRIPLE_IGUAL e','d',3,'p_instruccion_expresion9','grammar.py',453),
  ('d -> e','d',1,'p_instruccion_expresion10','grammar.py',457),
  ('e -> e MAS f','e',3,'p_instruccion_expresion11','grammar.py',461),
  ('e -> e MENOS f','e',3,'p_instruccion_expresion11','grammar.py',462),
  ('e -> f','e',1,'p_instruccion_expresion12','grammar.py',466),
  ('f -> f TIMES g','f',3,'p_instruccion_expresion13','grammar.py',470),
  ('f -> f DIVIDE g','f',3,'p_instruccion_expresion13','grammar.py',471),
  ('f -> f MOD g','f',3,'p_instruccion_expresion13','grammar.py',472),
  ('f -> f POTENCIA g','f',3,'p_instruccion_expresion13','grammar.py',473),
  ('f -> g','f',1,'p_instruccion_expresion14','grammar.py',477),
  ('f -> g PUNTO nativeFun L_PAREN expresion R_PAREN','f',6,'p_instruccion_expresion15','grammar.py',481),
  ('g -> ENTERO','g',1,'p_instruccion_expresion16','grammar.py',484),
  ('g -> DECIMAL','g',1,'p_instruccion_expresion16','grammar.py',485),
  ('g -> CADENA','g',1,'p_instruccion_expresion16','grammar.py',486),
  ('g -> LITERAL','g',1,'p_instruccion_expresion16','grammar.py',487),
  ('g -> interface_assi','g',1,'p_instruccion_expresion16','grammar.py',488),
  ('g -> L_PAREN a R_PAREN','g',3,'p_instruccion_expresion17','grammar.py',492),
  ('sumadores -> LITERAL MAS MAS','sumadores',3,'p_instruccion_sumadores','grammar.py',497),
  ('sumadores -> LITERAL MENOS MENOS','sumadores',3,'p_instruccion_sumadores','grammar.py',498),
  ('interface_assi -> L_LLAVE atributos_assi R_LLAVE','interface_assi',3,'p_instruccion_interfaceAssi','grammar.py',505),
  ('atributos_assi -> atributos_assi COMA LITERAL COLON a','atributos_assi',5,'p_instruccion_inter_atributesAssi','grammar.py',509),
  ('atributos_assi -> LITERAL COLON a','atributos_assi',3,'p_instruccion_inter_atributesAssi2','grammar.py',512),
  ('nativeFun -> TOSTRING','nativeFun',1,'p_instruccion_nativas','grammar.py',518),
  ('nativeFun -> TOFIXED','nativeFun',1,'p_instruccion_nativas','grammar.py',519),
  ('nativeFun -> TOEXPONENTIAL','nativeFun',1,'p_instruccion_nativas','grammar.py',520),
  ('nativeFun -> TOLOWERCASE','nativeFun',1,'p_instruccion_nativas','grammar.py',521),
  ('nativeFun -> TOUPPERCASE','nativeFun',1,'p_instruccion_nativas','grammar.py',522),
  ('nativeFun -> SPLIT','nativeFun',1,'p_instruccion_nativas','grammar.py',523),
  ('nativeFun -> CONCAT','nativeFun',1,'p_instruccion_nativas','grammar.py',524),
]
