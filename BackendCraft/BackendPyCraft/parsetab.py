
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ANY BOOLEAN BREAK CADENA COLON COMA CONCAT CONSOLE CONTINUE DECIMAL DISTINTO_QUE DIVIDE ELSE ENTERO FOR FUNCTION IF IGUAL INTERFACE LET LITERAL LOG L_CORCHETE L_LLAVE L_PAREN MAS MAYOR_IGUAL_QUE MAYOR_QUE MENOR_IGUAL_QUE MENOR_QUE MENOS MOD NOT NULL NUMBER OF OR POTENCIA PUNTO RETURN R_CORCHETE R_LLAVE R_PAREN SEMI_COLON SPLIT STRING TIMES TOEXPONENTIAL TOFIXED TOLOWERCASE TOSTRING TOUPPERCASE TRIPLE_IGUAL WHILEinit            : instruccionesinstrucciones    : instrucciones instruccioninstrucciones    : instruccioninstruccion      : console_pro SEMI_COLON\n                        | declaration_instruction SEMI_COLON\n                        | assig_pro SEMI_COLON\n                        | if_pro\n                        | while_pro\n                        | for_pro\n                        | for_each_pro\n                        | sumadores SEMI_COLONdeclaration_instruction      : LET declaracion_listdeclaracion_list      : declaracion_list COMA assignacion_instructiondeclaracion_list      : assignacion_instructionassignacion_instruction      : LITERAL COLON type IGUAL aassignacion_instruction      : LITERAL COLON typeassignacion_instruction      : LITERAL IGUAL atype      : NUMBER\n                 | STRING\n                 | BOOLEAN\n                 | ANY assig_pro      : LITERAL IGUAL aif_pro      : IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_proelse_pro      : ELSE IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_proelse_pro      : ELSE L_LLAVE instrucciones R_LLAVEelse_pro      : while_pro      : WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVEfor_pro      : FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE\n                    | FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVEfor_each_pro : FOR L_PAREN for_each_dec R_PAREN L_LLAVE instrucciones R_LLAVEfor_each_dec : LET LITERAL OF afor_each_dec : LET LITERAL COLON type OF aconsole_pro      : CONSOLE PUNTO LOG L_PAREN expresion R_PARENexpresion      : expresion COMA aexpresion      : aa      : a OR ba      : b b      : b AND c b      : c c      : NOT d c      : d  d     : d DISTINTO_QUE e\n                | d MENOR_QUE e\n                | d MENOR_IGUAL_QUE e\n                | d MAYOR_QUE e\n                | d MAYOR_IGUAL_QUE e\n                | d TRIPLE_IGUAL e  d     : e  e     : e MAS f\n                | e MENOS f  e     : f  f     : f TIMES g\n                | f DIVIDE g\n                | f MOD g\n                | f POTENCIA g f     : g  g     : ENTERO\n              | DECIMAL\n              | CADENA\n              | LITERAL g     : L_PAREN a R_PAREN sumadores     : LITERAL MAS MAS\n                          | LITERAL MENOS MENOS '
    
_lr_action_items = {'CONSOLE':([0,2,3,7,8,9,10,18,19,20,21,22,107,108,111,117,118,121,125,126,129,131,137,138,139,141,142,143,145,146,147,149,150,151,152,],[12,12,-3,-7,-8,-9,-10,-2,-4,-5,-6,-11,12,12,12,12,12,12,-26,-27,-30,-23,12,12,12,12,12,12,-25,-28,-29,12,12,-26,-24,]),'LET':([0,2,3,7,8,9,10,18,19,20,21,22,32,107,108,111,117,118,121,125,126,129,131,137,138,139,141,142,143,145,146,147,149,150,151,152,],[13,13,-3,-7,-8,-9,-10,-2,-4,-5,-6,-11,57,13,13,13,13,13,13,-26,-27,-30,-23,13,13,13,13,13,13,-25,-28,-29,13,13,-26,-24,]),'LITERAL':([0,2,3,7,8,9,10,13,18,19,20,21,22,27,30,31,32,34,36,41,49,57,59,67,68,70,71,72,73,74,75,76,77,78,79,80,81,85,86,91,107,108,111,112,115,117,118,119,120,121,125,126,129,130,131,137,138,139,140,141,142,143,145,146,147,149,150,151,152,],[14,14,-3,-7,-8,-9,-10,26,-2,-4,-5,-6,-11,37,37,37,58,26,37,37,37,88,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,14,14,14,37,37,14,14,58,58,14,-26,-27,-30,37,-23,14,14,14,37,14,14,14,-25,-28,-29,14,14,-26,-24,]),'IF':([0,2,3,7,8,9,10,18,19,20,21,22,107,108,111,117,118,121,125,126,129,131,132,137,138,139,141,142,143,145,146,147,149,150,151,152,],[15,15,-3,-7,-8,-9,-10,-2,-4,-5,-6,-11,15,15,15,15,15,15,-26,-27,-30,-23,136,15,15,15,15,15,15,-25,-28,-29,15,15,-26,-24,]),'WHILE':([0,2,3,7,8,9,10,18,19,20,21,22,107,108,111,117,118,121,125,126,129,131,137,138,139,141,142,143,145,146,147,149,150,151,152,],[16,16,-3,-7,-8,-9,-10,-2,-4,-5,-6,-11,16,16,16,16,16,16,-26,-27,-30,-23,16,16,16,16,16,16,-25,-28,-29,16,16,-26,-24,]),'FOR':([0,2,3,7,8,9,10,18,19,20,21,22,107,108,111,117,118,121,125,126,129,131,137,138,139,141,142,143,145,146,147,149,150,151,152,],[17,17,-3,-7,-8,-9,-10,-2,-4,-5,-6,-11,17,17,17,17,17,17,-26,-27,-30,-23,17,17,17,17,17,17,-25,-28,-29,17,17,-26,-24,]),'$end':([1,2,3,7,8,9,10,18,19,20,21,22,125,126,129,131,145,146,147,151,152,],[0,-1,-3,-7,-8,-9,-10,-2,-4,-5,-6,-11,-26,-27,-30,-23,-25,-28,-29,-26,-24,]),'R_LLAVE':([3,7,8,9,10,18,19,20,21,22,117,118,121,125,126,129,131,141,142,143,145,146,147,150,151,152,],[-3,-7,-8,-9,-10,-2,-4,-5,-6,-11,125,126,129,-26,-27,-30,-23,145,146,147,-25,-28,-29,151,-26,-24,]),'SEMI_COLON':([4,5,6,11,24,25,37,38,39,40,42,43,44,45,46,47,48,50,51,54,55,60,61,62,63,64,65,66,69,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,109,110,114,116,123,],[19,20,21,22,-12,-14,-60,-22,-37,-39,-41,-48,-51,-56,-57,-58,-59,-62,-63,85,86,-13,-16,-18,-19,-20,-21,-17,-40,-36,-38,-42,-43,-44,-45,-46,-47,-49,-50,-52,-53,-54,-55,-61,119,120,-33,-15,-16,]),'PUNTO':([12,],[23,]),'IGUAL':([14,26,58,61,62,63,64,65,88,123,],[27,36,27,91,-18,-19,-20,-21,36,91,]),'MAS':([14,28,37,43,44,45,46,47,48,94,95,96,97,98,99,100,101,102,103,104,105,106,],[28,50,-60,76,-51,-56,-57,-58,-59,76,76,76,76,76,76,-49,-50,-52,-53,-54,-55,-61,]),'MENOS':([14,29,37,43,44,45,46,47,48,94,95,96,97,98,99,100,101,102,103,104,105,106,],[29,51,-60,77,-51,-56,-57,-58,-59,77,77,77,77,77,77,-49,-50,-52,-53,-54,-55,-61,]),'L_PAREN':([15,16,17,27,30,31,33,36,41,49,59,67,68,70,71,72,73,74,75,76,77,78,79,80,81,85,86,91,112,115,130,136,140,],[30,31,32,49,49,49,59,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,140,49,]),'LOG':([23,],[33,]),'COMA':([24,25,37,39,40,42,43,44,45,46,47,48,60,61,62,63,64,65,66,69,89,90,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,116,123,124,],[34,-14,-60,-37,-39,-41,-48,-51,-56,-57,-58,-59,-13,-16,-18,-19,-20,-21,-17,-40,115,-35,-36,-38,-42,-43,-44,-45,-46,-47,-49,-50,-52,-53,-54,-55,-61,-15,-16,-34,]),'COLON':([26,88,],[35,113,]),'NOT':([27,30,31,36,49,59,67,68,85,86,91,112,115,130,140,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'ENTERO':([27,30,31,36,41,49,59,67,68,70,71,72,73,74,75,76,77,78,79,80,81,85,86,91,112,115,130,140,],[46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,]),'DECIMAL':([27,30,31,36,41,49,59,67,68,70,71,72,73,74,75,76,77,78,79,80,81,85,86,91,112,115,130,140,],[47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'CADENA':([27,30,31,36,41,49,59,67,68,70,71,72,73,74,75,76,77,78,79,80,81,85,86,91,112,115,130,140,],[48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,]),'NUMBER':([35,113,],[62,62,]),'STRING':([35,113,],[63,63,]),'BOOLEAN':([35,113,],[64,64,]),'ANY':([35,113,],[65,65,]),'TIMES':([37,44,45,46,47,48,100,101,102,103,104,105,106,],[-60,78,-56,-57,-58,-59,78,78,-52,-53,-54,-55,-61,]),'DIVIDE':([37,44,45,46,47,48,100,101,102,103,104,105,106,],[-60,79,-56,-57,-58,-59,79,79,-52,-53,-54,-55,-61,]),'MOD':([37,44,45,46,47,48,100,101,102,103,104,105,106,],[-60,80,-56,-57,-58,-59,80,80,-52,-53,-54,-55,-61,]),'POTENCIA':([37,44,45,46,47,48,100,101,102,103,104,105,106,],[-60,81,-56,-57,-58,-59,81,81,-52,-53,-54,-55,-61,]),'DISTINTO_QUE':([37,42,43,44,45,46,47,48,69,94,95,96,97,98,99,100,101,102,103,104,105,106,],[-60,70,-48,-51,-56,-57,-58,-59,70,-42,-43,-44,-45,-46,-47,-49,-50,-52,-53,-54,-55,-61,]),'MENOR_QUE':([37,42,43,44,45,46,47,48,69,94,95,96,97,98,99,100,101,102,103,104,105,106,],[-60,71,-48,-51,-56,-57,-58,-59,71,-42,-43,-44,-45,-46,-47,-49,-50,-52,-53,-54,-55,-61,]),'MENOR_IGUAL_QUE':([37,42,43,44,45,46,47,48,69,94,95,96,97,98,99,100,101,102,103,104,105,106,],[-60,72,-48,-51,-56,-57,-58,-59,72,-42,-43,-44,-45,-46,-47,-49,-50,-52,-53,-54,-55,-61,]),'MAYOR_QUE':([37,42,43,44,45,46,47,48,69,94,95,96,97,98,99,100,101,102,103,104,105,106,],[-60,73,-48,-51,-56,-57,-58,-59,73,-42,-43,-44,-45,-46,-47,-49,-50,-52,-53,-54,-55,-61,]),'MAYOR_IGUAL_QUE':([37,42,43,44,45,46,47,48,69,94,95,96,97,98,99,100,101,102,103,104,105,106,],[-60,74,-48,-51,-56,-57,-58,-59,74,-42,-43,-44,-45,-46,-47,-49,-50,-52,-53,-54,-55,-61,]),'TRIPLE_IGUAL':([37,42,43,44,45,46,47,48,69,94,95,96,97,98,99,100,101,102,103,104,105,106,],[-60,75,-48,-51,-56,-57,-58,-59,75,-42,-43,-44,-45,-46,-47,-49,-50,-52,-53,-54,-55,-61,]),'AND':([37,39,40,42,43,44,45,46,47,48,69,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,],[-60,68,-39,-41,-48,-51,-56,-57,-58,-59,-40,68,-38,-42,-43,-44,-45,-46,-47,-49,-50,-52,-53,-54,-55,-61,]),'OR':([37,38,39,40,42,43,44,45,46,47,48,52,53,66,69,82,90,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,109,110,116,122,124,135,144,],[-60,67,-37,-39,-41,-48,-51,-56,-57,-58,-59,67,67,67,-40,67,67,-36,-38,-42,-43,-44,-45,-46,-47,-49,-50,-52,-53,-54,-55,-61,67,67,67,67,67,67,67,]),'R_PAREN':([37,38,39,40,42,43,44,45,46,47,48,52,53,56,69,82,89,90,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,122,124,127,128,135,144,],[-60,-22,-37,-39,-41,-48,-51,-56,-57,-58,-59,83,84,87,-40,106,114,-35,-36,-38,-42,-43,-44,-45,-46,-47,-49,-50,-52,-53,-54,-55,-61,-31,-34,133,134,-32,148,]),'OF':([62,63,64,65,88,123,],[-18,-19,-20,-21,112,130,]),'L_LLAVE':([83,84,87,132,133,134,148,],[107,108,111,137,138,139,149,]),'ELSE':([125,151,],[132,132,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'init':([0,],[1,]),'instrucciones':([0,107,108,111,137,138,139,149,],[2,117,118,121,141,142,143,150,]),'instruccion':([0,2,107,108,111,117,118,121,137,138,139,141,142,143,149,150,],[3,18,3,3,3,18,18,18,3,3,3,18,18,18,3,18,]),'console_pro':([0,2,107,108,111,117,118,121,137,138,139,141,142,143,149,150,],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'declaration_instruction':([0,2,32,107,108,111,117,118,121,137,138,139,141,142,143,149,150,],[5,5,54,5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'assig_pro':([0,2,32,107,108,111,117,118,119,120,121,137,138,139,141,142,143,149,150,],[6,6,55,6,6,6,6,6,127,128,6,6,6,6,6,6,6,6,6,]),'if_pro':([0,2,107,108,111,117,118,121,137,138,139,141,142,143,149,150,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'while_pro':([0,2,107,108,111,117,118,121,137,138,139,141,142,143,149,150,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'for_pro':([0,2,107,108,111,117,118,121,137,138,139,141,142,143,149,150,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'for_each_pro':([0,2,107,108,111,117,118,121,137,138,139,141,142,143,149,150,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'sumadores':([0,2,107,108,111,117,118,121,137,138,139,141,142,143,149,150,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'declaracion_list':([13,57,],[24,24,]),'assignacion_instruction':([13,34,57,],[25,60,25,]),'a':([27,30,31,36,49,59,85,86,91,112,115,130,140,],[38,52,53,66,82,90,109,110,116,122,124,135,144,]),'b':([27,30,31,36,49,59,67,85,86,91,112,115,130,140,],[39,39,39,39,39,39,92,39,39,39,39,39,39,39,]),'c':([27,30,31,36,49,59,67,68,85,86,91,112,115,130,140,],[40,40,40,40,40,40,40,93,40,40,40,40,40,40,40,]),'d':([27,30,31,36,41,49,59,67,68,85,86,91,112,115,130,140,],[42,42,42,42,69,42,42,42,42,42,42,42,42,42,42,42,]),'e':([27,30,31,36,41,49,59,67,68,70,71,72,73,74,75,85,86,91,112,115,130,140,],[43,43,43,43,43,43,43,43,43,94,95,96,97,98,99,43,43,43,43,43,43,43,]),'f':([27,30,31,36,41,49,59,67,68,70,71,72,73,74,75,76,77,85,86,91,112,115,130,140,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,100,101,44,44,44,44,44,44,44,]),'g':([27,30,31,36,41,49,59,67,68,70,71,72,73,74,75,76,77,78,79,80,81,85,86,91,112,115,130,140,],[45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,102,103,104,105,45,45,45,45,45,45,45,]),'for_each_dec':([32,],[56,]),'type':([35,113,],[61,123,]),'expresion':([59,],[89,]),'else_pro':([125,151,],[131,152,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> init","S'",1,None,None,None),
  ('init -> instrucciones','init',1,'p_init','grammar.py',261),
  ('instrucciones -> instrucciones instruccion','instrucciones',2,'p_instrucciones_lista','grammar.py',265),
  ('instrucciones -> instruccion','instrucciones',1,'p_instrucciones_instruccion','grammar.py',272),
  ('instruccion -> console_pro SEMI_COLON','instruccion',2,'p_instruccion','grammar.py',279),
  ('instruccion -> declaration_instruction SEMI_COLON','instruccion',2,'p_instruccion','grammar.py',280),
  ('instruccion -> assig_pro SEMI_COLON','instruccion',2,'p_instruccion','grammar.py',281),
  ('instruccion -> if_pro','instruccion',1,'p_instruccion','grammar.py',282),
  ('instruccion -> while_pro','instruccion',1,'p_instruccion','grammar.py',283),
  ('instruccion -> for_pro','instruccion',1,'p_instruccion','grammar.py',284),
  ('instruccion -> for_each_pro','instruccion',1,'p_instruccion','grammar.py',285),
  ('instruccion -> sumadores SEMI_COLON','instruccion',2,'p_instruccion','grammar.py',286),
  ('declaration_instruction -> LET declaracion_list','declaration_instruction',2,'p_instruccion_declarationInstruction','grammar.py',291),
  ('declaracion_list -> declaracion_list COMA assignacion_instruction','declaracion_list',3,'p_instruccion_declaracion_list','grammar.py',295),
  ('declaracion_list -> assignacion_instruction','declaracion_list',1,'p_instruccion_declaracion_list2','grammar.py',299),
  ('assignacion_instruction -> LITERAL COLON type IGUAL a','assignacion_instruction',5,'p_instruccion_assignacion_instruction','grammar.py',304),
  ('assignacion_instruction -> LITERAL COLON type','assignacion_instruction',3,'p_instruccion_assingnacion_instruction2','grammar.py',308),
  ('assignacion_instruction -> LITERAL IGUAL a','assignacion_instruction',3,'p_instruccion_assignacion_instruction3','grammar.py',312),
  ('type -> NUMBER','type',1,'p_instruccion_type','grammar.py',315),
  ('type -> STRING','type',1,'p_instruccion_type','grammar.py',316),
  ('type -> BOOLEAN','type',1,'p_instruccion_type','grammar.py',317),
  ('type -> ANY','type',1,'p_instruccion_type','grammar.py',318),
  ('assig_pro -> LITERAL IGUAL a','assig_pro',3,'p_instruccion_assig_pro','grammar.py',322),
  ('if_pro -> IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro','if_pro',8,'p_instruccion_if_pro','grammar.py',326),
  ('else_pro -> ELSE IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro','else_pro',9,'p_instruccion_else_pro','grammar.py',332),
  ('else_pro -> ELSE L_LLAVE instrucciones R_LLAVE','else_pro',4,'p_instruccion_else_pro2','grammar.py',336),
  ('else_pro -> <empty>','else_pro',0,'p_instruccion_else_pro3','grammar.py',340),
  ('while_pro -> WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE','while_pro',7,'p_instruccion_while_pro','grammar.py',345),
  ('for_pro -> FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE','for_pro',11,'p_instruccion_for_pro','grammar.py',350),
  ('for_pro -> FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE','for_pro',11,'p_instruccion_for_pro','grammar.py',351),
  ('for_each_pro -> FOR L_PAREN for_each_dec R_PAREN L_LLAVE instrucciones R_LLAVE','for_each_pro',7,'p_instruccion_for_each_pro','grammar.py',358),
  ('for_each_dec -> LET LITERAL OF a','for_each_dec',4,'p_instruccion_fore_dec','grammar.py',361),
  ('for_each_dec -> LET LITERAL COLON type OF a','for_each_dec',6,'p_instruccion_fore_dec_type','grammar.py',364),
  ('console_pro -> CONSOLE PUNTO LOG L_PAREN expresion R_PAREN','console_pro',6,'p_instruccion_console','grammar.py',369),
  ('expresion -> expresion COMA a','expresion',3,'p_instruccion_expresion','grammar.py',374),
  ('expresion -> a','expresion',1,'p_instruccion_expresion2','grammar.py',377),
  ('a -> a OR b','a',3,'p_instruccion_expresion3','grammar.py',382),
  ('a -> b','a',1,'p_instruccion_expresion4','grammar.py',385),
  ('b -> b AND c','b',3,'p_instruccion_expresion5','grammar.py',389),
  ('b -> c','b',1,'p_instruccion_expresion6','grammar.py',393),
  ('c -> NOT d','c',2,'p_instruccion_expresion7','grammar.py',397),
  ('c -> d','c',1,'p_instruccion_expresion8','grammar.py',401),
  ('d -> d DISTINTO_QUE e','d',3,'p_instruccion_expresion9','grammar.py',405),
  ('d -> d MENOR_QUE e','d',3,'p_instruccion_expresion9','grammar.py',406),
  ('d -> d MENOR_IGUAL_QUE e','d',3,'p_instruccion_expresion9','grammar.py',407),
  ('d -> d MAYOR_QUE e','d',3,'p_instruccion_expresion9','grammar.py',408),
  ('d -> d MAYOR_IGUAL_QUE e','d',3,'p_instruccion_expresion9','grammar.py',409),
  ('d -> d TRIPLE_IGUAL e','d',3,'p_instruccion_expresion9','grammar.py',410),
  ('d -> e','d',1,'p_instruccion_expresion10','grammar.py',414),
  ('e -> e MAS f','e',3,'p_instruccion_expresion11','grammar.py',418),
  ('e -> e MENOS f','e',3,'p_instruccion_expresion11','grammar.py',419),
  ('e -> f','e',1,'p_instruccion_expresion12','grammar.py',423),
  ('f -> f TIMES g','f',3,'p_instruccion_expresion13','grammar.py',427),
  ('f -> f DIVIDE g','f',3,'p_instruccion_expresion13','grammar.py',428),
  ('f -> f MOD g','f',3,'p_instruccion_expresion13','grammar.py',429),
  ('f -> f POTENCIA g','f',3,'p_instruccion_expresion13','grammar.py',430),
  ('f -> g','f',1,'p_instruccion_expresion14','grammar.py',434),
  ('g -> ENTERO','g',1,'p_instruccion_expresion15','grammar.py',438),
  ('g -> DECIMAL','g',1,'p_instruccion_expresion15','grammar.py',439),
  ('g -> CADENA','g',1,'p_instruccion_expresion15','grammar.py',440),
  ('g -> LITERAL','g',1,'p_instruccion_expresion15','grammar.py',441),
  ('g -> L_PAREN a R_PAREN','g',3,'p_instruccion_expresion16','grammar.py',445),
  ('sumadores -> LITERAL MAS MAS','sumadores',3,'p_instruccion_sumadores','grammar.py',450),
  ('sumadores -> LITERAL MENOS MENOS','sumadores',3,'p_instruccion_sumadores','grammar.py',451),
]
