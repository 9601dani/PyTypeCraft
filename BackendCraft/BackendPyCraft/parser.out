Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> init
Rule 1     init -> instrucciones
Rule 2     instrucciones -> instrucciones instruccion
Rule 3     instrucciones -> instruccion
Rule 4     instruccion -> console_pro sc
Rule 5     instruccion -> declaration_instruction sc
Rule 6     instruccion -> assig_pro sc
Rule 7     instruccion -> interface_assign_pro sc
Rule 8     instruccion -> if_pro sc
Rule 9     instruccion -> while_pro sc
Rule 10    instruccion -> for_pro sc
Rule 11    instruccion -> for_each_pro sc
Rule 12    instruccion -> interface_pro sc
Rule 13    instruccion -> continue_pro sc
Rule 14    instruccion -> break_pro sc
Rule 15    instruccion -> return_pro sc
Rule 16    instruccion -> function_pro sc
Rule 17    instruccion -> call_function_pro sc
Rule 18    instruccion -> sumadores sc
Rule 19    sc -> SEMI_COLON
Rule 20    sc -> <empty>
Rule 21    function_pro -> FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE
Rule 22    function_pro -> FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE
Rule 23    call_function_pro -> LITERAL L_PAREN values R_PAREN
Rule 24    call_function_pro -> LITERAL L_PAREN R_PAREN
Rule 25    values -> values COMA a
Rule 26    values -> a
Rule 27    parameters_pro -> parameters_pro COMA parameter_pro
Rule 28    parameters_pro -> parameter_pro
Rule 29    parameter_pro -> LITERAL COLON type
Rule 30    parameter_pro -> LITERAL
Rule 31    continue_pro -> CONTINUE
Rule 32    break_pro -> BREAK
Rule 33    return_pro -> RETURN
Rule 34    return_pro -> RETURN a
Rule 35    interface_pro -> INTERFACE LITERAL L_LLAVE interface_atributos R_LLAVE
Rule 36    interface_atributos -> interface_atributos interface_atributo sc
Rule 37    interface_atributos -> <empty>
Rule 38    interface_atributo -> LITERAL COLON type
Rule 39    interface_atributo -> LITERAL
Rule 40    interface_assign_pro -> a PUNTO LITERAL IGUAL a
Rule 41    declaration_instruction -> LET declaracion_list
Rule 42    declaracion_list -> declaracion_list COMA assignacion_instruction
Rule 43    declaracion_list -> assignacion_instruction
Rule 44    assignacion_instruction -> LITERAL COLON type IGUAL a
Rule 45    assignacion_instruction -> LITERAL COLON type
Rule 46    assignacion_instruction -> LITERAL IGUAL a
Rule 47    assignacion_instruction -> LITERAL
Rule 48    type -> NUMBER
Rule 49    type -> STRING
Rule 50    type -> BOOLEAN
Rule 51    type -> ANY
Rule 52    type -> LITERAL
Rule 53    type -> NULL
Rule 54    assig_pro -> LITERAL IGUAL a
Rule 55    if_pro -> IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro
Rule 56    else_pro -> ELSE IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro
Rule 57    else_pro -> ELSE L_LLAVE instrucciones R_LLAVE
Rule 58    else_pro -> <empty>
Rule 59    while_pro -> WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE
Rule 60    for_pro -> FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE
Rule 61    for_pro -> FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE
Rule 62    inDec_pro -> assig_pro
Rule 63    inDec_pro -> sumadores
Rule 64    for_each_pro -> FOR L_PAREN for_each_dec R_PAREN L_LLAVE instrucciones R_LLAVE
Rule 65    for_each_dec -> LET LITERAL OF a
Rule 66    for_each_dec -> LET LITERAL COLON type OF a
Rule 67    console_pro -> CONSOLE PUNTO LOG L_PAREN expresion R_PAREN
Rule 68    expresion -> expresion COMA a
Rule 69    expresion -> a
Rule 70    a -> a OR b
Rule 71    a -> b
Rule 72    b -> b AND c
Rule 73    b -> c
Rule 74    c -> NOT d
Rule 75    c -> d
Rule 76    d -> d DISTINTO_QUE e
Rule 77    d -> d MENOR_QUE e
Rule 78    d -> d MENOR_IGUAL_QUE e
Rule 79    d -> d MAYOR_QUE e
Rule 80    d -> d MAYOR_IGUAL_QUE e
Rule 81    d -> d TRIPLE_IGUAL e
Rule 82    d -> e
Rule 83    e -> e MAS f
Rule 84    e -> e MENOS f
Rule 85    e -> f
Rule 86    f -> MENOS g
Rule 87    f -> MAS g
Rule 88    f -> g
Rule 89    g -> g TIMES h
Rule 90    g -> g DIVIDE h
Rule 91    g -> g MOD h
Rule 92    g -> g POTENCIA h
Rule 93    g -> h
Rule 94    h -> ENTERO
Rule 95    h -> DECIMAL
Rule 96    h -> CADENA
Rule 97    h -> LITERAL
Rule 98    h -> TRUE
Rule 99    h -> FALSE
Rule 100   h -> call_function_pro
Rule 101   h -> array_pro
Rule 102   h -> interface_assi
Rule 103   h -> L_PAREN a R_PAREN
Rule 104   h -> array_val_pro
Rule 105   h -> a PUNTO LITERAL
Rule 106   h -> a PUNTO nativeFun L_PAREN expresion R_PAREN
Rule 107   h -> a PUNTO nativeFun L_PAREN R_PAREN
Rule 108   array_val_pro -> LITERAL dimensions
Rule 109   dimensions -> dimensions L_CORCHETE a R_CORCHETE
Rule 110   dimensions -> L_CORCHETE a R_CORCHETE
Rule 111   sumadores -> LITERAL MAS MAS
Rule 112   sumadores -> LITERAL MENOS MENOS
Rule 113   interface_assi -> L_LLAVE atributos_assi R_LLAVE
Rule 114   atributos_assi -> atributos_assi COMA LITERAL COLON a
Rule 115   atributos_assi -> LITERAL COLON a
Rule 116   array_pro -> L_CORCHETE values R_CORCHETE
Rule 117   nativeFun -> TOSTRING
Rule 118   nativeFun -> TOFIXED
Rule 119   nativeFun -> TOEXPONENTIAL
Rule 120   nativeFun -> TOLOWERCASE
Rule 121   nativeFun -> TOUPPERCASE
Rule 122   nativeFun -> SPLIT
Rule 123   nativeFun -> CONCAT

Terminals, with rules where they appear

AND                  : 72
ANY                  : 51
BOOLEAN              : 50
BREAK                : 32
CADENA               : 96
COLON                : 29 38 44 45 66 114 115
COMA                 : 25 27 42 68 114
CONCAT               : 123
CONSOLE              : 67
CONTINUE             : 31
DECIMAL              : 95
DISTINTO_QUE         : 76
DIVIDE               : 90
ELSE                 : 56 57
ENTERO               : 94
FALSE                : 99
FOR                  : 60 61 64
FUNCTION             : 21 22
IF                   : 55 56
IGUAL                : 40 44 46 54
INTERFACE            : 35
LET                  : 41 65 66
LITERAL              : 21 22 23 24 29 30 35 38 39 40 44 45 46 47 52 54 65 66 97 105 108 111 112 114 115
LOG                  : 67
L_CORCHETE           : 109 110 116
L_LLAVE              : 21 22 35 55 56 57 59 60 61 64 113
L_PAREN              : 21 22 23 24 55 56 59 60 61 64 67 103 106 107
MAS                  : 83 87 111 111
MAYOR_IGUAL_QUE      : 80
MAYOR_QUE            : 79
MENOR_IGUAL_QUE      : 78
MENOR_QUE            : 77
MENOS                : 84 86 112 112
MOD                  : 91
NOT                  : 74
NULL                 : 53
NUMBER               : 48
OF                   : 65 66
OR                   : 70
POTENCIA             : 92
PUNTO                : 40 67 105 106 107
RETURN               : 33 34
R_CORCHETE           : 109 110 116
R_LLAVE              : 21 22 35 55 56 57 59 60 61 64 113
R_PAREN              : 21 22 23 24 55 56 59 60 61 64 67 103 106 107
SEMI_COLON           : 19 60 60 61 61
SPLIT                : 122
STRING               : 49
TIMES                : 89
TOEXPONENTIAL        : 119
TOFIXED              : 118
TOLOWERCASE          : 120
TOSTRING             : 117
TOUPPERCASE          : 121
TRIPLE_IGUAL         : 81
TRUE                 : 98
WHILE                : 59
error                : 

Nonterminals, with rules where they appear

a                    : 25 26 34 40 40 44 46 54 55 56 59 60 61 65 66 68 69 70 103 105 106 107 109 110 114 115
array_pro            : 101
array_val_pro        : 104
assig_pro            : 6 61 62
assignacion_instruction : 42 43
atributos_assi       : 113 114
b                    : 70 71 72
break_pro            : 14
c                    : 72 73
call_function_pro    : 17 100
console_pro          : 4
continue_pro         : 13
d                    : 74 75 76 77 78 79 80 81
declaracion_list     : 41 42
declaration_instruction : 5 60
dimensions           : 108 109
e                    : 76 77 78 79 80 81 82 83 84
else_pro             : 55 56
expresion            : 67 68 106
f                    : 83 84 85
for_each_dec         : 64
for_each_pro         : 11
for_pro              : 10
function_pro         : 16
g                    : 86 87 88 89 90 91 92
h                    : 89 90 91 92 93
if_pro               : 8
inDec_pro            : 60 61
init                 : 0
instruccion          : 2 3
instrucciones        : 1 2 21 22 55 56 57 59 60 61 64
interface_assi       : 102
interface_assign_pro : 7
interface_atributo   : 36
interface_atributos  : 35 36
interface_pro        : 12
nativeFun            : 106 107
parameter_pro        : 27 28
parameters_pro       : 21 27
return_pro           : 15
sc                   : 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 36
sumadores            : 18 63
type                 : 29 38 44 45 66
values               : 23 25 116
while_pro            : 9

Parsing method: LALR

state 0

    (0) S' -> . init
    (1) init -> . instrucciones
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . console_pro sc
    (5) instruccion -> . declaration_instruction sc
    (6) instruccion -> . assig_pro sc
    (7) instruccion -> . interface_assign_pro sc
    (8) instruccion -> . if_pro sc
    (9) instruccion -> . while_pro sc
    (10) instruccion -> . for_pro sc
    (11) instruccion -> . for_each_pro sc
    (12) instruccion -> . interface_pro sc
    (13) instruccion -> . continue_pro sc
    (14) instruccion -> . break_pro sc
    (15) instruccion -> . return_pro sc
    (16) instruccion -> . function_pro sc
    (17) instruccion -> . call_function_pro sc
    (18) instruccion -> . sumadores sc
    (67) console_pro -> . CONSOLE PUNTO LOG L_PAREN expresion R_PAREN
    (41) declaration_instruction -> . LET declaracion_list
    (54) assig_pro -> . LITERAL IGUAL a
    (40) interface_assign_pro -> . a PUNTO LITERAL IGUAL a
    (55) if_pro -> . IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro
    (59) while_pro -> . WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE
    (60) for_pro -> . FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (61) for_pro -> . FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (64) for_each_pro -> . FOR L_PAREN for_each_dec R_PAREN L_LLAVE instrucciones R_LLAVE
    (35) interface_pro -> . INTERFACE LITERAL L_LLAVE interface_atributos R_LLAVE
    (31) continue_pro -> . CONTINUE
    (32) break_pro -> . BREAK
    (33) return_pro -> . RETURN
    (34) return_pro -> . RETURN a
    (21) function_pro -> . FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (22) function_pro -> . FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE
    (23) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (24) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (111) sumadores -> . LITERAL MAS MAS
    (112) sumadores -> . LITERAL MENOS MENOS
    (70) a -> . a OR b
    (71) a -> . b
    (72) b -> . b AND c
    (73) b -> . c
    (74) c -> . NOT d
    (75) c -> . d
    (76) d -> . d DISTINTO_QUE e
    (77) d -> . d MENOR_QUE e
    (78) d -> . d MENOR_IGUAL_QUE e
    (79) d -> . d MAYOR_QUE e
    (80) d -> . d MAYOR_IGUAL_QUE e
    (81) d -> . d TRIPLE_IGUAL e
    (82) d -> . e
    (83) e -> . e MAS f
    (84) e -> . e MENOS f
    (85) e -> . f
    (86) f -> . MENOS g
    (87) f -> . MAS g
    (88) f -> . g
    (89) g -> . g TIMES h
    (90) g -> . g DIVIDE h
    (91) g -> . g MOD h
    (92) g -> . g POTENCIA h
    (93) g -> . h
    (94) h -> . ENTERO
    (95) h -> . DECIMAL
    (96) h -> . CADENA
    (97) h -> . LITERAL
    (98) h -> . TRUE
    (99) h -> . FALSE
    (100) h -> . call_function_pro
    (101) h -> . array_pro
    (102) h -> . interface_assi
    (103) h -> . L_PAREN a R_PAREN
    (104) h -> . array_val_pro
    (105) h -> . a PUNTO LITERAL
    (106) h -> . a PUNTO nativeFun L_PAREN expresion R_PAREN
    (107) h -> . a PUNTO nativeFun L_PAREN R_PAREN
    (116) array_pro -> . L_CORCHETE values R_CORCHETE
    (113) interface_assi -> . L_LLAVE atributos_assi R_LLAVE
    (108) array_val_pro -> . LITERAL dimensions

    CONSOLE         shift and go to state 19
    LET             shift and go to state 21
    LITERAL         shift and go to state 22
    IF              shift and go to state 24
    WHILE           shift and go to state 26
    FOR             shift and go to state 27
    INTERFACE       shift and go to state 28
    CONTINUE        shift and go to state 29
    BREAK           shift and go to state 30
    RETURN          shift and go to state 31
    FUNCTION        shift and go to state 32
    NOT             shift and go to state 37
    MENOS           shift and go to state 34
    MAS             shift and go to state 33
    ENTERO          shift and go to state 43
    DECIMAL         shift and go to state 44
    CADENA          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    L_PAREN         shift and go to state 20
    L_CORCHETE      shift and go to state 51
    L_LLAVE         shift and go to state 25

    init                           shift and go to state 1
    instrucciones                  shift and go to state 2
    instruccion                    shift and go to state 3
    console_pro                    shift and go to state 4
    declaration_instruction        shift and go to state 5
    assig_pro                      shift and go to state 6
    interface_assign_pro           shift and go to state 7
    if_pro                         shift and go to state 8
    while_pro                      shift and go to state 9
    for_pro                        shift and go to state 10
    for_each_pro                   shift and go to state 11
    interface_pro                  shift and go to state 12
    continue_pro                   shift and go to state 13
    break_pro                      shift and go to state 14
    return_pro                     shift and go to state 15
    function_pro                   shift and go to state 16
    call_function_pro              shift and go to state 17
    sumadores                      shift and go to state 18
    a                              shift and go to state 23
    b                              shift and go to state 35
    c                              shift and go to state 36
    d                              shift and go to state 38
    e                              shift and go to state 39
    f                              shift and go to state 40
    g                              shift and go to state 41
    h                              shift and go to state 42
    array_pro                      shift and go to state 48
    interface_assi                 shift and go to state 49
    array_val_pro                  shift and go to state 50

state 1

    (0) S' -> init .



state 2

    (1) init -> instrucciones .
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . console_pro sc
    (5) instruccion -> . declaration_instruction sc
    (6) instruccion -> . assig_pro sc
    (7) instruccion -> . interface_assign_pro sc
    (8) instruccion -> . if_pro sc
    (9) instruccion -> . while_pro sc
    (10) instruccion -> . for_pro sc
    (11) instruccion -> . for_each_pro sc
    (12) instruccion -> . interface_pro sc
    (13) instruccion -> . continue_pro sc
    (14) instruccion -> . break_pro sc
    (15) instruccion -> . return_pro sc
    (16) instruccion -> . function_pro sc
    (17) instruccion -> . call_function_pro sc
    (18) instruccion -> . sumadores sc
    (67) console_pro -> . CONSOLE PUNTO LOG L_PAREN expresion R_PAREN
    (41) declaration_instruction -> . LET declaracion_list
    (54) assig_pro -> . LITERAL IGUAL a
    (40) interface_assign_pro -> . a PUNTO LITERAL IGUAL a
    (55) if_pro -> . IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro
    (59) while_pro -> . WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE
    (60) for_pro -> . FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (61) for_pro -> . FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (64) for_each_pro -> . FOR L_PAREN for_each_dec R_PAREN L_LLAVE instrucciones R_LLAVE
    (35) interface_pro -> . INTERFACE LITERAL L_LLAVE interface_atributos R_LLAVE
    (31) continue_pro -> . CONTINUE
    (32) break_pro -> . BREAK
    (33) return_pro -> . RETURN
    (34) return_pro -> . RETURN a
    (21) function_pro -> . FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (22) function_pro -> . FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE
    (23) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (24) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (111) sumadores -> . LITERAL MAS MAS
    (112) sumadores -> . LITERAL MENOS MENOS
    (70) a -> . a OR b
    (71) a -> . b
    (72) b -> . b AND c
    (73) b -> . c
    (74) c -> . NOT d
    (75) c -> . d
    (76) d -> . d DISTINTO_QUE e
    (77) d -> . d MENOR_QUE e
    (78) d -> . d MENOR_IGUAL_QUE e
    (79) d -> . d MAYOR_QUE e
    (80) d -> . d MAYOR_IGUAL_QUE e
    (81) d -> . d TRIPLE_IGUAL e
    (82) d -> . e
    (83) e -> . e MAS f
    (84) e -> . e MENOS f
    (85) e -> . f
    (86) f -> . MENOS g
    (87) f -> . MAS g
    (88) f -> . g
    (89) g -> . g TIMES h
    (90) g -> . g DIVIDE h
    (91) g -> . g MOD h
    (92) g -> . g POTENCIA h
    (93) g -> . h
    (94) h -> . ENTERO
    (95) h -> . DECIMAL
    (96) h -> . CADENA
    (97) h -> . LITERAL
    (98) h -> . TRUE
    (99) h -> . FALSE
    (100) h -> . call_function_pro
    (101) h -> . array_pro
    (102) h -> . interface_assi
    (103) h -> . L_PAREN a R_PAREN
    (104) h -> . array_val_pro
    (105) h -> . a PUNTO LITERAL
    (106) h -> . a PUNTO nativeFun L_PAREN expresion R_PAREN
    (107) h -> . a PUNTO nativeFun L_PAREN R_PAREN
    (116) array_pro -> . L_CORCHETE values R_CORCHETE
    (113) interface_assi -> . L_LLAVE atributos_assi R_LLAVE
    (108) array_val_pro -> . LITERAL dimensions

    $end            reduce using rule 1 (init -> instrucciones .)
    CONSOLE         shift and go to state 19
    LET             shift and go to state 21
    LITERAL         shift and go to state 22
    IF              shift and go to state 24
    WHILE           shift and go to state 26
    FOR             shift and go to state 27
    INTERFACE       shift and go to state 28
    CONTINUE        shift and go to state 29
    BREAK           shift and go to state 30
    RETURN          shift and go to state 31
    FUNCTION        shift and go to state 32
    NOT             shift and go to state 37
    MENOS           shift and go to state 34
    MAS             shift and go to state 33
    ENTERO          shift and go to state 43
    DECIMAL         shift and go to state 44
    CADENA          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    L_PAREN         shift and go to state 20
    L_CORCHETE      shift and go to state 51
    L_LLAVE         shift and go to state 25

    instruccion                    shift and go to state 52
    console_pro                    shift and go to state 4
    declaration_instruction        shift and go to state 5
    assig_pro                      shift and go to state 6
    interface_assign_pro           shift and go to state 7
    if_pro                         shift and go to state 8
    while_pro                      shift and go to state 9
    for_pro                        shift and go to state 10
    for_each_pro                   shift and go to state 11
    interface_pro                  shift and go to state 12
    continue_pro                   shift and go to state 13
    break_pro                      shift and go to state 14
    return_pro                     shift and go to state 15
    function_pro                   shift and go to state 16
    call_function_pro              shift and go to state 17
    sumadores                      shift and go to state 18
    a                              shift and go to state 23
    b                              shift and go to state 35
    c                              shift and go to state 36
    d                              shift and go to state 38
    e                              shift and go to state 39
    f                              shift and go to state 40
    g                              shift and go to state 41
    h                              shift and go to state 42
    array_pro                      shift and go to state 48
    interface_assi                 shift and go to state 49
    array_val_pro                  shift and go to state 50

state 3

    (3) instrucciones -> instruccion .

    CONSOLE         reduce using rule 3 (instrucciones -> instruccion .)
    LET             reduce using rule 3 (instrucciones -> instruccion .)
    LITERAL         reduce using rule 3 (instrucciones -> instruccion .)
    IF              reduce using rule 3 (instrucciones -> instruccion .)
    WHILE           reduce using rule 3 (instrucciones -> instruccion .)
    FOR             reduce using rule 3 (instrucciones -> instruccion .)
    INTERFACE       reduce using rule 3 (instrucciones -> instruccion .)
    CONTINUE        reduce using rule 3 (instrucciones -> instruccion .)
    BREAK           reduce using rule 3 (instrucciones -> instruccion .)
    RETURN          reduce using rule 3 (instrucciones -> instruccion .)
    FUNCTION        reduce using rule 3 (instrucciones -> instruccion .)
    NOT             reduce using rule 3 (instrucciones -> instruccion .)
    MENOS           reduce using rule 3 (instrucciones -> instruccion .)
    MAS             reduce using rule 3 (instrucciones -> instruccion .)
    ENTERO          reduce using rule 3 (instrucciones -> instruccion .)
    DECIMAL         reduce using rule 3 (instrucciones -> instruccion .)
    CADENA          reduce using rule 3 (instrucciones -> instruccion .)
    TRUE            reduce using rule 3 (instrucciones -> instruccion .)
    FALSE           reduce using rule 3 (instrucciones -> instruccion .)
    L_PAREN         reduce using rule 3 (instrucciones -> instruccion .)
    L_CORCHETE      reduce using rule 3 (instrucciones -> instruccion .)
    L_LLAVE         reduce using rule 3 (instrucciones -> instruccion .)
    $end            reduce using rule 3 (instrucciones -> instruccion .)
    R_LLAVE         reduce using rule 3 (instrucciones -> instruccion .)


state 4

    (4) instruccion -> console_pro . sc
    (19) sc -> . SEMI_COLON
    (20) sc -> .

    SEMI_COLON      shift and go to state 54
    CONSOLE         reduce using rule 20 (sc -> .)
    LET             reduce using rule 20 (sc -> .)
    LITERAL         reduce using rule 20 (sc -> .)
    IF              reduce using rule 20 (sc -> .)
    WHILE           reduce using rule 20 (sc -> .)
    FOR             reduce using rule 20 (sc -> .)
    INTERFACE       reduce using rule 20 (sc -> .)
    CONTINUE        reduce using rule 20 (sc -> .)
    BREAK           reduce using rule 20 (sc -> .)
    RETURN          reduce using rule 20 (sc -> .)
    FUNCTION        reduce using rule 20 (sc -> .)
    NOT             reduce using rule 20 (sc -> .)
    MENOS           reduce using rule 20 (sc -> .)
    MAS             reduce using rule 20 (sc -> .)
    ENTERO          reduce using rule 20 (sc -> .)
    DECIMAL         reduce using rule 20 (sc -> .)
    CADENA          reduce using rule 20 (sc -> .)
    TRUE            reduce using rule 20 (sc -> .)
    FALSE           reduce using rule 20 (sc -> .)
    L_PAREN         reduce using rule 20 (sc -> .)
    L_CORCHETE      reduce using rule 20 (sc -> .)
    L_LLAVE         reduce using rule 20 (sc -> .)
    $end            reduce using rule 20 (sc -> .)
    R_LLAVE         reduce using rule 20 (sc -> .)

    sc                             shift and go to state 53

state 5

    (5) instruccion -> declaration_instruction . sc
    (19) sc -> . SEMI_COLON
    (20) sc -> .

    SEMI_COLON      shift and go to state 54
    CONSOLE         reduce using rule 20 (sc -> .)
    LET             reduce using rule 20 (sc -> .)
    LITERAL         reduce using rule 20 (sc -> .)
    IF              reduce using rule 20 (sc -> .)
    WHILE           reduce using rule 20 (sc -> .)
    FOR             reduce using rule 20 (sc -> .)
    INTERFACE       reduce using rule 20 (sc -> .)
    CONTINUE        reduce using rule 20 (sc -> .)
    BREAK           reduce using rule 20 (sc -> .)
    RETURN          reduce using rule 20 (sc -> .)
    FUNCTION        reduce using rule 20 (sc -> .)
    NOT             reduce using rule 20 (sc -> .)
    MENOS           reduce using rule 20 (sc -> .)
    MAS             reduce using rule 20 (sc -> .)
    ENTERO          reduce using rule 20 (sc -> .)
    DECIMAL         reduce using rule 20 (sc -> .)
    CADENA          reduce using rule 20 (sc -> .)
    TRUE            reduce using rule 20 (sc -> .)
    FALSE           reduce using rule 20 (sc -> .)
    L_PAREN         reduce using rule 20 (sc -> .)
    L_CORCHETE      reduce using rule 20 (sc -> .)
    L_LLAVE         reduce using rule 20 (sc -> .)
    $end            reduce using rule 20 (sc -> .)
    R_LLAVE         reduce using rule 20 (sc -> .)

    sc                             shift and go to state 55

state 6

    (6) instruccion -> assig_pro . sc
    (19) sc -> . SEMI_COLON
    (20) sc -> .

    SEMI_COLON      shift and go to state 54
    CONSOLE         reduce using rule 20 (sc -> .)
    LET             reduce using rule 20 (sc -> .)
    LITERAL         reduce using rule 20 (sc -> .)
    IF              reduce using rule 20 (sc -> .)
    WHILE           reduce using rule 20 (sc -> .)
    FOR             reduce using rule 20 (sc -> .)
    INTERFACE       reduce using rule 20 (sc -> .)
    CONTINUE        reduce using rule 20 (sc -> .)
    BREAK           reduce using rule 20 (sc -> .)
    RETURN          reduce using rule 20 (sc -> .)
    FUNCTION        reduce using rule 20 (sc -> .)
    NOT             reduce using rule 20 (sc -> .)
    MENOS           reduce using rule 20 (sc -> .)
    MAS             reduce using rule 20 (sc -> .)
    ENTERO          reduce using rule 20 (sc -> .)
    DECIMAL         reduce using rule 20 (sc -> .)
    CADENA          reduce using rule 20 (sc -> .)
    TRUE            reduce using rule 20 (sc -> .)
    FALSE           reduce using rule 20 (sc -> .)
    L_PAREN         reduce using rule 20 (sc -> .)
    L_CORCHETE      reduce using rule 20 (sc -> .)
    L_LLAVE         reduce using rule 20 (sc -> .)
    $end            reduce using rule 20 (sc -> .)
    R_LLAVE         reduce using rule 20 (sc -> .)

    sc                             shift and go to state 56

state 7

    (7) instruccion -> interface_assign_pro . sc
    (19) sc -> . SEMI_COLON
    (20) sc -> .

    SEMI_COLON      shift and go to state 54
    CONSOLE         reduce using rule 20 (sc -> .)
    LET             reduce using rule 20 (sc -> .)
    LITERAL         reduce using rule 20 (sc -> .)
    IF              reduce using rule 20 (sc -> .)
    WHILE           reduce using rule 20 (sc -> .)
    FOR             reduce using rule 20 (sc -> .)
    INTERFACE       reduce using rule 20 (sc -> .)
    CONTINUE        reduce using rule 20 (sc -> .)
    BREAK           reduce using rule 20 (sc -> .)
    RETURN          reduce using rule 20 (sc -> .)
    FUNCTION        reduce using rule 20 (sc -> .)
    NOT             reduce using rule 20 (sc -> .)
    MENOS           reduce using rule 20 (sc -> .)
    MAS             reduce using rule 20 (sc -> .)
    ENTERO          reduce using rule 20 (sc -> .)
    DECIMAL         reduce using rule 20 (sc -> .)
    CADENA          reduce using rule 20 (sc -> .)
    TRUE            reduce using rule 20 (sc -> .)
    FALSE           reduce using rule 20 (sc -> .)
    L_PAREN         reduce using rule 20 (sc -> .)
    L_CORCHETE      reduce using rule 20 (sc -> .)
    L_LLAVE         reduce using rule 20 (sc -> .)
    $end            reduce using rule 20 (sc -> .)
    R_LLAVE         reduce using rule 20 (sc -> .)

    sc                             shift and go to state 57

state 8

    (8) instruccion -> if_pro . sc
    (19) sc -> . SEMI_COLON
    (20) sc -> .

    SEMI_COLON      shift and go to state 54
    CONSOLE         reduce using rule 20 (sc -> .)
    LET             reduce using rule 20 (sc -> .)
    LITERAL         reduce using rule 20 (sc -> .)
    IF              reduce using rule 20 (sc -> .)
    WHILE           reduce using rule 20 (sc -> .)
    FOR             reduce using rule 20 (sc -> .)
    INTERFACE       reduce using rule 20 (sc -> .)
    CONTINUE        reduce using rule 20 (sc -> .)
    BREAK           reduce using rule 20 (sc -> .)
    RETURN          reduce using rule 20 (sc -> .)
    FUNCTION        reduce using rule 20 (sc -> .)
    NOT             reduce using rule 20 (sc -> .)
    MENOS           reduce using rule 20 (sc -> .)
    MAS             reduce using rule 20 (sc -> .)
    ENTERO          reduce using rule 20 (sc -> .)
    DECIMAL         reduce using rule 20 (sc -> .)
    CADENA          reduce using rule 20 (sc -> .)
    TRUE            reduce using rule 20 (sc -> .)
    FALSE           reduce using rule 20 (sc -> .)
    L_PAREN         reduce using rule 20 (sc -> .)
    L_CORCHETE      reduce using rule 20 (sc -> .)
    L_LLAVE         reduce using rule 20 (sc -> .)
    $end            reduce using rule 20 (sc -> .)
    R_LLAVE         reduce using rule 20 (sc -> .)

    sc                             shift and go to state 58

state 9

    (9) instruccion -> while_pro . sc
    (19) sc -> . SEMI_COLON
    (20) sc -> .

    SEMI_COLON      shift and go to state 54
    CONSOLE         reduce using rule 20 (sc -> .)
    LET             reduce using rule 20 (sc -> .)
    LITERAL         reduce using rule 20 (sc -> .)
    IF              reduce using rule 20 (sc -> .)
    WHILE           reduce using rule 20 (sc -> .)
    FOR             reduce using rule 20 (sc -> .)
    INTERFACE       reduce using rule 20 (sc -> .)
    CONTINUE        reduce using rule 20 (sc -> .)
    BREAK           reduce using rule 20 (sc -> .)
    RETURN          reduce using rule 20 (sc -> .)
    FUNCTION        reduce using rule 20 (sc -> .)
    NOT             reduce using rule 20 (sc -> .)
    MENOS           reduce using rule 20 (sc -> .)
    MAS             reduce using rule 20 (sc -> .)
    ENTERO          reduce using rule 20 (sc -> .)
    DECIMAL         reduce using rule 20 (sc -> .)
    CADENA          reduce using rule 20 (sc -> .)
    TRUE            reduce using rule 20 (sc -> .)
    FALSE           reduce using rule 20 (sc -> .)
    L_PAREN         reduce using rule 20 (sc -> .)
    L_CORCHETE      reduce using rule 20 (sc -> .)
    L_LLAVE         reduce using rule 20 (sc -> .)
    $end            reduce using rule 20 (sc -> .)
    R_LLAVE         reduce using rule 20 (sc -> .)

    sc                             shift and go to state 59

state 10

    (10) instruccion -> for_pro . sc
    (19) sc -> . SEMI_COLON
    (20) sc -> .

    SEMI_COLON      shift and go to state 54
    CONSOLE         reduce using rule 20 (sc -> .)
    LET             reduce using rule 20 (sc -> .)
    LITERAL         reduce using rule 20 (sc -> .)
    IF              reduce using rule 20 (sc -> .)
    WHILE           reduce using rule 20 (sc -> .)
    FOR             reduce using rule 20 (sc -> .)
    INTERFACE       reduce using rule 20 (sc -> .)
    CONTINUE        reduce using rule 20 (sc -> .)
    BREAK           reduce using rule 20 (sc -> .)
    RETURN          reduce using rule 20 (sc -> .)
    FUNCTION        reduce using rule 20 (sc -> .)
    NOT             reduce using rule 20 (sc -> .)
    MENOS           reduce using rule 20 (sc -> .)
    MAS             reduce using rule 20 (sc -> .)
    ENTERO          reduce using rule 20 (sc -> .)
    DECIMAL         reduce using rule 20 (sc -> .)
    CADENA          reduce using rule 20 (sc -> .)
    TRUE            reduce using rule 20 (sc -> .)
    FALSE           reduce using rule 20 (sc -> .)
    L_PAREN         reduce using rule 20 (sc -> .)
    L_CORCHETE      reduce using rule 20 (sc -> .)
    L_LLAVE         reduce using rule 20 (sc -> .)
    $end            reduce using rule 20 (sc -> .)
    R_LLAVE         reduce using rule 20 (sc -> .)

    sc                             shift and go to state 60

state 11

    (11) instruccion -> for_each_pro . sc
    (19) sc -> . SEMI_COLON
    (20) sc -> .

    SEMI_COLON      shift and go to state 54
    CONSOLE         reduce using rule 20 (sc -> .)
    LET             reduce using rule 20 (sc -> .)
    LITERAL         reduce using rule 20 (sc -> .)
    IF              reduce using rule 20 (sc -> .)
    WHILE           reduce using rule 20 (sc -> .)
    FOR             reduce using rule 20 (sc -> .)
    INTERFACE       reduce using rule 20 (sc -> .)
    CONTINUE        reduce using rule 20 (sc -> .)
    BREAK           reduce using rule 20 (sc -> .)
    RETURN          reduce using rule 20 (sc -> .)
    FUNCTION        reduce using rule 20 (sc -> .)
    NOT             reduce using rule 20 (sc -> .)
    MENOS           reduce using rule 20 (sc -> .)
    MAS             reduce using rule 20 (sc -> .)
    ENTERO          reduce using rule 20 (sc -> .)
    DECIMAL         reduce using rule 20 (sc -> .)
    CADENA          reduce using rule 20 (sc -> .)
    TRUE            reduce using rule 20 (sc -> .)
    FALSE           reduce using rule 20 (sc -> .)
    L_PAREN         reduce using rule 20 (sc -> .)
    L_CORCHETE      reduce using rule 20 (sc -> .)
    L_LLAVE         reduce using rule 20 (sc -> .)
    $end            reduce using rule 20 (sc -> .)
    R_LLAVE         reduce using rule 20 (sc -> .)

    sc                             shift and go to state 61

state 12

    (12) instruccion -> interface_pro . sc
    (19) sc -> . SEMI_COLON
    (20) sc -> .

    SEMI_COLON      shift and go to state 54
    CONSOLE         reduce using rule 20 (sc -> .)
    LET             reduce using rule 20 (sc -> .)
    LITERAL         reduce using rule 20 (sc -> .)
    IF              reduce using rule 20 (sc -> .)
    WHILE           reduce using rule 20 (sc -> .)
    FOR             reduce using rule 20 (sc -> .)
    INTERFACE       reduce using rule 20 (sc -> .)
    CONTINUE        reduce using rule 20 (sc -> .)
    BREAK           reduce using rule 20 (sc -> .)
    RETURN          reduce using rule 20 (sc -> .)
    FUNCTION        reduce using rule 20 (sc -> .)
    NOT             reduce using rule 20 (sc -> .)
    MENOS           reduce using rule 20 (sc -> .)
    MAS             reduce using rule 20 (sc -> .)
    ENTERO          reduce using rule 20 (sc -> .)
    DECIMAL         reduce using rule 20 (sc -> .)
    CADENA          reduce using rule 20 (sc -> .)
    TRUE            reduce using rule 20 (sc -> .)
    FALSE           reduce using rule 20 (sc -> .)
    L_PAREN         reduce using rule 20 (sc -> .)
    L_CORCHETE      reduce using rule 20 (sc -> .)
    L_LLAVE         reduce using rule 20 (sc -> .)
    $end            reduce using rule 20 (sc -> .)
    R_LLAVE         reduce using rule 20 (sc -> .)

    sc                             shift and go to state 62

state 13

    (13) instruccion -> continue_pro . sc
    (19) sc -> . SEMI_COLON
    (20) sc -> .

    SEMI_COLON      shift and go to state 54
    CONSOLE         reduce using rule 20 (sc -> .)
    LET             reduce using rule 20 (sc -> .)
    LITERAL         reduce using rule 20 (sc -> .)
    IF              reduce using rule 20 (sc -> .)
    WHILE           reduce using rule 20 (sc -> .)
    FOR             reduce using rule 20 (sc -> .)
    INTERFACE       reduce using rule 20 (sc -> .)
    CONTINUE        reduce using rule 20 (sc -> .)
    BREAK           reduce using rule 20 (sc -> .)
    RETURN          reduce using rule 20 (sc -> .)
    FUNCTION        reduce using rule 20 (sc -> .)
    NOT             reduce using rule 20 (sc -> .)
    MENOS           reduce using rule 20 (sc -> .)
    MAS             reduce using rule 20 (sc -> .)
    ENTERO          reduce using rule 20 (sc -> .)
    DECIMAL         reduce using rule 20 (sc -> .)
    CADENA          reduce using rule 20 (sc -> .)
    TRUE            reduce using rule 20 (sc -> .)
    FALSE           reduce using rule 20 (sc -> .)
    L_PAREN         reduce using rule 20 (sc -> .)
    L_CORCHETE      reduce using rule 20 (sc -> .)
    L_LLAVE         reduce using rule 20 (sc -> .)
    $end            reduce using rule 20 (sc -> .)
    R_LLAVE         reduce using rule 20 (sc -> .)

    sc                             shift and go to state 63

state 14

    (14) instruccion -> break_pro . sc
    (19) sc -> . SEMI_COLON
    (20) sc -> .

    SEMI_COLON      shift and go to state 54
    CONSOLE         reduce using rule 20 (sc -> .)
    LET             reduce using rule 20 (sc -> .)
    LITERAL         reduce using rule 20 (sc -> .)
    IF              reduce using rule 20 (sc -> .)
    WHILE           reduce using rule 20 (sc -> .)
    FOR             reduce using rule 20 (sc -> .)
    INTERFACE       reduce using rule 20 (sc -> .)
    CONTINUE        reduce using rule 20 (sc -> .)
    BREAK           reduce using rule 20 (sc -> .)
    RETURN          reduce using rule 20 (sc -> .)
    FUNCTION        reduce using rule 20 (sc -> .)
    NOT             reduce using rule 20 (sc -> .)
    MENOS           reduce using rule 20 (sc -> .)
    MAS             reduce using rule 20 (sc -> .)
    ENTERO          reduce using rule 20 (sc -> .)
    DECIMAL         reduce using rule 20 (sc -> .)
    CADENA          reduce using rule 20 (sc -> .)
    TRUE            reduce using rule 20 (sc -> .)
    FALSE           reduce using rule 20 (sc -> .)
    L_PAREN         reduce using rule 20 (sc -> .)
    L_CORCHETE      reduce using rule 20 (sc -> .)
    L_LLAVE         reduce using rule 20 (sc -> .)
    $end            reduce using rule 20 (sc -> .)
    R_LLAVE         reduce using rule 20 (sc -> .)

    sc                             shift and go to state 64

state 15

    (15) instruccion -> return_pro . sc
    (19) sc -> . SEMI_COLON
    (20) sc -> .

    SEMI_COLON      shift and go to state 54
    CONSOLE         reduce using rule 20 (sc -> .)
    LET             reduce using rule 20 (sc -> .)
    LITERAL         reduce using rule 20 (sc -> .)
    IF              reduce using rule 20 (sc -> .)
    WHILE           reduce using rule 20 (sc -> .)
    FOR             reduce using rule 20 (sc -> .)
    INTERFACE       reduce using rule 20 (sc -> .)
    CONTINUE        reduce using rule 20 (sc -> .)
    BREAK           reduce using rule 20 (sc -> .)
    RETURN          reduce using rule 20 (sc -> .)
    FUNCTION        reduce using rule 20 (sc -> .)
    NOT             reduce using rule 20 (sc -> .)
    MENOS           reduce using rule 20 (sc -> .)
    MAS             reduce using rule 20 (sc -> .)
    ENTERO          reduce using rule 20 (sc -> .)
    DECIMAL         reduce using rule 20 (sc -> .)
    CADENA          reduce using rule 20 (sc -> .)
    TRUE            reduce using rule 20 (sc -> .)
    FALSE           reduce using rule 20 (sc -> .)
    L_PAREN         reduce using rule 20 (sc -> .)
    L_CORCHETE      reduce using rule 20 (sc -> .)
    L_LLAVE         reduce using rule 20 (sc -> .)
    $end            reduce using rule 20 (sc -> .)
    R_LLAVE         reduce using rule 20 (sc -> .)

    sc                             shift and go to state 65

state 16

    (16) instruccion -> function_pro . sc
    (19) sc -> . SEMI_COLON
    (20) sc -> .

    SEMI_COLON      shift and go to state 54
    CONSOLE         reduce using rule 20 (sc -> .)
    LET             reduce using rule 20 (sc -> .)
    LITERAL         reduce using rule 20 (sc -> .)
    IF              reduce using rule 20 (sc -> .)
    WHILE           reduce using rule 20 (sc -> .)
    FOR             reduce using rule 20 (sc -> .)
    INTERFACE       reduce using rule 20 (sc -> .)
    CONTINUE        reduce using rule 20 (sc -> .)
    BREAK           reduce using rule 20 (sc -> .)
    RETURN          reduce using rule 20 (sc -> .)
    FUNCTION        reduce using rule 20 (sc -> .)
    NOT             reduce using rule 20 (sc -> .)
    MENOS           reduce using rule 20 (sc -> .)
    MAS             reduce using rule 20 (sc -> .)
    ENTERO          reduce using rule 20 (sc -> .)
    DECIMAL         reduce using rule 20 (sc -> .)
    CADENA          reduce using rule 20 (sc -> .)
    TRUE            reduce using rule 20 (sc -> .)
    FALSE           reduce using rule 20 (sc -> .)
    L_PAREN         reduce using rule 20 (sc -> .)
    L_CORCHETE      reduce using rule 20 (sc -> .)
    L_LLAVE         reduce using rule 20 (sc -> .)
    $end            reduce using rule 20 (sc -> .)
    R_LLAVE         reduce using rule 20 (sc -> .)

    sc                             shift and go to state 66

state 17

    (17) instruccion -> call_function_pro . sc
    (100) h -> call_function_pro .
    (19) sc -> . SEMI_COLON
    (20) sc -> .

  ! reduce/reduce conflict for MENOS resolved using rule 20 (sc -> .)
  ! reduce/reduce conflict for MAS resolved using rule 20 (sc -> .)
    TIMES           reduce using rule 100 (h -> call_function_pro .)
    DIVIDE          reduce using rule 100 (h -> call_function_pro .)
    MOD             reduce using rule 100 (h -> call_function_pro .)
    POTENCIA        reduce using rule 100 (h -> call_function_pro .)
    DISTINTO_QUE    reduce using rule 100 (h -> call_function_pro .)
    MENOR_QUE       reduce using rule 100 (h -> call_function_pro .)
    MENOR_IGUAL_QUE reduce using rule 100 (h -> call_function_pro .)
    MAYOR_QUE       reduce using rule 100 (h -> call_function_pro .)
    MAYOR_IGUAL_QUE reduce using rule 100 (h -> call_function_pro .)
    TRIPLE_IGUAL    reduce using rule 100 (h -> call_function_pro .)
    AND             reduce using rule 100 (h -> call_function_pro .)
    PUNTO           reduce using rule 100 (h -> call_function_pro .)
    OR              reduce using rule 100 (h -> call_function_pro .)
    SEMI_COLON      shift and go to state 54
    CONSOLE         reduce using rule 20 (sc -> .)
    LET             reduce using rule 20 (sc -> .)
    LITERAL         reduce using rule 20 (sc -> .)
    IF              reduce using rule 20 (sc -> .)
    WHILE           reduce using rule 20 (sc -> .)
    FOR             reduce using rule 20 (sc -> .)
    INTERFACE       reduce using rule 20 (sc -> .)
    CONTINUE        reduce using rule 20 (sc -> .)
    BREAK           reduce using rule 20 (sc -> .)
    RETURN          reduce using rule 20 (sc -> .)
    FUNCTION        reduce using rule 20 (sc -> .)
    NOT             reduce using rule 20 (sc -> .)
    MENOS           reduce using rule 20 (sc -> .)
    MAS             reduce using rule 20 (sc -> .)
    ENTERO          reduce using rule 20 (sc -> .)
    DECIMAL         reduce using rule 20 (sc -> .)
    CADENA          reduce using rule 20 (sc -> .)
    TRUE            reduce using rule 20 (sc -> .)
    FALSE           reduce using rule 20 (sc -> .)
    L_PAREN         reduce using rule 20 (sc -> .)
    L_CORCHETE      reduce using rule 20 (sc -> .)
    L_LLAVE         reduce using rule 20 (sc -> .)
    $end            reduce using rule 20 (sc -> .)
    R_LLAVE         reduce using rule 20 (sc -> .)

  ! MAS             [ reduce using rule 100 (h -> call_function_pro .) ]
  ! MENOS           [ reduce using rule 100 (h -> call_function_pro .) ]

    sc                             shift and go to state 67

state 18

    (18) instruccion -> sumadores . sc
    (19) sc -> . SEMI_COLON
    (20) sc -> .

    SEMI_COLON      shift and go to state 54
    CONSOLE         reduce using rule 20 (sc -> .)
    LET             reduce using rule 20 (sc -> .)
    LITERAL         reduce using rule 20 (sc -> .)
    IF              reduce using rule 20 (sc -> .)
    WHILE           reduce using rule 20 (sc -> .)
    FOR             reduce using rule 20 (sc -> .)
    INTERFACE       reduce using rule 20 (sc -> .)
    CONTINUE        reduce using rule 20 (sc -> .)
    BREAK           reduce using rule 20 (sc -> .)
    RETURN          reduce using rule 20 (sc -> .)
    FUNCTION        reduce using rule 20 (sc -> .)
    NOT             reduce using rule 20 (sc -> .)
    MENOS           reduce using rule 20 (sc -> .)
    MAS             reduce using rule 20 (sc -> .)
    ENTERO          reduce using rule 20 (sc -> .)
    DECIMAL         reduce using rule 20 (sc -> .)
    CADENA          reduce using rule 20 (sc -> .)
    TRUE            reduce using rule 20 (sc -> .)
    FALSE           reduce using rule 20 (sc -> .)
    L_PAREN         reduce using rule 20 (sc -> .)
    L_CORCHETE      reduce using rule 20 (sc -> .)
    L_LLAVE         reduce using rule 20 (sc -> .)
    $end            reduce using rule 20 (sc -> .)
    R_LLAVE         reduce using rule 20 (sc -> .)

    sc                             shift and go to state 68

state 19

    (67) console_pro -> CONSOLE . PUNTO LOG L_PAREN expresion R_PAREN

    PUNTO           shift and go to state 69


state 20

    (103) h -> L_PAREN . a R_PAREN
    (70) a -> . a OR b
    (71) a -> . b
    (72) b -> . b AND c
    (73) b -> . c
    (74) c -> . NOT d
    (75) c -> . d
    (76) d -> . d DISTINTO_QUE e
    (77) d -> . d MENOR_QUE e
    (78) d -> . d MENOR_IGUAL_QUE e
    (79) d -> . d MAYOR_QUE e
    (80) d -> . d MAYOR_IGUAL_QUE e
    (81) d -> . d TRIPLE_IGUAL e
    (82) d -> . e
    (83) e -> . e MAS f
    (84) e -> . e MENOS f
    (85) e -> . f
    (86) f -> . MENOS g
    (87) f -> . MAS g
    (88) f -> . g
    (89) g -> . g TIMES h
    (90) g -> . g DIVIDE h
    (91) g -> . g MOD h
    (92) g -> . g POTENCIA h
    (93) g -> . h
    (94) h -> . ENTERO
    (95) h -> . DECIMAL
    (96) h -> . CADENA
    (97) h -> . LITERAL
    (98) h -> . TRUE
    (99) h -> . FALSE
    (100) h -> . call_function_pro
    (101) h -> . array_pro
    (102) h -> . interface_assi
    (103) h -> . L_PAREN a R_PAREN
    (104) h -> . array_val_pro
    (105) h -> . a PUNTO LITERAL
    (106) h -> . a PUNTO nativeFun L_PAREN expresion R_PAREN
    (107) h -> . a PUNTO nativeFun L_PAREN R_PAREN
    (23) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (24) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (116) array_pro -> . L_CORCHETE values R_CORCHETE
    (113) interface_assi -> . L_LLAVE atributos_assi R_LLAVE
    (108) array_val_pro -> . LITERAL dimensions

    NOT             shift and go to state 37
    MENOS           shift and go to state 34
    MAS             shift and go to state 33
    ENTERO          shift and go to state 43
    DECIMAL         shift and go to state 44
    CADENA          shift and go to state 45
    LITERAL         shift and go to state 71
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    L_PAREN         shift and go to state 20
    L_CORCHETE      shift and go to state 51
    L_LLAVE         shift and go to state 25

    a                              shift and go to state 70
    b                              shift and go to state 35
    c                              shift and go to state 36
    d                              shift and go to state 38
    e                              shift and go to state 39
    f                              shift and go to state 40
    g                              shift and go to state 41
    h                              shift and go to state 42
    call_function_pro              shift and go to state 72
    array_pro                      shift and go to state 48
    interface_assi                 shift and go to state 49
    array_val_pro                  shift and go to state 50

state 21

    (41) declaration_instruction -> LET . declaracion_list
    (42) declaracion_list -> . declaracion_list COMA assignacion_instruction
    (43) declaracion_list -> . assignacion_instruction
    (44) assignacion_instruction -> . LITERAL COLON type IGUAL a
    (45) assignacion_instruction -> . LITERAL COLON type
    (46) assignacion_instruction -> . LITERAL IGUAL a
    (47) assignacion_instruction -> . LITERAL

    LITERAL         shift and go to state 75

    declaracion_list               shift and go to state 73
    assignacion_instruction        shift and go to state 74

state 22

    (54) assig_pro -> LITERAL . IGUAL a
    (23) call_function_pro -> LITERAL . L_PAREN values R_PAREN
    (24) call_function_pro -> LITERAL . L_PAREN R_PAREN
    (111) sumadores -> LITERAL . MAS MAS
    (112) sumadores -> LITERAL . MENOS MENOS
    (97) h -> LITERAL .
    (108) array_val_pro -> LITERAL . dimensions
    (109) dimensions -> . dimensions L_CORCHETE a R_CORCHETE
    (110) dimensions -> . L_CORCHETE a R_CORCHETE

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    IGUAL           shift and go to state 76
    L_PAREN         shift and go to state 77
    MAS             shift and go to state 78
    MENOS           shift and go to state 79
    TIMES           reduce using rule 97 (h -> LITERAL .)
    DIVIDE          reduce using rule 97 (h -> LITERAL .)
    MOD             reduce using rule 97 (h -> LITERAL .)
    POTENCIA        reduce using rule 97 (h -> LITERAL .)
    DISTINTO_QUE    reduce using rule 97 (h -> LITERAL .)
    MENOR_QUE       reduce using rule 97 (h -> LITERAL .)
    MENOR_IGUAL_QUE reduce using rule 97 (h -> LITERAL .)
    MAYOR_QUE       reduce using rule 97 (h -> LITERAL .)
    MAYOR_IGUAL_QUE reduce using rule 97 (h -> LITERAL .)
    TRIPLE_IGUAL    reduce using rule 97 (h -> LITERAL .)
    AND             reduce using rule 97 (h -> LITERAL .)
    PUNTO           reduce using rule 97 (h -> LITERAL .)
    OR              reduce using rule 97 (h -> LITERAL .)
    L_CORCHETE      shift and go to state 81

  ! MAS             [ reduce using rule 97 (h -> LITERAL .) ]
  ! MENOS           [ reduce using rule 97 (h -> LITERAL .) ]

    dimensions                     shift and go to state 80

state 23

    (40) interface_assign_pro -> a . PUNTO LITERAL IGUAL a
    (70) a -> a . OR b
    (105) h -> a . PUNTO LITERAL
    (106) h -> a . PUNTO nativeFun L_PAREN expresion R_PAREN
    (107) h -> a . PUNTO nativeFun L_PAREN R_PAREN

    PUNTO           shift and go to state 82
    OR              shift and go to state 83


state 24

    (55) if_pro -> IF . L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro

    L_PAREN         shift and go to state 84


state 25

    (113) interface_assi -> L_LLAVE . atributos_assi R_LLAVE
    (114) atributos_assi -> . atributos_assi COMA LITERAL COLON a
    (115) atributos_assi -> . LITERAL COLON a

    LITERAL         shift and go to state 86

    atributos_assi                 shift and go to state 85

state 26

    (59) while_pro -> WHILE . L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE

    L_PAREN         shift and go to state 87


state 27

    (60) for_pro -> FOR . L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (61) for_pro -> FOR . L_PAREN assig_pro SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (64) for_each_pro -> FOR . L_PAREN for_each_dec R_PAREN L_LLAVE instrucciones R_LLAVE

    L_PAREN         shift and go to state 88


state 28

    (35) interface_pro -> INTERFACE . LITERAL L_LLAVE interface_atributos R_LLAVE

    LITERAL         shift and go to state 89


state 29

    (31) continue_pro -> CONTINUE .

    SEMI_COLON      reduce using rule 31 (continue_pro -> CONTINUE .)
    CONSOLE         reduce using rule 31 (continue_pro -> CONTINUE .)
    LET             reduce using rule 31 (continue_pro -> CONTINUE .)
    LITERAL         reduce using rule 31 (continue_pro -> CONTINUE .)
    IF              reduce using rule 31 (continue_pro -> CONTINUE .)
    WHILE           reduce using rule 31 (continue_pro -> CONTINUE .)
    FOR             reduce using rule 31 (continue_pro -> CONTINUE .)
    INTERFACE       reduce using rule 31 (continue_pro -> CONTINUE .)
    CONTINUE        reduce using rule 31 (continue_pro -> CONTINUE .)
    BREAK           reduce using rule 31 (continue_pro -> CONTINUE .)
    RETURN          reduce using rule 31 (continue_pro -> CONTINUE .)
    FUNCTION        reduce using rule 31 (continue_pro -> CONTINUE .)
    NOT             reduce using rule 31 (continue_pro -> CONTINUE .)
    MENOS           reduce using rule 31 (continue_pro -> CONTINUE .)
    MAS             reduce using rule 31 (continue_pro -> CONTINUE .)
    ENTERO          reduce using rule 31 (continue_pro -> CONTINUE .)
    DECIMAL         reduce using rule 31 (continue_pro -> CONTINUE .)
    CADENA          reduce using rule 31 (continue_pro -> CONTINUE .)
    TRUE            reduce using rule 31 (continue_pro -> CONTINUE .)
    FALSE           reduce using rule 31 (continue_pro -> CONTINUE .)
    L_PAREN         reduce using rule 31 (continue_pro -> CONTINUE .)
    L_CORCHETE      reduce using rule 31 (continue_pro -> CONTINUE .)
    L_LLAVE         reduce using rule 31 (continue_pro -> CONTINUE .)
    $end            reduce using rule 31 (continue_pro -> CONTINUE .)
    R_LLAVE         reduce using rule 31 (continue_pro -> CONTINUE .)


state 30

    (32) break_pro -> BREAK .

    SEMI_COLON      reduce using rule 32 (break_pro -> BREAK .)
    CONSOLE         reduce using rule 32 (break_pro -> BREAK .)
    LET             reduce using rule 32 (break_pro -> BREAK .)
    LITERAL         reduce using rule 32 (break_pro -> BREAK .)
    IF              reduce using rule 32 (break_pro -> BREAK .)
    WHILE           reduce using rule 32 (break_pro -> BREAK .)
    FOR             reduce using rule 32 (break_pro -> BREAK .)
    INTERFACE       reduce using rule 32 (break_pro -> BREAK .)
    CONTINUE        reduce using rule 32 (break_pro -> BREAK .)
    BREAK           reduce using rule 32 (break_pro -> BREAK .)
    RETURN          reduce using rule 32 (break_pro -> BREAK .)
    FUNCTION        reduce using rule 32 (break_pro -> BREAK .)
    NOT             reduce using rule 32 (break_pro -> BREAK .)
    MENOS           reduce using rule 32 (break_pro -> BREAK .)
    MAS             reduce using rule 32 (break_pro -> BREAK .)
    ENTERO          reduce using rule 32 (break_pro -> BREAK .)
    DECIMAL         reduce using rule 32 (break_pro -> BREAK .)
    CADENA          reduce using rule 32 (break_pro -> BREAK .)
    TRUE            reduce using rule 32 (break_pro -> BREAK .)
    FALSE           reduce using rule 32 (break_pro -> BREAK .)
    L_PAREN         reduce using rule 32 (break_pro -> BREAK .)
    L_CORCHETE      reduce using rule 32 (break_pro -> BREAK .)
    L_LLAVE         reduce using rule 32 (break_pro -> BREAK .)
    $end            reduce using rule 32 (break_pro -> BREAK .)
    R_LLAVE         reduce using rule 32 (break_pro -> BREAK .)


state 31

    (33) return_pro -> RETURN .
    (34) return_pro -> RETURN . a
    (70) a -> . a OR b
    (71) a -> . b
    (72) b -> . b AND c
    (73) b -> . c
    (74) c -> . NOT d
    (75) c -> . d
    (76) d -> . d DISTINTO_QUE e
    (77) d -> . d MENOR_QUE e
    (78) d -> . d MENOR_IGUAL_QUE e
    (79) d -> . d MAYOR_QUE e
    (80) d -> . d MAYOR_IGUAL_QUE e
    (81) d -> . d TRIPLE_IGUAL e
    (82) d -> . e
    (83) e -> . e MAS f
    (84) e -> . e MENOS f
    (85) e -> . f
    (86) f -> . MENOS g
    (87) f -> . MAS g
    (88) f -> . g
    (89) g -> . g TIMES h
    (90) g -> . g DIVIDE h
    (91) g -> . g MOD h
    (92) g -> . g POTENCIA h
    (93) g -> . h
    (94) h -> . ENTERO
    (95) h -> . DECIMAL
    (96) h -> . CADENA
    (97) h -> . LITERAL
    (98) h -> . TRUE
    (99) h -> . FALSE
    (100) h -> . call_function_pro
    (101) h -> . array_pro
    (102) h -> . interface_assi
    (103) h -> . L_PAREN a R_PAREN
    (104) h -> . array_val_pro
    (105) h -> . a PUNTO LITERAL
    (106) h -> . a PUNTO nativeFun L_PAREN expresion R_PAREN
    (107) h -> . a PUNTO nativeFun L_PAREN R_PAREN
    (23) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (24) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (116) array_pro -> . L_CORCHETE values R_CORCHETE
    (113) interface_assi -> . L_LLAVE atributos_assi R_LLAVE
    (108) array_val_pro -> . LITERAL dimensions

  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for ENTERO resolved as shift
  ! shift/reduce conflict for DECIMAL resolved as shift
  ! shift/reduce conflict for CADENA resolved as shift
  ! shift/reduce conflict for LITERAL resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for L_PAREN resolved as shift
  ! shift/reduce conflict for L_CORCHETE resolved as shift
  ! shift/reduce conflict for L_LLAVE resolved as shift
    SEMI_COLON      reduce using rule 33 (return_pro -> RETURN .)
    CONSOLE         reduce using rule 33 (return_pro -> RETURN .)
    LET             reduce using rule 33 (return_pro -> RETURN .)
    IF              reduce using rule 33 (return_pro -> RETURN .)
    WHILE           reduce using rule 33 (return_pro -> RETURN .)
    FOR             reduce using rule 33 (return_pro -> RETURN .)
    INTERFACE       reduce using rule 33 (return_pro -> RETURN .)
    CONTINUE        reduce using rule 33 (return_pro -> RETURN .)
    BREAK           reduce using rule 33 (return_pro -> RETURN .)
    RETURN          reduce using rule 33 (return_pro -> RETURN .)
    FUNCTION        reduce using rule 33 (return_pro -> RETURN .)
    $end            reduce using rule 33 (return_pro -> RETURN .)
    R_LLAVE         reduce using rule 33 (return_pro -> RETURN .)
    NOT             shift and go to state 37
    MENOS           shift and go to state 34
    MAS             shift and go to state 33
    ENTERO          shift and go to state 43
    DECIMAL         shift and go to state 44
    CADENA          shift and go to state 45
    LITERAL         shift and go to state 71
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    L_PAREN         shift and go to state 20
    L_CORCHETE      shift and go to state 51
    L_LLAVE         shift and go to state 25

  ! LITERAL         [ reduce using rule 33 (return_pro -> RETURN .) ]
  ! NOT             [ reduce using rule 33 (return_pro -> RETURN .) ]
  ! MENOS           [ reduce using rule 33 (return_pro -> RETURN .) ]
  ! MAS             [ reduce using rule 33 (return_pro -> RETURN .) ]
  ! ENTERO          [ reduce using rule 33 (return_pro -> RETURN .) ]
  ! DECIMAL         [ reduce using rule 33 (return_pro -> RETURN .) ]
  ! CADENA          [ reduce using rule 33 (return_pro -> RETURN .) ]
  ! TRUE            [ reduce using rule 33 (return_pro -> RETURN .) ]
  ! FALSE           [ reduce using rule 33 (return_pro -> RETURN .) ]
  ! L_PAREN         [ reduce using rule 33 (return_pro -> RETURN .) ]
  ! L_CORCHETE      [ reduce using rule 33 (return_pro -> RETURN .) ]
  ! L_LLAVE         [ reduce using rule 33 (return_pro -> RETURN .) ]

    a                              shift and go to state 90
    b                              shift and go to state 35
    c                              shift and go to state 36
    d                              shift and go to state 38
    e                              shift and go to state 39
    f                              shift and go to state 40
    g                              shift and go to state 41
    h                              shift and go to state 42
    call_function_pro              shift and go to state 72
    array_pro                      shift and go to state 48
    interface_assi                 shift and go to state 49
    array_val_pro                  shift and go to state 50

state 32

    (21) function_pro -> FUNCTION . LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (22) function_pro -> FUNCTION . LITERAL L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE

    LITERAL         shift and go to state 91


state 33

    (87) f -> MAS . g
    (89) g -> . g TIMES h
    (90) g -> . g DIVIDE h
    (91) g -> . g MOD h
    (92) g -> . g POTENCIA h
    (93) g -> . h
    (94) h -> . ENTERO
    (95) h -> . DECIMAL
    (96) h -> . CADENA
    (97) h -> . LITERAL
    (98) h -> . TRUE
    (99) h -> . FALSE
    (100) h -> . call_function_pro
    (101) h -> . array_pro
    (102) h -> . interface_assi
    (103) h -> . L_PAREN a R_PAREN
    (104) h -> . array_val_pro
    (105) h -> . a PUNTO LITERAL
    (106) h -> . a PUNTO nativeFun L_PAREN expresion R_PAREN
    (107) h -> . a PUNTO nativeFun L_PAREN R_PAREN
    (23) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (24) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (116) array_pro -> . L_CORCHETE values R_CORCHETE
    (113) interface_assi -> . L_LLAVE atributos_assi R_LLAVE
    (108) array_val_pro -> . LITERAL dimensions
    (70) a -> . a OR b
    (71) a -> . b
    (72) b -> . b AND c
    (73) b -> . c
    (74) c -> . NOT d
    (75) c -> . d
    (76) d -> . d DISTINTO_QUE e
    (77) d -> . d MENOR_QUE e
    (78) d -> . d MENOR_IGUAL_QUE e
    (79) d -> . d MAYOR_QUE e
    (80) d -> . d MAYOR_IGUAL_QUE e
    (81) d -> . d TRIPLE_IGUAL e
    (82) d -> . e
    (83) e -> . e MAS f
    (84) e -> . e MENOS f
    (85) e -> . f
    (86) f -> . MENOS g
    (87) f -> . MAS g
    (88) f -> . g

    ENTERO          shift and go to state 43
    DECIMAL         shift and go to state 44
    CADENA          shift and go to state 45
    LITERAL         shift and go to state 71
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    L_PAREN         shift and go to state 20
    L_CORCHETE      shift and go to state 51
    L_LLAVE         shift and go to state 25
    NOT             shift and go to state 37
    MENOS           shift and go to state 34
    MAS             shift and go to state 33

    g                              shift and go to state 92
    h                              shift and go to state 42
    call_function_pro              shift and go to state 72
    array_pro                      shift and go to state 48
    interface_assi                 shift and go to state 49
    a                              shift and go to state 93
    array_val_pro                  shift and go to state 50
    b                              shift and go to state 35
    c                              shift and go to state 36
    d                              shift and go to state 38
    e                              shift and go to state 39
    f                              shift and go to state 40

state 34

    (86) f -> MENOS . g
    (89) g -> . g TIMES h
    (90) g -> . g DIVIDE h
    (91) g -> . g MOD h
    (92) g -> . g POTENCIA h
    (93) g -> . h
    (94) h -> . ENTERO
    (95) h -> . DECIMAL
    (96) h -> . CADENA
    (97) h -> . LITERAL
    (98) h -> . TRUE
    (99) h -> . FALSE
    (100) h -> . call_function_pro
    (101) h -> . array_pro
    (102) h -> . interface_assi
    (103) h -> . L_PAREN a R_PAREN
    (104) h -> . array_val_pro
    (105) h -> . a PUNTO LITERAL
    (106) h -> . a PUNTO nativeFun L_PAREN expresion R_PAREN
    (107) h -> . a PUNTO nativeFun L_PAREN R_PAREN
    (23) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (24) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (116) array_pro -> . L_CORCHETE values R_CORCHETE
    (113) interface_assi -> . L_LLAVE atributos_assi R_LLAVE
    (108) array_val_pro -> . LITERAL dimensions
    (70) a -> . a OR b
    (71) a -> . b
    (72) b -> . b AND c
    (73) b -> . c
    (74) c -> . NOT d
    (75) c -> . d
    (76) d -> . d DISTINTO_QUE e
    (77) d -> . d MENOR_QUE e
    (78) d -> . d MENOR_IGUAL_QUE e
    (79) d -> . d MAYOR_QUE e
    (80) d -> . d MAYOR_IGUAL_QUE e
    (81) d -> . d TRIPLE_IGUAL e
    (82) d -> . e
    (83) e -> . e MAS f
    (84) e -> . e MENOS f
    (85) e -> . f
    (86) f -> . MENOS g
    (87) f -> . MAS g
    (88) f -> . g

    ENTERO          shift and go to state 43
    DECIMAL         shift and go to state 44
    CADENA          shift and go to state 45
    LITERAL         shift and go to state 71
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    L_PAREN         shift and go to state 20
    L_CORCHETE      shift and go to state 51
    L_LLAVE         shift and go to state 25
    NOT             shift and go to state 37
    MENOS           shift and go to state 34
    MAS             shift and go to state 33

    g                              shift and go to state 94
    h                              shift and go to state 42
    call_function_pro              shift and go to state 72
    array_pro                      shift and go to state 48
    interface_assi                 shift and go to state 49
    a                              shift and go to state 93
    array_val_pro                  shift and go to state 50
    b                              shift and go to state 35
    c                              shift and go to state 36
    d                              shift and go to state 38
    e                              shift and go to state 39
    f                              shift and go to state 40

state 35

    (71) a -> b .
    (72) b -> b . AND c

    PUNTO           reduce using rule 71 (a -> b .)
    OR              reduce using rule 71 (a -> b .)
    R_PAREN         reduce using rule 71 (a -> b .)
    SEMI_COLON      reduce using rule 71 (a -> b .)
    CONSOLE         reduce using rule 71 (a -> b .)
    LET             reduce using rule 71 (a -> b .)
    LITERAL         reduce using rule 71 (a -> b .)
    IF              reduce using rule 71 (a -> b .)
    WHILE           reduce using rule 71 (a -> b .)
    FOR             reduce using rule 71 (a -> b .)
    INTERFACE       reduce using rule 71 (a -> b .)
    CONTINUE        reduce using rule 71 (a -> b .)
    BREAK           reduce using rule 71 (a -> b .)
    RETURN          reduce using rule 71 (a -> b .)
    FUNCTION        reduce using rule 71 (a -> b .)
    NOT             reduce using rule 71 (a -> b .)
    MENOS           reduce using rule 71 (a -> b .)
    MAS             reduce using rule 71 (a -> b .)
    ENTERO          reduce using rule 71 (a -> b .)
    DECIMAL         reduce using rule 71 (a -> b .)
    CADENA          reduce using rule 71 (a -> b .)
    TRUE            reduce using rule 71 (a -> b .)
    FALSE           reduce using rule 71 (a -> b .)
    L_PAREN         reduce using rule 71 (a -> b .)
    L_CORCHETE      reduce using rule 71 (a -> b .)
    L_LLAVE         reduce using rule 71 (a -> b .)
    $end            reduce using rule 71 (a -> b .)
    R_LLAVE         reduce using rule 71 (a -> b .)
    R_CORCHETE      reduce using rule 71 (a -> b .)
    COMA            reduce using rule 71 (a -> b .)
    AND             shift and go to state 95


state 36

    (73) b -> c .

    AND             reduce using rule 73 (b -> c .)
    PUNTO           reduce using rule 73 (b -> c .)
    OR              reduce using rule 73 (b -> c .)
    R_PAREN         reduce using rule 73 (b -> c .)
    SEMI_COLON      reduce using rule 73 (b -> c .)
    CONSOLE         reduce using rule 73 (b -> c .)
    LET             reduce using rule 73 (b -> c .)
    LITERAL         reduce using rule 73 (b -> c .)
    IF              reduce using rule 73 (b -> c .)
    WHILE           reduce using rule 73 (b -> c .)
    FOR             reduce using rule 73 (b -> c .)
    INTERFACE       reduce using rule 73 (b -> c .)
    CONTINUE        reduce using rule 73 (b -> c .)
    BREAK           reduce using rule 73 (b -> c .)
    RETURN          reduce using rule 73 (b -> c .)
    FUNCTION        reduce using rule 73 (b -> c .)
    NOT             reduce using rule 73 (b -> c .)
    MENOS           reduce using rule 73 (b -> c .)
    MAS             reduce using rule 73 (b -> c .)
    ENTERO          reduce using rule 73 (b -> c .)
    DECIMAL         reduce using rule 73 (b -> c .)
    CADENA          reduce using rule 73 (b -> c .)
    TRUE            reduce using rule 73 (b -> c .)
    FALSE           reduce using rule 73 (b -> c .)
    L_PAREN         reduce using rule 73 (b -> c .)
    L_CORCHETE      reduce using rule 73 (b -> c .)
    L_LLAVE         reduce using rule 73 (b -> c .)
    $end            reduce using rule 73 (b -> c .)
    R_LLAVE         reduce using rule 73 (b -> c .)
    R_CORCHETE      reduce using rule 73 (b -> c .)
    COMA            reduce using rule 73 (b -> c .)


state 37

    (74) c -> NOT . d
    (76) d -> . d DISTINTO_QUE e
    (77) d -> . d MENOR_QUE e
    (78) d -> . d MENOR_IGUAL_QUE e
    (79) d -> . d MAYOR_QUE e
    (80) d -> . d MAYOR_IGUAL_QUE e
    (81) d -> . d TRIPLE_IGUAL e
    (82) d -> . e
    (83) e -> . e MAS f
    (84) e -> . e MENOS f
    (85) e -> . f
    (86) f -> . MENOS g
    (87) f -> . MAS g
    (88) f -> . g
    (89) g -> . g TIMES h
    (90) g -> . g DIVIDE h
    (91) g -> . g MOD h
    (92) g -> . g POTENCIA h
    (93) g -> . h
    (94) h -> . ENTERO
    (95) h -> . DECIMAL
    (96) h -> . CADENA
    (97) h -> . LITERAL
    (98) h -> . TRUE
    (99) h -> . FALSE
    (100) h -> . call_function_pro
    (101) h -> . array_pro
    (102) h -> . interface_assi
    (103) h -> . L_PAREN a R_PAREN
    (104) h -> . array_val_pro
    (105) h -> . a PUNTO LITERAL
    (106) h -> . a PUNTO nativeFun L_PAREN expresion R_PAREN
    (107) h -> . a PUNTO nativeFun L_PAREN R_PAREN
    (23) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (24) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (116) array_pro -> . L_CORCHETE values R_CORCHETE
    (113) interface_assi -> . L_LLAVE atributos_assi R_LLAVE
    (108) array_val_pro -> . LITERAL dimensions
    (70) a -> . a OR b
    (71) a -> . b
    (72) b -> . b AND c
    (73) b -> . c
    (74) c -> . NOT d
    (75) c -> . d

    MENOS           shift and go to state 34
    MAS             shift and go to state 33
    ENTERO          shift and go to state 43
    DECIMAL         shift and go to state 44
    CADENA          shift and go to state 45
    LITERAL         shift and go to state 71
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    L_PAREN         shift and go to state 20
    L_CORCHETE      shift and go to state 51
    L_LLAVE         shift and go to state 25
    NOT             shift and go to state 37

    d                              shift and go to state 96
    e                              shift and go to state 39
    f                              shift and go to state 40
    g                              shift and go to state 41
    h                              shift and go to state 42
    call_function_pro              shift and go to state 72
    array_pro                      shift and go to state 48
    interface_assi                 shift and go to state 49
    a                              shift and go to state 93
    array_val_pro                  shift and go to state 50
    b                              shift and go to state 35
    c                              shift and go to state 36

state 38

    (75) c -> d .
    (76) d -> d . DISTINTO_QUE e
    (77) d -> d . MENOR_QUE e
    (78) d -> d . MENOR_IGUAL_QUE e
    (79) d -> d . MAYOR_QUE e
    (80) d -> d . MAYOR_IGUAL_QUE e
    (81) d -> d . TRIPLE_IGUAL e

    AND             reduce using rule 75 (c -> d .)
    PUNTO           reduce using rule 75 (c -> d .)
    OR              reduce using rule 75 (c -> d .)
    R_PAREN         reduce using rule 75 (c -> d .)
    SEMI_COLON      reduce using rule 75 (c -> d .)
    CONSOLE         reduce using rule 75 (c -> d .)
    LET             reduce using rule 75 (c -> d .)
    LITERAL         reduce using rule 75 (c -> d .)
    IF              reduce using rule 75 (c -> d .)
    WHILE           reduce using rule 75 (c -> d .)
    FOR             reduce using rule 75 (c -> d .)
    INTERFACE       reduce using rule 75 (c -> d .)
    CONTINUE        reduce using rule 75 (c -> d .)
    BREAK           reduce using rule 75 (c -> d .)
    RETURN          reduce using rule 75 (c -> d .)
    FUNCTION        reduce using rule 75 (c -> d .)
    NOT             reduce using rule 75 (c -> d .)
    MENOS           reduce using rule 75 (c -> d .)
    MAS             reduce using rule 75 (c -> d .)
    ENTERO          reduce using rule 75 (c -> d .)
    DECIMAL         reduce using rule 75 (c -> d .)
    CADENA          reduce using rule 75 (c -> d .)
    TRUE            reduce using rule 75 (c -> d .)
    FALSE           reduce using rule 75 (c -> d .)
    L_PAREN         reduce using rule 75 (c -> d .)
    L_CORCHETE      reduce using rule 75 (c -> d .)
    L_LLAVE         reduce using rule 75 (c -> d .)
    $end            reduce using rule 75 (c -> d .)
    R_LLAVE         reduce using rule 75 (c -> d .)
    R_CORCHETE      reduce using rule 75 (c -> d .)
    COMA            reduce using rule 75 (c -> d .)
    DISTINTO_QUE    shift and go to state 97
    MENOR_QUE       shift and go to state 98
    MENOR_IGUAL_QUE shift and go to state 99
    MAYOR_QUE       shift and go to state 100
    MAYOR_IGUAL_QUE shift and go to state 101
    TRIPLE_IGUAL    shift and go to state 102


state 39

    (82) d -> e .
    (83) e -> e . MAS f
    (84) e -> e . MENOS f

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    DISTINTO_QUE    reduce using rule 82 (d -> e .)
    MENOR_QUE       reduce using rule 82 (d -> e .)
    MENOR_IGUAL_QUE reduce using rule 82 (d -> e .)
    MAYOR_QUE       reduce using rule 82 (d -> e .)
    MAYOR_IGUAL_QUE reduce using rule 82 (d -> e .)
    TRIPLE_IGUAL    reduce using rule 82 (d -> e .)
    AND             reduce using rule 82 (d -> e .)
    PUNTO           reduce using rule 82 (d -> e .)
    OR              reduce using rule 82 (d -> e .)
    R_PAREN         reduce using rule 82 (d -> e .)
    SEMI_COLON      reduce using rule 82 (d -> e .)
    CONSOLE         reduce using rule 82 (d -> e .)
    LET             reduce using rule 82 (d -> e .)
    LITERAL         reduce using rule 82 (d -> e .)
    IF              reduce using rule 82 (d -> e .)
    WHILE           reduce using rule 82 (d -> e .)
    FOR             reduce using rule 82 (d -> e .)
    INTERFACE       reduce using rule 82 (d -> e .)
    CONTINUE        reduce using rule 82 (d -> e .)
    BREAK           reduce using rule 82 (d -> e .)
    RETURN          reduce using rule 82 (d -> e .)
    FUNCTION        reduce using rule 82 (d -> e .)
    NOT             reduce using rule 82 (d -> e .)
    ENTERO          reduce using rule 82 (d -> e .)
    DECIMAL         reduce using rule 82 (d -> e .)
    CADENA          reduce using rule 82 (d -> e .)
    TRUE            reduce using rule 82 (d -> e .)
    FALSE           reduce using rule 82 (d -> e .)
    L_PAREN         reduce using rule 82 (d -> e .)
    L_CORCHETE      reduce using rule 82 (d -> e .)
    L_LLAVE         reduce using rule 82 (d -> e .)
    $end            reduce using rule 82 (d -> e .)
    R_LLAVE         reduce using rule 82 (d -> e .)
    R_CORCHETE      reduce using rule 82 (d -> e .)
    COMA            reduce using rule 82 (d -> e .)
    MAS             shift and go to state 103
    MENOS           shift and go to state 104

  ! MENOS           [ reduce using rule 82 (d -> e .) ]
  ! MAS             [ reduce using rule 82 (d -> e .) ]


state 40

    (85) e -> f .

    MAS             reduce using rule 85 (e -> f .)
    MENOS           reduce using rule 85 (e -> f .)
    DISTINTO_QUE    reduce using rule 85 (e -> f .)
    MENOR_QUE       reduce using rule 85 (e -> f .)
    MENOR_IGUAL_QUE reduce using rule 85 (e -> f .)
    MAYOR_QUE       reduce using rule 85 (e -> f .)
    MAYOR_IGUAL_QUE reduce using rule 85 (e -> f .)
    TRIPLE_IGUAL    reduce using rule 85 (e -> f .)
    AND             reduce using rule 85 (e -> f .)
    PUNTO           reduce using rule 85 (e -> f .)
    OR              reduce using rule 85 (e -> f .)
    R_PAREN         reduce using rule 85 (e -> f .)
    SEMI_COLON      reduce using rule 85 (e -> f .)
    CONSOLE         reduce using rule 85 (e -> f .)
    LET             reduce using rule 85 (e -> f .)
    LITERAL         reduce using rule 85 (e -> f .)
    IF              reduce using rule 85 (e -> f .)
    WHILE           reduce using rule 85 (e -> f .)
    FOR             reduce using rule 85 (e -> f .)
    INTERFACE       reduce using rule 85 (e -> f .)
    CONTINUE        reduce using rule 85 (e -> f .)
    BREAK           reduce using rule 85 (e -> f .)
    RETURN          reduce using rule 85 (e -> f .)
    FUNCTION        reduce using rule 85 (e -> f .)
    NOT             reduce using rule 85 (e -> f .)
    ENTERO          reduce using rule 85 (e -> f .)
    DECIMAL         reduce using rule 85 (e -> f .)
    CADENA          reduce using rule 85 (e -> f .)
    TRUE            reduce using rule 85 (e -> f .)
    FALSE           reduce using rule 85 (e -> f .)
    L_PAREN         reduce using rule 85 (e -> f .)
    L_CORCHETE      reduce using rule 85 (e -> f .)
    L_LLAVE         reduce using rule 85 (e -> f .)
    $end            reduce using rule 85 (e -> f .)
    R_LLAVE         reduce using rule 85 (e -> f .)
    R_CORCHETE      reduce using rule 85 (e -> f .)
    COMA            reduce using rule 85 (e -> f .)


state 41

    (88) f -> g .
    (89) g -> g . TIMES h
    (90) g -> g . DIVIDE h
    (91) g -> g . MOD h
    (92) g -> g . POTENCIA h

    MAS             reduce using rule 88 (f -> g .)
    MENOS           reduce using rule 88 (f -> g .)
    DISTINTO_QUE    reduce using rule 88 (f -> g .)
    MENOR_QUE       reduce using rule 88 (f -> g .)
    MENOR_IGUAL_QUE reduce using rule 88 (f -> g .)
    MAYOR_QUE       reduce using rule 88 (f -> g .)
    MAYOR_IGUAL_QUE reduce using rule 88 (f -> g .)
    TRIPLE_IGUAL    reduce using rule 88 (f -> g .)
    AND             reduce using rule 88 (f -> g .)
    PUNTO           reduce using rule 88 (f -> g .)
    OR              reduce using rule 88 (f -> g .)
    R_PAREN         reduce using rule 88 (f -> g .)
    SEMI_COLON      reduce using rule 88 (f -> g .)
    CONSOLE         reduce using rule 88 (f -> g .)
    LET             reduce using rule 88 (f -> g .)
    LITERAL         reduce using rule 88 (f -> g .)
    IF              reduce using rule 88 (f -> g .)
    WHILE           reduce using rule 88 (f -> g .)
    FOR             reduce using rule 88 (f -> g .)
    INTERFACE       reduce using rule 88 (f -> g .)
    CONTINUE        reduce using rule 88 (f -> g .)
    BREAK           reduce using rule 88 (f -> g .)
    RETURN          reduce using rule 88 (f -> g .)
    FUNCTION        reduce using rule 88 (f -> g .)
    NOT             reduce using rule 88 (f -> g .)
    ENTERO          reduce using rule 88 (f -> g .)
    DECIMAL         reduce using rule 88 (f -> g .)
    CADENA          reduce using rule 88 (f -> g .)
    TRUE            reduce using rule 88 (f -> g .)
    FALSE           reduce using rule 88 (f -> g .)
    L_PAREN         reduce using rule 88 (f -> g .)
    L_CORCHETE      reduce using rule 88 (f -> g .)
    L_LLAVE         reduce using rule 88 (f -> g .)
    $end            reduce using rule 88 (f -> g .)
    R_LLAVE         reduce using rule 88 (f -> g .)
    R_CORCHETE      reduce using rule 88 (f -> g .)
    COMA            reduce using rule 88 (f -> g .)
    TIMES           shift and go to state 105
    DIVIDE          shift and go to state 106
    MOD             shift and go to state 107
    POTENCIA        shift and go to state 108


state 42

    (93) g -> h .

    TIMES           reduce using rule 93 (g -> h .)
    DIVIDE          reduce using rule 93 (g -> h .)
    MOD             reduce using rule 93 (g -> h .)
    POTENCIA        reduce using rule 93 (g -> h .)
    MAS             reduce using rule 93 (g -> h .)
    MENOS           reduce using rule 93 (g -> h .)
    DISTINTO_QUE    reduce using rule 93 (g -> h .)
    MENOR_QUE       reduce using rule 93 (g -> h .)
    MENOR_IGUAL_QUE reduce using rule 93 (g -> h .)
    MAYOR_QUE       reduce using rule 93 (g -> h .)
    MAYOR_IGUAL_QUE reduce using rule 93 (g -> h .)
    TRIPLE_IGUAL    reduce using rule 93 (g -> h .)
    AND             reduce using rule 93 (g -> h .)
    PUNTO           reduce using rule 93 (g -> h .)
    OR              reduce using rule 93 (g -> h .)
    R_PAREN         reduce using rule 93 (g -> h .)
    SEMI_COLON      reduce using rule 93 (g -> h .)
    CONSOLE         reduce using rule 93 (g -> h .)
    LET             reduce using rule 93 (g -> h .)
    LITERAL         reduce using rule 93 (g -> h .)
    IF              reduce using rule 93 (g -> h .)
    WHILE           reduce using rule 93 (g -> h .)
    FOR             reduce using rule 93 (g -> h .)
    INTERFACE       reduce using rule 93 (g -> h .)
    CONTINUE        reduce using rule 93 (g -> h .)
    BREAK           reduce using rule 93 (g -> h .)
    RETURN          reduce using rule 93 (g -> h .)
    FUNCTION        reduce using rule 93 (g -> h .)
    NOT             reduce using rule 93 (g -> h .)
    ENTERO          reduce using rule 93 (g -> h .)
    DECIMAL         reduce using rule 93 (g -> h .)
    CADENA          reduce using rule 93 (g -> h .)
    TRUE            reduce using rule 93 (g -> h .)
    FALSE           reduce using rule 93 (g -> h .)
    L_PAREN         reduce using rule 93 (g -> h .)
    L_CORCHETE      reduce using rule 93 (g -> h .)
    L_LLAVE         reduce using rule 93 (g -> h .)
    $end            reduce using rule 93 (g -> h .)
    R_LLAVE         reduce using rule 93 (g -> h .)
    R_CORCHETE      reduce using rule 93 (g -> h .)
    COMA            reduce using rule 93 (g -> h .)


state 43

    (94) h -> ENTERO .

    TIMES           reduce using rule 94 (h -> ENTERO .)
    DIVIDE          reduce using rule 94 (h -> ENTERO .)
    MOD             reduce using rule 94 (h -> ENTERO .)
    POTENCIA        reduce using rule 94 (h -> ENTERO .)
    MAS             reduce using rule 94 (h -> ENTERO .)
    MENOS           reduce using rule 94 (h -> ENTERO .)
    DISTINTO_QUE    reduce using rule 94 (h -> ENTERO .)
    MENOR_QUE       reduce using rule 94 (h -> ENTERO .)
    MENOR_IGUAL_QUE reduce using rule 94 (h -> ENTERO .)
    MAYOR_QUE       reduce using rule 94 (h -> ENTERO .)
    MAYOR_IGUAL_QUE reduce using rule 94 (h -> ENTERO .)
    TRIPLE_IGUAL    reduce using rule 94 (h -> ENTERO .)
    AND             reduce using rule 94 (h -> ENTERO .)
    PUNTO           reduce using rule 94 (h -> ENTERO .)
    OR              reduce using rule 94 (h -> ENTERO .)
    R_PAREN         reduce using rule 94 (h -> ENTERO .)
    SEMI_COLON      reduce using rule 94 (h -> ENTERO .)
    CONSOLE         reduce using rule 94 (h -> ENTERO .)
    LET             reduce using rule 94 (h -> ENTERO .)
    LITERAL         reduce using rule 94 (h -> ENTERO .)
    IF              reduce using rule 94 (h -> ENTERO .)
    WHILE           reduce using rule 94 (h -> ENTERO .)
    FOR             reduce using rule 94 (h -> ENTERO .)
    INTERFACE       reduce using rule 94 (h -> ENTERO .)
    CONTINUE        reduce using rule 94 (h -> ENTERO .)
    BREAK           reduce using rule 94 (h -> ENTERO .)
    RETURN          reduce using rule 94 (h -> ENTERO .)
    FUNCTION        reduce using rule 94 (h -> ENTERO .)
    NOT             reduce using rule 94 (h -> ENTERO .)
    ENTERO          reduce using rule 94 (h -> ENTERO .)
    DECIMAL         reduce using rule 94 (h -> ENTERO .)
    CADENA          reduce using rule 94 (h -> ENTERO .)
    TRUE            reduce using rule 94 (h -> ENTERO .)
    FALSE           reduce using rule 94 (h -> ENTERO .)
    L_PAREN         reduce using rule 94 (h -> ENTERO .)
    L_CORCHETE      reduce using rule 94 (h -> ENTERO .)
    L_LLAVE         reduce using rule 94 (h -> ENTERO .)
    $end            reduce using rule 94 (h -> ENTERO .)
    R_LLAVE         reduce using rule 94 (h -> ENTERO .)
    R_CORCHETE      reduce using rule 94 (h -> ENTERO .)
    COMA            reduce using rule 94 (h -> ENTERO .)


state 44

    (95) h -> DECIMAL .

    TIMES           reduce using rule 95 (h -> DECIMAL .)
    DIVIDE          reduce using rule 95 (h -> DECIMAL .)
    MOD             reduce using rule 95 (h -> DECIMAL .)
    POTENCIA        reduce using rule 95 (h -> DECIMAL .)
    MAS             reduce using rule 95 (h -> DECIMAL .)
    MENOS           reduce using rule 95 (h -> DECIMAL .)
    DISTINTO_QUE    reduce using rule 95 (h -> DECIMAL .)
    MENOR_QUE       reduce using rule 95 (h -> DECIMAL .)
    MENOR_IGUAL_QUE reduce using rule 95 (h -> DECIMAL .)
    MAYOR_QUE       reduce using rule 95 (h -> DECIMAL .)
    MAYOR_IGUAL_QUE reduce using rule 95 (h -> DECIMAL .)
    TRIPLE_IGUAL    reduce using rule 95 (h -> DECIMAL .)
    AND             reduce using rule 95 (h -> DECIMAL .)
    PUNTO           reduce using rule 95 (h -> DECIMAL .)
    OR              reduce using rule 95 (h -> DECIMAL .)
    R_PAREN         reduce using rule 95 (h -> DECIMAL .)
    SEMI_COLON      reduce using rule 95 (h -> DECIMAL .)
    CONSOLE         reduce using rule 95 (h -> DECIMAL .)
    LET             reduce using rule 95 (h -> DECIMAL .)
    LITERAL         reduce using rule 95 (h -> DECIMAL .)
    IF              reduce using rule 95 (h -> DECIMAL .)
    WHILE           reduce using rule 95 (h -> DECIMAL .)
    FOR             reduce using rule 95 (h -> DECIMAL .)
    INTERFACE       reduce using rule 95 (h -> DECIMAL .)
    CONTINUE        reduce using rule 95 (h -> DECIMAL .)
    BREAK           reduce using rule 95 (h -> DECIMAL .)
    RETURN          reduce using rule 95 (h -> DECIMAL .)
    FUNCTION        reduce using rule 95 (h -> DECIMAL .)
    NOT             reduce using rule 95 (h -> DECIMAL .)
    ENTERO          reduce using rule 95 (h -> DECIMAL .)
    DECIMAL         reduce using rule 95 (h -> DECIMAL .)
    CADENA          reduce using rule 95 (h -> DECIMAL .)
    TRUE            reduce using rule 95 (h -> DECIMAL .)
    FALSE           reduce using rule 95 (h -> DECIMAL .)
    L_PAREN         reduce using rule 95 (h -> DECIMAL .)
    L_CORCHETE      reduce using rule 95 (h -> DECIMAL .)
    L_LLAVE         reduce using rule 95 (h -> DECIMAL .)
    $end            reduce using rule 95 (h -> DECIMAL .)
    R_LLAVE         reduce using rule 95 (h -> DECIMAL .)
    R_CORCHETE      reduce using rule 95 (h -> DECIMAL .)
    COMA            reduce using rule 95 (h -> DECIMAL .)


state 45

    (96) h -> CADENA .

    TIMES           reduce using rule 96 (h -> CADENA .)
    DIVIDE          reduce using rule 96 (h -> CADENA .)
    MOD             reduce using rule 96 (h -> CADENA .)
    POTENCIA        reduce using rule 96 (h -> CADENA .)
    MAS             reduce using rule 96 (h -> CADENA .)
    MENOS           reduce using rule 96 (h -> CADENA .)
    DISTINTO_QUE    reduce using rule 96 (h -> CADENA .)
    MENOR_QUE       reduce using rule 96 (h -> CADENA .)
    MENOR_IGUAL_QUE reduce using rule 96 (h -> CADENA .)
    MAYOR_QUE       reduce using rule 96 (h -> CADENA .)
    MAYOR_IGUAL_QUE reduce using rule 96 (h -> CADENA .)
    TRIPLE_IGUAL    reduce using rule 96 (h -> CADENA .)
    AND             reduce using rule 96 (h -> CADENA .)
    PUNTO           reduce using rule 96 (h -> CADENA .)
    OR              reduce using rule 96 (h -> CADENA .)
    R_PAREN         reduce using rule 96 (h -> CADENA .)
    SEMI_COLON      reduce using rule 96 (h -> CADENA .)
    CONSOLE         reduce using rule 96 (h -> CADENA .)
    LET             reduce using rule 96 (h -> CADENA .)
    LITERAL         reduce using rule 96 (h -> CADENA .)
    IF              reduce using rule 96 (h -> CADENA .)
    WHILE           reduce using rule 96 (h -> CADENA .)
    FOR             reduce using rule 96 (h -> CADENA .)
    INTERFACE       reduce using rule 96 (h -> CADENA .)
    CONTINUE        reduce using rule 96 (h -> CADENA .)
    BREAK           reduce using rule 96 (h -> CADENA .)
    RETURN          reduce using rule 96 (h -> CADENA .)
    FUNCTION        reduce using rule 96 (h -> CADENA .)
    NOT             reduce using rule 96 (h -> CADENA .)
    ENTERO          reduce using rule 96 (h -> CADENA .)
    DECIMAL         reduce using rule 96 (h -> CADENA .)
    CADENA          reduce using rule 96 (h -> CADENA .)
    TRUE            reduce using rule 96 (h -> CADENA .)
    FALSE           reduce using rule 96 (h -> CADENA .)
    L_PAREN         reduce using rule 96 (h -> CADENA .)
    L_CORCHETE      reduce using rule 96 (h -> CADENA .)
    L_LLAVE         reduce using rule 96 (h -> CADENA .)
    $end            reduce using rule 96 (h -> CADENA .)
    R_LLAVE         reduce using rule 96 (h -> CADENA .)
    R_CORCHETE      reduce using rule 96 (h -> CADENA .)
    COMA            reduce using rule 96 (h -> CADENA .)


state 46

    (98) h -> TRUE .

    TIMES           reduce using rule 98 (h -> TRUE .)
    DIVIDE          reduce using rule 98 (h -> TRUE .)
    MOD             reduce using rule 98 (h -> TRUE .)
    POTENCIA        reduce using rule 98 (h -> TRUE .)
    MAS             reduce using rule 98 (h -> TRUE .)
    MENOS           reduce using rule 98 (h -> TRUE .)
    DISTINTO_QUE    reduce using rule 98 (h -> TRUE .)
    MENOR_QUE       reduce using rule 98 (h -> TRUE .)
    MENOR_IGUAL_QUE reduce using rule 98 (h -> TRUE .)
    MAYOR_QUE       reduce using rule 98 (h -> TRUE .)
    MAYOR_IGUAL_QUE reduce using rule 98 (h -> TRUE .)
    TRIPLE_IGUAL    reduce using rule 98 (h -> TRUE .)
    AND             reduce using rule 98 (h -> TRUE .)
    PUNTO           reduce using rule 98 (h -> TRUE .)
    OR              reduce using rule 98 (h -> TRUE .)
    R_PAREN         reduce using rule 98 (h -> TRUE .)
    SEMI_COLON      reduce using rule 98 (h -> TRUE .)
    CONSOLE         reduce using rule 98 (h -> TRUE .)
    LET             reduce using rule 98 (h -> TRUE .)
    LITERAL         reduce using rule 98 (h -> TRUE .)
    IF              reduce using rule 98 (h -> TRUE .)
    WHILE           reduce using rule 98 (h -> TRUE .)
    FOR             reduce using rule 98 (h -> TRUE .)
    INTERFACE       reduce using rule 98 (h -> TRUE .)
    CONTINUE        reduce using rule 98 (h -> TRUE .)
    BREAK           reduce using rule 98 (h -> TRUE .)
    RETURN          reduce using rule 98 (h -> TRUE .)
    FUNCTION        reduce using rule 98 (h -> TRUE .)
    NOT             reduce using rule 98 (h -> TRUE .)
    ENTERO          reduce using rule 98 (h -> TRUE .)
    DECIMAL         reduce using rule 98 (h -> TRUE .)
    CADENA          reduce using rule 98 (h -> TRUE .)
    TRUE            reduce using rule 98 (h -> TRUE .)
    FALSE           reduce using rule 98 (h -> TRUE .)
    L_PAREN         reduce using rule 98 (h -> TRUE .)
    L_CORCHETE      reduce using rule 98 (h -> TRUE .)
    L_LLAVE         reduce using rule 98 (h -> TRUE .)
    $end            reduce using rule 98 (h -> TRUE .)
    R_LLAVE         reduce using rule 98 (h -> TRUE .)
    R_CORCHETE      reduce using rule 98 (h -> TRUE .)
    COMA            reduce using rule 98 (h -> TRUE .)


state 47

    (99) h -> FALSE .

    TIMES           reduce using rule 99 (h -> FALSE .)
    DIVIDE          reduce using rule 99 (h -> FALSE .)
    MOD             reduce using rule 99 (h -> FALSE .)
    POTENCIA        reduce using rule 99 (h -> FALSE .)
    MAS             reduce using rule 99 (h -> FALSE .)
    MENOS           reduce using rule 99 (h -> FALSE .)
    DISTINTO_QUE    reduce using rule 99 (h -> FALSE .)
    MENOR_QUE       reduce using rule 99 (h -> FALSE .)
    MENOR_IGUAL_QUE reduce using rule 99 (h -> FALSE .)
    MAYOR_QUE       reduce using rule 99 (h -> FALSE .)
    MAYOR_IGUAL_QUE reduce using rule 99 (h -> FALSE .)
    TRIPLE_IGUAL    reduce using rule 99 (h -> FALSE .)
    AND             reduce using rule 99 (h -> FALSE .)
    PUNTO           reduce using rule 99 (h -> FALSE .)
    OR              reduce using rule 99 (h -> FALSE .)
    R_PAREN         reduce using rule 99 (h -> FALSE .)
    SEMI_COLON      reduce using rule 99 (h -> FALSE .)
    CONSOLE         reduce using rule 99 (h -> FALSE .)
    LET             reduce using rule 99 (h -> FALSE .)
    LITERAL         reduce using rule 99 (h -> FALSE .)
    IF              reduce using rule 99 (h -> FALSE .)
    WHILE           reduce using rule 99 (h -> FALSE .)
    FOR             reduce using rule 99 (h -> FALSE .)
    INTERFACE       reduce using rule 99 (h -> FALSE .)
    CONTINUE        reduce using rule 99 (h -> FALSE .)
    BREAK           reduce using rule 99 (h -> FALSE .)
    RETURN          reduce using rule 99 (h -> FALSE .)
    FUNCTION        reduce using rule 99 (h -> FALSE .)
    NOT             reduce using rule 99 (h -> FALSE .)
    ENTERO          reduce using rule 99 (h -> FALSE .)
    DECIMAL         reduce using rule 99 (h -> FALSE .)
    CADENA          reduce using rule 99 (h -> FALSE .)
    TRUE            reduce using rule 99 (h -> FALSE .)
    FALSE           reduce using rule 99 (h -> FALSE .)
    L_PAREN         reduce using rule 99 (h -> FALSE .)
    L_CORCHETE      reduce using rule 99 (h -> FALSE .)
    L_LLAVE         reduce using rule 99 (h -> FALSE .)
    $end            reduce using rule 99 (h -> FALSE .)
    R_LLAVE         reduce using rule 99 (h -> FALSE .)
    R_CORCHETE      reduce using rule 99 (h -> FALSE .)
    COMA            reduce using rule 99 (h -> FALSE .)


state 48

    (101) h -> array_pro .

    TIMES           reduce using rule 101 (h -> array_pro .)
    DIVIDE          reduce using rule 101 (h -> array_pro .)
    MOD             reduce using rule 101 (h -> array_pro .)
    POTENCIA        reduce using rule 101 (h -> array_pro .)
    MAS             reduce using rule 101 (h -> array_pro .)
    MENOS           reduce using rule 101 (h -> array_pro .)
    DISTINTO_QUE    reduce using rule 101 (h -> array_pro .)
    MENOR_QUE       reduce using rule 101 (h -> array_pro .)
    MENOR_IGUAL_QUE reduce using rule 101 (h -> array_pro .)
    MAYOR_QUE       reduce using rule 101 (h -> array_pro .)
    MAYOR_IGUAL_QUE reduce using rule 101 (h -> array_pro .)
    TRIPLE_IGUAL    reduce using rule 101 (h -> array_pro .)
    AND             reduce using rule 101 (h -> array_pro .)
    PUNTO           reduce using rule 101 (h -> array_pro .)
    OR              reduce using rule 101 (h -> array_pro .)
    R_PAREN         reduce using rule 101 (h -> array_pro .)
    SEMI_COLON      reduce using rule 101 (h -> array_pro .)
    CONSOLE         reduce using rule 101 (h -> array_pro .)
    LET             reduce using rule 101 (h -> array_pro .)
    LITERAL         reduce using rule 101 (h -> array_pro .)
    IF              reduce using rule 101 (h -> array_pro .)
    WHILE           reduce using rule 101 (h -> array_pro .)
    FOR             reduce using rule 101 (h -> array_pro .)
    INTERFACE       reduce using rule 101 (h -> array_pro .)
    CONTINUE        reduce using rule 101 (h -> array_pro .)
    BREAK           reduce using rule 101 (h -> array_pro .)
    RETURN          reduce using rule 101 (h -> array_pro .)
    FUNCTION        reduce using rule 101 (h -> array_pro .)
    NOT             reduce using rule 101 (h -> array_pro .)
    ENTERO          reduce using rule 101 (h -> array_pro .)
    DECIMAL         reduce using rule 101 (h -> array_pro .)
    CADENA          reduce using rule 101 (h -> array_pro .)
    TRUE            reduce using rule 101 (h -> array_pro .)
    FALSE           reduce using rule 101 (h -> array_pro .)
    L_PAREN         reduce using rule 101 (h -> array_pro .)
    L_CORCHETE      reduce using rule 101 (h -> array_pro .)
    L_LLAVE         reduce using rule 101 (h -> array_pro .)
    $end            reduce using rule 101 (h -> array_pro .)
    R_LLAVE         reduce using rule 101 (h -> array_pro .)
    R_CORCHETE      reduce using rule 101 (h -> array_pro .)
    COMA            reduce using rule 101 (h -> array_pro .)


state 49

    (102) h -> interface_assi .

    TIMES           reduce using rule 102 (h -> interface_assi .)
    DIVIDE          reduce using rule 102 (h -> interface_assi .)
    MOD             reduce using rule 102 (h -> interface_assi .)
    POTENCIA        reduce using rule 102 (h -> interface_assi .)
    MAS             reduce using rule 102 (h -> interface_assi .)
    MENOS           reduce using rule 102 (h -> interface_assi .)
    DISTINTO_QUE    reduce using rule 102 (h -> interface_assi .)
    MENOR_QUE       reduce using rule 102 (h -> interface_assi .)
    MENOR_IGUAL_QUE reduce using rule 102 (h -> interface_assi .)
    MAYOR_QUE       reduce using rule 102 (h -> interface_assi .)
    MAYOR_IGUAL_QUE reduce using rule 102 (h -> interface_assi .)
    TRIPLE_IGUAL    reduce using rule 102 (h -> interface_assi .)
    AND             reduce using rule 102 (h -> interface_assi .)
    PUNTO           reduce using rule 102 (h -> interface_assi .)
    OR              reduce using rule 102 (h -> interface_assi .)
    R_PAREN         reduce using rule 102 (h -> interface_assi .)
    SEMI_COLON      reduce using rule 102 (h -> interface_assi .)
    CONSOLE         reduce using rule 102 (h -> interface_assi .)
    LET             reduce using rule 102 (h -> interface_assi .)
    LITERAL         reduce using rule 102 (h -> interface_assi .)
    IF              reduce using rule 102 (h -> interface_assi .)
    WHILE           reduce using rule 102 (h -> interface_assi .)
    FOR             reduce using rule 102 (h -> interface_assi .)
    INTERFACE       reduce using rule 102 (h -> interface_assi .)
    CONTINUE        reduce using rule 102 (h -> interface_assi .)
    BREAK           reduce using rule 102 (h -> interface_assi .)
    RETURN          reduce using rule 102 (h -> interface_assi .)
    FUNCTION        reduce using rule 102 (h -> interface_assi .)
    NOT             reduce using rule 102 (h -> interface_assi .)
    ENTERO          reduce using rule 102 (h -> interface_assi .)
    DECIMAL         reduce using rule 102 (h -> interface_assi .)
    CADENA          reduce using rule 102 (h -> interface_assi .)
    TRUE            reduce using rule 102 (h -> interface_assi .)
    FALSE           reduce using rule 102 (h -> interface_assi .)
    L_PAREN         reduce using rule 102 (h -> interface_assi .)
    L_CORCHETE      reduce using rule 102 (h -> interface_assi .)
    L_LLAVE         reduce using rule 102 (h -> interface_assi .)
    $end            reduce using rule 102 (h -> interface_assi .)
    R_LLAVE         reduce using rule 102 (h -> interface_assi .)
    R_CORCHETE      reduce using rule 102 (h -> interface_assi .)
    COMA            reduce using rule 102 (h -> interface_assi .)


state 50

    (104) h -> array_val_pro .

    TIMES           reduce using rule 104 (h -> array_val_pro .)
    DIVIDE          reduce using rule 104 (h -> array_val_pro .)
    MOD             reduce using rule 104 (h -> array_val_pro .)
    POTENCIA        reduce using rule 104 (h -> array_val_pro .)
    MAS             reduce using rule 104 (h -> array_val_pro .)
    MENOS           reduce using rule 104 (h -> array_val_pro .)
    DISTINTO_QUE    reduce using rule 104 (h -> array_val_pro .)
    MENOR_QUE       reduce using rule 104 (h -> array_val_pro .)
    MENOR_IGUAL_QUE reduce using rule 104 (h -> array_val_pro .)
    MAYOR_QUE       reduce using rule 104 (h -> array_val_pro .)
    MAYOR_IGUAL_QUE reduce using rule 104 (h -> array_val_pro .)
    TRIPLE_IGUAL    reduce using rule 104 (h -> array_val_pro .)
    AND             reduce using rule 104 (h -> array_val_pro .)
    PUNTO           reduce using rule 104 (h -> array_val_pro .)
    OR              reduce using rule 104 (h -> array_val_pro .)
    R_PAREN         reduce using rule 104 (h -> array_val_pro .)
    SEMI_COLON      reduce using rule 104 (h -> array_val_pro .)
    CONSOLE         reduce using rule 104 (h -> array_val_pro .)
    LET             reduce using rule 104 (h -> array_val_pro .)
    LITERAL         reduce using rule 104 (h -> array_val_pro .)
    IF              reduce using rule 104 (h -> array_val_pro .)
    WHILE           reduce using rule 104 (h -> array_val_pro .)
    FOR             reduce using rule 104 (h -> array_val_pro .)
    INTERFACE       reduce using rule 104 (h -> array_val_pro .)
    CONTINUE        reduce using rule 104 (h -> array_val_pro .)
    BREAK           reduce using rule 104 (h -> array_val_pro .)
    RETURN          reduce using rule 104 (h -> array_val_pro .)
    FUNCTION        reduce using rule 104 (h -> array_val_pro .)
    NOT             reduce using rule 104 (h -> array_val_pro .)
    ENTERO          reduce using rule 104 (h -> array_val_pro .)
    DECIMAL         reduce using rule 104 (h -> array_val_pro .)
    CADENA          reduce using rule 104 (h -> array_val_pro .)
    TRUE            reduce using rule 104 (h -> array_val_pro .)
    FALSE           reduce using rule 104 (h -> array_val_pro .)
    L_PAREN         reduce using rule 104 (h -> array_val_pro .)
    L_CORCHETE      reduce using rule 104 (h -> array_val_pro .)
    L_LLAVE         reduce using rule 104 (h -> array_val_pro .)
    $end            reduce using rule 104 (h -> array_val_pro .)
    R_LLAVE         reduce using rule 104 (h -> array_val_pro .)
    R_CORCHETE      reduce using rule 104 (h -> array_val_pro .)
    COMA            reduce using rule 104 (h -> array_val_pro .)


state 51

    (116) array_pro -> L_CORCHETE . values R_CORCHETE
    (25) values -> . values COMA a
    (26) values -> . a
    (70) a -> . a OR b
    (71) a -> . b
    (72) b -> . b AND c
    (73) b -> . c
    (74) c -> . NOT d
    (75) c -> . d
    (76) d -> . d DISTINTO_QUE e
    (77) d -> . d MENOR_QUE e
    (78) d -> . d MENOR_IGUAL_QUE e
    (79) d -> . d MAYOR_QUE e
    (80) d -> . d MAYOR_IGUAL_QUE e
    (81) d -> . d TRIPLE_IGUAL e
    (82) d -> . e
    (83) e -> . e MAS f
    (84) e -> . e MENOS f
    (85) e -> . f
    (86) f -> . MENOS g
    (87) f -> . MAS g
    (88) f -> . g
    (89) g -> . g TIMES h
    (90) g -> . g DIVIDE h
    (91) g -> . g MOD h
    (92) g -> . g POTENCIA h
    (93) g -> . h
    (94) h -> . ENTERO
    (95) h -> . DECIMAL
    (96) h -> . CADENA
    (97) h -> . LITERAL
    (98) h -> . TRUE
    (99) h -> . FALSE
    (100) h -> . call_function_pro
    (101) h -> . array_pro
    (102) h -> . interface_assi
    (103) h -> . L_PAREN a R_PAREN
    (104) h -> . array_val_pro
    (105) h -> . a PUNTO LITERAL
    (106) h -> . a PUNTO nativeFun L_PAREN expresion R_PAREN
    (107) h -> . a PUNTO nativeFun L_PAREN R_PAREN
    (23) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (24) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (116) array_pro -> . L_CORCHETE values R_CORCHETE
    (113) interface_assi -> . L_LLAVE atributos_assi R_LLAVE
    (108) array_val_pro -> . LITERAL dimensions

    NOT             shift and go to state 37
    MENOS           shift and go to state 34
    MAS             shift and go to state 33
    ENTERO          shift and go to state 43
    DECIMAL         shift and go to state 44
    CADENA          shift and go to state 45
    LITERAL         shift and go to state 71
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    L_PAREN         shift and go to state 20
    L_CORCHETE      shift and go to state 51
    L_LLAVE         shift and go to state 25

    values                         shift and go to state 109
    a                              shift and go to state 110
    b                              shift and go to state 35
    c                              shift and go to state 36
    d                              shift and go to state 38
    e                              shift and go to state 39
    f                              shift and go to state 40
    g                              shift and go to state 41
    h                              shift and go to state 42
    call_function_pro              shift and go to state 72
    array_pro                      shift and go to state 48
    interface_assi                 shift and go to state 49
    array_val_pro                  shift and go to state 50

state 52

    (2) instrucciones -> instrucciones instruccion .

    CONSOLE         reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    LET             reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    LITERAL         reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    IF              reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    WHILE           reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    FOR             reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    INTERFACE       reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    CONTINUE        reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    BREAK           reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    RETURN          reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    FUNCTION        reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    NOT             reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    MENOS           reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    MAS             reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    ENTERO          reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    DECIMAL         reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    CADENA          reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    TRUE            reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    FALSE           reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    L_PAREN         reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    L_CORCHETE      reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    L_LLAVE         reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    $end            reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    R_LLAVE         reduce using rule 2 (instrucciones -> instrucciones instruccion .)


state 53

    (4) instruccion -> console_pro sc .

    CONSOLE         reduce using rule 4 (instruccion -> console_pro sc .)
    LET             reduce using rule 4 (instruccion -> console_pro sc .)
    LITERAL         reduce using rule 4 (instruccion -> console_pro sc .)
    IF              reduce using rule 4 (instruccion -> console_pro sc .)
    WHILE           reduce using rule 4 (instruccion -> console_pro sc .)
    FOR             reduce using rule 4 (instruccion -> console_pro sc .)
    INTERFACE       reduce using rule 4 (instruccion -> console_pro sc .)
    CONTINUE        reduce using rule 4 (instruccion -> console_pro sc .)
    BREAK           reduce using rule 4 (instruccion -> console_pro sc .)
    RETURN          reduce using rule 4 (instruccion -> console_pro sc .)
    FUNCTION        reduce using rule 4 (instruccion -> console_pro sc .)
    NOT             reduce using rule 4 (instruccion -> console_pro sc .)
    MENOS           reduce using rule 4 (instruccion -> console_pro sc .)
    MAS             reduce using rule 4 (instruccion -> console_pro sc .)
    ENTERO          reduce using rule 4 (instruccion -> console_pro sc .)
    DECIMAL         reduce using rule 4 (instruccion -> console_pro sc .)
    CADENA          reduce using rule 4 (instruccion -> console_pro sc .)
    TRUE            reduce using rule 4 (instruccion -> console_pro sc .)
    FALSE           reduce using rule 4 (instruccion -> console_pro sc .)
    L_PAREN         reduce using rule 4 (instruccion -> console_pro sc .)
    L_CORCHETE      reduce using rule 4 (instruccion -> console_pro sc .)
    L_LLAVE         reduce using rule 4 (instruccion -> console_pro sc .)
    $end            reduce using rule 4 (instruccion -> console_pro sc .)
    R_LLAVE         reduce using rule 4 (instruccion -> console_pro sc .)


state 54

    (19) sc -> SEMI_COLON .

    CONSOLE         reduce using rule 19 (sc -> SEMI_COLON .)
    LET             reduce using rule 19 (sc -> SEMI_COLON .)
    LITERAL         reduce using rule 19 (sc -> SEMI_COLON .)
    IF              reduce using rule 19 (sc -> SEMI_COLON .)
    WHILE           reduce using rule 19 (sc -> SEMI_COLON .)
    FOR             reduce using rule 19 (sc -> SEMI_COLON .)
    INTERFACE       reduce using rule 19 (sc -> SEMI_COLON .)
    CONTINUE        reduce using rule 19 (sc -> SEMI_COLON .)
    BREAK           reduce using rule 19 (sc -> SEMI_COLON .)
    RETURN          reduce using rule 19 (sc -> SEMI_COLON .)
    FUNCTION        reduce using rule 19 (sc -> SEMI_COLON .)
    NOT             reduce using rule 19 (sc -> SEMI_COLON .)
    MENOS           reduce using rule 19 (sc -> SEMI_COLON .)
    MAS             reduce using rule 19 (sc -> SEMI_COLON .)
    ENTERO          reduce using rule 19 (sc -> SEMI_COLON .)
    DECIMAL         reduce using rule 19 (sc -> SEMI_COLON .)
    CADENA          reduce using rule 19 (sc -> SEMI_COLON .)
    TRUE            reduce using rule 19 (sc -> SEMI_COLON .)
    FALSE           reduce using rule 19 (sc -> SEMI_COLON .)
    L_PAREN         reduce using rule 19 (sc -> SEMI_COLON .)
    L_CORCHETE      reduce using rule 19 (sc -> SEMI_COLON .)
    L_LLAVE         reduce using rule 19 (sc -> SEMI_COLON .)
    $end            reduce using rule 19 (sc -> SEMI_COLON .)
    R_LLAVE         reduce using rule 19 (sc -> SEMI_COLON .)


state 55

    (5) instruccion -> declaration_instruction sc .

    CONSOLE         reduce using rule 5 (instruccion -> declaration_instruction sc .)
    LET             reduce using rule 5 (instruccion -> declaration_instruction sc .)
    LITERAL         reduce using rule 5 (instruccion -> declaration_instruction sc .)
    IF              reduce using rule 5 (instruccion -> declaration_instruction sc .)
    WHILE           reduce using rule 5 (instruccion -> declaration_instruction sc .)
    FOR             reduce using rule 5 (instruccion -> declaration_instruction sc .)
    INTERFACE       reduce using rule 5 (instruccion -> declaration_instruction sc .)
    CONTINUE        reduce using rule 5 (instruccion -> declaration_instruction sc .)
    BREAK           reduce using rule 5 (instruccion -> declaration_instruction sc .)
    RETURN          reduce using rule 5 (instruccion -> declaration_instruction sc .)
    FUNCTION        reduce using rule 5 (instruccion -> declaration_instruction sc .)
    NOT             reduce using rule 5 (instruccion -> declaration_instruction sc .)
    MENOS           reduce using rule 5 (instruccion -> declaration_instruction sc .)
    MAS             reduce using rule 5 (instruccion -> declaration_instruction sc .)
    ENTERO          reduce using rule 5 (instruccion -> declaration_instruction sc .)
    DECIMAL         reduce using rule 5 (instruccion -> declaration_instruction sc .)
    CADENA          reduce using rule 5 (instruccion -> declaration_instruction sc .)
    TRUE            reduce using rule 5 (instruccion -> declaration_instruction sc .)
    FALSE           reduce using rule 5 (instruccion -> declaration_instruction sc .)
    L_PAREN         reduce using rule 5 (instruccion -> declaration_instruction sc .)
    L_CORCHETE      reduce using rule 5 (instruccion -> declaration_instruction sc .)
    L_LLAVE         reduce using rule 5 (instruccion -> declaration_instruction sc .)
    $end            reduce using rule 5 (instruccion -> declaration_instruction sc .)
    R_LLAVE         reduce using rule 5 (instruccion -> declaration_instruction sc .)


state 56

    (6) instruccion -> assig_pro sc .

    CONSOLE         reduce using rule 6 (instruccion -> assig_pro sc .)
    LET             reduce using rule 6 (instruccion -> assig_pro sc .)
    LITERAL         reduce using rule 6 (instruccion -> assig_pro sc .)
    IF              reduce using rule 6 (instruccion -> assig_pro sc .)
    WHILE           reduce using rule 6 (instruccion -> assig_pro sc .)
    FOR             reduce using rule 6 (instruccion -> assig_pro sc .)
    INTERFACE       reduce using rule 6 (instruccion -> assig_pro sc .)
    CONTINUE        reduce using rule 6 (instruccion -> assig_pro sc .)
    BREAK           reduce using rule 6 (instruccion -> assig_pro sc .)
    RETURN          reduce using rule 6 (instruccion -> assig_pro sc .)
    FUNCTION        reduce using rule 6 (instruccion -> assig_pro sc .)
    NOT             reduce using rule 6 (instruccion -> assig_pro sc .)
    MENOS           reduce using rule 6 (instruccion -> assig_pro sc .)
    MAS             reduce using rule 6 (instruccion -> assig_pro sc .)
    ENTERO          reduce using rule 6 (instruccion -> assig_pro sc .)
    DECIMAL         reduce using rule 6 (instruccion -> assig_pro sc .)
    CADENA          reduce using rule 6 (instruccion -> assig_pro sc .)
    TRUE            reduce using rule 6 (instruccion -> assig_pro sc .)
    FALSE           reduce using rule 6 (instruccion -> assig_pro sc .)
    L_PAREN         reduce using rule 6 (instruccion -> assig_pro sc .)
    L_CORCHETE      reduce using rule 6 (instruccion -> assig_pro sc .)
    L_LLAVE         reduce using rule 6 (instruccion -> assig_pro sc .)
    $end            reduce using rule 6 (instruccion -> assig_pro sc .)
    R_LLAVE         reduce using rule 6 (instruccion -> assig_pro sc .)


state 57

    (7) instruccion -> interface_assign_pro sc .

    CONSOLE         reduce using rule 7 (instruccion -> interface_assign_pro sc .)
    LET             reduce using rule 7 (instruccion -> interface_assign_pro sc .)
    LITERAL         reduce using rule 7 (instruccion -> interface_assign_pro sc .)
    IF              reduce using rule 7 (instruccion -> interface_assign_pro sc .)
    WHILE           reduce using rule 7 (instruccion -> interface_assign_pro sc .)
    FOR             reduce using rule 7 (instruccion -> interface_assign_pro sc .)
    INTERFACE       reduce using rule 7 (instruccion -> interface_assign_pro sc .)
    CONTINUE        reduce using rule 7 (instruccion -> interface_assign_pro sc .)
    BREAK           reduce using rule 7 (instruccion -> interface_assign_pro sc .)
    RETURN          reduce using rule 7 (instruccion -> interface_assign_pro sc .)
    FUNCTION        reduce using rule 7 (instruccion -> interface_assign_pro sc .)
    NOT             reduce using rule 7 (instruccion -> interface_assign_pro sc .)
    MENOS           reduce using rule 7 (instruccion -> interface_assign_pro sc .)
    MAS             reduce using rule 7 (instruccion -> interface_assign_pro sc .)
    ENTERO          reduce using rule 7 (instruccion -> interface_assign_pro sc .)
    DECIMAL         reduce using rule 7 (instruccion -> interface_assign_pro sc .)
    CADENA          reduce using rule 7 (instruccion -> interface_assign_pro sc .)
    TRUE            reduce using rule 7 (instruccion -> interface_assign_pro sc .)
    FALSE           reduce using rule 7 (instruccion -> interface_assign_pro sc .)
    L_PAREN         reduce using rule 7 (instruccion -> interface_assign_pro sc .)
    L_CORCHETE      reduce using rule 7 (instruccion -> interface_assign_pro sc .)
    L_LLAVE         reduce using rule 7 (instruccion -> interface_assign_pro sc .)
    $end            reduce using rule 7 (instruccion -> interface_assign_pro sc .)
    R_LLAVE         reduce using rule 7 (instruccion -> interface_assign_pro sc .)


state 58

    (8) instruccion -> if_pro sc .

    CONSOLE         reduce using rule 8 (instruccion -> if_pro sc .)
    LET             reduce using rule 8 (instruccion -> if_pro sc .)
    LITERAL         reduce using rule 8 (instruccion -> if_pro sc .)
    IF              reduce using rule 8 (instruccion -> if_pro sc .)
    WHILE           reduce using rule 8 (instruccion -> if_pro sc .)
    FOR             reduce using rule 8 (instruccion -> if_pro sc .)
    INTERFACE       reduce using rule 8 (instruccion -> if_pro sc .)
    CONTINUE        reduce using rule 8 (instruccion -> if_pro sc .)
    BREAK           reduce using rule 8 (instruccion -> if_pro sc .)
    RETURN          reduce using rule 8 (instruccion -> if_pro sc .)
    FUNCTION        reduce using rule 8 (instruccion -> if_pro sc .)
    NOT             reduce using rule 8 (instruccion -> if_pro sc .)
    MENOS           reduce using rule 8 (instruccion -> if_pro sc .)
    MAS             reduce using rule 8 (instruccion -> if_pro sc .)
    ENTERO          reduce using rule 8 (instruccion -> if_pro sc .)
    DECIMAL         reduce using rule 8 (instruccion -> if_pro sc .)
    CADENA          reduce using rule 8 (instruccion -> if_pro sc .)
    TRUE            reduce using rule 8 (instruccion -> if_pro sc .)
    FALSE           reduce using rule 8 (instruccion -> if_pro sc .)
    L_PAREN         reduce using rule 8 (instruccion -> if_pro sc .)
    L_CORCHETE      reduce using rule 8 (instruccion -> if_pro sc .)
    L_LLAVE         reduce using rule 8 (instruccion -> if_pro sc .)
    $end            reduce using rule 8 (instruccion -> if_pro sc .)
    R_LLAVE         reduce using rule 8 (instruccion -> if_pro sc .)


state 59

    (9) instruccion -> while_pro sc .

    CONSOLE         reduce using rule 9 (instruccion -> while_pro sc .)
    LET             reduce using rule 9 (instruccion -> while_pro sc .)
    LITERAL         reduce using rule 9 (instruccion -> while_pro sc .)
    IF              reduce using rule 9 (instruccion -> while_pro sc .)
    WHILE           reduce using rule 9 (instruccion -> while_pro sc .)
    FOR             reduce using rule 9 (instruccion -> while_pro sc .)
    INTERFACE       reduce using rule 9 (instruccion -> while_pro sc .)
    CONTINUE        reduce using rule 9 (instruccion -> while_pro sc .)
    BREAK           reduce using rule 9 (instruccion -> while_pro sc .)
    RETURN          reduce using rule 9 (instruccion -> while_pro sc .)
    FUNCTION        reduce using rule 9 (instruccion -> while_pro sc .)
    NOT             reduce using rule 9 (instruccion -> while_pro sc .)
    MENOS           reduce using rule 9 (instruccion -> while_pro sc .)
    MAS             reduce using rule 9 (instruccion -> while_pro sc .)
    ENTERO          reduce using rule 9 (instruccion -> while_pro sc .)
    DECIMAL         reduce using rule 9 (instruccion -> while_pro sc .)
    CADENA          reduce using rule 9 (instruccion -> while_pro sc .)
    TRUE            reduce using rule 9 (instruccion -> while_pro sc .)
    FALSE           reduce using rule 9 (instruccion -> while_pro sc .)
    L_PAREN         reduce using rule 9 (instruccion -> while_pro sc .)
    L_CORCHETE      reduce using rule 9 (instruccion -> while_pro sc .)
    L_LLAVE         reduce using rule 9 (instruccion -> while_pro sc .)
    $end            reduce using rule 9 (instruccion -> while_pro sc .)
    R_LLAVE         reduce using rule 9 (instruccion -> while_pro sc .)


state 60

    (10) instruccion -> for_pro sc .

    CONSOLE         reduce using rule 10 (instruccion -> for_pro sc .)
    LET             reduce using rule 10 (instruccion -> for_pro sc .)
    LITERAL         reduce using rule 10 (instruccion -> for_pro sc .)
    IF              reduce using rule 10 (instruccion -> for_pro sc .)
    WHILE           reduce using rule 10 (instruccion -> for_pro sc .)
    FOR             reduce using rule 10 (instruccion -> for_pro sc .)
    INTERFACE       reduce using rule 10 (instruccion -> for_pro sc .)
    CONTINUE        reduce using rule 10 (instruccion -> for_pro sc .)
    BREAK           reduce using rule 10 (instruccion -> for_pro sc .)
    RETURN          reduce using rule 10 (instruccion -> for_pro sc .)
    FUNCTION        reduce using rule 10 (instruccion -> for_pro sc .)
    NOT             reduce using rule 10 (instruccion -> for_pro sc .)
    MENOS           reduce using rule 10 (instruccion -> for_pro sc .)
    MAS             reduce using rule 10 (instruccion -> for_pro sc .)
    ENTERO          reduce using rule 10 (instruccion -> for_pro sc .)
    DECIMAL         reduce using rule 10 (instruccion -> for_pro sc .)
    CADENA          reduce using rule 10 (instruccion -> for_pro sc .)
    TRUE            reduce using rule 10 (instruccion -> for_pro sc .)
    FALSE           reduce using rule 10 (instruccion -> for_pro sc .)
    L_PAREN         reduce using rule 10 (instruccion -> for_pro sc .)
    L_CORCHETE      reduce using rule 10 (instruccion -> for_pro sc .)
    L_LLAVE         reduce using rule 10 (instruccion -> for_pro sc .)
    $end            reduce using rule 10 (instruccion -> for_pro sc .)
    R_LLAVE         reduce using rule 10 (instruccion -> for_pro sc .)


state 61

    (11) instruccion -> for_each_pro sc .

    CONSOLE         reduce using rule 11 (instruccion -> for_each_pro sc .)
    LET             reduce using rule 11 (instruccion -> for_each_pro sc .)
    LITERAL         reduce using rule 11 (instruccion -> for_each_pro sc .)
    IF              reduce using rule 11 (instruccion -> for_each_pro sc .)
    WHILE           reduce using rule 11 (instruccion -> for_each_pro sc .)
    FOR             reduce using rule 11 (instruccion -> for_each_pro sc .)
    INTERFACE       reduce using rule 11 (instruccion -> for_each_pro sc .)
    CONTINUE        reduce using rule 11 (instruccion -> for_each_pro sc .)
    BREAK           reduce using rule 11 (instruccion -> for_each_pro sc .)
    RETURN          reduce using rule 11 (instruccion -> for_each_pro sc .)
    FUNCTION        reduce using rule 11 (instruccion -> for_each_pro sc .)
    NOT             reduce using rule 11 (instruccion -> for_each_pro sc .)
    MENOS           reduce using rule 11 (instruccion -> for_each_pro sc .)
    MAS             reduce using rule 11 (instruccion -> for_each_pro sc .)
    ENTERO          reduce using rule 11 (instruccion -> for_each_pro sc .)
    DECIMAL         reduce using rule 11 (instruccion -> for_each_pro sc .)
    CADENA          reduce using rule 11 (instruccion -> for_each_pro sc .)
    TRUE            reduce using rule 11 (instruccion -> for_each_pro sc .)
    FALSE           reduce using rule 11 (instruccion -> for_each_pro sc .)
    L_PAREN         reduce using rule 11 (instruccion -> for_each_pro sc .)
    L_CORCHETE      reduce using rule 11 (instruccion -> for_each_pro sc .)
    L_LLAVE         reduce using rule 11 (instruccion -> for_each_pro sc .)
    $end            reduce using rule 11 (instruccion -> for_each_pro sc .)
    R_LLAVE         reduce using rule 11 (instruccion -> for_each_pro sc .)


state 62

    (12) instruccion -> interface_pro sc .

    CONSOLE         reduce using rule 12 (instruccion -> interface_pro sc .)
    LET             reduce using rule 12 (instruccion -> interface_pro sc .)
    LITERAL         reduce using rule 12 (instruccion -> interface_pro sc .)
    IF              reduce using rule 12 (instruccion -> interface_pro sc .)
    WHILE           reduce using rule 12 (instruccion -> interface_pro sc .)
    FOR             reduce using rule 12 (instruccion -> interface_pro sc .)
    INTERFACE       reduce using rule 12 (instruccion -> interface_pro sc .)
    CONTINUE        reduce using rule 12 (instruccion -> interface_pro sc .)
    BREAK           reduce using rule 12 (instruccion -> interface_pro sc .)
    RETURN          reduce using rule 12 (instruccion -> interface_pro sc .)
    FUNCTION        reduce using rule 12 (instruccion -> interface_pro sc .)
    NOT             reduce using rule 12 (instruccion -> interface_pro sc .)
    MENOS           reduce using rule 12 (instruccion -> interface_pro sc .)
    MAS             reduce using rule 12 (instruccion -> interface_pro sc .)
    ENTERO          reduce using rule 12 (instruccion -> interface_pro sc .)
    DECIMAL         reduce using rule 12 (instruccion -> interface_pro sc .)
    CADENA          reduce using rule 12 (instruccion -> interface_pro sc .)
    TRUE            reduce using rule 12 (instruccion -> interface_pro sc .)
    FALSE           reduce using rule 12 (instruccion -> interface_pro sc .)
    L_PAREN         reduce using rule 12 (instruccion -> interface_pro sc .)
    L_CORCHETE      reduce using rule 12 (instruccion -> interface_pro sc .)
    L_LLAVE         reduce using rule 12 (instruccion -> interface_pro sc .)
    $end            reduce using rule 12 (instruccion -> interface_pro sc .)
    R_LLAVE         reduce using rule 12 (instruccion -> interface_pro sc .)


state 63

    (13) instruccion -> continue_pro sc .

    CONSOLE         reduce using rule 13 (instruccion -> continue_pro sc .)
    LET             reduce using rule 13 (instruccion -> continue_pro sc .)
    LITERAL         reduce using rule 13 (instruccion -> continue_pro sc .)
    IF              reduce using rule 13 (instruccion -> continue_pro sc .)
    WHILE           reduce using rule 13 (instruccion -> continue_pro sc .)
    FOR             reduce using rule 13 (instruccion -> continue_pro sc .)
    INTERFACE       reduce using rule 13 (instruccion -> continue_pro sc .)
    CONTINUE        reduce using rule 13 (instruccion -> continue_pro sc .)
    BREAK           reduce using rule 13 (instruccion -> continue_pro sc .)
    RETURN          reduce using rule 13 (instruccion -> continue_pro sc .)
    FUNCTION        reduce using rule 13 (instruccion -> continue_pro sc .)
    NOT             reduce using rule 13 (instruccion -> continue_pro sc .)
    MENOS           reduce using rule 13 (instruccion -> continue_pro sc .)
    MAS             reduce using rule 13 (instruccion -> continue_pro sc .)
    ENTERO          reduce using rule 13 (instruccion -> continue_pro sc .)
    DECIMAL         reduce using rule 13 (instruccion -> continue_pro sc .)
    CADENA          reduce using rule 13 (instruccion -> continue_pro sc .)
    TRUE            reduce using rule 13 (instruccion -> continue_pro sc .)
    FALSE           reduce using rule 13 (instruccion -> continue_pro sc .)
    L_PAREN         reduce using rule 13 (instruccion -> continue_pro sc .)
    L_CORCHETE      reduce using rule 13 (instruccion -> continue_pro sc .)
    L_LLAVE         reduce using rule 13 (instruccion -> continue_pro sc .)
    $end            reduce using rule 13 (instruccion -> continue_pro sc .)
    R_LLAVE         reduce using rule 13 (instruccion -> continue_pro sc .)


state 64

    (14) instruccion -> break_pro sc .

    CONSOLE         reduce using rule 14 (instruccion -> break_pro sc .)
    LET             reduce using rule 14 (instruccion -> break_pro sc .)
    LITERAL         reduce using rule 14 (instruccion -> break_pro sc .)
    IF              reduce using rule 14 (instruccion -> break_pro sc .)
    WHILE           reduce using rule 14 (instruccion -> break_pro sc .)
    FOR             reduce using rule 14 (instruccion -> break_pro sc .)
    INTERFACE       reduce using rule 14 (instruccion -> break_pro sc .)
    CONTINUE        reduce using rule 14 (instruccion -> break_pro sc .)
    BREAK           reduce using rule 14 (instruccion -> break_pro sc .)
    RETURN          reduce using rule 14 (instruccion -> break_pro sc .)
    FUNCTION        reduce using rule 14 (instruccion -> break_pro sc .)
    NOT             reduce using rule 14 (instruccion -> break_pro sc .)
    MENOS           reduce using rule 14 (instruccion -> break_pro sc .)
    MAS             reduce using rule 14 (instruccion -> break_pro sc .)
    ENTERO          reduce using rule 14 (instruccion -> break_pro sc .)
    DECIMAL         reduce using rule 14 (instruccion -> break_pro sc .)
    CADENA          reduce using rule 14 (instruccion -> break_pro sc .)
    TRUE            reduce using rule 14 (instruccion -> break_pro sc .)
    FALSE           reduce using rule 14 (instruccion -> break_pro sc .)
    L_PAREN         reduce using rule 14 (instruccion -> break_pro sc .)
    L_CORCHETE      reduce using rule 14 (instruccion -> break_pro sc .)
    L_LLAVE         reduce using rule 14 (instruccion -> break_pro sc .)
    $end            reduce using rule 14 (instruccion -> break_pro sc .)
    R_LLAVE         reduce using rule 14 (instruccion -> break_pro sc .)


state 65

    (15) instruccion -> return_pro sc .

    CONSOLE         reduce using rule 15 (instruccion -> return_pro sc .)
    LET             reduce using rule 15 (instruccion -> return_pro sc .)
    LITERAL         reduce using rule 15 (instruccion -> return_pro sc .)
    IF              reduce using rule 15 (instruccion -> return_pro sc .)
    WHILE           reduce using rule 15 (instruccion -> return_pro sc .)
    FOR             reduce using rule 15 (instruccion -> return_pro sc .)
    INTERFACE       reduce using rule 15 (instruccion -> return_pro sc .)
    CONTINUE        reduce using rule 15 (instruccion -> return_pro sc .)
    BREAK           reduce using rule 15 (instruccion -> return_pro sc .)
    RETURN          reduce using rule 15 (instruccion -> return_pro sc .)
    FUNCTION        reduce using rule 15 (instruccion -> return_pro sc .)
    NOT             reduce using rule 15 (instruccion -> return_pro sc .)
    MENOS           reduce using rule 15 (instruccion -> return_pro sc .)
    MAS             reduce using rule 15 (instruccion -> return_pro sc .)
    ENTERO          reduce using rule 15 (instruccion -> return_pro sc .)
    DECIMAL         reduce using rule 15 (instruccion -> return_pro sc .)
    CADENA          reduce using rule 15 (instruccion -> return_pro sc .)
    TRUE            reduce using rule 15 (instruccion -> return_pro sc .)
    FALSE           reduce using rule 15 (instruccion -> return_pro sc .)
    L_PAREN         reduce using rule 15 (instruccion -> return_pro sc .)
    L_CORCHETE      reduce using rule 15 (instruccion -> return_pro sc .)
    L_LLAVE         reduce using rule 15 (instruccion -> return_pro sc .)
    $end            reduce using rule 15 (instruccion -> return_pro sc .)
    R_LLAVE         reduce using rule 15 (instruccion -> return_pro sc .)


state 66

    (16) instruccion -> function_pro sc .

    CONSOLE         reduce using rule 16 (instruccion -> function_pro sc .)
    LET             reduce using rule 16 (instruccion -> function_pro sc .)
    LITERAL         reduce using rule 16 (instruccion -> function_pro sc .)
    IF              reduce using rule 16 (instruccion -> function_pro sc .)
    WHILE           reduce using rule 16 (instruccion -> function_pro sc .)
    FOR             reduce using rule 16 (instruccion -> function_pro sc .)
    INTERFACE       reduce using rule 16 (instruccion -> function_pro sc .)
    CONTINUE        reduce using rule 16 (instruccion -> function_pro sc .)
    BREAK           reduce using rule 16 (instruccion -> function_pro sc .)
    RETURN          reduce using rule 16 (instruccion -> function_pro sc .)
    FUNCTION        reduce using rule 16 (instruccion -> function_pro sc .)
    NOT             reduce using rule 16 (instruccion -> function_pro sc .)
    MENOS           reduce using rule 16 (instruccion -> function_pro sc .)
    MAS             reduce using rule 16 (instruccion -> function_pro sc .)
    ENTERO          reduce using rule 16 (instruccion -> function_pro sc .)
    DECIMAL         reduce using rule 16 (instruccion -> function_pro sc .)
    CADENA          reduce using rule 16 (instruccion -> function_pro sc .)
    TRUE            reduce using rule 16 (instruccion -> function_pro sc .)
    FALSE           reduce using rule 16 (instruccion -> function_pro sc .)
    L_PAREN         reduce using rule 16 (instruccion -> function_pro sc .)
    L_CORCHETE      reduce using rule 16 (instruccion -> function_pro sc .)
    L_LLAVE         reduce using rule 16 (instruccion -> function_pro sc .)
    $end            reduce using rule 16 (instruccion -> function_pro sc .)
    R_LLAVE         reduce using rule 16 (instruccion -> function_pro sc .)


state 67

    (17) instruccion -> call_function_pro sc .

    CONSOLE         reduce using rule 17 (instruccion -> call_function_pro sc .)
    LET             reduce using rule 17 (instruccion -> call_function_pro sc .)
    LITERAL         reduce using rule 17 (instruccion -> call_function_pro sc .)
    IF              reduce using rule 17 (instruccion -> call_function_pro sc .)
    WHILE           reduce using rule 17 (instruccion -> call_function_pro sc .)
    FOR             reduce using rule 17 (instruccion -> call_function_pro sc .)
    INTERFACE       reduce using rule 17 (instruccion -> call_function_pro sc .)
    CONTINUE        reduce using rule 17 (instruccion -> call_function_pro sc .)
    BREAK           reduce using rule 17 (instruccion -> call_function_pro sc .)
    RETURN          reduce using rule 17 (instruccion -> call_function_pro sc .)
    FUNCTION        reduce using rule 17 (instruccion -> call_function_pro sc .)
    NOT             reduce using rule 17 (instruccion -> call_function_pro sc .)
    MENOS           reduce using rule 17 (instruccion -> call_function_pro sc .)
    MAS             reduce using rule 17 (instruccion -> call_function_pro sc .)
    ENTERO          reduce using rule 17 (instruccion -> call_function_pro sc .)
    DECIMAL         reduce using rule 17 (instruccion -> call_function_pro sc .)
    CADENA          reduce using rule 17 (instruccion -> call_function_pro sc .)
    TRUE            reduce using rule 17 (instruccion -> call_function_pro sc .)
    FALSE           reduce using rule 17 (instruccion -> call_function_pro sc .)
    L_PAREN         reduce using rule 17 (instruccion -> call_function_pro sc .)
    L_CORCHETE      reduce using rule 17 (instruccion -> call_function_pro sc .)
    L_LLAVE         reduce using rule 17 (instruccion -> call_function_pro sc .)
    $end            reduce using rule 17 (instruccion -> call_function_pro sc .)
    R_LLAVE         reduce using rule 17 (instruccion -> call_function_pro sc .)


state 68

    (18) instruccion -> sumadores sc .

    CONSOLE         reduce using rule 18 (instruccion -> sumadores sc .)
    LET             reduce using rule 18 (instruccion -> sumadores sc .)
    LITERAL         reduce using rule 18 (instruccion -> sumadores sc .)
    IF              reduce using rule 18 (instruccion -> sumadores sc .)
    WHILE           reduce using rule 18 (instruccion -> sumadores sc .)
    FOR             reduce using rule 18 (instruccion -> sumadores sc .)
    INTERFACE       reduce using rule 18 (instruccion -> sumadores sc .)
    CONTINUE        reduce using rule 18 (instruccion -> sumadores sc .)
    BREAK           reduce using rule 18 (instruccion -> sumadores sc .)
    RETURN          reduce using rule 18 (instruccion -> sumadores sc .)
    FUNCTION        reduce using rule 18 (instruccion -> sumadores sc .)
    NOT             reduce using rule 18 (instruccion -> sumadores sc .)
    MENOS           reduce using rule 18 (instruccion -> sumadores sc .)
    MAS             reduce using rule 18 (instruccion -> sumadores sc .)
    ENTERO          reduce using rule 18 (instruccion -> sumadores sc .)
    DECIMAL         reduce using rule 18 (instruccion -> sumadores sc .)
    CADENA          reduce using rule 18 (instruccion -> sumadores sc .)
    TRUE            reduce using rule 18 (instruccion -> sumadores sc .)
    FALSE           reduce using rule 18 (instruccion -> sumadores sc .)
    L_PAREN         reduce using rule 18 (instruccion -> sumadores sc .)
    L_CORCHETE      reduce using rule 18 (instruccion -> sumadores sc .)
    L_LLAVE         reduce using rule 18 (instruccion -> sumadores sc .)
    $end            reduce using rule 18 (instruccion -> sumadores sc .)
    R_LLAVE         reduce using rule 18 (instruccion -> sumadores sc .)


state 69

    (67) console_pro -> CONSOLE PUNTO . LOG L_PAREN expresion R_PAREN

    LOG             shift and go to state 111


state 70

    (103) h -> L_PAREN a . R_PAREN
    (70) a -> a . OR b
    (105) h -> a . PUNTO LITERAL
    (106) h -> a . PUNTO nativeFun L_PAREN expresion R_PAREN
    (107) h -> a . PUNTO nativeFun L_PAREN R_PAREN

    R_PAREN         shift and go to state 112
    OR              shift and go to state 83
    PUNTO           shift and go to state 113


state 71

    (97) h -> LITERAL .
    (23) call_function_pro -> LITERAL . L_PAREN values R_PAREN
    (24) call_function_pro -> LITERAL . L_PAREN R_PAREN
    (108) array_val_pro -> LITERAL . dimensions
    (109) dimensions -> . dimensions L_CORCHETE a R_CORCHETE
    (110) dimensions -> . L_CORCHETE a R_CORCHETE

  ! shift/reduce conflict for L_PAREN resolved as shift
  ! shift/reduce conflict for L_CORCHETE resolved as shift
    TIMES           reduce using rule 97 (h -> LITERAL .)
    DIVIDE          reduce using rule 97 (h -> LITERAL .)
    MOD             reduce using rule 97 (h -> LITERAL .)
    POTENCIA        reduce using rule 97 (h -> LITERAL .)
    MAS             reduce using rule 97 (h -> LITERAL .)
    MENOS           reduce using rule 97 (h -> LITERAL .)
    DISTINTO_QUE    reduce using rule 97 (h -> LITERAL .)
    MENOR_QUE       reduce using rule 97 (h -> LITERAL .)
    MENOR_IGUAL_QUE reduce using rule 97 (h -> LITERAL .)
    MAYOR_QUE       reduce using rule 97 (h -> LITERAL .)
    MAYOR_IGUAL_QUE reduce using rule 97 (h -> LITERAL .)
    TRIPLE_IGUAL    reduce using rule 97 (h -> LITERAL .)
    AND             reduce using rule 97 (h -> LITERAL .)
    R_PAREN         reduce using rule 97 (h -> LITERAL .)
    OR              reduce using rule 97 (h -> LITERAL .)
    PUNTO           reduce using rule 97 (h -> LITERAL .)
    SEMI_COLON      reduce using rule 97 (h -> LITERAL .)
    CONSOLE         reduce using rule 97 (h -> LITERAL .)
    LET             reduce using rule 97 (h -> LITERAL .)
    LITERAL         reduce using rule 97 (h -> LITERAL .)
    IF              reduce using rule 97 (h -> LITERAL .)
    WHILE           reduce using rule 97 (h -> LITERAL .)
    FOR             reduce using rule 97 (h -> LITERAL .)
    INTERFACE       reduce using rule 97 (h -> LITERAL .)
    CONTINUE        reduce using rule 97 (h -> LITERAL .)
    BREAK           reduce using rule 97 (h -> LITERAL .)
    RETURN          reduce using rule 97 (h -> LITERAL .)
    FUNCTION        reduce using rule 97 (h -> LITERAL .)
    NOT             reduce using rule 97 (h -> LITERAL .)
    ENTERO          reduce using rule 97 (h -> LITERAL .)
    DECIMAL         reduce using rule 97 (h -> LITERAL .)
    CADENA          reduce using rule 97 (h -> LITERAL .)
    TRUE            reduce using rule 97 (h -> LITERAL .)
    FALSE           reduce using rule 97 (h -> LITERAL .)
    L_LLAVE         reduce using rule 97 (h -> LITERAL .)
    $end            reduce using rule 97 (h -> LITERAL .)
    R_LLAVE         reduce using rule 97 (h -> LITERAL .)
    R_CORCHETE      reduce using rule 97 (h -> LITERAL .)
    COMA            reduce using rule 97 (h -> LITERAL .)
    L_PAREN         shift and go to state 77
    L_CORCHETE      shift and go to state 81

  ! L_PAREN         [ reduce using rule 97 (h -> LITERAL .) ]
  ! L_CORCHETE      [ reduce using rule 97 (h -> LITERAL .) ]

    dimensions                     shift and go to state 80

state 72

    (100) h -> call_function_pro .

    TIMES           reduce using rule 100 (h -> call_function_pro .)
    DIVIDE          reduce using rule 100 (h -> call_function_pro .)
    MOD             reduce using rule 100 (h -> call_function_pro .)
    POTENCIA        reduce using rule 100 (h -> call_function_pro .)
    MAS             reduce using rule 100 (h -> call_function_pro .)
    MENOS           reduce using rule 100 (h -> call_function_pro .)
    DISTINTO_QUE    reduce using rule 100 (h -> call_function_pro .)
    MENOR_QUE       reduce using rule 100 (h -> call_function_pro .)
    MENOR_IGUAL_QUE reduce using rule 100 (h -> call_function_pro .)
    MAYOR_QUE       reduce using rule 100 (h -> call_function_pro .)
    MAYOR_IGUAL_QUE reduce using rule 100 (h -> call_function_pro .)
    TRIPLE_IGUAL    reduce using rule 100 (h -> call_function_pro .)
    AND             reduce using rule 100 (h -> call_function_pro .)
    R_PAREN         reduce using rule 100 (h -> call_function_pro .)
    OR              reduce using rule 100 (h -> call_function_pro .)
    PUNTO           reduce using rule 100 (h -> call_function_pro .)
    SEMI_COLON      reduce using rule 100 (h -> call_function_pro .)
    CONSOLE         reduce using rule 100 (h -> call_function_pro .)
    LET             reduce using rule 100 (h -> call_function_pro .)
    LITERAL         reduce using rule 100 (h -> call_function_pro .)
    IF              reduce using rule 100 (h -> call_function_pro .)
    WHILE           reduce using rule 100 (h -> call_function_pro .)
    FOR             reduce using rule 100 (h -> call_function_pro .)
    INTERFACE       reduce using rule 100 (h -> call_function_pro .)
    CONTINUE        reduce using rule 100 (h -> call_function_pro .)
    BREAK           reduce using rule 100 (h -> call_function_pro .)
    RETURN          reduce using rule 100 (h -> call_function_pro .)
    FUNCTION        reduce using rule 100 (h -> call_function_pro .)
    NOT             reduce using rule 100 (h -> call_function_pro .)
    ENTERO          reduce using rule 100 (h -> call_function_pro .)
    DECIMAL         reduce using rule 100 (h -> call_function_pro .)
    CADENA          reduce using rule 100 (h -> call_function_pro .)
    TRUE            reduce using rule 100 (h -> call_function_pro .)
    FALSE           reduce using rule 100 (h -> call_function_pro .)
    L_PAREN         reduce using rule 100 (h -> call_function_pro .)
    L_CORCHETE      reduce using rule 100 (h -> call_function_pro .)
    L_LLAVE         reduce using rule 100 (h -> call_function_pro .)
    $end            reduce using rule 100 (h -> call_function_pro .)
    R_LLAVE         reduce using rule 100 (h -> call_function_pro .)
    R_CORCHETE      reduce using rule 100 (h -> call_function_pro .)
    COMA            reduce using rule 100 (h -> call_function_pro .)


state 73

    (41) declaration_instruction -> LET declaracion_list .
    (42) declaracion_list -> declaracion_list . COMA assignacion_instruction

    SEMI_COLON      reduce using rule 41 (declaration_instruction -> LET declaracion_list .)
    CONSOLE         reduce using rule 41 (declaration_instruction -> LET declaracion_list .)
    LET             reduce using rule 41 (declaration_instruction -> LET declaracion_list .)
    LITERAL         reduce using rule 41 (declaration_instruction -> LET declaracion_list .)
    IF              reduce using rule 41 (declaration_instruction -> LET declaracion_list .)
    WHILE           reduce using rule 41 (declaration_instruction -> LET declaracion_list .)
    FOR             reduce using rule 41 (declaration_instruction -> LET declaracion_list .)
    INTERFACE       reduce using rule 41 (declaration_instruction -> LET declaracion_list .)
    CONTINUE        reduce using rule 41 (declaration_instruction -> LET declaracion_list .)
    BREAK           reduce using rule 41 (declaration_instruction -> LET declaracion_list .)
    RETURN          reduce using rule 41 (declaration_instruction -> LET declaracion_list .)
    FUNCTION        reduce using rule 41 (declaration_instruction -> LET declaracion_list .)
    NOT             reduce using rule 41 (declaration_instruction -> LET declaracion_list .)
    MENOS           reduce using rule 41 (declaration_instruction -> LET declaracion_list .)
    MAS             reduce using rule 41 (declaration_instruction -> LET declaracion_list .)
    ENTERO          reduce using rule 41 (declaration_instruction -> LET declaracion_list .)
    DECIMAL         reduce using rule 41 (declaration_instruction -> LET declaracion_list .)
    CADENA          reduce using rule 41 (declaration_instruction -> LET declaracion_list .)
    TRUE            reduce using rule 41 (declaration_instruction -> LET declaracion_list .)
    FALSE           reduce using rule 41 (declaration_instruction -> LET declaracion_list .)
    L_PAREN         reduce using rule 41 (declaration_instruction -> LET declaracion_list .)
    L_CORCHETE      reduce using rule 41 (declaration_instruction -> LET declaracion_list .)
    L_LLAVE         reduce using rule 41 (declaration_instruction -> LET declaracion_list .)
    $end            reduce using rule 41 (declaration_instruction -> LET declaracion_list .)
    R_LLAVE         reduce using rule 41 (declaration_instruction -> LET declaracion_list .)
    COMA            shift and go to state 114


state 74

    (43) declaracion_list -> assignacion_instruction .

    COMA            reduce using rule 43 (declaracion_list -> assignacion_instruction .)
    SEMI_COLON      reduce using rule 43 (declaracion_list -> assignacion_instruction .)
    CONSOLE         reduce using rule 43 (declaracion_list -> assignacion_instruction .)
    LET             reduce using rule 43 (declaracion_list -> assignacion_instruction .)
    LITERAL         reduce using rule 43 (declaracion_list -> assignacion_instruction .)
    IF              reduce using rule 43 (declaracion_list -> assignacion_instruction .)
    WHILE           reduce using rule 43 (declaracion_list -> assignacion_instruction .)
    FOR             reduce using rule 43 (declaracion_list -> assignacion_instruction .)
    INTERFACE       reduce using rule 43 (declaracion_list -> assignacion_instruction .)
    CONTINUE        reduce using rule 43 (declaracion_list -> assignacion_instruction .)
    BREAK           reduce using rule 43 (declaracion_list -> assignacion_instruction .)
    RETURN          reduce using rule 43 (declaracion_list -> assignacion_instruction .)
    FUNCTION        reduce using rule 43 (declaracion_list -> assignacion_instruction .)
    NOT             reduce using rule 43 (declaracion_list -> assignacion_instruction .)
    MENOS           reduce using rule 43 (declaracion_list -> assignacion_instruction .)
    MAS             reduce using rule 43 (declaracion_list -> assignacion_instruction .)
    ENTERO          reduce using rule 43 (declaracion_list -> assignacion_instruction .)
    DECIMAL         reduce using rule 43 (declaracion_list -> assignacion_instruction .)
    CADENA          reduce using rule 43 (declaracion_list -> assignacion_instruction .)
    TRUE            reduce using rule 43 (declaracion_list -> assignacion_instruction .)
    FALSE           reduce using rule 43 (declaracion_list -> assignacion_instruction .)
    L_PAREN         reduce using rule 43 (declaracion_list -> assignacion_instruction .)
    L_CORCHETE      reduce using rule 43 (declaracion_list -> assignacion_instruction .)
    L_LLAVE         reduce using rule 43 (declaracion_list -> assignacion_instruction .)
    $end            reduce using rule 43 (declaracion_list -> assignacion_instruction .)
    R_LLAVE         reduce using rule 43 (declaracion_list -> assignacion_instruction .)


state 75

    (44) assignacion_instruction -> LITERAL . COLON type IGUAL a
    (45) assignacion_instruction -> LITERAL . COLON type
    (46) assignacion_instruction -> LITERAL . IGUAL a
    (47) assignacion_instruction -> LITERAL .

    COLON           shift and go to state 115
    IGUAL           shift and go to state 116
    COMA            reduce using rule 47 (assignacion_instruction -> LITERAL .)
    SEMI_COLON      reduce using rule 47 (assignacion_instruction -> LITERAL .)
    CONSOLE         reduce using rule 47 (assignacion_instruction -> LITERAL .)
    LET             reduce using rule 47 (assignacion_instruction -> LITERAL .)
    LITERAL         reduce using rule 47 (assignacion_instruction -> LITERAL .)
    IF              reduce using rule 47 (assignacion_instruction -> LITERAL .)
    WHILE           reduce using rule 47 (assignacion_instruction -> LITERAL .)
    FOR             reduce using rule 47 (assignacion_instruction -> LITERAL .)
    INTERFACE       reduce using rule 47 (assignacion_instruction -> LITERAL .)
    CONTINUE        reduce using rule 47 (assignacion_instruction -> LITERAL .)
    BREAK           reduce using rule 47 (assignacion_instruction -> LITERAL .)
    RETURN          reduce using rule 47 (assignacion_instruction -> LITERAL .)
    FUNCTION        reduce using rule 47 (assignacion_instruction -> LITERAL .)
    NOT             reduce using rule 47 (assignacion_instruction -> LITERAL .)
    MENOS           reduce using rule 47 (assignacion_instruction -> LITERAL .)
    MAS             reduce using rule 47 (assignacion_instruction -> LITERAL .)
    ENTERO          reduce using rule 47 (assignacion_instruction -> LITERAL .)
    DECIMAL         reduce using rule 47 (assignacion_instruction -> LITERAL .)
    CADENA          reduce using rule 47 (assignacion_instruction -> LITERAL .)
    TRUE            reduce using rule 47 (assignacion_instruction -> LITERAL .)
    FALSE           reduce using rule 47 (assignacion_instruction -> LITERAL .)
    L_PAREN         reduce using rule 47 (assignacion_instruction -> LITERAL .)
    L_CORCHETE      reduce using rule 47 (assignacion_instruction -> LITERAL .)
    L_LLAVE         reduce using rule 47 (assignacion_instruction -> LITERAL .)
    $end            reduce using rule 47 (assignacion_instruction -> LITERAL .)
    R_LLAVE         reduce using rule 47 (assignacion_instruction -> LITERAL .)


state 76

    (54) assig_pro -> LITERAL IGUAL . a
    (70) a -> . a OR b
    (71) a -> . b
    (72) b -> . b AND c
    (73) b -> . c
    (74) c -> . NOT d
    (75) c -> . d
    (76) d -> . d DISTINTO_QUE e
    (77) d -> . d MENOR_QUE e
    (78) d -> . d MENOR_IGUAL_QUE e
    (79) d -> . d MAYOR_QUE e
    (80) d -> . d MAYOR_IGUAL_QUE e
    (81) d -> . d TRIPLE_IGUAL e
    (82) d -> . e
    (83) e -> . e MAS f
    (84) e -> . e MENOS f
    (85) e -> . f
    (86) f -> . MENOS g
    (87) f -> . MAS g
    (88) f -> . g
    (89) g -> . g TIMES h
    (90) g -> . g DIVIDE h
    (91) g -> . g MOD h
    (92) g -> . g POTENCIA h
    (93) g -> . h
    (94) h -> . ENTERO
    (95) h -> . DECIMAL
    (96) h -> . CADENA
    (97) h -> . LITERAL
    (98) h -> . TRUE
    (99) h -> . FALSE
    (100) h -> . call_function_pro
    (101) h -> . array_pro
    (102) h -> . interface_assi
    (103) h -> . L_PAREN a R_PAREN
    (104) h -> . array_val_pro
    (105) h -> . a PUNTO LITERAL
    (106) h -> . a PUNTO nativeFun L_PAREN expresion R_PAREN
    (107) h -> . a PUNTO nativeFun L_PAREN R_PAREN
    (23) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (24) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (116) array_pro -> . L_CORCHETE values R_CORCHETE
    (113) interface_assi -> . L_LLAVE atributos_assi R_LLAVE
    (108) array_val_pro -> . LITERAL dimensions

    NOT             shift and go to state 37
    MENOS           shift and go to state 34
    MAS             shift and go to state 33
    ENTERO          shift and go to state 43
    DECIMAL         shift and go to state 44
    CADENA          shift and go to state 45
    LITERAL         shift and go to state 71
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    L_PAREN         shift and go to state 20
    L_CORCHETE      shift and go to state 51
    L_LLAVE         shift and go to state 25

    a                              shift and go to state 117
    b                              shift and go to state 35
    c                              shift and go to state 36
    d                              shift and go to state 38
    e                              shift and go to state 39
    f                              shift and go to state 40
    g                              shift and go to state 41
    h                              shift and go to state 42
    call_function_pro              shift and go to state 72
    array_pro                      shift and go to state 48
    interface_assi                 shift and go to state 49
    array_val_pro                  shift and go to state 50

state 77

    (23) call_function_pro -> LITERAL L_PAREN . values R_PAREN
    (24) call_function_pro -> LITERAL L_PAREN . R_PAREN
    (25) values -> . values COMA a
    (26) values -> . a
    (70) a -> . a OR b
    (71) a -> . b
    (72) b -> . b AND c
    (73) b -> . c
    (74) c -> . NOT d
    (75) c -> . d
    (76) d -> . d DISTINTO_QUE e
    (77) d -> . d MENOR_QUE e
    (78) d -> . d MENOR_IGUAL_QUE e
    (79) d -> . d MAYOR_QUE e
    (80) d -> . d MAYOR_IGUAL_QUE e
    (81) d -> . d TRIPLE_IGUAL e
    (82) d -> . e
    (83) e -> . e MAS f
    (84) e -> . e MENOS f
    (85) e -> . f
    (86) f -> . MENOS g
    (87) f -> . MAS g
    (88) f -> . g
    (89) g -> . g TIMES h
    (90) g -> . g DIVIDE h
    (91) g -> . g MOD h
    (92) g -> . g POTENCIA h
    (93) g -> . h
    (94) h -> . ENTERO
    (95) h -> . DECIMAL
    (96) h -> . CADENA
    (97) h -> . LITERAL
    (98) h -> . TRUE
    (99) h -> . FALSE
    (100) h -> . call_function_pro
    (101) h -> . array_pro
    (102) h -> . interface_assi
    (103) h -> . L_PAREN a R_PAREN
    (104) h -> . array_val_pro
    (105) h -> . a PUNTO LITERAL
    (106) h -> . a PUNTO nativeFun L_PAREN expresion R_PAREN
    (107) h -> . a PUNTO nativeFun L_PAREN R_PAREN
    (23) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (24) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (116) array_pro -> . L_CORCHETE values R_CORCHETE
    (113) interface_assi -> . L_LLAVE atributos_assi R_LLAVE
    (108) array_val_pro -> . LITERAL dimensions

    R_PAREN         shift and go to state 119
    NOT             shift and go to state 37
    MENOS           shift and go to state 34
    MAS             shift and go to state 33
    ENTERO          shift and go to state 43
    DECIMAL         shift and go to state 44
    CADENA          shift and go to state 45
    LITERAL         shift and go to state 71
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    L_PAREN         shift and go to state 20
    L_CORCHETE      shift and go to state 51
    L_LLAVE         shift and go to state 25

    values                         shift and go to state 118
    a                              shift and go to state 110
    b                              shift and go to state 35
    c                              shift and go to state 36
    d                              shift and go to state 38
    e                              shift and go to state 39
    f                              shift and go to state 40
    g                              shift and go to state 41
    h                              shift and go to state 42
    call_function_pro              shift and go to state 72
    array_pro                      shift and go to state 48
    interface_assi                 shift and go to state 49
    array_val_pro                  shift and go to state 50

state 78

    (111) sumadores -> LITERAL MAS . MAS

    MAS             shift and go to state 120


state 79

    (112) sumadores -> LITERAL MENOS . MENOS

    MENOS           shift and go to state 121


state 80

    (108) array_val_pro -> LITERAL dimensions .
    (109) dimensions -> dimensions . L_CORCHETE a R_CORCHETE

  ! shift/reduce conflict for L_CORCHETE resolved as shift
    TIMES           reduce using rule 108 (array_val_pro -> LITERAL dimensions .)
    DIVIDE          reduce using rule 108 (array_val_pro -> LITERAL dimensions .)
    MOD             reduce using rule 108 (array_val_pro -> LITERAL dimensions .)
    POTENCIA        reduce using rule 108 (array_val_pro -> LITERAL dimensions .)
    MAS             reduce using rule 108 (array_val_pro -> LITERAL dimensions .)
    MENOS           reduce using rule 108 (array_val_pro -> LITERAL dimensions .)
    DISTINTO_QUE    reduce using rule 108 (array_val_pro -> LITERAL dimensions .)
    MENOR_QUE       reduce using rule 108 (array_val_pro -> LITERAL dimensions .)
    MENOR_IGUAL_QUE reduce using rule 108 (array_val_pro -> LITERAL dimensions .)
    MAYOR_QUE       reduce using rule 108 (array_val_pro -> LITERAL dimensions .)
    MAYOR_IGUAL_QUE reduce using rule 108 (array_val_pro -> LITERAL dimensions .)
    TRIPLE_IGUAL    reduce using rule 108 (array_val_pro -> LITERAL dimensions .)
    AND             reduce using rule 108 (array_val_pro -> LITERAL dimensions .)
    PUNTO           reduce using rule 108 (array_val_pro -> LITERAL dimensions .)
    OR              reduce using rule 108 (array_val_pro -> LITERAL dimensions .)
    R_PAREN         reduce using rule 108 (array_val_pro -> LITERAL dimensions .)
    SEMI_COLON      reduce using rule 108 (array_val_pro -> LITERAL dimensions .)
    CONSOLE         reduce using rule 108 (array_val_pro -> LITERAL dimensions .)
    LET             reduce using rule 108 (array_val_pro -> LITERAL dimensions .)
    LITERAL         reduce using rule 108 (array_val_pro -> LITERAL dimensions .)
    IF              reduce using rule 108 (array_val_pro -> LITERAL dimensions .)
    WHILE           reduce using rule 108 (array_val_pro -> LITERAL dimensions .)
    FOR             reduce using rule 108 (array_val_pro -> LITERAL dimensions .)
    INTERFACE       reduce using rule 108 (array_val_pro -> LITERAL dimensions .)
    CONTINUE        reduce using rule 108 (array_val_pro -> LITERAL dimensions .)
    BREAK           reduce using rule 108 (array_val_pro -> LITERAL dimensions .)
    RETURN          reduce using rule 108 (array_val_pro -> LITERAL dimensions .)
    FUNCTION        reduce using rule 108 (array_val_pro -> LITERAL dimensions .)
    NOT             reduce using rule 108 (array_val_pro -> LITERAL dimensions .)
    ENTERO          reduce using rule 108 (array_val_pro -> LITERAL dimensions .)
    DECIMAL         reduce using rule 108 (array_val_pro -> LITERAL dimensions .)
    CADENA          reduce using rule 108 (array_val_pro -> LITERAL dimensions .)
    TRUE            reduce using rule 108 (array_val_pro -> LITERAL dimensions .)
    FALSE           reduce using rule 108 (array_val_pro -> LITERAL dimensions .)
    L_PAREN         reduce using rule 108 (array_val_pro -> LITERAL dimensions .)
    L_LLAVE         reduce using rule 108 (array_val_pro -> LITERAL dimensions .)
    $end            reduce using rule 108 (array_val_pro -> LITERAL dimensions .)
    R_LLAVE         reduce using rule 108 (array_val_pro -> LITERAL dimensions .)
    R_CORCHETE      reduce using rule 108 (array_val_pro -> LITERAL dimensions .)
    COMA            reduce using rule 108 (array_val_pro -> LITERAL dimensions .)
    L_CORCHETE      shift and go to state 122

  ! L_CORCHETE      [ reduce using rule 108 (array_val_pro -> LITERAL dimensions .) ]


state 81

    (110) dimensions -> L_CORCHETE . a R_CORCHETE
    (70) a -> . a OR b
    (71) a -> . b
    (72) b -> . b AND c
    (73) b -> . c
    (74) c -> . NOT d
    (75) c -> . d
    (76) d -> . d DISTINTO_QUE e
    (77) d -> . d MENOR_QUE e
    (78) d -> . d MENOR_IGUAL_QUE e
    (79) d -> . d MAYOR_QUE e
    (80) d -> . d MAYOR_IGUAL_QUE e
    (81) d -> . d TRIPLE_IGUAL e
    (82) d -> . e
    (83) e -> . e MAS f
    (84) e -> . e MENOS f
    (85) e -> . f
    (86) f -> . MENOS g
    (87) f -> . MAS g
    (88) f -> . g
    (89) g -> . g TIMES h
    (90) g -> . g DIVIDE h
    (91) g -> . g MOD h
    (92) g -> . g POTENCIA h
    (93) g -> . h
    (94) h -> . ENTERO
    (95) h -> . DECIMAL
    (96) h -> . CADENA
    (97) h -> . LITERAL
    (98) h -> . TRUE
    (99) h -> . FALSE
    (100) h -> . call_function_pro
    (101) h -> . array_pro
    (102) h -> . interface_assi
    (103) h -> . L_PAREN a R_PAREN
    (104) h -> . array_val_pro
    (105) h -> . a PUNTO LITERAL
    (106) h -> . a PUNTO nativeFun L_PAREN expresion R_PAREN
    (107) h -> . a PUNTO nativeFun L_PAREN R_PAREN
    (23) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (24) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (116) array_pro -> . L_CORCHETE values R_CORCHETE
    (113) interface_assi -> . L_LLAVE atributos_assi R_LLAVE
    (108) array_val_pro -> . LITERAL dimensions

    NOT             shift and go to state 37
    MENOS           shift and go to state 34
    MAS             shift and go to state 33
    ENTERO          shift and go to state 43
    DECIMAL         shift and go to state 44
    CADENA          shift and go to state 45
    LITERAL         shift and go to state 71
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    L_PAREN         shift and go to state 20
    L_CORCHETE      shift and go to state 51
    L_LLAVE         shift and go to state 25

    a                              shift and go to state 123
    b                              shift and go to state 35
    c                              shift and go to state 36
    d                              shift and go to state 38
    e                              shift and go to state 39
    f                              shift and go to state 40
    g                              shift and go to state 41
    h                              shift and go to state 42
    call_function_pro              shift and go to state 72
    array_pro                      shift and go to state 48
    interface_assi                 shift and go to state 49
    array_val_pro                  shift and go to state 50

state 82

    (40) interface_assign_pro -> a PUNTO . LITERAL IGUAL a
    (105) h -> a PUNTO . LITERAL
    (106) h -> a PUNTO . nativeFun L_PAREN expresion R_PAREN
    (107) h -> a PUNTO . nativeFun L_PAREN R_PAREN
    (117) nativeFun -> . TOSTRING
    (118) nativeFun -> . TOFIXED
    (119) nativeFun -> . TOEXPONENTIAL
    (120) nativeFun -> . TOLOWERCASE
    (121) nativeFun -> . TOUPPERCASE
    (122) nativeFun -> . SPLIT
    (123) nativeFun -> . CONCAT

    LITERAL         shift and go to state 124
    TOSTRING        shift and go to state 126
    TOFIXED         shift and go to state 127
    TOEXPONENTIAL   shift and go to state 128
    TOLOWERCASE     shift and go to state 129
    TOUPPERCASE     shift and go to state 130
    SPLIT           shift and go to state 131
    CONCAT          shift and go to state 132

    nativeFun                      shift and go to state 125

state 83

    (70) a -> a OR . b
    (72) b -> . b AND c
    (73) b -> . c
    (74) c -> . NOT d
    (75) c -> . d
    (76) d -> . d DISTINTO_QUE e
    (77) d -> . d MENOR_QUE e
    (78) d -> . d MENOR_IGUAL_QUE e
    (79) d -> . d MAYOR_QUE e
    (80) d -> . d MAYOR_IGUAL_QUE e
    (81) d -> . d TRIPLE_IGUAL e
    (82) d -> . e
    (83) e -> . e MAS f
    (84) e -> . e MENOS f
    (85) e -> . f
    (86) f -> . MENOS g
    (87) f -> . MAS g
    (88) f -> . g
    (89) g -> . g TIMES h
    (90) g -> . g DIVIDE h
    (91) g -> . g MOD h
    (92) g -> . g POTENCIA h
    (93) g -> . h
    (94) h -> . ENTERO
    (95) h -> . DECIMAL
    (96) h -> . CADENA
    (97) h -> . LITERAL
    (98) h -> . TRUE
    (99) h -> . FALSE
    (100) h -> . call_function_pro
    (101) h -> . array_pro
    (102) h -> . interface_assi
    (103) h -> . L_PAREN a R_PAREN
    (104) h -> . array_val_pro
    (105) h -> . a PUNTO LITERAL
    (106) h -> . a PUNTO nativeFun L_PAREN expresion R_PAREN
    (107) h -> . a PUNTO nativeFun L_PAREN R_PAREN
    (23) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (24) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (116) array_pro -> . L_CORCHETE values R_CORCHETE
    (113) interface_assi -> . L_LLAVE atributos_assi R_LLAVE
    (108) array_val_pro -> . LITERAL dimensions
    (70) a -> . a OR b
    (71) a -> . b

    NOT             shift and go to state 37
    MENOS           shift and go to state 34
    MAS             shift and go to state 33
    ENTERO          shift and go to state 43
    DECIMAL         shift and go to state 44
    CADENA          shift and go to state 45
    LITERAL         shift and go to state 71
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    L_PAREN         shift and go to state 20
    L_CORCHETE      shift and go to state 51
    L_LLAVE         shift and go to state 25

    a                              shift and go to state 93
    b                              shift and go to state 133
    c                              shift and go to state 36
    d                              shift and go to state 38
    e                              shift and go to state 39
    f                              shift and go to state 40
    g                              shift and go to state 41
    h                              shift and go to state 42
    call_function_pro              shift and go to state 72
    array_pro                      shift and go to state 48
    interface_assi                 shift and go to state 49
    array_val_pro                  shift and go to state 50

state 84

    (55) if_pro -> IF L_PAREN . a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro
    (70) a -> . a OR b
    (71) a -> . b
    (72) b -> . b AND c
    (73) b -> . c
    (74) c -> . NOT d
    (75) c -> . d
    (76) d -> . d DISTINTO_QUE e
    (77) d -> . d MENOR_QUE e
    (78) d -> . d MENOR_IGUAL_QUE e
    (79) d -> . d MAYOR_QUE e
    (80) d -> . d MAYOR_IGUAL_QUE e
    (81) d -> . d TRIPLE_IGUAL e
    (82) d -> . e
    (83) e -> . e MAS f
    (84) e -> . e MENOS f
    (85) e -> . f
    (86) f -> . MENOS g
    (87) f -> . MAS g
    (88) f -> . g
    (89) g -> . g TIMES h
    (90) g -> . g DIVIDE h
    (91) g -> . g MOD h
    (92) g -> . g POTENCIA h
    (93) g -> . h
    (94) h -> . ENTERO
    (95) h -> . DECIMAL
    (96) h -> . CADENA
    (97) h -> . LITERAL
    (98) h -> . TRUE
    (99) h -> . FALSE
    (100) h -> . call_function_pro
    (101) h -> . array_pro
    (102) h -> . interface_assi
    (103) h -> . L_PAREN a R_PAREN
    (104) h -> . array_val_pro
    (105) h -> . a PUNTO LITERAL
    (106) h -> . a PUNTO nativeFun L_PAREN expresion R_PAREN
    (107) h -> . a PUNTO nativeFun L_PAREN R_PAREN
    (23) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (24) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (116) array_pro -> . L_CORCHETE values R_CORCHETE
    (113) interface_assi -> . L_LLAVE atributos_assi R_LLAVE
    (108) array_val_pro -> . LITERAL dimensions

    NOT             shift and go to state 37
    MENOS           shift and go to state 34
    MAS             shift and go to state 33
    ENTERO          shift and go to state 43
    DECIMAL         shift and go to state 44
    CADENA          shift and go to state 45
    LITERAL         shift and go to state 71
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    L_PAREN         shift and go to state 20
    L_CORCHETE      shift and go to state 51
    L_LLAVE         shift and go to state 25

    a                              shift and go to state 134
    b                              shift and go to state 35
    c                              shift and go to state 36
    d                              shift and go to state 38
    e                              shift and go to state 39
    f                              shift and go to state 40
    g                              shift and go to state 41
    h                              shift and go to state 42
    call_function_pro              shift and go to state 72
    array_pro                      shift and go to state 48
    interface_assi                 shift and go to state 49
    array_val_pro                  shift and go to state 50

state 85

    (113) interface_assi -> L_LLAVE atributos_assi . R_LLAVE
    (114) atributos_assi -> atributos_assi . COMA LITERAL COLON a

    R_LLAVE         shift and go to state 135
    COMA            shift and go to state 136


state 86

    (115) atributos_assi -> LITERAL . COLON a

    COLON           shift and go to state 137


state 87

    (59) while_pro -> WHILE L_PAREN . a R_PAREN L_LLAVE instrucciones R_LLAVE
    (70) a -> . a OR b
    (71) a -> . b
    (72) b -> . b AND c
    (73) b -> . c
    (74) c -> . NOT d
    (75) c -> . d
    (76) d -> . d DISTINTO_QUE e
    (77) d -> . d MENOR_QUE e
    (78) d -> . d MENOR_IGUAL_QUE e
    (79) d -> . d MAYOR_QUE e
    (80) d -> . d MAYOR_IGUAL_QUE e
    (81) d -> . d TRIPLE_IGUAL e
    (82) d -> . e
    (83) e -> . e MAS f
    (84) e -> . e MENOS f
    (85) e -> . f
    (86) f -> . MENOS g
    (87) f -> . MAS g
    (88) f -> . g
    (89) g -> . g TIMES h
    (90) g -> . g DIVIDE h
    (91) g -> . g MOD h
    (92) g -> . g POTENCIA h
    (93) g -> . h
    (94) h -> . ENTERO
    (95) h -> . DECIMAL
    (96) h -> . CADENA
    (97) h -> . LITERAL
    (98) h -> . TRUE
    (99) h -> . FALSE
    (100) h -> . call_function_pro
    (101) h -> . array_pro
    (102) h -> . interface_assi
    (103) h -> . L_PAREN a R_PAREN
    (104) h -> . array_val_pro
    (105) h -> . a PUNTO LITERAL
    (106) h -> . a PUNTO nativeFun L_PAREN expresion R_PAREN
    (107) h -> . a PUNTO nativeFun L_PAREN R_PAREN
    (23) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (24) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (116) array_pro -> . L_CORCHETE values R_CORCHETE
    (113) interface_assi -> . L_LLAVE atributos_assi R_LLAVE
    (108) array_val_pro -> . LITERAL dimensions

    NOT             shift and go to state 37
    MENOS           shift and go to state 34
    MAS             shift and go to state 33
    ENTERO          shift and go to state 43
    DECIMAL         shift and go to state 44
    CADENA          shift and go to state 45
    LITERAL         shift and go to state 71
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    L_PAREN         shift and go to state 20
    L_CORCHETE      shift and go to state 51
    L_LLAVE         shift and go to state 25

    a                              shift and go to state 138
    b                              shift and go to state 35
    c                              shift and go to state 36
    d                              shift and go to state 38
    e                              shift and go to state 39
    f                              shift and go to state 40
    g                              shift and go to state 41
    h                              shift and go to state 42
    call_function_pro              shift and go to state 72
    array_pro                      shift and go to state 48
    interface_assi                 shift and go to state 49
    array_val_pro                  shift and go to state 50

state 88

    (60) for_pro -> FOR L_PAREN . declaration_instruction SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (61) for_pro -> FOR L_PAREN . assig_pro SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (64) for_each_pro -> FOR L_PAREN . for_each_dec R_PAREN L_LLAVE instrucciones R_LLAVE
    (41) declaration_instruction -> . LET declaracion_list
    (54) assig_pro -> . LITERAL IGUAL a
    (65) for_each_dec -> . LET LITERAL OF a
    (66) for_each_dec -> . LET LITERAL COLON type OF a

    LET             shift and go to state 142
    LITERAL         shift and go to state 143

    declaration_instruction        shift and go to state 139
    assig_pro                      shift and go to state 140
    for_each_dec                   shift and go to state 141

state 89

    (35) interface_pro -> INTERFACE LITERAL . L_LLAVE interface_atributos R_LLAVE

    L_LLAVE         shift and go to state 144


state 90

    (34) return_pro -> RETURN a .
    (70) a -> a . OR b
    (105) h -> a . PUNTO LITERAL
    (106) h -> a . PUNTO nativeFun L_PAREN expresion R_PAREN
    (107) h -> a . PUNTO nativeFun L_PAREN R_PAREN

    SEMI_COLON      reduce using rule 34 (return_pro -> RETURN a .)
    CONSOLE         reduce using rule 34 (return_pro -> RETURN a .)
    LET             reduce using rule 34 (return_pro -> RETURN a .)
    LITERAL         reduce using rule 34 (return_pro -> RETURN a .)
    IF              reduce using rule 34 (return_pro -> RETURN a .)
    WHILE           reduce using rule 34 (return_pro -> RETURN a .)
    FOR             reduce using rule 34 (return_pro -> RETURN a .)
    INTERFACE       reduce using rule 34 (return_pro -> RETURN a .)
    CONTINUE        reduce using rule 34 (return_pro -> RETURN a .)
    BREAK           reduce using rule 34 (return_pro -> RETURN a .)
    RETURN          reduce using rule 34 (return_pro -> RETURN a .)
    FUNCTION        reduce using rule 34 (return_pro -> RETURN a .)
    NOT             reduce using rule 34 (return_pro -> RETURN a .)
    MENOS           reduce using rule 34 (return_pro -> RETURN a .)
    MAS             reduce using rule 34 (return_pro -> RETURN a .)
    ENTERO          reduce using rule 34 (return_pro -> RETURN a .)
    DECIMAL         reduce using rule 34 (return_pro -> RETURN a .)
    CADENA          reduce using rule 34 (return_pro -> RETURN a .)
    TRUE            reduce using rule 34 (return_pro -> RETURN a .)
    FALSE           reduce using rule 34 (return_pro -> RETURN a .)
    L_PAREN         reduce using rule 34 (return_pro -> RETURN a .)
    L_CORCHETE      reduce using rule 34 (return_pro -> RETURN a .)
    L_LLAVE         reduce using rule 34 (return_pro -> RETURN a .)
    $end            reduce using rule 34 (return_pro -> RETURN a .)
    R_LLAVE         reduce using rule 34 (return_pro -> RETURN a .)
    OR              shift and go to state 83
    PUNTO           shift and go to state 113


state 91

    (21) function_pro -> FUNCTION LITERAL . L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (22) function_pro -> FUNCTION LITERAL . L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE

    L_PAREN         shift and go to state 145


state 92

    (87) f -> MAS g .
    (89) g -> g . TIMES h
    (90) g -> g . DIVIDE h
    (91) g -> g . MOD h
    (92) g -> g . POTENCIA h
    (88) f -> g .

  ! reduce/reduce conflict for MAS resolved using rule 87 (f -> MAS g .)
  ! reduce/reduce conflict for MENOS resolved using rule 87 (f -> MAS g .)
  ! reduce/reduce conflict for DISTINTO_QUE resolved using rule 87 (f -> MAS g .)
  ! reduce/reduce conflict for MENOR_QUE resolved using rule 87 (f -> MAS g .)
  ! reduce/reduce conflict for MENOR_IGUAL_QUE resolved using rule 87 (f -> MAS g .)
  ! reduce/reduce conflict for MAYOR_QUE resolved using rule 87 (f -> MAS g .)
  ! reduce/reduce conflict for MAYOR_IGUAL_QUE resolved using rule 87 (f -> MAS g .)
  ! reduce/reduce conflict for TRIPLE_IGUAL resolved using rule 87 (f -> MAS g .)
  ! reduce/reduce conflict for AND resolved using rule 87 (f -> MAS g .)
  ! reduce/reduce conflict for PUNTO resolved using rule 87 (f -> MAS g .)
  ! reduce/reduce conflict for OR resolved using rule 87 (f -> MAS g .)
    MAS             reduce using rule 87 (f -> MAS g .)
    MENOS           reduce using rule 87 (f -> MAS g .)
    DISTINTO_QUE    reduce using rule 87 (f -> MAS g .)
    MENOR_QUE       reduce using rule 87 (f -> MAS g .)
    MENOR_IGUAL_QUE reduce using rule 87 (f -> MAS g .)
    MAYOR_QUE       reduce using rule 87 (f -> MAS g .)
    MAYOR_IGUAL_QUE reduce using rule 87 (f -> MAS g .)
    TRIPLE_IGUAL    reduce using rule 87 (f -> MAS g .)
    AND             reduce using rule 87 (f -> MAS g .)
    PUNTO           reduce using rule 87 (f -> MAS g .)
    OR              reduce using rule 87 (f -> MAS g .)
    R_PAREN         reduce using rule 87 (f -> MAS g .)
    SEMI_COLON      reduce using rule 87 (f -> MAS g .)
    CONSOLE         reduce using rule 87 (f -> MAS g .)
    LET             reduce using rule 87 (f -> MAS g .)
    LITERAL         reduce using rule 87 (f -> MAS g .)
    IF              reduce using rule 87 (f -> MAS g .)
    WHILE           reduce using rule 87 (f -> MAS g .)
    FOR             reduce using rule 87 (f -> MAS g .)
    INTERFACE       reduce using rule 87 (f -> MAS g .)
    CONTINUE        reduce using rule 87 (f -> MAS g .)
    BREAK           reduce using rule 87 (f -> MAS g .)
    RETURN          reduce using rule 87 (f -> MAS g .)
    FUNCTION        reduce using rule 87 (f -> MAS g .)
    NOT             reduce using rule 87 (f -> MAS g .)
    ENTERO          reduce using rule 87 (f -> MAS g .)
    DECIMAL         reduce using rule 87 (f -> MAS g .)
    CADENA          reduce using rule 87 (f -> MAS g .)
    TRUE            reduce using rule 87 (f -> MAS g .)
    FALSE           reduce using rule 87 (f -> MAS g .)
    L_PAREN         reduce using rule 87 (f -> MAS g .)
    L_CORCHETE      reduce using rule 87 (f -> MAS g .)
    L_LLAVE         reduce using rule 87 (f -> MAS g .)
    $end            reduce using rule 87 (f -> MAS g .)
    R_LLAVE         reduce using rule 87 (f -> MAS g .)
    R_CORCHETE      reduce using rule 87 (f -> MAS g .)
    COMA            reduce using rule 87 (f -> MAS g .)
    TIMES           shift and go to state 105
    DIVIDE          shift and go to state 106
    MOD             shift and go to state 107
    POTENCIA        shift and go to state 108

  ! MAS             [ reduce using rule 88 (f -> g .) ]
  ! MENOS           [ reduce using rule 88 (f -> g .) ]
  ! DISTINTO_QUE    [ reduce using rule 88 (f -> g .) ]
  ! MENOR_QUE       [ reduce using rule 88 (f -> g .) ]
  ! MENOR_IGUAL_QUE [ reduce using rule 88 (f -> g .) ]
  ! MAYOR_QUE       [ reduce using rule 88 (f -> g .) ]
  ! MAYOR_IGUAL_QUE [ reduce using rule 88 (f -> g .) ]
  ! TRIPLE_IGUAL    [ reduce using rule 88 (f -> g .) ]
  ! AND             [ reduce using rule 88 (f -> g .) ]
  ! PUNTO           [ reduce using rule 88 (f -> g .) ]
  ! OR              [ reduce using rule 88 (f -> g .) ]


state 93

    (105) h -> a . PUNTO LITERAL
    (106) h -> a . PUNTO nativeFun L_PAREN expresion R_PAREN
    (107) h -> a . PUNTO nativeFun L_PAREN R_PAREN
    (70) a -> a . OR b

    PUNTO           shift and go to state 113
    OR              shift and go to state 83


state 94

    (86) f -> MENOS g .
    (89) g -> g . TIMES h
    (90) g -> g . DIVIDE h
    (91) g -> g . MOD h
    (92) g -> g . POTENCIA h
    (88) f -> g .

  ! reduce/reduce conflict for MAS resolved using rule 86 (f -> MENOS g .)
  ! reduce/reduce conflict for MENOS resolved using rule 86 (f -> MENOS g .)
  ! reduce/reduce conflict for DISTINTO_QUE resolved using rule 86 (f -> MENOS g .)
  ! reduce/reduce conflict for MENOR_QUE resolved using rule 86 (f -> MENOS g .)
  ! reduce/reduce conflict for MENOR_IGUAL_QUE resolved using rule 86 (f -> MENOS g .)
  ! reduce/reduce conflict for MAYOR_QUE resolved using rule 86 (f -> MENOS g .)
  ! reduce/reduce conflict for MAYOR_IGUAL_QUE resolved using rule 86 (f -> MENOS g .)
  ! reduce/reduce conflict for TRIPLE_IGUAL resolved using rule 86 (f -> MENOS g .)
  ! reduce/reduce conflict for AND resolved using rule 86 (f -> MENOS g .)
  ! reduce/reduce conflict for PUNTO resolved using rule 86 (f -> MENOS g .)
  ! reduce/reduce conflict for OR resolved using rule 86 (f -> MENOS g .)
    MAS             reduce using rule 86 (f -> MENOS g .)
    MENOS           reduce using rule 86 (f -> MENOS g .)
    DISTINTO_QUE    reduce using rule 86 (f -> MENOS g .)
    MENOR_QUE       reduce using rule 86 (f -> MENOS g .)
    MENOR_IGUAL_QUE reduce using rule 86 (f -> MENOS g .)
    MAYOR_QUE       reduce using rule 86 (f -> MENOS g .)
    MAYOR_IGUAL_QUE reduce using rule 86 (f -> MENOS g .)
    TRIPLE_IGUAL    reduce using rule 86 (f -> MENOS g .)
    AND             reduce using rule 86 (f -> MENOS g .)
    PUNTO           reduce using rule 86 (f -> MENOS g .)
    OR              reduce using rule 86 (f -> MENOS g .)
    R_PAREN         reduce using rule 86 (f -> MENOS g .)
    SEMI_COLON      reduce using rule 86 (f -> MENOS g .)
    CONSOLE         reduce using rule 86 (f -> MENOS g .)
    LET             reduce using rule 86 (f -> MENOS g .)
    LITERAL         reduce using rule 86 (f -> MENOS g .)
    IF              reduce using rule 86 (f -> MENOS g .)
    WHILE           reduce using rule 86 (f -> MENOS g .)
    FOR             reduce using rule 86 (f -> MENOS g .)
    INTERFACE       reduce using rule 86 (f -> MENOS g .)
    CONTINUE        reduce using rule 86 (f -> MENOS g .)
    BREAK           reduce using rule 86 (f -> MENOS g .)
    RETURN          reduce using rule 86 (f -> MENOS g .)
    FUNCTION        reduce using rule 86 (f -> MENOS g .)
    NOT             reduce using rule 86 (f -> MENOS g .)
    ENTERO          reduce using rule 86 (f -> MENOS g .)
    DECIMAL         reduce using rule 86 (f -> MENOS g .)
    CADENA          reduce using rule 86 (f -> MENOS g .)
    TRUE            reduce using rule 86 (f -> MENOS g .)
    FALSE           reduce using rule 86 (f -> MENOS g .)
    L_PAREN         reduce using rule 86 (f -> MENOS g .)
    L_CORCHETE      reduce using rule 86 (f -> MENOS g .)
    L_LLAVE         reduce using rule 86 (f -> MENOS g .)
    $end            reduce using rule 86 (f -> MENOS g .)
    R_LLAVE         reduce using rule 86 (f -> MENOS g .)
    R_CORCHETE      reduce using rule 86 (f -> MENOS g .)
    COMA            reduce using rule 86 (f -> MENOS g .)
    TIMES           shift and go to state 105
    DIVIDE          shift and go to state 106
    MOD             shift and go to state 107
    POTENCIA        shift and go to state 108

  ! MAS             [ reduce using rule 88 (f -> g .) ]
  ! MENOS           [ reduce using rule 88 (f -> g .) ]
  ! DISTINTO_QUE    [ reduce using rule 88 (f -> g .) ]
  ! MENOR_QUE       [ reduce using rule 88 (f -> g .) ]
  ! MENOR_IGUAL_QUE [ reduce using rule 88 (f -> g .) ]
  ! MAYOR_QUE       [ reduce using rule 88 (f -> g .) ]
  ! MAYOR_IGUAL_QUE [ reduce using rule 88 (f -> g .) ]
  ! TRIPLE_IGUAL    [ reduce using rule 88 (f -> g .) ]
  ! AND             [ reduce using rule 88 (f -> g .) ]
  ! PUNTO           [ reduce using rule 88 (f -> g .) ]
  ! OR              [ reduce using rule 88 (f -> g .) ]


state 95

    (72) b -> b AND . c
    (74) c -> . NOT d
    (75) c -> . d
    (76) d -> . d DISTINTO_QUE e
    (77) d -> . d MENOR_QUE e
    (78) d -> . d MENOR_IGUAL_QUE e
    (79) d -> . d MAYOR_QUE e
    (80) d -> . d MAYOR_IGUAL_QUE e
    (81) d -> . d TRIPLE_IGUAL e
    (82) d -> . e
    (83) e -> . e MAS f
    (84) e -> . e MENOS f
    (85) e -> . f
    (86) f -> . MENOS g
    (87) f -> . MAS g
    (88) f -> . g
    (89) g -> . g TIMES h
    (90) g -> . g DIVIDE h
    (91) g -> . g MOD h
    (92) g -> . g POTENCIA h
    (93) g -> . h
    (94) h -> . ENTERO
    (95) h -> . DECIMAL
    (96) h -> . CADENA
    (97) h -> . LITERAL
    (98) h -> . TRUE
    (99) h -> . FALSE
    (100) h -> . call_function_pro
    (101) h -> . array_pro
    (102) h -> . interface_assi
    (103) h -> . L_PAREN a R_PAREN
    (104) h -> . array_val_pro
    (105) h -> . a PUNTO LITERAL
    (106) h -> . a PUNTO nativeFun L_PAREN expresion R_PAREN
    (107) h -> . a PUNTO nativeFun L_PAREN R_PAREN
    (23) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (24) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (116) array_pro -> . L_CORCHETE values R_CORCHETE
    (113) interface_assi -> . L_LLAVE atributos_assi R_LLAVE
    (108) array_val_pro -> . LITERAL dimensions
    (70) a -> . a OR b
    (71) a -> . b
    (72) b -> . b AND c
    (73) b -> . c

    NOT             shift and go to state 37
    MENOS           shift and go to state 34
    MAS             shift and go to state 33
    ENTERO          shift and go to state 43
    DECIMAL         shift and go to state 44
    CADENA          shift and go to state 45
    LITERAL         shift and go to state 71
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    L_PAREN         shift and go to state 20
    L_CORCHETE      shift and go to state 51
    L_LLAVE         shift and go to state 25

    b                              shift and go to state 35
    c                              shift and go to state 146
    d                              shift and go to state 38
    e                              shift and go to state 39
    f                              shift and go to state 40
    g                              shift and go to state 41
    h                              shift and go to state 42
    call_function_pro              shift and go to state 72
    array_pro                      shift and go to state 48
    interface_assi                 shift and go to state 49
    a                              shift and go to state 93
    array_val_pro                  shift and go to state 50

state 96

    (74) c -> NOT d .
    (76) d -> d . DISTINTO_QUE e
    (77) d -> d . MENOR_QUE e
    (78) d -> d . MENOR_IGUAL_QUE e
    (79) d -> d . MAYOR_QUE e
    (80) d -> d . MAYOR_IGUAL_QUE e
    (81) d -> d . TRIPLE_IGUAL e
    (75) c -> d .

  ! reduce/reduce conflict for AND resolved using rule 74 (c -> NOT d .)
  ! reduce/reduce conflict for PUNTO resolved using rule 74 (c -> NOT d .)
  ! reduce/reduce conflict for OR resolved using rule 74 (c -> NOT d .)
    AND             reduce using rule 74 (c -> NOT d .)
    PUNTO           reduce using rule 74 (c -> NOT d .)
    OR              reduce using rule 74 (c -> NOT d .)
    R_PAREN         reduce using rule 74 (c -> NOT d .)
    SEMI_COLON      reduce using rule 74 (c -> NOT d .)
    CONSOLE         reduce using rule 74 (c -> NOT d .)
    LET             reduce using rule 74 (c -> NOT d .)
    LITERAL         reduce using rule 74 (c -> NOT d .)
    IF              reduce using rule 74 (c -> NOT d .)
    WHILE           reduce using rule 74 (c -> NOT d .)
    FOR             reduce using rule 74 (c -> NOT d .)
    INTERFACE       reduce using rule 74 (c -> NOT d .)
    CONTINUE        reduce using rule 74 (c -> NOT d .)
    BREAK           reduce using rule 74 (c -> NOT d .)
    RETURN          reduce using rule 74 (c -> NOT d .)
    FUNCTION        reduce using rule 74 (c -> NOT d .)
    NOT             reduce using rule 74 (c -> NOT d .)
    MENOS           reduce using rule 74 (c -> NOT d .)
    MAS             reduce using rule 74 (c -> NOT d .)
    ENTERO          reduce using rule 74 (c -> NOT d .)
    DECIMAL         reduce using rule 74 (c -> NOT d .)
    CADENA          reduce using rule 74 (c -> NOT d .)
    TRUE            reduce using rule 74 (c -> NOT d .)
    FALSE           reduce using rule 74 (c -> NOT d .)
    L_PAREN         reduce using rule 74 (c -> NOT d .)
    L_CORCHETE      reduce using rule 74 (c -> NOT d .)
    L_LLAVE         reduce using rule 74 (c -> NOT d .)
    $end            reduce using rule 74 (c -> NOT d .)
    R_LLAVE         reduce using rule 74 (c -> NOT d .)
    R_CORCHETE      reduce using rule 74 (c -> NOT d .)
    COMA            reduce using rule 74 (c -> NOT d .)
    DISTINTO_QUE    shift and go to state 97
    MENOR_QUE       shift and go to state 98
    MENOR_IGUAL_QUE shift and go to state 99
    MAYOR_QUE       shift and go to state 100
    MAYOR_IGUAL_QUE shift and go to state 101
    TRIPLE_IGUAL    shift and go to state 102

  ! AND             [ reduce using rule 75 (c -> d .) ]
  ! PUNTO           [ reduce using rule 75 (c -> d .) ]
  ! OR              [ reduce using rule 75 (c -> d .) ]


state 97

    (76) d -> d DISTINTO_QUE . e
    (83) e -> . e MAS f
    (84) e -> . e MENOS f
    (85) e -> . f
    (86) f -> . MENOS g
    (87) f -> . MAS g
    (88) f -> . g
    (89) g -> . g TIMES h
    (90) g -> . g DIVIDE h
    (91) g -> . g MOD h
    (92) g -> . g POTENCIA h
    (93) g -> . h
    (94) h -> . ENTERO
    (95) h -> . DECIMAL
    (96) h -> . CADENA
    (97) h -> . LITERAL
    (98) h -> . TRUE
    (99) h -> . FALSE
    (100) h -> . call_function_pro
    (101) h -> . array_pro
    (102) h -> . interface_assi
    (103) h -> . L_PAREN a R_PAREN
    (104) h -> . array_val_pro
    (105) h -> . a PUNTO LITERAL
    (106) h -> . a PUNTO nativeFun L_PAREN expresion R_PAREN
    (107) h -> . a PUNTO nativeFun L_PAREN R_PAREN
    (23) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (24) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (116) array_pro -> . L_CORCHETE values R_CORCHETE
    (113) interface_assi -> . L_LLAVE atributos_assi R_LLAVE
    (108) array_val_pro -> . LITERAL dimensions
    (70) a -> . a OR b
    (71) a -> . b
    (72) b -> . b AND c
    (73) b -> . c
    (74) c -> . NOT d
    (75) c -> . d
    (76) d -> . d DISTINTO_QUE e
    (77) d -> . d MENOR_QUE e
    (78) d -> . d MENOR_IGUAL_QUE e
    (79) d -> . d MAYOR_QUE e
    (80) d -> . d MAYOR_IGUAL_QUE e
    (81) d -> . d TRIPLE_IGUAL e
    (82) d -> . e

    MENOS           shift and go to state 34
    MAS             shift and go to state 33
    ENTERO          shift and go to state 43
    DECIMAL         shift and go to state 44
    CADENA          shift and go to state 45
    LITERAL         shift and go to state 71
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    L_PAREN         shift and go to state 20
    L_CORCHETE      shift and go to state 51
    L_LLAVE         shift and go to state 25
    NOT             shift and go to state 37

    d                              shift and go to state 38
    e                              shift and go to state 147
    f                              shift and go to state 40
    g                              shift and go to state 41
    h                              shift and go to state 42
    call_function_pro              shift and go to state 72
    array_pro                      shift and go to state 48
    interface_assi                 shift and go to state 49
    a                              shift and go to state 93
    array_val_pro                  shift and go to state 50
    b                              shift and go to state 35
    c                              shift and go to state 36

state 98

    (77) d -> d MENOR_QUE . e
    (83) e -> . e MAS f
    (84) e -> . e MENOS f
    (85) e -> . f
    (86) f -> . MENOS g
    (87) f -> . MAS g
    (88) f -> . g
    (89) g -> . g TIMES h
    (90) g -> . g DIVIDE h
    (91) g -> . g MOD h
    (92) g -> . g POTENCIA h
    (93) g -> . h
    (94) h -> . ENTERO
    (95) h -> . DECIMAL
    (96) h -> . CADENA
    (97) h -> . LITERAL
    (98) h -> . TRUE
    (99) h -> . FALSE
    (100) h -> . call_function_pro
    (101) h -> . array_pro
    (102) h -> . interface_assi
    (103) h -> . L_PAREN a R_PAREN
    (104) h -> . array_val_pro
    (105) h -> . a PUNTO LITERAL
    (106) h -> . a PUNTO nativeFun L_PAREN expresion R_PAREN
    (107) h -> . a PUNTO nativeFun L_PAREN R_PAREN
    (23) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (24) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (116) array_pro -> . L_CORCHETE values R_CORCHETE
    (113) interface_assi -> . L_LLAVE atributos_assi R_LLAVE
    (108) array_val_pro -> . LITERAL dimensions
    (70) a -> . a OR b
    (71) a -> . b
    (72) b -> . b AND c
    (73) b -> . c
    (74) c -> . NOT d
    (75) c -> . d
    (76) d -> . d DISTINTO_QUE e
    (77) d -> . d MENOR_QUE e
    (78) d -> . d MENOR_IGUAL_QUE e
    (79) d -> . d MAYOR_QUE e
    (80) d -> . d MAYOR_IGUAL_QUE e
    (81) d -> . d TRIPLE_IGUAL e
    (82) d -> . e

    MENOS           shift and go to state 34
    MAS             shift and go to state 33
    ENTERO          shift and go to state 43
    DECIMAL         shift and go to state 44
    CADENA          shift and go to state 45
    LITERAL         shift and go to state 71
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    L_PAREN         shift and go to state 20
    L_CORCHETE      shift and go to state 51
    L_LLAVE         shift and go to state 25
    NOT             shift and go to state 37

    d                              shift and go to state 38
    e                              shift and go to state 148
    f                              shift and go to state 40
    g                              shift and go to state 41
    h                              shift and go to state 42
    call_function_pro              shift and go to state 72
    array_pro                      shift and go to state 48
    interface_assi                 shift and go to state 49
    a                              shift and go to state 93
    array_val_pro                  shift and go to state 50
    b                              shift and go to state 35
    c                              shift and go to state 36

state 99

    (78) d -> d MENOR_IGUAL_QUE . e
    (83) e -> . e MAS f
    (84) e -> . e MENOS f
    (85) e -> . f
    (86) f -> . MENOS g
    (87) f -> . MAS g
    (88) f -> . g
    (89) g -> . g TIMES h
    (90) g -> . g DIVIDE h
    (91) g -> . g MOD h
    (92) g -> . g POTENCIA h
    (93) g -> . h
    (94) h -> . ENTERO
    (95) h -> . DECIMAL
    (96) h -> . CADENA
    (97) h -> . LITERAL
    (98) h -> . TRUE
    (99) h -> . FALSE
    (100) h -> . call_function_pro
    (101) h -> . array_pro
    (102) h -> . interface_assi
    (103) h -> . L_PAREN a R_PAREN
    (104) h -> . array_val_pro
    (105) h -> . a PUNTO LITERAL
    (106) h -> . a PUNTO nativeFun L_PAREN expresion R_PAREN
    (107) h -> . a PUNTO nativeFun L_PAREN R_PAREN
    (23) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (24) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (116) array_pro -> . L_CORCHETE values R_CORCHETE
    (113) interface_assi -> . L_LLAVE atributos_assi R_LLAVE
    (108) array_val_pro -> . LITERAL dimensions
    (70) a -> . a OR b
    (71) a -> . b
    (72) b -> . b AND c
    (73) b -> . c
    (74) c -> . NOT d
    (75) c -> . d
    (76) d -> . d DISTINTO_QUE e
    (77) d -> . d MENOR_QUE e
    (78) d -> . d MENOR_IGUAL_QUE e
    (79) d -> . d MAYOR_QUE e
    (80) d -> . d MAYOR_IGUAL_QUE e
    (81) d -> . d TRIPLE_IGUAL e
    (82) d -> . e

    MENOS           shift and go to state 34
    MAS             shift and go to state 33
    ENTERO          shift and go to state 43
    DECIMAL         shift and go to state 44
    CADENA          shift and go to state 45
    LITERAL         shift and go to state 71
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    L_PAREN         shift and go to state 20
    L_CORCHETE      shift and go to state 51
    L_LLAVE         shift and go to state 25
    NOT             shift and go to state 37

    d                              shift and go to state 38
    e                              shift and go to state 149
    f                              shift and go to state 40
    g                              shift and go to state 41
    h                              shift and go to state 42
    call_function_pro              shift and go to state 72
    array_pro                      shift and go to state 48
    interface_assi                 shift and go to state 49
    a                              shift and go to state 93
    array_val_pro                  shift and go to state 50
    b                              shift and go to state 35
    c                              shift and go to state 36

state 100

    (79) d -> d MAYOR_QUE . e
    (83) e -> . e MAS f
    (84) e -> . e MENOS f
    (85) e -> . f
    (86) f -> . MENOS g
    (87) f -> . MAS g
    (88) f -> . g
    (89) g -> . g TIMES h
    (90) g -> . g DIVIDE h
    (91) g -> . g MOD h
    (92) g -> . g POTENCIA h
    (93) g -> . h
    (94) h -> . ENTERO
    (95) h -> . DECIMAL
    (96) h -> . CADENA
    (97) h -> . LITERAL
    (98) h -> . TRUE
    (99) h -> . FALSE
    (100) h -> . call_function_pro
    (101) h -> . array_pro
    (102) h -> . interface_assi
    (103) h -> . L_PAREN a R_PAREN
    (104) h -> . array_val_pro
    (105) h -> . a PUNTO LITERAL
    (106) h -> . a PUNTO nativeFun L_PAREN expresion R_PAREN
    (107) h -> . a PUNTO nativeFun L_PAREN R_PAREN
    (23) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (24) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (116) array_pro -> . L_CORCHETE values R_CORCHETE
    (113) interface_assi -> . L_LLAVE atributos_assi R_LLAVE
    (108) array_val_pro -> . LITERAL dimensions
    (70) a -> . a OR b
    (71) a -> . b
    (72) b -> . b AND c
    (73) b -> . c
    (74) c -> . NOT d
    (75) c -> . d
    (76) d -> . d DISTINTO_QUE e
    (77) d -> . d MENOR_QUE e
    (78) d -> . d MENOR_IGUAL_QUE e
    (79) d -> . d MAYOR_QUE e
    (80) d -> . d MAYOR_IGUAL_QUE e
    (81) d -> . d TRIPLE_IGUAL e
    (82) d -> . e

    MENOS           shift and go to state 34
    MAS             shift and go to state 33
    ENTERO          shift and go to state 43
    DECIMAL         shift and go to state 44
    CADENA          shift and go to state 45
    LITERAL         shift and go to state 71
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    L_PAREN         shift and go to state 20
    L_CORCHETE      shift and go to state 51
    L_LLAVE         shift and go to state 25
    NOT             shift and go to state 37

    d                              shift and go to state 38
    e                              shift and go to state 150
    f                              shift and go to state 40
    g                              shift and go to state 41
    h                              shift and go to state 42
    call_function_pro              shift and go to state 72
    array_pro                      shift and go to state 48
    interface_assi                 shift and go to state 49
    a                              shift and go to state 93
    array_val_pro                  shift and go to state 50
    b                              shift and go to state 35
    c                              shift and go to state 36

state 101

    (80) d -> d MAYOR_IGUAL_QUE . e
    (83) e -> . e MAS f
    (84) e -> . e MENOS f
    (85) e -> . f
    (86) f -> . MENOS g
    (87) f -> . MAS g
    (88) f -> . g
    (89) g -> . g TIMES h
    (90) g -> . g DIVIDE h
    (91) g -> . g MOD h
    (92) g -> . g POTENCIA h
    (93) g -> . h
    (94) h -> . ENTERO
    (95) h -> . DECIMAL
    (96) h -> . CADENA
    (97) h -> . LITERAL
    (98) h -> . TRUE
    (99) h -> . FALSE
    (100) h -> . call_function_pro
    (101) h -> . array_pro
    (102) h -> . interface_assi
    (103) h -> . L_PAREN a R_PAREN
    (104) h -> . array_val_pro
    (105) h -> . a PUNTO LITERAL
    (106) h -> . a PUNTO nativeFun L_PAREN expresion R_PAREN
    (107) h -> . a PUNTO nativeFun L_PAREN R_PAREN
    (23) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (24) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (116) array_pro -> . L_CORCHETE values R_CORCHETE
    (113) interface_assi -> . L_LLAVE atributos_assi R_LLAVE
    (108) array_val_pro -> . LITERAL dimensions
    (70) a -> . a OR b
    (71) a -> . b
    (72) b -> . b AND c
    (73) b -> . c
    (74) c -> . NOT d
    (75) c -> . d
    (76) d -> . d DISTINTO_QUE e
    (77) d -> . d MENOR_QUE e
    (78) d -> . d MENOR_IGUAL_QUE e
    (79) d -> . d MAYOR_QUE e
    (80) d -> . d MAYOR_IGUAL_QUE e
    (81) d -> . d TRIPLE_IGUAL e
    (82) d -> . e

    MENOS           shift and go to state 34
    MAS             shift and go to state 33
    ENTERO          shift and go to state 43
    DECIMAL         shift and go to state 44
    CADENA          shift and go to state 45
    LITERAL         shift and go to state 71
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    L_PAREN         shift and go to state 20
    L_CORCHETE      shift and go to state 51
    L_LLAVE         shift and go to state 25
    NOT             shift and go to state 37

    d                              shift and go to state 38
    e                              shift and go to state 151
    f                              shift and go to state 40
    g                              shift and go to state 41
    h                              shift and go to state 42
    call_function_pro              shift and go to state 72
    array_pro                      shift and go to state 48
    interface_assi                 shift and go to state 49
    a                              shift and go to state 93
    array_val_pro                  shift and go to state 50
    b                              shift and go to state 35
    c                              shift and go to state 36

state 102

    (81) d -> d TRIPLE_IGUAL . e
    (83) e -> . e MAS f
    (84) e -> . e MENOS f
    (85) e -> . f
    (86) f -> . MENOS g
    (87) f -> . MAS g
    (88) f -> . g
    (89) g -> . g TIMES h
    (90) g -> . g DIVIDE h
    (91) g -> . g MOD h
    (92) g -> . g POTENCIA h
    (93) g -> . h
    (94) h -> . ENTERO
    (95) h -> . DECIMAL
    (96) h -> . CADENA
    (97) h -> . LITERAL
    (98) h -> . TRUE
    (99) h -> . FALSE
    (100) h -> . call_function_pro
    (101) h -> . array_pro
    (102) h -> . interface_assi
    (103) h -> . L_PAREN a R_PAREN
    (104) h -> . array_val_pro
    (105) h -> . a PUNTO LITERAL
    (106) h -> . a PUNTO nativeFun L_PAREN expresion R_PAREN
    (107) h -> . a PUNTO nativeFun L_PAREN R_PAREN
    (23) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (24) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (116) array_pro -> . L_CORCHETE values R_CORCHETE
    (113) interface_assi -> . L_LLAVE atributos_assi R_LLAVE
    (108) array_val_pro -> . LITERAL dimensions
    (70) a -> . a OR b
    (71) a -> . b
    (72) b -> . b AND c
    (73) b -> . c
    (74) c -> . NOT d
    (75) c -> . d
    (76) d -> . d DISTINTO_QUE e
    (77) d -> . d MENOR_QUE e
    (78) d -> . d MENOR_IGUAL_QUE e
    (79) d -> . d MAYOR_QUE e
    (80) d -> . d MAYOR_IGUAL_QUE e
    (81) d -> . d TRIPLE_IGUAL e
    (82) d -> . e

    MENOS           shift and go to state 34
    MAS             shift and go to state 33
    ENTERO          shift and go to state 43
    DECIMAL         shift and go to state 44
    CADENA          shift and go to state 45
    LITERAL         shift and go to state 71
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    L_PAREN         shift and go to state 20
    L_CORCHETE      shift and go to state 51
    L_LLAVE         shift and go to state 25
    NOT             shift and go to state 37

    d                              shift and go to state 38
    e                              shift and go to state 152
    f                              shift and go to state 40
    g                              shift and go to state 41
    h                              shift and go to state 42
    call_function_pro              shift and go to state 72
    array_pro                      shift and go to state 48
    interface_assi                 shift and go to state 49
    a                              shift and go to state 93
    array_val_pro                  shift and go to state 50
    b                              shift and go to state 35
    c                              shift and go to state 36

state 103

    (83) e -> e MAS . f
    (86) f -> . MENOS g
    (87) f -> . MAS g
    (88) f -> . g
    (89) g -> . g TIMES h
    (90) g -> . g DIVIDE h
    (91) g -> . g MOD h
    (92) g -> . g POTENCIA h
    (93) g -> . h
    (94) h -> . ENTERO
    (95) h -> . DECIMAL
    (96) h -> . CADENA
    (97) h -> . LITERAL
    (98) h -> . TRUE
    (99) h -> . FALSE
    (100) h -> . call_function_pro
    (101) h -> . array_pro
    (102) h -> . interface_assi
    (103) h -> . L_PAREN a R_PAREN
    (104) h -> . array_val_pro
    (105) h -> . a PUNTO LITERAL
    (106) h -> . a PUNTO nativeFun L_PAREN expresion R_PAREN
    (107) h -> . a PUNTO nativeFun L_PAREN R_PAREN
    (23) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (24) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (116) array_pro -> . L_CORCHETE values R_CORCHETE
    (113) interface_assi -> . L_LLAVE atributos_assi R_LLAVE
    (108) array_val_pro -> . LITERAL dimensions
    (70) a -> . a OR b
    (71) a -> . b
    (72) b -> . b AND c
    (73) b -> . c
    (74) c -> . NOT d
    (75) c -> . d
    (76) d -> . d DISTINTO_QUE e
    (77) d -> . d MENOR_QUE e
    (78) d -> . d MENOR_IGUAL_QUE e
    (79) d -> . d MAYOR_QUE e
    (80) d -> . d MAYOR_IGUAL_QUE e
    (81) d -> . d TRIPLE_IGUAL e
    (82) d -> . e
    (83) e -> . e MAS f
    (84) e -> . e MENOS f
    (85) e -> . f

    MENOS           shift and go to state 34
    MAS             shift and go to state 33
    ENTERO          shift and go to state 43
    DECIMAL         shift and go to state 44
    CADENA          shift and go to state 45
    LITERAL         shift and go to state 71
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    L_PAREN         shift and go to state 20
    L_CORCHETE      shift and go to state 51
    L_LLAVE         shift and go to state 25
    NOT             shift and go to state 37

    e                              shift and go to state 39
    f                              shift and go to state 153
    g                              shift and go to state 41
    h                              shift and go to state 42
    call_function_pro              shift and go to state 72
    array_pro                      shift and go to state 48
    interface_assi                 shift and go to state 49
    a                              shift and go to state 93
    array_val_pro                  shift and go to state 50
    b                              shift and go to state 35
    c                              shift and go to state 36
    d                              shift and go to state 38

state 104

    (84) e -> e MENOS . f
    (86) f -> . MENOS g
    (87) f -> . MAS g
    (88) f -> . g
    (89) g -> . g TIMES h
    (90) g -> . g DIVIDE h
    (91) g -> . g MOD h
    (92) g -> . g POTENCIA h
    (93) g -> . h
    (94) h -> . ENTERO
    (95) h -> . DECIMAL
    (96) h -> . CADENA
    (97) h -> . LITERAL
    (98) h -> . TRUE
    (99) h -> . FALSE
    (100) h -> . call_function_pro
    (101) h -> . array_pro
    (102) h -> . interface_assi
    (103) h -> . L_PAREN a R_PAREN
    (104) h -> . array_val_pro
    (105) h -> . a PUNTO LITERAL
    (106) h -> . a PUNTO nativeFun L_PAREN expresion R_PAREN
    (107) h -> . a PUNTO nativeFun L_PAREN R_PAREN
    (23) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (24) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (116) array_pro -> . L_CORCHETE values R_CORCHETE
    (113) interface_assi -> . L_LLAVE atributos_assi R_LLAVE
    (108) array_val_pro -> . LITERAL dimensions
    (70) a -> . a OR b
    (71) a -> . b
    (72) b -> . b AND c
    (73) b -> . c
    (74) c -> . NOT d
    (75) c -> . d
    (76) d -> . d DISTINTO_QUE e
    (77) d -> . d MENOR_QUE e
    (78) d -> . d MENOR_IGUAL_QUE e
    (79) d -> . d MAYOR_QUE e
    (80) d -> . d MAYOR_IGUAL_QUE e
    (81) d -> . d TRIPLE_IGUAL e
    (82) d -> . e
    (83) e -> . e MAS f
    (84) e -> . e MENOS f
    (85) e -> . f

    MENOS           shift and go to state 34
    MAS             shift and go to state 33
    ENTERO          shift and go to state 43
    DECIMAL         shift and go to state 44
    CADENA          shift and go to state 45
    LITERAL         shift and go to state 71
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    L_PAREN         shift and go to state 20
    L_CORCHETE      shift and go to state 51
    L_LLAVE         shift and go to state 25
    NOT             shift and go to state 37

    e                              shift and go to state 39
    f                              shift and go to state 154
    g                              shift and go to state 41
    h                              shift and go to state 42
    call_function_pro              shift and go to state 72
    array_pro                      shift and go to state 48
    interface_assi                 shift and go to state 49
    a                              shift and go to state 93
    array_val_pro                  shift and go to state 50
    b                              shift and go to state 35
    c                              shift and go to state 36
    d                              shift and go to state 38

state 105

    (89) g -> g TIMES . h
    (94) h -> . ENTERO
    (95) h -> . DECIMAL
    (96) h -> . CADENA
    (97) h -> . LITERAL
    (98) h -> . TRUE
    (99) h -> . FALSE
    (100) h -> . call_function_pro
    (101) h -> . array_pro
    (102) h -> . interface_assi
    (103) h -> . L_PAREN a R_PAREN
    (104) h -> . array_val_pro
    (105) h -> . a PUNTO LITERAL
    (106) h -> . a PUNTO nativeFun L_PAREN expresion R_PAREN
    (107) h -> . a PUNTO nativeFun L_PAREN R_PAREN
    (23) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (24) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (116) array_pro -> . L_CORCHETE values R_CORCHETE
    (113) interface_assi -> . L_LLAVE atributos_assi R_LLAVE
    (108) array_val_pro -> . LITERAL dimensions
    (70) a -> . a OR b
    (71) a -> . b
    (72) b -> . b AND c
    (73) b -> . c
    (74) c -> . NOT d
    (75) c -> . d
    (76) d -> . d DISTINTO_QUE e
    (77) d -> . d MENOR_QUE e
    (78) d -> . d MENOR_IGUAL_QUE e
    (79) d -> . d MAYOR_QUE e
    (80) d -> . d MAYOR_IGUAL_QUE e
    (81) d -> . d TRIPLE_IGUAL e
    (82) d -> . e
    (83) e -> . e MAS f
    (84) e -> . e MENOS f
    (85) e -> . f
    (86) f -> . MENOS g
    (87) f -> . MAS g
    (88) f -> . g
    (89) g -> . g TIMES h
    (90) g -> . g DIVIDE h
    (91) g -> . g MOD h
    (92) g -> . g POTENCIA h
    (93) g -> . h

    ENTERO          shift and go to state 43
    DECIMAL         shift and go to state 44
    CADENA          shift and go to state 45
    LITERAL         shift and go to state 71
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    L_PAREN         shift and go to state 20
    L_CORCHETE      shift and go to state 51
    L_LLAVE         shift and go to state 25
    NOT             shift and go to state 37
    MENOS           shift and go to state 34
    MAS             shift and go to state 33

    g                              shift and go to state 41
    h                              shift and go to state 155
    call_function_pro              shift and go to state 72
    array_pro                      shift and go to state 48
    interface_assi                 shift and go to state 49
    a                              shift and go to state 93
    array_val_pro                  shift and go to state 50
    b                              shift and go to state 35
    c                              shift and go to state 36
    d                              shift and go to state 38
    e                              shift and go to state 39
    f                              shift and go to state 40

state 106

    (90) g -> g DIVIDE . h
    (94) h -> . ENTERO
    (95) h -> . DECIMAL
    (96) h -> . CADENA
    (97) h -> . LITERAL
    (98) h -> . TRUE
    (99) h -> . FALSE
    (100) h -> . call_function_pro
    (101) h -> . array_pro
    (102) h -> . interface_assi
    (103) h -> . L_PAREN a R_PAREN
    (104) h -> . array_val_pro
    (105) h -> . a PUNTO LITERAL
    (106) h -> . a PUNTO nativeFun L_PAREN expresion R_PAREN
    (107) h -> . a PUNTO nativeFun L_PAREN R_PAREN
    (23) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (24) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (116) array_pro -> . L_CORCHETE values R_CORCHETE
    (113) interface_assi -> . L_LLAVE atributos_assi R_LLAVE
    (108) array_val_pro -> . LITERAL dimensions
    (70) a -> . a OR b
    (71) a -> . b
    (72) b -> . b AND c
    (73) b -> . c
    (74) c -> . NOT d
    (75) c -> . d
    (76) d -> . d DISTINTO_QUE e
    (77) d -> . d MENOR_QUE e
    (78) d -> . d MENOR_IGUAL_QUE e
    (79) d -> . d MAYOR_QUE e
    (80) d -> . d MAYOR_IGUAL_QUE e
    (81) d -> . d TRIPLE_IGUAL e
    (82) d -> . e
    (83) e -> . e MAS f
    (84) e -> . e MENOS f
    (85) e -> . f
    (86) f -> . MENOS g
    (87) f -> . MAS g
    (88) f -> . g
    (89) g -> . g TIMES h
    (90) g -> . g DIVIDE h
    (91) g -> . g MOD h
    (92) g -> . g POTENCIA h
    (93) g -> . h

    ENTERO          shift and go to state 43
    DECIMAL         shift and go to state 44
    CADENA          shift and go to state 45
    LITERAL         shift and go to state 71
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    L_PAREN         shift and go to state 20
    L_CORCHETE      shift and go to state 51
    L_LLAVE         shift and go to state 25
    NOT             shift and go to state 37
    MENOS           shift and go to state 34
    MAS             shift and go to state 33

    g                              shift and go to state 41
    h                              shift and go to state 156
    call_function_pro              shift and go to state 72
    array_pro                      shift and go to state 48
    interface_assi                 shift and go to state 49
    a                              shift and go to state 93
    array_val_pro                  shift and go to state 50
    b                              shift and go to state 35
    c                              shift and go to state 36
    d                              shift and go to state 38
    e                              shift and go to state 39
    f                              shift and go to state 40

state 107

    (91) g -> g MOD . h
    (94) h -> . ENTERO
    (95) h -> . DECIMAL
    (96) h -> . CADENA
    (97) h -> . LITERAL
    (98) h -> . TRUE
    (99) h -> . FALSE
    (100) h -> . call_function_pro
    (101) h -> . array_pro
    (102) h -> . interface_assi
    (103) h -> . L_PAREN a R_PAREN
    (104) h -> . array_val_pro
    (105) h -> . a PUNTO LITERAL
    (106) h -> . a PUNTO nativeFun L_PAREN expresion R_PAREN
    (107) h -> . a PUNTO nativeFun L_PAREN R_PAREN
    (23) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (24) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (116) array_pro -> . L_CORCHETE values R_CORCHETE
    (113) interface_assi -> . L_LLAVE atributos_assi R_LLAVE
    (108) array_val_pro -> . LITERAL dimensions
    (70) a -> . a OR b
    (71) a -> . b
    (72) b -> . b AND c
    (73) b -> . c
    (74) c -> . NOT d
    (75) c -> . d
    (76) d -> . d DISTINTO_QUE e
    (77) d -> . d MENOR_QUE e
    (78) d -> . d MENOR_IGUAL_QUE e
    (79) d -> . d MAYOR_QUE e
    (80) d -> . d MAYOR_IGUAL_QUE e
    (81) d -> . d TRIPLE_IGUAL e
    (82) d -> . e
    (83) e -> . e MAS f
    (84) e -> . e MENOS f
    (85) e -> . f
    (86) f -> . MENOS g
    (87) f -> . MAS g
    (88) f -> . g
    (89) g -> . g TIMES h
    (90) g -> . g DIVIDE h
    (91) g -> . g MOD h
    (92) g -> . g POTENCIA h
    (93) g -> . h

    ENTERO          shift and go to state 43
    DECIMAL         shift and go to state 44
    CADENA          shift and go to state 45
    LITERAL         shift and go to state 71
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    L_PAREN         shift and go to state 20
    L_CORCHETE      shift and go to state 51
    L_LLAVE         shift and go to state 25
    NOT             shift and go to state 37
    MENOS           shift and go to state 34
    MAS             shift and go to state 33

    g                              shift and go to state 41
    h                              shift and go to state 157
    call_function_pro              shift and go to state 72
    array_pro                      shift and go to state 48
    interface_assi                 shift and go to state 49
    a                              shift and go to state 93
    array_val_pro                  shift and go to state 50
    b                              shift and go to state 35
    c                              shift and go to state 36
    d                              shift and go to state 38
    e                              shift and go to state 39
    f                              shift and go to state 40

state 108

    (92) g -> g POTENCIA . h
    (94) h -> . ENTERO
    (95) h -> . DECIMAL
    (96) h -> . CADENA
    (97) h -> . LITERAL
    (98) h -> . TRUE
    (99) h -> . FALSE
    (100) h -> . call_function_pro
    (101) h -> . array_pro
    (102) h -> . interface_assi
    (103) h -> . L_PAREN a R_PAREN
    (104) h -> . array_val_pro
    (105) h -> . a PUNTO LITERAL
    (106) h -> . a PUNTO nativeFun L_PAREN expresion R_PAREN
    (107) h -> . a PUNTO nativeFun L_PAREN R_PAREN
    (23) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (24) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (116) array_pro -> . L_CORCHETE values R_CORCHETE
    (113) interface_assi -> . L_LLAVE atributos_assi R_LLAVE
    (108) array_val_pro -> . LITERAL dimensions
    (70) a -> . a OR b
    (71) a -> . b
    (72) b -> . b AND c
    (73) b -> . c
    (74) c -> . NOT d
    (75) c -> . d
    (76) d -> . d DISTINTO_QUE e
    (77) d -> . d MENOR_QUE e
    (78) d -> . d MENOR_IGUAL_QUE e
    (79) d -> . d MAYOR_QUE e
    (80) d -> . d MAYOR_IGUAL_QUE e
    (81) d -> . d TRIPLE_IGUAL e
    (82) d -> . e
    (83) e -> . e MAS f
    (84) e -> . e MENOS f
    (85) e -> . f
    (86) f -> . MENOS g
    (87) f -> . MAS g
    (88) f -> . g
    (89) g -> . g TIMES h
    (90) g -> . g DIVIDE h
    (91) g -> . g MOD h
    (92) g -> . g POTENCIA h
    (93) g -> . h

    ENTERO          shift and go to state 43
    DECIMAL         shift and go to state 44
    CADENA          shift and go to state 45
    LITERAL         shift and go to state 71
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    L_PAREN         shift and go to state 20
    L_CORCHETE      shift and go to state 51
    L_LLAVE         shift and go to state 25
    NOT             shift and go to state 37
    MENOS           shift and go to state 34
    MAS             shift and go to state 33

    g                              shift and go to state 41
    h                              shift and go to state 158
    call_function_pro              shift and go to state 72
    array_pro                      shift and go to state 48
    interface_assi                 shift and go to state 49
    a                              shift and go to state 93
    array_val_pro                  shift and go to state 50
    b                              shift and go to state 35
    c                              shift and go to state 36
    d                              shift and go to state 38
    e                              shift and go to state 39
    f                              shift and go to state 40

state 109

    (116) array_pro -> L_CORCHETE values . R_CORCHETE
    (25) values -> values . COMA a

    R_CORCHETE      shift and go to state 159
    COMA            shift and go to state 160


state 110

    (26) values -> a .
    (70) a -> a . OR b
    (105) h -> a . PUNTO LITERAL
    (106) h -> a . PUNTO nativeFun L_PAREN expresion R_PAREN
    (107) h -> a . PUNTO nativeFun L_PAREN R_PAREN

    R_CORCHETE      reduce using rule 26 (values -> a .)
    COMA            reduce using rule 26 (values -> a .)
    R_PAREN         reduce using rule 26 (values -> a .)
    OR              shift and go to state 83
    PUNTO           shift and go to state 113


state 111

    (67) console_pro -> CONSOLE PUNTO LOG . L_PAREN expresion R_PAREN

    L_PAREN         shift and go to state 161


state 112

    (103) h -> L_PAREN a R_PAREN .

    TIMES           reduce using rule 103 (h -> L_PAREN a R_PAREN .)
    DIVIDE          reduce using rule 103 (h -> L_PAREN a R_PAREN .)
    MOD             reduce using rule 103 (h -> L_PAREN a R_PAREN .)
    POTENCIA        reduce using rule 103 (h -> L_PAREN a R_PAREN .)
    MAS             reduce using rule 103 (h -> L_PAREN a R_PAREN .)
    MENOS           reduce using rule 103 (h -> L_PAREN a R_PAREN .)
    DISTINTO_QUE    reduce using rule 103 (h -> L_PAREN a R_PAREN .)
    MENOR_QUE       reduce using rule 103 (h -> L_PAREN a R_PAREN .)
    MENOR_IGUAL_QUE reduce using rule 103 (h -> L_PAREN a R_PAREN .)
    MAYOR_QUE       reduce using rule 103 (h -> L_PAREN a R_PAREN .)
    MAYOR_IGUAL_QUE reduce using rule 103 (h -> L_PAREN a R_PAREN .)
    TRIPLE_IGUAL    reduce using rule 103 (h -> L_PAREN a R_PAREN .)
    AND             reduce using rule 103 (h -> L_PAREN a R_PAREN .)
    PUNTO           reduce using rule 103 (h -> L_PAREN a R_PAREN .)
    OR              reduce using rule 103 (h -> L_PAREN a R_PAREN .)
    R_PAREN         reduce using rule 103 (h -> L_PAREN a R_PAREN .)
    SEMI_COLON      reduce using rule 103 (h -> L_PAREN a R_PAREN .)
    CONSOLE         reduce using rule 103 (h -> L_PAREN a R_PAREN .)
    LET             reduce using rule 103 (h -> L_PAREN a R_PAREN .)
    LITERAL         reduce using rule 103 (h -> L_PAREN a R_PAREN .)
    IF              reduce using rule 103 (h -> L_PAREN a R_PAREN .)
    WHILE           reduce using rule 103 (h -> L_PAREN a R_PAREN .)
    FOR             reduce using rule 103 (h -> L_PAREN a R_PAREN .)
    INTERFACE       reduce using rule 103 (h -> L_PAREN a R_PAREN .)
    CONTINUE        reduce using rule 103 (h -> L_PAREN a R_PAREN .)
    BREAK           reduce using rule 103 (h -> L_PAREN a R_PAREN .)
    RETURN          reduce using rule 103 (h -> L_PAREN a R_PAREN .)
    FUNCTION        reduce using rule 103 (h -> L_PAREN a R_PAREN .)
    NOT             reduce using rule 103 (h -> L_PAREN a R_PAREN .)
    ENTERO          reduce using rule 103 (h -> L_PAREN a R_PAREN .)
    DECIMAL         reduce using rule 103 (h -> L_PAREN a R_PAREN .)
    CADENA          reduce using rule 103 (h -> L_PAREN a R_PAREN .)
    TRUE            reduce using rule 103 (h -> L_PAREN a R_PAREN .)
    FALSE           reduce using rule 103 (h -> L_PAREN a R_PAREN .)
    L_PAREN         reduce using rule 103 (h -> L_PAREN a R_PAREN .)
    L_CORCHETE      reduce using rule 103 (h -> L_PAREN a R_PAREN .)
    L_LLAVE         reduce using rule 103 (h -> L_PAREN a R_PAREN .)
    $end            reduce using rule 103 (h -> L_PAREN a R_PAREN .)
    R_LLAVE         reduce using rule 103 (h -> L_PAREN a R_PAREN .)
    R_CORCHETE      reduce using rule 103 (h -> L_PAREN a R_PAREN .)
    COMA            reduce using rule 103 (h -> L_PAREN a R_PAREN .)


state 113

    (105) h -> a PUNTO . LITERAL
    (106) h -> a PUNTO . nativeFun L_PAREN expresion R_PAREN
    (107) h -> a PUNTO . nativeFun L_PAREN R_PAREN
    (117) nativeFun -> . TOSTRING
    (118) nativeFun -> . TOFIXED
    (119) nativeFun -> . TOEXPONENTIAL
    (120) nativeFun -> . TOLOWERCASE
    (121) nativeFun -> . TOUPPERCASE
    (122) nativeFun -> . SPLIT
    (123) nativeFun -> . CONCAT

    LITERAL         shift and go to state 162
    TOSTRING        shift and go to state 126
    TOFIXED         shift and go to state 127
    TOEXPONENTIAL   shift and go to state 128
    TOLOWERCASE     shift and go to state 129
    TOUPPERCASE     shift and go to state 130
    SPLIT           shift and go to state 131
    CONCAT          shift and go to state 132

    nativeFun                      shift and go to state 125

state 114

    (42) declaracion_list -> declaracion_list COMA . assignacion_instruction
    (44) assignacion_instruction -> . LITERAL COLON type IGUAL a
    (45) assignacion_instruction -> . LITERAL COLON type
    (46) assignacion_instruction -> . LITERAL IGUAL a
    (47) assignacion_instruction -> . LITERAL

    LITERAL         shift and go to state 75

    assignacion_instruction        shift and go to state 163

state 115

    (44) assignacion_instruction -> LITERAL COLON . type IGUAL a
    (45) assignacion_instruction -> LITERAL COLON . type
    (48) type -> . NUMBER
    (49) type -> . STRING
    (50) type -> . BOOLEAN
    (51) type -> . ANY
    (52) type -> . LITERAL
    (53) type -> . NULL

    NUMBER          shift and go to state 166
    STRING          shift and go to state 167
    BOOLEAN         shift and go to state 168
    ANY             shift and go to state 169
    LITERAL         shift and go to state 164
    NULL            shift and go to state 170

    type                           shift and go to state 165

state 116

    (46) assignacion_instruction -> LITERAL IGUAL . a
    (70) a -> . a OR b
    (71) a -> . b
    (72) b -> . b AND c
    (73) b -> . c
    (74) c -> . NOT d
    (75) c -> . d
    (76) d -> . d DISTINTO_QUE e
    (77) d -> . d MENOR_QUE e
    (78) d -> . d MENOR_IGUAL_QUE e
    (79) d -> . d MAYOR_QUE e
    (80) d -> . d MAYOR_IGUAL_QUE e
    (81) d -> . d TRIPLE_IGUAL e
    (82) d -> . e
    (83) e -> . e MAS f
    (84) e -> . e MENOS f
    (85) e -> . f
    (86) f -> . MENOS g
    (87) f -> . MAS g
    (88) f -> . g
    (89) g -> . g TIMES h
    (90) g -> . g DIVIDE h
    (91) g -> . g MOD h
    (92) g -> . g POTENCIA h
    (93) g -> . h
    (94) h -> . ENTERO
    (95) h -> . DECIMAL
    (96) h -> . CADENA
    (97) h -> . LITERAL
    (98) h -> . TRUE
    (99) h -> . FALSE
    (100) h -> . call_function_pro
    (101) h -> . array_pro
    (102) h -> . interface_assi
    (103) h -> . L_PAREN a R_PAREN
    (104) h -> . array_val_pro
    (105) h -> . a PUNTO LITERAL
    (106) h -> . a PUNTO nativeFun L_PAREN expresion R_PAREN
    (107) h -> . a PUNTO nativeFun L_PAREN R_PAREN
    (23) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (24) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (116) array_pro -> . L_CORCHETE values R_CORCHETE
    (113) interface_assi -> . L_LLAVE atributos_assi R_LLAVE
    (108) array_val_pro -> . LITERAL dimensions

    NOT             shift and go to state 37
    MENOS           shift and go to state 34
    MAS             shift and go to state 33
    ENTERO          shift and go to state 43
    DECIMAL         shift and go to state 44
    CADENA          shift and go to state 45
    LITERAL         shift and go to state 71
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    L_PAREN         shift and go to state 20
    L_CORCHETE      shift and go to state 51
    L_LLAVE         shift and go to state 25

    a                              shift and go to state 171
    b                              shift and go to state 35
    c                              shift and go to state 36
    d                              shift and go to state 38
    e                              shift and go to state 39
    f                              shift and go to state 40
    g                              shift and go to state 41
    h                              shift and go to state 42
    call_function_pro              shift and go to state 72
    array_pro                      shift and go to state 48
    interface_assi                 shift and go to state 49
    array_val_pro                  shift and go to state 50

state 117

    (54) assig_pro -> LITERAL IGUAL a .
    (70) a -> a . OR b
    (105) h -> a . PUNTO LITERAL
    (106) h -> a . PUNTO nativeFun L_PAREN expresion R_PAREN
    (107) h -> a . PUNTO nativeFun L_PAREN R_PAREN

    SEMI_COLON      reduce using rule 54 (assig_pro -> LITERAL IGUAL a .)
    CONSOLE         reduce using rule 54 (assig_pro -> LITERAL IGUAL a .)
    LET             reduce using rule 54 (assig_pro -> LITERAL IGUAL a .)
    LITERAL         reduce using rule 54 (assig_pro -> LITERAL IGUAL a .)
    IF              reduce using rule 54 (assig_pro -> LITERAL IGUAL a .)
    WHILE           reduce using rule 54 (assig_pro -> LITERAL IGUAL a .)
    FOR             reduce using rule 54 (assig_pro -> LITERAL IGUAL a .)
    INTERFACE       reduce using rule 54 (assig_pro -> LITERAL IGUAL a .)
    CONTINUE        reduce using rule 54 (assig_pro -> LITERAL IGUAL a .)
    BREAK           reduce using rule 54 (assig_pro -> LITERAL IGUAL a .)
    RETURN          reduce using rule 54 (assig_pro -> LITERAL IGUAL a .)
    FUNCTION        reduce using rule 54 (assig_pro -> LITERAL IGUAL a .)
    NOT             reduce using rule 54 (assig_pro -> LITERAL IGUAL a .)
    MENOS           reduce using rule 54 (assig_pro -> LITERAL IGUAL a .)
    MAS             reduce using rule 54 (assig_pro -> LITERAL IGUAL a .)
    ENTERO          reduce using rule 54 (assig_pro -> LITERAL IGUAL a .)
    DECIMAL         reduce using rule 54 (assig_pro -> LITERAL IGUAL a .)
    CADENA          reduce using rule 54 (assig_pro -> LITERAL IGUAL a .)
    TRUE            reduce using rule 54 (assig_pro -> LITERAL IGUAL a .)
    FALSE           reduce using rule 54 (assig_pro -> LITERAL IGUAL a .)
    L_PAREN         reduce using rule 54 (assig_pro -> LITERAL IGUAL a .)
    L_CORCHETE      reduce using rule 54 (assig_pro -> LITERAL IGUAL a .)
    L_LLAVE         reduce using rule 54 (assig_pro -> LITERAL IGUAL a .)
    $end            reduce using rule 54 (assig_pro -> LITERAL IGUAL a .)
    R_LLAVE         reduce using rule 54 (assig_pro -> LITERAL IGUAL a .)
    R_PAREN         reduce using rule 54 (assig_pro -> LITERAL IGUAL a .)
    OR              shift and go to state 83
    PUNTO           shift and go to state 113


state 118

    (23) call_function_pro -> LITERAL L_PAREN values . R_PAREN
    (25) values -> values . COMA a

    R_PAREN         shift and go to state 172
    COMA            shift and go to state 160


state 119

    (24) call_function_pro -> LITERAL L_PAREN R_PAREN .

    SEMI_COLON      reduce using rule 24 (call_function_pro -> LITERAL L_PAREN R_PAREN .)
    CONSOLE         reduce using rule 24 (call_function_pro -> LITERAL L_PAREN R_PAREN .)
    LET             reduce using rule 24 (call_function_pro -> LITERAL L_PAREN R_PAREN .)
    LITERAL         reduce using rule 24 (call_function_pro -> LITERAL L_PAREN R_PAREN .)
    IF              reduce using rule 24 (call_function_pro -> LITERAL L_PAREN R_PAREN .)
    WHILE           reduce using rule 24 (call_function_pro -> LITERAL L_PAREN R_PAREN .)
    FOR             reduce using rule 24 (call_function_pro -> LITERAL L_PAREN R_PAREN .)
    INTERFACE       reduce using rule 24 (call_function_pro -> LITERAL L_PAREN R_PAREN .)
    CONTINUE        reduce using rule 24 (call_function_pro -> LITERAL L_PAREN R_PAREN .)
    BREAK           reduce using rule 24 (call_function_pro -> LITERAL L_PAREN R_PAREN .)
    RETURN          reduce using rule 24 (call_function_pro -> LITERAL L_PAREN R_PAREN .)
    FUNCTION        reduce using rule 24 (call_function_pro -> LITERAL L_PAREN R_PAREN .)
    NOT             reduce using rule 24 (call_function_pro -> LITERAL L_PAREN R_PAREN .)
    MENOS           reduce using rule 24 (call_function_pro -> LITERAL L_PAREN R_PAREN .)
    MAS             reduce using rule 24 (call_function_pro -> LITERAL L_PAREN R_PAREN .)
    ENTERO          reduce using rule 24 (call_function_pro -> LITERAL L_PAREN R_PAREN .)
    DECIMAL         reduce using rule 24 (call_function_pro -> LITERAL L_PAREN R_PAREN .)
    CADENA          reduce using rule 24 (call_function_pro -> LITERAL L_PAREN R_PAREN .)
    TRUE            reduce using rule 24 (call_function_pro -> LITERAL L_PAREN R_PAREN .)
    FALSE           reduce using rule 24 (call_function_pro -> LITERAL L_PAREN R_PAREN .)
    L_PAREN         reduce using rule 24 (call_function_pro -> LITERAL L_PAREN R_PAREN .)
    L_CORCHETE      reduce using rule 24 (call_function_pro -> LITERAL L_PAREN R_PAREN .)
    L_LLAVE         reduce using rule 24 (call_function_pro -> LITERAL L_PAREN R_PAREN .)
    $end            reduce using rule 24 (call_function_pro -> LITERAL L_PAREN R_PAREN .)
    TIMES           reduce using rule 24 (call_function_pro -> LITERAL L_PAREN R_PAREN .)
    DIVIDE          reduce using rule 24 (call_function_pro -> LITERAL L_PAREN R_PAREN .)
    MOD             reduce using rule 24 (call_function_pro -> LITERAL L_PAREN R_PAREN .)
    POTENCIA        reduce using rule 24 (call_function_pro -> LITERAL L_PAREN R_PAREN .)
    DISTINTO_QUE    reduce using rule 24 (call_function_pro -> LITERAL L_PAREN R_PAREN .)
    MENOR_QUE       reduce using rule 24 (call_function_pro -> LITERAL L_PAREN R_PAREN .)
    MENOR_IGUAL_QUE reduce using rule 24 (call_function_pro -> LITERAL L_PAREN R_PAREN .)
    MAYOR_QUE       reduce using rule 24 (call_function_pro -> LITERAL L_PAREN R_PAREN .)
    MAYOR_IGUAL_QUE reduce using rule 24 (call_function_pro -> LITERAL L_PAREN R_PAREN .)
    TRIPLE_IGUAL    reduce using rule 24 (call_function_pro -> LITERAL L_PAREN R_PAREN .)
    AND             reduce using rule 24 (call_function_pro -> LITERAL L_PAREN R_PAREN .)
    PUNTO           reduce using rule 24 (call_function_pro -> LITERAL L_PAREN R_PAREN .)
    OR              reduce using rule 24 (call_function_pro -> LITERAL L_PAREN R_PAREN .)
    R_PAREN         reduce using rule 24 (call_function_pro -> LITERAL L_PAREN R_PAREN .)
    R_LLAVE         reduce using rule 24 (call_function_pro -> LITERAL L_PAREN R_PAREN .)
    R_CORCHETE      reduce using rule 24 (call_function_pro -> LITERAL L_PAREN R_PAREN .)
    COMA            reduce using rule 24 (call_function_pro -> LITERAL L_PAREN R_PAREN .)


state 120

    (111) sumadores -> LITERAL MAS MAS .

    SEMI_COLON      reduce using rule 111 (sumadores -> LITERAL MAS MAS .)
    CONSOLE         reduce using rule 111 (sumadores -> LITERAL MAS MAS .)
    LET             reduce using rule 111 (sumadores -> LITERAL MAS MAS .)
    LITERAL         reduce using rule 111 (sumadores -> LITERAL MAS MAS .)
    IF              reduce using rule 111 (sumadores -> LITERAL MAS MAS .)
    WHILE           reduce using rule 111 (sumadores -> LITERAL MAS MAS .)
    FOR             reduce using rule 111 (sumadores -> LITERAL MAS MAS .)
    INTERFACE       reduce using rule 111 (sumadores -> LITERAL MAS MAS .)
    CONTINUE        reduce using rule 111 (sumadores -> LITERAL MAS MAS .)
    BREAK           reduce using rule 111 (sumadores -> LITERAL MAS MAS .)
    RETURN          reduce using rule 111 (sumadores -> LITERAL MAS MAS .)
    FUNCTION        reduce using rule 111 (sumadores -> LITERAL MAS MAS .)
    NOT             reduce using rule 111 (sumadores -> LITERAL MAS MAS .)
    MENOS           reduce using rule 111 (sumadores -> LITERAL MAS MAS .)
    MAS             reduce using rule 111 (sumadores -> LITERAL MAS MAS .)
    ENTERO          reduce using rule 111 (sumadores -> LITERAL MAS MAS .)
    DECIMAL         reduce using rule 111 (sumadores -> LITERAL MAS MAS .)
    CADENA          reduce using rule 111 (sumadores -> LITERAL MAS MAS .)
    TRUE            reduce using rule 111 (sumadores -> LITERAL MAS MAS .)
    FALSE           reduce using rule 111 (sumadores -> LITERAL MAS MAS .)
    L_PAREN         reduce using rule 111 (sumadores -> LITERAL MAS MAS .)
    L_CORCHETE      reduce using rule 111 (sumadores -> LITERAL MAS MAS .)
    L_LLAVE         reduce using rule 111 (sumadores -> LITERAL MAS MAS .)
    $end            reduce using rule 111 (sumadores -> LITERAL MAS MAS .)
    R_LLAVE         reduce using rule 111 (sumadores -> LITERAL MAS MAS .)
    R_PAREN         reduce using rule 111 (sumadores -> LITERAL MAS MAS .)


state 121

    (112) sumadores -> LITERAL MENOS MENOS .

    SEMI_COLON      reduce using rule 112 (sumadores -> LITERAL MENOS MENOS .)
    CONSOLE         reduce using rule 112 (sumadores -> LITERAL MENOS MENOS .)
    LET             reduce using rule 112 (sumadores -> LITERAL MENOS MENOS .)
    LITERAL         reduce using rule 112 (sumadores -> LITERAL MENOS MENOS .)
    IF              reduce using rule 112 (sumadores -> LITERAL MENOS MENOS .)
    WHILE           reduce using rule 112 (sumadores -> LITERAL MENOS MENOS .)
    FOR             reduce using rule 112 (sumadores -> LITERAL MENOS MENOS .)
    INTERFACE       reduce using rule 112 (sumadores -> LITERAL MENOS MENOS .)
    CONTINUE        reduce using rule 112 (sumadores -> LITERAL MENOS MENOS .)
    BREAK           reduce using rule 112 (sumadores -> LITERAL MENOS MENOS .)
    RETURN          reduce using rule 112 (sumadores -> LITERAL MENOS MENOS .)
    FUNCTION        reduce using rule 112 (sumadores -> LITERAL MENOS MENOS .)
    NOT             reduce using rule 112 (sumadores -> LITERAL MENOS MENOS .)
    MENOS           reduce using rule 112 (sumadores -> LITERAL MENOS MENOS .)
    MAS             reduce using rule 112 (sumadores -> LITERAL MENOS MENOS .)
    ENTERO          reduce using rule 112 (sumadores -> LITERAL MENOS MENOS .)
    DECIMAL         reduce using rule 112 (sumadores -> LITERAL MENOS MENOS .)
    CADENA          reduce using rule 112 (sumadores -> LITERAL MENOS MENOS .)
    TRUE            reduce using rule 112 (sumadores -> LITERAL MENOS MENOS .)
    FALSE           reduce using rule 112 (sumadores -> LITERAL MENOS MENOS .)
    L_PAREN         reduce using rule 112 (sumadores -> LITERAL MENOS MENOS .)
    L_CORCHETE      reduce using rule 112 (sumadores -> LITERAL MENOS MENOS .)
    L_LLAVE         reduce using rule 112 (sumadores -> LITERAL MENOS MENOS .)
    $end            reduce using rule 112 (sumadores -> LITERAL MENOS MENOS .)
    R_LLAVE         reduce using rule 112 (sumadores -> LITERAL MENOS MENOS .)
    R_PAREN         reduce using rule 112 (sumadores -> LITERAL MENOS MENOS .)


state 122

    (109) dimensions -> dimensions L_CORCHETE . a R_CORCHETE
    (70) a -> . a OR b
    (71) a -> . b
    (72) b -> . b AND c
    (73) b -> . c
    (74) c -> . NOT d
    (75) c -> . d
    (76) d -> . d DISTINTO_QUE e
    (77) d -> . d MENOR_QUE e
    (78) d -> . d MENOR_IGUAL_QUE e
    (79) d -> . d MAYOR_QUE e
    (80) d -> . d MAYOR_IGUAL_QUE e
    (81) d -> . d TRIPLE_IGUAL e
    (82) d -> . e
    (83) e -> . e MAS f
    (84) e -> . e MENOS f
    (85) e -> . f
    (86) f -> . MENOS g
    (87) f -> . MAS g
    (88) f -> . g
    (89) g -> . g TIMES h
    (90) g -> . g DIVIDE h
    (91) g -> . g MOD h
    (92) g -> . g POTENCIA h
    (93) g -> . h
    (94) h -> . ENTERO
    (95) h -> . DECIMAL
    (96) h -> . CADENA
    (97) h -> . LITERAL
    (98) h -> . TRUE
    (99) h -> . FALSE
    (100) h -> . call_function_pro
    (101) h -> . array_pro
    (102) h -> . interface_assi
    (103) h -> . L_PAREN a R_PAREN
    (104) h -> . array_val_pro
    (105) h -> . a PUNTO LITERAL
    (106) h -> . a PUNTO nativeFun L_PAREN expresion R_PAREN
    (107) h -> . a PUNTO nativeFun L_PAREN R_PAREN
    (23) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (24) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (116) array_pro -> . L_CORCHETE values R_CORCHETE
    (113) interface_assi -> . L_LLAVE atributos_assi R_LLAVE
    (108) array_val_pro -> . LITERAL dimensions

    NOT             shift and go to state 37
    MENOS           shift and go to state 34
    MAS             shift and go to state 33
    ENTERO          shift and go to state 43
    DECIMAL         shift and go to state 44
    CADENA          shift and go to state 45
    LITERAL         shift and go to state 71
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    L_PAREN         shift and go to state 20
    L_CORCHETE      shift and go to state 51
    L_LLAVE         shift and go to state 25

    a                              shift and go to state 173
    b                              shift and go to state 35
    c                              shift and go to state 36
    d                              shift and go to state 38
    e                              shift and go to state 39
    f                              shift and go to state 40
    g                              shift and go to state 41
    h                              shift and go to state 42
    call_function_pro              shift and go to state 72
    array_pro                      shift and go to state 48
    interface_assi                 shift and go to state 49
    array_val_pro                  shift and go to state 50

state 123

    (110) dimensions -> L_CORCHETE a . R_CORCHETE
    (70) a -> a . OR b
    (105) h -> a . PUNTO LITERAL
    (106) h -> a . PUNTO nativeFun L_PAREN expresion R_PAREN
    (107) h -> a . PUNTO nativeFun L_PAREN R_PAREN

    R_CORCHETE      shift and go to state 174
    OR              shift and go to state 83
    PUNTO           shift and go to state 113


state 124

    (40) interface_assign_pro -> a PUNTO LITERAL . IGUAL a
    (105) h -> a PUNTO LITERAL .

    IGUAL           shift and go to state 175
    TIMES           reduce using rule 105 (h -> a PUNTO LITERAL .)
    DIVIDE          reduce using rule 105 (h -> a PUNTO LITERAL .)
    MOD             reduce using rule 105 (h -> a PUNTO LITERAL .)
    POTENCIA        reduce using rule 105 (h -> a PUNTO LITERAL .)
    MAS             reduce using rule 105 (h -> a PUNTO LITERAL .)
    MENOS           reduce using rule 105 (h -> a PUNTO LITERAL .)
    DISTINTO_QUE    reduce using rule 105 (h -> a PUNTO LITERAL .)
    MENOR_QUE       reduce using rule 105 (h -> a PUNTO LITERAL .)
    MENOR_IGUAL_QUE reduce using rule 105 (h -> a PUNTO LITERAL .)
    MAYOR_QUE       reduce using rule 105 (h -> a PUNTO LITERAL .)
    MAYOR_IGUAL_QUE reduce using rule 105 (h -> a PUNTO LITERAL .)
    TRIPLE_IGUAL    reduce using rule 105 (h -> a PUNTO LITERAL .)
    AND             reduce using rule 105 (h -> a PUNTO LITERAL .)
    PUNTO           reduce using rule 105 (h -> a PUNTO LITERAL .)
    OR              reduce using rule 105 (h -> a PUNTO LITERAL .)


state 125

    (106) h -> a PUNTO nativeFun . L_PAREN expresion R_PAREN
    (107) h -> a PUNTO nativeFun . L_PAREN R_PAREN

    L_PAREN         shift and go to state 176


state 126

    (117) nativeFun -> TOSTRING .

    L_PAREN         reduce using rule 117 (nativeFun -> TOSTRING .)


state 127

    (118) nativeFun -> TOFIXED .

    L_PAREN         reduce using rule 118 (nativeFun -> TOFIXED .)


state 128

    (119) nativeFun -> TOEXPONENTIAL .

    L_PAREN         reduce using rule 119 (nativeFun -> TOEXPONENTIAL .)


state 129

    (120) nativeFun -> TOLOWERCASE .

    L_PAREN         reduce using rule 120 (nativeFun -> TOLOWERCASE .)


state 130

    (121) nativeFun -> TOUPPERCASE .

    L_PAREN         reduce using rule 121 (nativeFun -> TOUPPERCASE .)


state 131

    (122) nativeFun -> SPLIT .

    L_PAREN         reduce using rule 122 (nativeFun -> SPLIT .)


state 132

    (123) nativeFun -> CONCAT .

    L_PAREN         reduce using rule 123 (nativeFun -> CONCAT .)


state 133

    (70) a -> a OR b .
    (72) b -> b . AND c
    (71) a -> b .

  ! reduce/reduce conflict for PUNTO resolved using rule 70 (a -> a OR b .)
  ! reduce/reduce conflict for OR resolved using rule 70 (a -> a OR b .)
    PUNTO           reduce using rule 70 (a -> a OR b .)
    OR              reduce using rule 70 (a -> a OR b .)
    R_PAREN         reduce using rule 70 (a -> a OR b .)
    SEMI_COLON      reduce using rule 70 (a -> a OR b .)
    CONSOLE         reduce using rule 70 (a -> a OR b .)
    LET             reduce using rule 70 (a -> a OR b .)
    LITERAL         reduce using rule 70 (a -> a OR b .)
    IF              reduce using rule 70 (a -> a OR b .)
    WHILE           reduce using rule 70 (a -> a OR b .)
    FOR             reduce using rule 70 (a -> a OR b .)
    INTERFACE       reduce using rule 70 (a -> a OR b .)
    CONTINUE        reduce using rule 70 (a -> a OR b .)
    BREAK           reduce using rule 70 (a -> a OR b .)
    RETURN          reduce using rule 70 (a -> a OR b .)
    FUNCTION        reduce using rule 70 (a -> a OR b .)
    NOT             reduce using rule 70 (a -> a OR b .)
    MENOS           reduce using rule 70 (a -> a OR b .)
    MAS             reduce using rule 70 (a -> a OR b .)
    ENTERO          reduce using rule 70 (a -> a OR b .)
    DECIMAL         reduce using rule 70 (a -> a OR b .)
    CADENA          reduce using rule 70 (a -> a OR b .)
    TRUE            reduce using rule 70 (a -> a OR b .)
    FALSE           reduce using rule 70 (a -> a OR b .)
    L_PAREN         reduce using rule 70 (a -> a OR b .)
    L_CORCHETE      reduce using rule 70 (a -> a OR b .)
    L_LLAVE         reduce using rule 70 (a -> a OR b .)
    $end            reduce using rule 70 (a -> a OR b .)
    R_LLAVE         reduce using rule 70 (a -> a OR b .)
    R_CORCHETE      reduce using rule 70 (a -> a OR b .)
    COMA            reduce using rule 70 (a -> a OR b .)
    AND             shift and go to state 95

  ! PUNTO           [ reduce using rule 71 (a -> b .) ]
  ! OR              [ reduce using rule 71 (a -> b .) ]


state 134

    (55) if_pro -> IF L_PAREN a . R_PAREN L_LLAVE instrucciones R_LLAVE else_pro
    (70) a -> a . OR b
    (105) h -> a . PUNTO LITERAL
    (106) h -> a . PUNTO nativeFun L_PAREN expresion R_PAREN
    (107) h -> a . PUNTO nativeFun L_PAREN R_PAREN

    R_PAREN         shift and go to state 177
    OR              shift and go to state 83
    PUNTO           shift and go to state 113


state 135

    (113) interface_assi -> L_LLAVE atributos_assi R_LLAVE .

    TIMES           reduce using rule 113 (interface_assi -> L_LLAVE atributos_assi R_LLAVE .)
    DIVIDE          reduce using rule 113 (interface_assi -> L_LLAVE atributos_assi R_LLAVE .)
    MOD             reduce using rule 113 (interface_assi -> L_LLAVE atributos_assi R_LLAVE .)
    POTENCIA        reduce using rule 113 (interface_assi -> L_LLAVE atributos_assi R_LLAVE .)
    MAS             reduce using rule 113 (interface_assi -> L_LLAVE atributos_assi R_LLAVE .)
    MENOS           reduce using rule 113 (interface_assi -> L_LLAVE atributos_assi R_LLAVE .)
    DISTINTO_QUE    reduce using rule 113 (interface_assi -> L_LLAVE atributos_assi R_LLAVE .)
    MENOR_QUE       reduce using rule 113 (interface_assi -> L_LLAVE atributos_assi R_LLAVE .)
    MENOR_IGUAL_QUE reduce using rule 113 (interface_assi -> L_LLAVE atributos_assi R_LLAVE .)
    MAYOR_QUE       reduce using rule 113 (interface_assi -> L_LLAVE atributos_assi R_LLAVE .)
    MAYOR_IGUAL_QUE reduce using rule 113 (interface_assi -> L_LLAVE atributos_assi R_LLAVE .)
    TRIPLE_IGUAL    reduce using rule 113 (interface_assi -> L_LLAVE atributos_assi R_LLAVE .)
    AND             reduce using rule 113 (interface_assi -> L_LLAVE atributos_assi R_LLAVE .)
    PUNTO           reduce using rule 113 (interface_assi -> L_LLAVE atributos_assi R_LLAVE .)
    OR              reduce using rule 113 (interface_assi -> L_LLAVE atributos_assi R_LLAVE .)
    R_PAREN         reduce using rule 113 (interface_assi -> L_LLAVE atributos_assi R_LLAVE .)
    SEMI_COLON      reduce using rule 113 (interface_assi -> L_LLAVE atributos_assi R_LLAVE .)
    CONSOLE         reduce using rule 113 (interface_assi -> L_LLAVE atributos_assi R_LLAVE .)
    LET             reduce using rule 113 (interface_assi -> L_LLAVE atributos_assi R_LLAVE .)
    LITERAL         reduce using rule 113 (interface_assi -> L_LLAVE atributos_assi R_LLAVE .)
    IF              reduce using rule 113 (interface_assi -> L_LLAVE atributos_assi R_LLAVE .)
    WHILE           reduce using rule 113 (interface_assi -> L_LLAVE atributos_assi R_LLAVE .)
    FOR             reduce using rule 113 (interface_assi -> L_LLAVE atributos_assi R_LLAVE .)
    INTERFACE       reduce using rule 113 (interface_assi -> L_LLAVE atributos_assi R_LLAVE .)
    CONTINUE        reduce using rule 113 (interface_assi -> L_LLAVE atributos_assi R_LLAVE .)
    BREAK           reduce using rule 113 (interface_assi -> L_LLAVE atributos_assi R_LLAVE .)
    RETURN          reduce using rule 113 (interface_assi -> L_LLAVE atributos_assi R_LLAVE .)
    FUNCTION        reduce using rule 113 (interface_assi -> L_LLAVE atributos_assi R_LLAVE .)
    NOT             reduce using rule 113 (interface_assi -> L_LLAVE atributos_assi R_LLAVE .)
    ENTERO          reduce using rule 113 (interface_assi -> L_LLAVE atributos_assi R_LLAVE .)
    DECIMAL         reduce using rule 113 (interface_assi -> L_LLAVE atributos_assi R_LLAVE .)
    CADENA          reduce using rule 113 (interface_assi -> L_LLAVE atributos_assi R_LLAVE .)
    TRUE            reduce using rule 113 (interface_assi -> L_LLAVE atributos_assi R_LLAVE .)
    FALSE           reduce using rule 113 (interface_assi -> L_LLAVE atributos_assi R_LLAVE .)
    L_PAREN         reduce using rule 113 (interface_assi -> L_LLAVE atributos_assi R_LLAVE .)
    L_CORCHETE      reduce using rule 113 (interface_assi -> L_LLAVE atributos_assi R_LLAVE .)
    L_LLAVE         reduce using rule 113 (interface_assi -> L_LLAVE atributos_assi R_LLAVE .)
    $end            reduce using rule 113 (interface_assi -> L_LLAVE atributos_assi R_LLAVE .)
    R_LLAVE         reduce using rule 113 (interface_assi -> L_LLAVE atributos_assi R_LLAVE .)
    R_CORCHETE      reduce using rule 113 (interface_assi -> L_LLAVE atributos_assi R_LLAVE .)
    COMA            reduce using rule 113 (interface_assi -> L_LLAVE atributos_assi R_LLAVE .)


state 136

    (114) atributos_assi -> atributos_assi COMA . LITERAL COLON a

    LITERAL         shift and go to state 178


state 137

    (115) atributos_assi -> LITERAL COLON . a
    (70) a -> . a OR b
    (71) a -> . b
    (72) b -> . b AND c
    (73) b -> . c
    (74) c -> . NOT d
    (75) c -> . d
    (76) d -> . d DISTINTO_QUE e
    (77) d -> . d MENOR_QUE e
    (78) d -> . d MENOR_IGUAL_QUE e
    (79) d -> . d MAYOR_QUE e
    (80) d -> . d MAYOR_IGUAL_QUE e
    (81) d -> . d TRIPLE_IGUAL e
    (82) d -> . e
    (83) e -> . e MAS f
    (84) e -> . e MENOS f
    (85) e -> . f
    (86) f -> . MENOS g
    (87) f -> . MAS g
    (88) f -> . g
    (89) g -> . g TIMES h
    (90) g -> . g DIVIDE h
    (91) g -> . g MOD h
    (92) g -> . g POTENCIA h
    (93) g -> . h
    (94) h -> . ENTERO
    (95) h -> . DECIMAL
    (96) h -> . CADENA
    (97) h -> . LITERAL
    (98) h -> . TRUE
    (99) h -> . FALSE
    (100) h -> . call_function_pro
    (101) h -> . array_pro
    (102) h -> . interface_assi
    (103) h -> . L_PAREN a R_PAREN
    (104) h -> . array_val_pro
    (105) h -> . a PUNTO LITERAL
    (106) h -> . a PUNTO nativeFun L_PAREN expresion R_PAREN
    (107) h -> . a PUNTO nativeFun L_PAREN R_PAREN
    (23) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (24) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (116) array_pro -> . L_CORCHETE values R_CORCHETE
    (113) interface_assi -> . L_LLAVE atributos_assi R_LLAVE
    (108) array_val_pro -> . LITERAL dimensions

    NOT             shift and go to state 37
    MENOS           shift and go to state 34
    MAS             shift and go to state 33
    ENTERO          shift and go to state 43
    DECIMAL         shift and go to state 44
    CADENA          shift and go to state 45
    LITERAL         shift and go to state 71
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    L_PAREN         shift and go to state 20
    L_CORCHETE      shift and go to state 51
    L_LLAVE         shift and go to state 25

    a                              shift and go to state 179
    b                              shift and go to state 35
    c                              shift and go to state 36
    d                              shift and go to state 38
    e                              shift and go to state 39
    f                              shift and go to state 40
    g                              shift and go to state 41
    h                              shift and go to state 42
    call_function_pro              shift and go to state 72
    array_pro                      shift and go to state 48
    interface_assi                 shift and go to state 49
    array_val_pro                  shift and go to state 50

state 138

    (59) while_pro -> WHILE L_PAREN a . R_PAREN L_LLAVE instrucciones R_LLAVE
    (70) a -> a . OR b
    (105) h -> a . PUNTO LITERAL
    (106) h -> a . PUNTO nativeFun L_PAREN expresion R_PAREN
    (107) h -> a . PUNTO nativeFun L_PAREN R_PAREN

    R_PAREN         shift and go to state 180
    OR              shift and go to state 83
    PUNTO           shift and go to state 113


state 139

    (60) for_pro -> FOR L_PAREN declaration_instruction . SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE

    SEMI_COLON      shift and go to state 181


state 140

    (61) for_pro -> FOR L_PAREN assig_pro . SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE

    SEMI_COLON      shift and go to state 182


state 141

    (64) for_each_pro -> FOR L_PAREN for_each_dec . R_PAREN L_LLAVE instrucciones R_LLAVE

    R_PAREN         shift and go to state 183


state 142

    (41) declaration_instruction -> LET . declaracion_list
    (65) for_each_dec -> LET . LITERAL OF a
    (66) for_each_dec -> LET . LITERAL COLON type OF a
    (42) declaracion_list -> . declaracion_list COMA assignacion_instruction
    (43) declaracion_list -> . assignacion_instruction
    (44) assignacion_instruction -> . LITERAL COLON type IGUAL a
    (45) assignacion_instruction -> . LITERAL COLON type
    (46) assignacion_instruction -> . LITERAL IGUAL a
    (47) assignacion_instruction -> . LITERAL

    LITERAL         shift and go to state 184

    declaracion_list               shift and go to state 73
    assignacion_instruction        shift and go to state 74

state 143

    (54) assig_pro -> LITERAL . IGUAL a

    IGUAL           shift and go to state 76


state 144

    (35) interface_pro -> INTERFACE LITERAL L_LLAVE . interface_atributos R_LLAVE
    (36) interface_atributos -> . interface_atributos interface_atributo sc
    (37) interface_atributos -> .

    R_LLAVE         reduce using rule 37 (interface_atributos -> .)
    LITERAL         reduce using rule 37 (interface_atributos -> .)

    interface_atributos            shift and go to state 185

state 145

    (21) function_pro -> FUNCTION LITERAL L_PAREN . parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (22) function_pro -> FUNCTION LITERAL L_PAREN . R_PAREN L_LLAVE instrucciones R_LLAVE
    (27) parameters_pro -> . parameters_pro COMA parameter_pro
    (28) parameters_pro -> . parameter_pro
    (29) parameter_pro -> . LITERAL COLON type
    (30) parameter_pro -> . LITERAL

    R_PAREN         shift and go to state 188
    LITERAL         shift and go to state 186

    parameters_pro                 shift and go to state 187
    parameter_pro                  shift and go to state 189

state 146

    (72) b -> b AND c .
    (73) b -> c .

  ! reduce/reduce conflict for AND resolved using rule 72 (b -> b AND c .)
  ! reduce/reduce conflict for PUNTO resolved using rule 72 (b -> b AND c .)
  ! reduce/reduce conflict for OR resolved using rule 72 (b -> b AND c .)
    AND             reduce using rule 72 (b -> b AND c .)
    PUNTO           reduce using rule 72 (b -> b AND c .)
    OR              reduce using rule 72 (b -> b AND c .)
    R_PAREN         reduce using rule 72 (b -> b AND c .)
    SEMI_COLON      reduce using rule 72 (b -> b AND c .)
    CONSOLE         reduce using rule 72 (b -> b AND c .)
    LET             reduce using rule 72 (b -> b AND c .)
    LITERAL         reduce using rule 72 (b -> b AND c .)
    IF              reduce using rule 72 (b -> b AND c .)
    WHILE           reduce using rule 72 (b -> b AND c .)
    FOR             reduce using rule 72 (b -> b AND c .)
    INTERFACE       reduce using rule 72 (b -> b AND c .)
    CONTINUE        reduce using rule 72 (b -> b AND c .)
    BREAK           reduce using rule 72 (b -> b AND c .)
    RETURN          reduce using rule 72 (b -> b AND c .)
    FUNCTION        reduce using rule 72 (b -> b AND c .)
    NOT             reduce using rule 72 (b -> b AND c .)
    MENOS           reduce using rule 72 (b -> b AND c .)
    MAS             reduce using rule 72 (b -> b AND c .)
    ENTERO          reduce using rule 72 (b -> b AND c .)
    DECIMAL         reduce using rule 72 (b -> b AND c .)
    CADENA          reduce using rule 72 (b -> b AND c .)
    TRUE            reduce using rule 72 (b -> b AND c .)
    FALSE           reduce using rule 72 (b -> b AND c .)
    L_PAREN         reduce using rule 72 (b -> b AND c .)
    L_CORCHETE      reduce using rule 72 (b -> b AND c .)
    L_LLAVE         reduce using rule 72 (b -> b AND c .)
    $end            reduce using rule 72 (b -> b AND c .)
    R_LLAVE         reduce using rule 72 (b -> b AND c .)
    R_CORCHETE      reduce using rule 72 (b -> b AND c .)
    COMA            reduce using rule 72 (b -> b AND c .)

  ! AND             [ reduce using rule 73 (b -> c .) ]
  ! PUNTO           [ reduce using rule 73 (b -> c .) ]
  ! OR              [ reduce using rule 73 (b -> c .) ]


state 147

    (76) d -> d DISTINTO_QUE e .
    (83) e -> e . MAS f
    (84) e -> e . MENOS f
    (82) d -> e .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
  ! reduce/reduce conflict for DISTINTO_QUE resolved using rule 76 (d -> d DISTINTO_QUE e .)
  ! reduce/reduce conflict for MENOR_QUE resolved using rule 76 (d -> d DISTINTO_QUE e .)
  ! reduce/reduce conflict for MENOR_IGUAL_QUE resolved using rule 76 (d -> d DISTINTO_QUE e .)
  ! reduce/reduce conflict for MAYOR_QUE resolved using rule 76 (d -> d DISTINTO_QUE e .)
  ! reduce/reduce conflict for MAYOR_IGUAL_QUE resolved using rule 76 (d -> d DISTINTO_QUE e .)
  ! reduce/reduce conflict for TRIPLE_IGUAL resolved using rule 76 (d -> d DISTINTO_QUE e .)
  ! reduce/reduce conflict for AND resolved using rule 76 (d -> d DISTINTO_QUE e .)
  ! reduce/reduce conflict for PUNTO resolved using rule 76 (d -> d DISTINTO_QUE e .)
  ! reduce/reduce conflict for OR resolved using rule 76 (d -> d DISTINTO_QUE e .)
    DISTINTO_QUE    reduce using rule 76 (d -> d DISTINTO_QUE e .)
    MENOR_QUE       reduce using rule 76 (d -> d DISTINTO_QUE e .)
    MENOR_IGUAL_QUE reduce using rule 76 (d -> d DISTINTO_QUE e .)
    MAYOR_QUE       reduce using rule 76 (d -> d DISTINTO_QUE e .)
    MAYOR_IGUAL_QUE reduce using rule 76 (d -> d DISTINTO_QUE e .)
    TRIPLE_IGUAL    reduce using rule 76 (d -> d DISTINTO_QUE e .)
    AND             reduce using rule 76 (d -> d DISTINTO_QUE e .)
    PUNTO           reduce using rule 76 (d -> d DISTINTO_QUE e .)
    OR              reduce using rule 76 (d -> d DISTINTO_QUE e .)
    R_PAREN         reduce using rule 76 (d -> d DISTINTO_QUE e .)
    SEMI_COLON      reduce using rule 76 (d -> d DISTINTO_QUE e .)
    CONSOLE         reduce using rule 76 (d -> d DISTINTO_QUE e .)
    LET             reduce using rule 76 (d -> d DISTINTO_QUE e .)
    LITERAL         reduce using rule 76 (d -> d DISTINTO_QUE e .)
    IF              reduce using rule 76 (d -> d DISTINTO_QUE e .)
    WHILE           reduce using rule 76 (d -> d DISTINTO_QUE e .)
    FOR             reduce using rule 76 (d -> d DISTINTO_QUE e .)
    INTERFACE       reduce using rule 76 (d -> d DISTINTO_QUE e .)
    CONTINUE        reduce using rule 76 (d -> d DISTINTO_QUE e .)
    BREAK           reduce using rule 76 (d -> d DISTINTO_QUE e .)
    RETURN          reduce using rule 76 (d -> d DISTINTO_QUE e .)
    FUNCTION        reduce using rule 76 (d -> d DISTINTO_QUE e .)
    NOT             reduce using rule 76 (d -> d DISTINTO_QUE e .)
    ENTERO          reduce using rule 76 (d -> d DISTINTO_QUE e .)
    DECIMAL         reduce using rule 76 (d -> d DISTINTO_QUE e .)
    CADENA          reduce using rule 76 (d -> d DISTINTO_QUE e .)
    TRUE            reduce using rule 76 (d -> d DISTINTO_QUE e .)
    FALSE           reduce using rule 76 (d -> d DISTINTO_QUE e .)
    L_PAREN         reduce using rule 76 (d -> d DISTINTO_QUE e .)
    L_CORCHETE      reduce using rule 76 (d -> d DISTINTO_QUE e .)
    L_LLAVE         reduce using rule 76 (d -> d DISTINTO_QUE e .)
    $end            reduce using rule 76 (d -> d DISTINTO_QUE e .)
    R_LLAVE         reduce using rule 76 (d -> d DISTINTO_QUE e .)
    R_CORCHETE      reduce using rule 76 (d -> d DISTINTO_QUE e .)
    COMA            reduce using rule 76 (d -> d DISTINTO_QUE e .)
    MAS             shift and go to state 103
    MENOS           shift and go to state 104

  ! MENOS           [ reduce using rule 76 (d -> d DISTINTO_QUE e .) ]
  ! MAS             [ reduce using rule 76 (d -> d DISTINTO_QUE e .) ]
  ! DISTINTO_QUE    [ reduce using rule 82 (d -> e .) ]
  ! MENOR_QUE       [ reduce using rule 82 (d -> e .) ]
  ! MENOR_IGUAL_QUE [ reduce using rule 82 (d -> e .) ]
  ! MAYOR_QUE       [ reduce using rule 82 (d -> e .) ]
  ! MAYOR_IGUAL_QUE [ reduce using rule 82 (d -> e .) ]
  ! TRIPLE_IGUAL    [ reduce using rule 82 (d -> e .) ]
  ! AND             [ reduce using rule 82 (d -> e .) ]
  ! PUNTO           [ reduce using rule 82 (d -> e .) ]
  ! OR              [ reduce using rule 82 (d -> e .) ]


state 148

    (77) d -> d MENOR_QUE e .
    (83) e -> e . MAS f
    (84) e -> e . MENOS f
    (82) d -> e .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
  ! reduce/reduce conflict for DISTINTO_QUE resolved using rule 77 (d -> d MENOR_QUE e .)
  ! reduce/reduce conflict for MENOR_QUE resolved using rule 77 (d -> d MENOR_QUE e .)
  ! reduce/reduce conflict for MENOR_IGUAL_QUE resolved using rule 77 (d -> d MENOR_QUE e .)
  ! reduce/reduce conflict for MAYOR_QUE resolved using rule 77 (d -> d MENOR_QUE e .)
  ! reduce/reduce conflict for MAYOR_IGUAL_QUE resolved using rule 77 (d -> d MENOR_QUE e .)
  ! reduce/reduce conflict for TRIPLE_IGUAL resolved using rule 77 (d -> d MENOR_QUE e .)
  ! reduce/reduce conflict for AND resolved using rule 77 (d -> d MENOR_QUE e .)
  ! reduce/reduce conflict for PUNTO resolved using rule 77 (d -> d MENOR_QUE e .)
  ! reduce/reduce conflict for OR resolved using rule 77 (d -> d MENOR_QUE e .)
    DISTINTO_QUE    reduce using rule 77 (d -> d MENOR_QUE e .)
    MENOR_QUE       reduce using rule 77 (d -> d MENOR_QUE e .)
    MENOR_IGUAL_QUE reduce using rule 77 (d -> d MENOR_QUE e .)
    MAYOR_QUE       reduce using rule 77 (d -> d MENOR_QUE e .)
    MAYOR_IGUAL_QUE reduce using rule 77 (d -> d MENOR_QUE e .)
    TRIPLE_IGUAL    reduce using rule 77 (d -> d MENOR_QUE e .)
    AND             reduce using rule 77 (d -> d MENOR_QUE e .)
    PUNTO           reduce using rule 77 (d -> d MENOR_QUE e .)
    OR              reduce using rule 77 (d -> d MENOR_QUE e .)
    R_PAREN         reduce using rule 77 (d -> d MENOR_QUE e .)
    SEMI_COLON      reduce using rule 77 (d -> d MENOR_QUE e .)
    CONSOLE         reduce using rule 77 (d -> d MENOR_QUE e .)
    LET             reduce using rule 77 (d -> d MENOR_QUE e .)
    LITERAL         reduce using rule 77 (d -> d MENOR_QUE e .)
    IF              reduce using rule 77 (d -> d MENOR_QUE e .)
    WHILE           reduce using rule 77 (d -> d MENOR_QUE e .)
    FOR             reduce using rule 77 (d -> d MENOR_QUE e .)
    INTERFACE       reduce using rule 77 (d -> d MENOR_QUE e .)
    CONTINUE        reduce using rule 77 (d -> d MENOR_QUE e .)
    BREAK           reduce using rule 77 (d -> d MENOR_QUE e .)
    RETURN          reduce using rule 77 (d -> d MENOR_QUE e .)
    FUNCTION        reduce using rule 77 (d -> d MENOR_QUE e .)
    NOT             reduce using rule 77 (d -> d MENOR_QUE e .)
    ENTERO          reduce using rule 77 (d -> d MENOR_QUE e .)
    DECIMAL         reduce using rule 77 (d -> d MENOR_QUE e .)
    CADENA          reduce using rule 77 (d -> d MENOR_QUE e .)
    TRUE            reduce using rule 77 (d -> d MENOR_QUE e .)
    FALSE           reduce using rule 77 (d -> d MENOR_QUE e .)
    L_PAREN         reduce using rule 77 (d -> d MENOR_QUE e .)
    L_CORCHETE      reduce using rule 77 (d -> d MENOR_QUE e .)
    L_LLAVE         reduce using rule 77 (d -> d MENOR_QUE e .)
    $end            reduce using rule 77 (d -> d MENOR_QUE e .)
    R_LLAVE         reduce using rule 77 (d -> d MENOR_QUE e .)
    R_CORCHETE      reduce using rule 77 (d -> d MENOR_QUE e .)
    COMA            reduce using rule 77 (d -> d MENOR_QUE e .)
    MAS             shift and go to state 103
    MENOS           shift and go to state 104

  ! MENOS           [ reduce using rule 77 (d -> d MENOR_QUE e .) ]
  ! MAS             [ reduce using rule 77 (d -> d MENOR_QUE e .) ]
  ! DISTINTO_QUE    [ reduce using rule 82 (d -> e .) ]
  ! MENOR_QUE       [ reduce using rule 82 (d -> e .) ]
  ! MENOR_IGUAL_QUE [ reduce using rule 82 (d -> e .) ]
  ! MAYOR_QUE       [ reduce using rule 82 (d -> e .) ]
  ! MAYOR_IGUAL_QUE [ reduce using rule 82 (d -> e .) ]
  ! TRIPLE_IGUAL    [ reduce using rule 82 (d -> e .) ]
  ! AND             [ reduce using rule 82 (d -> e .) ]
  ! PUNTO           [ reduce using rule 82 (d -> e .) ]
  ! OR              [ reduce using rule 82 (d -> e .) ]


state 149

    (78) d -> d MENOR_IGUAL_QUE e .
    (83) e -> e . MAS f
    (84) e -> e . MENOS f
    (82) d -> e .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
  ! reduce/reduce conflict for DISTINTO_QUE resolved using rule 78 (d -> d MENOR_IGUAL_QUE e .)
  ! reduce/reduce conflict for MENOR_QUE resolved using rule 78 (d -> d MENOR_IGUAL_QUE e .)
  ! reduce/reduce conflict for MENOR_IGUAL_QUE resolved using rule 78 (d -> d MENOR_IGUAL_QUE e .)
  ! reduce/reduce conflict for MAYOR_QUE resolved using rule 78 (d -> d MENOR_IGUAL_QUE e .)
  ! reduce/reduce conflict for MAYOR_IGUAL_QUE resolved using rule 78 (d -> d MENOR_IGUAL_QUE e .)
  ! reduce/reduce conflict for TRIPLE_IGUAL resolved using rule 78 (d -> d MENOR_IGUAL_QUE e .)
  ! reduce/reduce conflict for AND resolved using rule 78 (d -> d MENOR_IGUAL_QUE e .)
  ! reduce/reduce conflict for PUNTO resolved using rule 78 (d -> d MENOR_IGUAL_QUE e .)
  ! reduce/reduce conflict for OR resolved using rule 78 (d -> d MENOR_IGUAL_QUE e .)
    DISTINTO_QUE    reduce using rule 78 (d -> d MENOR_IGUAL_QUE e .)
    MENOR_QUE       reduce using rule 78 (d -> d MENOR_IGUAL_QUE e .)
    MENOR_IGUAL_QUE reduce using rule 78 (d -> d MENOR_IGUAL_QUE e .)
    MAYOR_QUE       reduce using rule 78 (d -> d MENOR_IGUAL_QUE e .)
    MAYOR_IGUAL_QUE reduce using rule 78 (d -> d MENOR_IGUAL_QUE e .)
    TRIPLE_IGUAL    reduce using rule 78 (d -> d MENOR_IGUAL_QUE e .)
    AND             reduce using rule 78 (d -> d MENOR_IGUAL_QUE e .)
    PUNTO           reduce using rule 78 (d -> d MENOR_IGUAL_QUE e .)
    OR              reduce using rule 78 (d -> d MENOR_IGUAL_QUE e .)
    R_PAREN         reduce using rule 78 (d -> d MENOR_IGUAL_QUE e .)
    SEMI_COLON      reduce using rule 78 (d -> d MENOR_IGUAL_QUE e .)
    CONSOLE         reduce using rule 78 (d -> d MENOR_IGUAL_QUE e .)
    LET             reduce using rule 78 (d -> d MENOR_IGUAL_QUE e .)
    LITERAL         reduce using rule 78 (d -> d MENOR_IGUAL_QUE e .)
    IF              reduce using rule 78 (d -> d MENOR_IGUAL_QUE e .)
    WHILE           reduce using rule 78 (d -> d MENOR_IGUAL_QUE e .)
    FOR             reduce using rule 78 (d -> d MENOR_IGUAL_QUE e .)
    INTERFACE       reduce using rule 78 (d -> d MENOR_IGUAL_QUE e .)
    CONTINUE        reduce using rule 78 (d -> d MENOR_IGUAL_QUE e .)
    BREAK           reduce using rule 78 (d -> d MENOR_IGUAL_QUE e .)
    RETURN          reduce using rule 78 (d -> d MENOR_IGUAL_QUE e .)
    FUNCTION        reduce using rule 78 (d -> d MENOR_IGUAL_QUE e .)
    NOT             reduce using rule 78 (d -> d MENOR_IGUAL_QUE e .)
    ENTERO          reduce using rule 78 (d -> d MENOR_IGUAL_QUE e .)
    DECIMAL         reduce using rule 78 (d -> d MENOR_IGUAL_QUE e .)
    CADENA          reduce using rule 78 (d -> d MENOR_IGUAL_QUE e .)
    TRUE            reduce using rule 78 (d -> d MENOR_IGUAL_QUE e .)
    FALSE           reduce using rule 78 (d -> d MENOR_IGUAL_QUE e .)
    L_PAREN         reduce using rule 78 (d -> d MENOR_IGUAL_QUE e .)
    L_CORCHETE      reduce using rule 78 (d -> d MENOR_IGUAL_QUE e .)
    L_LLAVE         reduce using rule 78 (d -> d MENOR_IGUAL_QUE e .)
    $end            reduce using rule 78 (d -> d MENOR_IGUAL_QUE e .)
    R_LLAVE         reduce using rule 78 (d -> d MENOR_IGUAL_QUE e .)
    R_CORCHETE      reduce using rule 78 (d -> d MENOR_IGUAL_QUE e .)
    COMA            reduce using rule 78 (d -> d MENOR_IGUAL_QUE e .)
    MAS             shift and go to state 103
    MENOS           shift and go to state 104

  ! MENOS           [ reduce using rule 78 (d -> d MENOR_IGUAL_QUE e .) ]
  ! MAS             [ reduce using rule 78 (d -> d MENOR_IGUAL_QUE e .) ]
  ! DISTINTO_QUE    [ reduce using rule 82 (d -> e .) ]
  ! MENOR_QUE       [ reduce using rule 82 (d -> e .) ]
  ! MENOR_IGUAL_QUE [ reduce using rule 82 (d -> e .) ]
  ! MAYOR_QUE       [ reduce using rule 82 (d -> e .) ]
  ! MAYOR_IGUAL_QUE [ reduce using rule 82 (d -> e .) ]
  ! TRIPLE_IGUAL    [ reduce using rule 82 (d -> e .) ]
  ! AND             [ reduce using rule 82 (d -> e .) ]
  ! PUNTO           [ reduce using rule 82 (d -> e .) ]
  ! OR              [ reduce using rule 82 (d -> e .) ]


state 150

    (79) d -> d MAYOR_QUE e .
    (83) e -> e . MAS f
    (84) e -> e . MENOS f
    (82) d -> e .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
  ! reduce/reduce conflict for DISTINTO_QUE resolved using rule 79 (d -> d MAYOR_QUE e .)
  ! reduce/reduce conflict for MENOR_QUE resolved using rule 79 (d -> d MAYOR_QUE e .)
  ! reduce/reduce conflict for MENOR_IGUAL_QUE resolved using rule 79 (d -> d MAYOR_QUE e .)
  ! reduce/reduce conflict for MAYOR_QUE resolved using rule 79 (d -> d MAYOR_QUE e .)
  ! reduce/reduce conflict for MAYOR_IGUAL_QUE resolved using rule 79 (d -> d MAYOR_QUE e .)
  ! reduce/reduce conflict for TRIPLE_IGUAL resolved using rule 79 (d -> d MAYOR_QUE e .)
  ! reduce/reduce conflict for AND resolved using rule 79 (d -> d MAYOR_QUE e .)
  ! reduce/reduce conflict for PUNTO resolved using rule 79 (d -> d MAYOR_QUE e .)
  ! reduce/reduce conflict for OR resolved using rule 79 (d -> d MAYOR_QUE e .)
    DISTINTO_QUE    reduce using rule 79 (d -> d MAYOR_QUE e .)
    MENOR_QUE       reduce using rule 79 (d -> d MAYOR_QUE e .)
    MENOR_IGUAL_QUE reduce using rule 79 (d -> d MAYOR_QUE e .)
    MAYOR_QUE       reduce using rule 79 (d -> d MAYOR_QUE e .)
    MAYOR_IGUAL_QUE reduce using rule 79 (d -> d MAYOR_QUE e .)
    TRIPLE_IGUAL    reduce using rule 79 (d -> d MAYOR_QUE e .)
    AND             reduce using rule 79 (d -> d MAYOR_QUE e .)
    PUNTO           reduce using rule 79 (d -> d MAYOR_QUE e .)
    OR              reduce using rule 79 (d -> d MAYOR_QUE e .)
    R_PAREN         reduce using rule 79 (d -> d MAYOR_QUE e .)
    SEMI_COLON      reduce using rule 79 (d -> d MAYOR_QUE e .)
    CONSOLE         reduce using rule 79 (d -> d MAYOR_QUE e .)
    LET             reduce using rule 79 (d -> d MAYOR_QUE e .)
    LITERAL         reduce using rule 79 (d -> d MAYOR_QUE e .)
    IF              reduce using rule 79 (d -> d MAYOR_QUE e .)
    WHILE           reduce using rule 79 (d -> d MAYOR_QUE e .)
    FOR             reduce using rule 79 (d -> d MAYOR_QUE e .)
    INTERFACE       reduce using rule 79 (d -> d MAYOR_QUE e .)
    CONTINUE        reduce using rule 79 (d -> d MAYOR_QUE e .)
    BREAK           reduce using rule 79 (d -> d MAYOR_QUE e .)
    RETURN          reduce using rule 79 (d -> d MAYOR_QUE e .)
    FUNCTION        reduce using rule 79 (d -> d MAYOR_QUE e .)
    NOT             reduce using rule 79 (d -> d MAYOR_QUE e .)
    ENTERO          reduce using rule 79 (d -> d MAYOR_QUE e .)
    DECIMAL         reduce using rule 79 (d -> d MAYOR_QUE e .)
    CADENA          reduce using rule 79 (d -> d MAYOR_QUE e .)
    TRUE            reduce using rule 79 (d -> d MAYOR_QUE e .)
    FALSE           reduce using rule 79 (d -> d MAYOR_QUE e .)
    L_PAREN         reduce using rule 79 (d -> d MAYOR_QUE e .)
    L_CORCHETE      reduce using rule 79 (d -> d MAYOR_QUE e .)
    L_LLAVE         reduce using rule 79 (d -> d MAYOR_QUE e .)
    $end            reduce using rule 79 (d -> d MAYOR_QUE e .)
    R_LLAVE         reduce using rule 79 (d -> d MAYOR_QUE e .)
    R_CORCHETE      reduce using rule 79 (d -> d MAYOR_QUE e .)
    COMA            reduce using rule 79 (d -> d MAYOR_QUE e .)
    MAS             shift and go to state 103
    MENOS           shift and go to state 104

  ! MENOS           [ reduce using rule 79 (d -> d MAYOR_QUE e .) ]
  ! MAS             [ reduce using rule 79 (d -> d MAYOR_QUE e .) ]
  ! DISTINTO_QUE    [ reduce using rule 82 (d -> e .) ]
  ! MENOR_QUE       [ reduce using rule 82 (d -> e .) ]
  ! MENOR_IGUAL_QUE [ reduce using rule 82 (d -> e .) ]
  ! MAYOR_QUE       [ reduce using rule 82 (d -> e .) ]
  ! MAYOR_IGUAL_QUE [ reduce using rule 82 (d -> e .) ]
  ! TRIPLE_IGUAL    [ reduce using rule 82 (d -> e .) ]
  ! AND             [ reduce using rule 82 (d -> e .) ]
  ! PUNTO           [ reduce using rule 82 (d -> e .) ]
  ! OR              [ reduce using rule 82 (d -> e .) ]


state 151

    (80) d -> d MAYOR_IGUAL_QUE e .
    (83) e -> e . MAS f
    (84) e -> e . MENOS f
    (82) d -> e .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
  ! reduce/reduce conflict for DISTINTO_QUE resolved using rule 80 (d -> d MAYOR_IGUAL_QUE e .)
  ! reduce/reduce conflict for MENOR_QUE resolved using rule 80 (d -> d MAYOR_IGUAL_QUE e .)
  ! reduce/reduce conflict for MENOR_IGUAL_QUE resolved using rule 80 (d -> d MAYOR_IGUAL_QUE e .)
  ! reduce/reduce conflict for MAYOR_QUE resolved using rule 80 (d -> d MAYOR_IGUAL_QUE e .)
  ! reduce/reduce conflict for MAYOR_IGUAL_QUE resolved using rule 80 (d -> d MAYOR_IGUAL_QUE e .)
  ! reduce/reduce conflict for TRIPLE_IGUAL resolved using rule 80 (d -> d MAYOR_IGUAL_QUE e .)
  ! reduce/reduce conflict for AND resolved using rule 80 (d -> d MAYOR_IGUAL_QUE e .)
  ! reduce/reduce conflict for PUNTO resolved using rule 80 (d -> d MAYOR_IGUAL_QUE e .)
  ! reduce/reduce conflict for OR resolved using rule 80 (d -> d MAYOR_IGUAL_QUE e .)
    DISTINTO_QUE    reduce using rule 80 (d -> d MAYOR_IGUAL_QUE e .)
    MENOR_QUE       reduce using rule 80 (d -> d MAYOR_IGUAL_QUE e .)
    MENOR_IGUAL_QUE reduce using rule 80 (d -> d MAYOR_IGUAL_QUE e .)
    MAYOR_QUE       reduce using rule 80 (d -> d MAYOR_IGUAL_QUE e .)
    MAYOR_IGUAL_QUE reduce using rule 80 (d -> d MAYOR_IGUAL_QUE e .)
    TRIPLE_IGUAL    reduce using rule 80 (d -> d MAYOR_IGUAL_QUE e .)
    AND             reduce using rule 80 (d -> d MAYOR_IGUAL_QUE e .)
    PUNTO           reduce using rule 80 (d -> d MAYOR_IGUAL_QUE e .)
    OR              reduce using rule 80 (d -> d MAYOR_IGUAL_QUE e .)
    R_PAREN         reduce using rule 80 (d -> d MAYOR_IGUAL_QUE e .)
    SEMI_COLON      reduce using rule 80 (d -> d MAYOR_IGUAL_QUE e .)
    CONSOLE         reduce using rule 80 (d -> d MAYOR_IGUAL_QUE e .)
    LET             reduce using rule 80 (d -> d MAYOR_IGUAL_QUE e .)
    LITERAL         reduce using rule 80 (d -> d MAYOR_IGUAL_QUE e .)
    IF              reduce using rule 80 (d -> d MAYOR_IGUAL_QUE e .)
    WHILE           reduce using rule 80 (d -> d MAYOR_IGUAL_QUE e .)
    FOR             reduce using rule 80 (d -> d MAYOR_IGUAL_QUE e .)
    INTERFACE       reduce using rule 80 (d -> d MAYOR_IGUAL_QUE e .)
    CONTINUE        reduce using rule 80 (d -> d MAYOR_IGUAL_QUE e .)
    BREAK           reduce using rule 80 (d -> d MAYOR_IGUAL_QUE e .)
    RETURN          reduce using rule 80 (d -> d MAYOR_IGUAL_QUE e .)
    FUNCTION        reduce using rule 80 (d -> d MAYOR_IGUAL_QUE e .)
    NOT             reduce using rule 80 (d -> d MAYOR_IGUAL_QUE e .)
    ENTERO          reduce using rule 80 (d -> d MAYOR_IGUAL_QUE e .)
    DECIMAL         reduce using rule 80 (d -> d MAYOR_IGUAL_QUE e .)
    CADENA          reduce using rule 80 (d -> d MAYOR_IGUAL_QUE e .)
    TRUE            reduce using rule 80 (d -> d MAYOR_IGUAL_QUE e .)
    FALSE           reduce using rule 80 (d -> d MAYOR_IGUAL_QUE e .)
    L_PAREN         reduce using rule 80 (d -> d MAYOR_IGUAL_QUE e .)
    L_CORCHETE      reduce using rule 80 (d -> d MAYOR_IGUAL_QUE e .)
    L_LLAVE         reduce using rule 80 (d -> d MAYOR_IGUAL_QUE e .)
    $end            reduce using rule 80 (d -> d MAYOR_IGUAL_QUE e .)
    R_LLAVE         reduce using rule 80 (d -> d MAYOR_IGUAL_QUE e .)
    R_CORCHETE      reduce using rule 80 (d -> d MAYOR_IGUAL_QUE e .)
    COMA            reduce using rule 80 (d -> d MAYOR_IGUAL_QUE e .)
    MAS             shift and go to state 103
    MENOS           shift and go to state 104

  ! MENOS           [ reduce using rule 80 (d -> d MAYOR_IGUAL_QUE e .) ]
  ! MAS             [ reduce using rule 80 (d -> d MAYOR_IGUAL_QUE e .) ]
  ! DISTINTO_QUE    [ reduce using rule 82 (d -> e .) ]
  ! MENOR_QUE       [ reduce using rule 82 (d -> e .) ]
  ! MENOR_IGUAL_QUE [ reduce using rule 82 (d -> e .) ]
  ! MAYOR_QUE       [ reduce using rule 82 (d -> e .) ]
  ! MAYOR_IGUAL_QUE [ reduce using rule 82 (d -> e .) ]
  ! TRIPLE_IGUAL    [ reduce using rule 82 (d -> e .) ]
  ! AND             [ reduce using rule 82 (d -> e .) ]
  ! PUNTO           [ reduce using rule 82 (d -> e .) ]
  ! OR              [ reduce using rule 82 (d -> e .) ]


state 152

    (81) d -> d TRIPLE_IGUAL e .
    (83) e -> e . MAS f
    (84) e -> e . MENOS f
    (82) d -> e .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
  ! reduce/reduce conflict for DISTINTO_QUE resolved using rule 81 (d -> d TRIPLE_IGUAL e .)
  ! reduce/reduce conflict for MENOR_QUE resolved using rule 81 (d -> d TRIPLE_IGUAL e .)
  ! reduce/reduce conflict for MENOR_IGUAL_QUE resolved using rule 81 (d -> d TRIPLE_IGUAL e .)
  ! reduce/reduce conflict for MAYOR_QUE resolved using rule 81 (d -> d TRIPLE_IGUAL e .)
  ! reduce/reduce conflict for MAYOR_IGUAL_QUE resolved using rule 81 (d -> d TRIPLE_IGUAL e .)
  ! reduce/reduce conflict for TRIPLE_IGUAL resolved using rule 81 (d -> d TRIPLE_IGUAL e .)
  ! reduce/reduce conflict for AND resolved using rule 81 (d -> d TRIPLE_IGUAL e .)
  ! reduce/reduce conflict for PUNTO resolved using rule 81 (d -> d TRIPLE_IGUAL e .)
  ! reduce/reduce conflict for OR resolved using rule 81 (d -> d TRIPLE_IGUAL e .)
    DISTINTO_QUE    reduce using rule 81 (d -> d TRIPLE_IGUAL e .)
    MENOR_QUE       reduce using rule 81 (d -> d TRIPLE_IGUAL e .)
    MENOR_IGUAL_QUE reduce using rule 81 (d -> d TRIPLE_IGUAL e .)
    MAYOR_QUE       reduce using rule 81 (d -> d TRIPLE_IGUAL e .)
    MAYOR_IGUAL_QUE reduce using rule 81 (d -> d TRIPLE_IGUAL e .)
    TRIPLE_IGUAL    reduce using rule 81 (d -> d TRIPLE_IGUAL e .)
    AND             reduce using rule 81 (d -> d TRIPLE_IGUAL e .)
    PUNTO           reduce using rule 81 (d -> d TRIPLE_IGUAL e .)
    OR              reduce using rule 81 (d -> d TRIPLE_IGUAL e .)
    R_PAREN         reduce using rule 81 (d -> d TRIPLE_IGUAL e .)
    SEMI_COLON      reduce using rule 81 (d -> d TRIPLE_IGUAL e .)
    CONSOLE         reduce using rule 81 (d -> d TRIPLE_IGUAL e .)
    LET             reduce using rule 81 (d -> d TRIPLE_IGUAL e .)
    LITERAL         reduce using rule 81 (d -> d TRIPLE_IGUAL e .)
    IF              reduce using rule 81 (d -> d TRIPLE_IGUAL e .)
    WHILE           reduce using rule 81 (d -> d TRIPLE_IGUAL e .)
    FOR             reduce using rule 81 (d -> d TRIPLE_IGUAL e .)
    INTERFACE       reduce using rule 81 (d -> d TRIPLE_IGUAL e .)
    CONTINUE        reduce using rule 81 (d -> d TRIPLE_IGUAL e .)
    BREAK           reduce using rule 81 (d -> d TRIPLE_IGUAL e .)
    RETURN          reduce using rule 81 (d -> d TRIPLE_IGUAL e .)
    FUNCTION        reduce using rule 81 (d -> d TRIPLE_IGUAL e .)
    NOT             reduce using rule 81 (d -> d TRIPLE_IGUAL e .)
    ENTERO          reduce using rule 81 (d -> d TRIPLE_IGUAL e .)
    DECIMAL         reduce using rule 81 (d -> d TRIPLE_IGUAL e .)
    CADENA          reduce using rule 81 (d -> d TRIPLE_IGUAL e .)
    TRUE            reduce using rule 81 (d -> d TRIPLE_IGUAL e .)
    FALSE           reduce using rule 81 (d -> d TRIPLE_IGUAL e .)
    L_PAREN         reduce using rule 81 (d -> d TRIPLE_IGUAL e .)
    L_CORCHETE      reduce using rule 81 (d -> d TRIPLE_IGUAL e .)
    L_LLAVE         reduce using rule 81 (d -> d TRIPLE_IGUAL e .)
    $end            reduce using rule 81 (d -> d TRIPLE_IGUAL e .)
    R_LLAVE         reduce using rule 81 (d -> d TRIPLE_IGUAL e .)
    R_CORCHETE      reduce using rule 81 (d -> d TRIPLE_IGUAL e .)
    COMA            reduce using rule 81 (d -> d TRIPLE_IGUAL e .)
    MAS             shift and go to state 103
    MENOS           shift and go to state 104

  ! MENOS           [ reduce using rule 81 (d -> d TRIPLE_IGUAL e .) ]
  ! MAS             [ reduce using rule 81 (d -> d TRIPLE_IGUAL e .) ]
  ! DISTINTO_QUE    [ reduce using rule 82 (d -> e .) ]
  ! MENOR_QUE       [ reduce using rule 82 (d -> e .) ]
  ! MENOR_IGUAL_QUE [ reduce using rule 82 (d -> e .) ]
  ! MAYOR_QUE       [ reduce using rule 82 (d -> e .) ]
  ! MAYOR_IGUAL_QUE [ reduce using rule 82 (d -> e .) ]
  ! TRIPLE_IGUAL    [ reduce using rule 82 (d -> e .) ]
  ! AND             [ reduce using rule 82 (d -> e .) ]
  ! PUNTO           [ reduce using rule 82 (d -> e .) ]
  ! OR              [ reduce using rule 82 (d -> e .) ]


state 153

    (83) e -> e MAS f .
    (85) e -> f .

  ! reduce/reduce conflict for MAS resolved using rule 83 (e -> e MAS f .)
  ! reduce/reduce conflict for MENOS resolved using rule 83 (e -> e MAS f .)
  ! reduce/reduce conflict for DISTINTO_QUE resolved using rule 83 (e -> e MAS f .)
  ! reduce/reduce conflict for MENOR_QUE resolved using rule 83 (e -> e MAS f .)
  ! reduce/reduce conflict for MENOR_IGUAL_QUE resolved using rule 83 (e -> e MAS f .)
  ! reduce/reduce conflict for MAYOR_QUE resolved using rule 83 (e -> e MAS f .)
  ! reduce/reduce conflict for MAYOR_IGUAL_QUE resolved using rule 83 (e -> e MAS f .)
  ! reduce/reduce conflict for TRIPLE_IGUAL resolved using rule 83 (e -> e MAS f .)
  ! reduce/reduce conflict for AND resolved using rule 83 (e -> e MAS f .)
  ! reduce/reduce conflict for PUNTO resolved using rule 83 (e -> e MAS f .)
  ! reduce/reduce conflict for OR resolved using rule 83 (e -> e MAS f .)
    MAS             reduce using rule 83 (e -> e MAS f .)
    MENOS           reduce using rule 83 (e -> e MAS f .)
    DISTINTO_QUE    reduce using rule 83 (e -> e MAS f .)
    MENOR_QUE       reduce using rule 83 (e -> e MAS f .)
    MENOR_IGUAL_QUE reduce using rule 83 (e -> e MAS f .)
    MAYOR_QUE       reduce using rule 83 (e -> e MAS f .)
    MAYOR_IGUAL_QUE reduce using rule 83 (e -> e MAS f .)
    TRIPLE_IGUAL    reduce using rule 83 (e -> e MAS f .)
    AND             reduce using rule 83 (e -> e MAS f .)
    PUNTO           reduce using rule 83 (e -> e MAS f .)
    OR              reduce using rule 83 (e -> e MAS f .)
    R_PAREN         reduce using rule 83 (e -> e MAS f .)
    SEMI_COLON      reduce using rule 83 (e -> e MAS f .)
    CONSOLE         reduce using rule 83 (e -> e MAS f .)
    LET             reduce using rule 83 (e -> e MAS f .)
    LITERAL         reduce using rule 83 (e -> e MAS f .)
    IF              reduce using rule 83 (e -> e MAS f .)
    WHILE           reduce using rule 83 (e -> e MAS f .)
    FOR             reduce using rule 83 (e -> e MAS f .)
    INTERFACE       reduce using rule 83 (e -> e MAS f .)
    CONTINUE        reduce using rule 83 (e -> e MAS f .)
    BREAK           reduce using rule 83 (e -> e MAS f .)
    RETURN          reduce using rule 83 (e -> e MAS f .)
    FUNCTION        reduce using rule 83 (e -> e MAS f .)
    NOT             reduce using rule 83 (e -> e MAS f .)
    ENTERO          reduce using rule 83 (e -> e MAS f .)
    DECIMAL         reduce using rule 83 (e -> e MAS f .)
    CADENA          reduce using rule 83 (e -> e MAS f .)
    TRUE            reduce using rule 83 (e -> e MAS f .)
    FALSE           reduce using rule 83 (e -> e MAS f .)
    L_PAREN         reduce using rule 83 (e -> e MAS f .)
    L_CORCHETE      reduce using rule 83 (e -> e MAS f .)
    L_LLAVE         reduce using rule 83 (e -> e MAS f .)
    $end            reduce using rule 83 (e -> e MAS f .)
    R_LLAVE         reduce using rule 83 (e -> e MAS f .)
    R_CORCHETE      reduce using rule 83 (e -> e MAS f .)
    COMA            reduce using rule 83 (e -> e MAS f .)

  ! MAS             [ reduce using rule 85 (e -> f .) ]
  ! MENOS           [ reduce using rule 85 (e -> f .) ]
  ! DISTINTO_QUE    [ reduce using rule 85 (e -> f .) ]
  ! MENOR_QUE       [ reduce using rule 85 (e -> f .) ]
  ! MENOR_IGUAL_QUE [ reduce using rule 85 (e -> f .) ]
  ! MAYOR_QUE       [ reduce using rule 85 (e -> f .) ]
  ! MAYOR_IGUAL_QUE [ reduce using rule 85 (e -> f .) ]
  ! TRIPLE_IGUAL    [ reduce using rule 85 (e -> f .) ]
  ! AND             [ reduce using rule 85 (e -> f .) ]
  ! PUNTO           [ reduce using rule 85 (e -> f .) ]
  ! OR              [ reduce using rule 85 (e -> f .) ]


state 154

    (84) e -> e MENOS f .
    (85) e -> f .

  ! reduce/reduce conflict for MAS resolved using rule 84 (e -> e MENOS f .)
  ! reduce/reduce conflict for MENOS resolved using rule 84 (e -> e MENOS f .)
  ! reduce/reduce conflict for DISTINTO_QUE resolved using rule 84 (e -> e MENOS f .)
  ! reduce/reduce conflict for MENOR_QUE resolved using rule 84 (e -> e MENOS f .)
  ! reduce/reduce conflict for MENOR_IGUAL_QUE resolved using rule 84 (e -> e MENOS f .)
  ! reduce/reduce conflict for MAYOR_QUE resolved using rule 84 (e -> e MENOS f .)
  ! reduce/reduce conflict for MAYOR_IGUAL_QUE resolved using rule 84 (e -> e MENOS f .)
  ! reduce/reduce conflict for TRIPLE_IGUAL resolved using rule 84 (e -> e MENOS f .)
  ! reduce/reduce conflict for AND resolved using rule 84 (e -> e MENOS f .)
  ! reduce/reduce conflict for PUNTO resolved using rule 84 (e -> e MENOS f .)
  ! reduce/reduce conflict for OR resolved using rule 84 (e -> e MENOS f .)
    MAS             reduce using rule 84 (e -> e MENOS f .)
    MENOS           reduce using rule 84 (e -> e MENOS f .)
    DISTINTO_QUE    reduce using rule 84 (e -> e MENOS f .)
    MENOR_QUE       reduce using rule 84 (e -> e MENOS f .)
    MENOR_IGUAL_QUE reduce using rule 84 (e -> e MENOS f .)
    MAYOR_QUE       reduce using rule 84 (e -> e MENOS f .)
    MAYOR_IGUAL_QUE reduce using rule 84 (e -> e MENOS f .)
    TRIPLE_IGUAL    reduce using rule 84 (e -> e MENOS f .)
    AND             reduce using rule 84 (e -> e MENOS f .)
    PUNTO           reduce using rule 84 (e -> e MENOS f .)
    OR              reduce using rule 84 (e -> e MENOS f .)
    R_PAREN         reduce using rule 84 (e -> e MENOS f .)
    SEMI_COLON      reduce using rule 84 (e -> e MENOS f .)
    CONSOLE         reduce using rule 84 (e -> e MENOS f .)
    LET             reduce using rule 84 (e -> e MENOS f .)
    LITERAL         reduce using rule 84 (e -> e MENOS f .)
    IF              reduce using rule 84 (e -> e MENOS f .)
    WHILE           reduce using rule 84 (e -> e MENOS f .)
    FOR             reduce using rule 84 (e -> e MENOS f .)
    INTERFACE       reduce using rule 84 (e -> e MENOS f .)
    CONTINUE        reduce using rule 84 (e -> e MENOS f .)
    BREAK           reduce using rule 84 (e -> e MENOS f .)
    RETURN          reduce using rule 84 (e -> e MENOS f .)
    FUNCTION        reduce using rule 84 (e -> e MENOS f .)
    NOT             reduce using rule 84 (e -> e MENOS f .)
    ENTERO          reduce using rule 84 (e -> e MENOS f .)
    DECIMAL         reduce using rule 84 (e -> e MENOS f .)
    CADENA          reduce using rule 84 (e -> e MENOS f .)
    TRUE            reduce using rule 84 (e -> e MENOS f .)
    FALSE           reduce using rule 84 (e -> e MENOS f .)
    L_PAREN         reduce using rule 84 (e -> e MENOS f .)
    L_CORCHETE      reduce using rule 84 (e -> e MENOS f .)
    L_LLAVE         reduce using rule 84 (e -> e MENOS f .)
    $end            reduce using rule 84 (e -> e MENOS f .)
    R_LLAVE         reduce using rule 84 (e -> e MENOS f .)
    R_CORCHETE      reduce using rule 84 (e -> e MENOS f .)
    COMA            reduce using rule 84 (e -> e MENOS f .)

  ! MAS             [ reduce using rule 85 (e -> f .) ]
  ! MENOS           [ reduce using rule 85 (e -> f .) ]
  ! DISTINTO_QUE    [ reduce using rule 85 (e -> f .) ]
  ! MENOR_QUE       [ reduce using rule 85 (e -> f .) ]
  ! MENOR_IGUAL_QUE [ reduce using rule 85 (e -> f .) ]
  ! MAYOR_QUE       [ reduce using rule 85 (e -> f .) ]
  ! MAYOR_IGUAL_QUE [ reduce using rule 85 (e -> f .) ]
  ! TRIPLE_IGUAL    [ reduce using rule 85 (e -> f .) ]
  ! AND             [ reduce using rule 85 (e -> f .) ]
  ! PUNTO           [ reduce using rule 85 (e -> f .) ]
  ! OR              [ reduce using rule 85 (e -> f .) ]


state 155

    (89) g -> g TIMES h .
    (93) g -> h .

  ! reduce/reduce conflict for TIMES resolved using rule 89 (g -> g TIMES h .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 89 (g -> g TIMES h .)
  ! reduce/reduce conflict for MOD resolved using rule 89 (g -> g TIMES h .)
  ! reduce/reduce conflict for POTENCIA resolved using rule 89 (g -> g TIMES h .)
  ! reduce/reduce conflict for MAS resolved using rule 89 (g -> g TIMES h .)
  ! reduce/reduce conflict for MENOS resolved using rule 89 (g -> g TIMES h .)
  ! reduce/reduce conflict for DISTINTO_QUE resolved using rule 89 (g -> g TIMES h .)
  ! reduce/reduce conflict for MENOR_QUE resolved using rule 89 (g -> g TIMES h .)
  ! reduce/reduce conflict for MENOR_IGUAL_QUE resolved using rule 89 (g -> g TIMES h .)
  ! reduce/reduce conflict for MAYOR_QUE resolved using rule 89 (g -> g TIMES h .)
  ! reduce/reduce conflict for MAYOR_IGUAL_QUE resolved using rule 89 (g -> g TIMES h .)
  ! reduce/reduce conflict for TRIPLE_IGUAL resolved using rule 89 (g -> g TIMES h .)
  ! reduce/reduce conflict for AND resolved using rule 89 (g -> g TIMES h .)
  ! reduce/reduce conflict for PUNTO resolved using rule 89 (g -> g TIMES h .)
  ! reduce/reduce conflict for OR resolved using rule 89 (g -> g TIMES h .)
    TIMES           reduce using rule 89 (g -> g TIMES h .)
    DIVIDE          reduce using rule 89 (g -> g TIMES h .)
    MOD             reduce using rule 89 (g -> g TIMES h .)
    POTENCIA        reduce using rule 89 (g -> g TIMES h .)
    MAS             reduce using rule 89 (g -> g TIMES h .)
    MENOS           reduce using rule 89 (g -> g TIMES h .)
    DISTINTO_QUE    reduce using rule 89 (g -> g TIMES h .)
    MENOR_QUE       reduce using rule 89 (g -> g TIMES h .)
    MENOR_IGUAL_QUE reduce using rule 89 (g -> g TIMES h .)
    MAYOR_QUE       reduce using rule 89 (g -> g TIMES h .)
    MAYOR_IGUAL_QUE reduce using rule 89 (g -> g TIMES h .)
    TRIPLE_IGUAL    reduce using rule 89 (g -> g TIMES h .)
    AND             reduce using rule 89 (g -> g TIMES h .)
    PUNTO           reduce using rule 89 (g -> g TIMES h .)
    OR              reduce using rule 89 (g -> g TIMES h .)
    R_PAREN         reduce using rule 89 (g -> g TIMES h .)
    SEMI_COLON      reduce using rule 89 (g -> g TIMES h .)
    CONSOLE         reduce using rule 89 (g -> g TIMES h .)
    LET             reduce using rule 89 (g -> g TIMES h .)
    LITERAL         reduce using rule 89 (g -> g TIMES h .)
    IF              reduce using rule 89 (g -> g TIMES h .)
    WHILE           reduce using rule 89 (g -> g TIMES h .)
    FOR             reduce using rule 89 (g -> g TIMES h .)
    INTERFACE       reduce using rule 89 (g -> g TIMES h .)
    CONTINUE        reduce using rule 89 (g -> g TIMES h .)
    BREAK           reduce using rule 89 (g -> g TIMES h .)
    RETURN          reduce using rule 89 (g -> g TIMES h .)
    FUNCTION        reduce using rule 89 (g -> g TIMES h .)
    NOT             reduce using rule 89 (g -> g TIMES h .)
    ENTERO          reduce using rule 89 (g -> g TIMES h .)
    DECIMAL         reduce using rule 89 (g -> g TIMES h .)
    CADENA          reduce using rule 89 (g -> g TIMES h .)
    TRUE            reduce using rule 89 (g -> g TIMES h .)
    FALSE           reduce using rule 89 (g -> g TIMES h .)
    L_PAREN         reduce using rule 89 (g -> g TIMES h .)
    L_CORCHETE      reduce using rule 89 (g -> g TIMES h .)
    L_LLAVE         reduce using rule 89 (g -> g TIMES h .)
    $end            reduce using rule 89 (g -> g TIMES h .)
    R_LLAVE         reduce using rule 89 (g -> g TIMES h .)
    R_CORCHETE      reduce using rule 89 (g -> g TIMES h .)
    COMA            reduce using rule 89 (g -> g TIMES h .)

  ! TIMES           [ reduce using rule 93 (g -> h .) ]
  ! DIVIDE          [ reduce using rule 93 (g -> h .) ]
  ! MOD             [ reduce using rule 93 (g -> h .) ]
  ! POTENCIA        [ reduce using rule 93 (g -> h .) ]
  ! MAS             [ reduce using rule 93 (g -> h .) ]
  ! MENOS           [ reduce using rule 93 (g -> h .) ]
  ! DISTINTO_QUE    [ reduce using rule 93 (g -> h .) ]
  ! MENOR_QUE       [ reduce using rule 93 (g -> h .) ]
  ! MENOR_IGUAL_QUE [ reduce using rule 93 (g -> h .) ]
  ! MAYOR_QUE       [ reduce using rule 93 (g -> h .) ]
  ! MAYOR_IGUAL_QUE [ reduce using rule 93 (g -> h .) ]
  ! TRIPLE_IGUAL    [ reduce using rule 93 (g -> h .) ]
  ! AND             [ reduce using rule 93 (g -> h .) ]
  ! PUNTO           [ reduce using rule 93 (g -> h .) ]
  ! OR              [ reduce using rule 93 (g -> h .) ]


state 156

    (90) g -> g DIVIDE h .
    (93) g -> h .

  ! reduce/reduce conflict for TIMES resolved using rule 90 (g -> g DIVIDE h .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 90 (g -> g DIVIDE h .)
  ! reduce/reduce conflict for MOD resolved using rule 90 (g -> g DIVIDE h .)
  ! reduce/reduce conflict for POTENCIA resolved using rule 90 (g -> g DIVIDE h .)
  ! reduce/reduce conflict for MAS resolved using rule 90 (g -> g DIVIDE h .)
  ! reduce/reduce conflict for MENOS resolved using rule 90 (g -> g DIVIDE h .)
  ! reduce/reduce conflict for DISTINTO_QUE resolved using rule 90 (g -> g DIVIDE h .)
  ! reduce/reduce conflict for MENOR_QUE resolved using rule 90 (g -> g DIVIDE h .)
  ! reduce/reduce conflict for MENOR_IGUAL_QUE resolved using rule 90 (g -> g DIVIDE h .)
  ! reduce/reduce conflict for MAYOR_QUE resolved using rule 90 (g -> g DIVIDE h .)
  ! reduce/reduce conflict for MAYOR_IGUAL_QUE resolved using rule 90 (g -> g DIVIDE h .)
  ! reduce/reduce conflict for TRIPLE_IGUAL resolved using rule 90 (g -> g DIVIDE h .)
  ! reduce/reduce conflict for AND resolved using rule 90 (g -> g DIVIDE h .)
  ! reduce/reduce conflict for PUNTO resolved using rule 90 (g -> g DIVIDE h .)
  ! reduce/reduce conflict for OR resolved using rule 90 (g -> g DIVIDE h .)
    TIMES           reduce using rule 90 (g -> g DIVIDE h .)
    DIVIDE          reduce using rule 90 (g -> g DIVIDE h .)
    MOD             reduce using rule 90 (g -> g DIVIDE h .)
    POTENCIA        reduce using rule 90 (g -> g DIVIDE h .)
    MAS             reduce using rule 90 (g -> g DIVIDE h .)
    MENOS           reduce using rule 90 (g -> g DIVIDE h .)
    DISTINTO_QUE    reduce using rule 90 (g -> g DIVIDE h .)
    MENOR_QUE       reduce using rule 90 (g -> g DIVIDE h .)
    MENOR_IGUAL_QUE reduce using rule 90 (g -> g DIVIDE h .)
    MAYOR_QUE       reduce using rule 90 (g -> g DIVIDE h .)
    MAYOR_IGUAL_QUE reduce using rule 90 (g -> g DIVIDE h .)
    TRIPLE_IGUAL    reduce using rule 90 (g -> g DIVIDE h .)
    AND             reduce using rule 90 (g -> g DIVIDE h .)
    PUNTO           reduce using rule 90 (g -> g DIVIDE h .)
    OR              reduce using rule 90 (g -> g DIVIDE h .)
    R_PAREN         reduce using rule 90 (g -> g DIVIDE h .)
    SEMI_COLON      reduce using rule 90 (g -> g DIVIDE h .)
    CONSOLE         reduce using rule 90 (g -> g DIVIDE h .)
    LET             reduce using rule 90 (g -> g DIVIDE h .)
    LITERAL         reduce using rule 90 (g -> g DIVIDE h .)
    IF              reduce using rule 90 (g -> g DIVIDE h .)
    WHILE           reduce using rule 90 (g -> g DIVIDE h .)
    FOR             reduce using rule 90 (g -> g DIVIDE h .)
    INTERFACE       reduce using rule 90 (g -> g DIVIDE h .)
    CONTINUE        reduce using rule 90 (g -> g DIVIDE h .)
    BREAK           reduce using rule 90 (g -> g DIVIDE h .)
    RETURN          reduce using rule 90 (g -> g DIVIDE h .)
    FUNCTION        reduce using rule 90 (g -> g DIVIDE h .)
    NOT             reduce using rule 90 (g -> g DIVIDE h .)
    ENTERO          reduce using rule 90 (g -> g DIVIDE h .)
    DECIMAL         reduce using rule 90 (g -> g DIVIDE h .)
    CADENA          reduce using rule 90 (g -> g DIVIDE h .)
    TRUE            reduce using rule 90 (g -> g DIVIDE h .)
    FALSE           reduce using rule 90 (g -> g DIVIDE h .)
    L_PAREN         reduce using rule 90 (g -> g DIVIDE h .)
    L_CORCHETE      reduce using rule 90 (g -> g DIVIDE h .)
    L_LLAVE         reduce using rule 90 (g -> g DIVIDE h .)
    $end            reduce using rule 90 (g -> g DIVIDE h .)
    R_LLAVE         reduce using rule 90 (g -> g DIVIDE h .)
    R_CORCHETE      reduce using rule 90 (g -> g DIVIDE h .)
    COMA            reduce using rule 90 (g -> g DIVIDE h .)

  ! TIMES           [ reduce using rule 93 (g -> h .) ]
  ! DIVIDE          [ reduce using rule 93 (g -> h .) ]
  ! MOD             [ reduce using rule 93 (g -> h .) ]
  ! POTENCIA        [ reduce using rule 93 (g -> h .) ]
  ! MAS             [ reduce using rule 93 (g -> h .) ]
  ! MENOS           [ reduce using rule 93 (g -> h .) ]
  ! DISTINTO_QUE    [ reduce using rule 93 (g -> h .) ]
  ! MENOR_QUE       [ reduce using rule 93 (g -> h .) ]
  ! MENOR_IGUAL_QUE [ reduce using rule 93 (g -> h .) ]
  ! MAYOR_QUE       [ reduce using rule 93 (g -> h .) ]
  ! MAYOR_IGUAL_QUE [ reduce using rule 93 (g -> h .) ]
  ! TRIPLE_IGUAL    [ reduce using rule 93 (g -> h .) ]
  ! AND             [ reduce using rule 93 (g -> h .) ]
  ! PUNTO           [ reduce using rule 93 (g -> h .) ]
  ! OR              [ reduce using rule 93 (g -> h .) ]


state 157

    (91) g -> g MOD h .
    (93) g -> h .

  ! reduce/reduce conflict for TIMES resolved using rule 91 (g -> g MOD h .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 91 (g -> g MOD h .)
  ! reduce/reduce conflict for MOD resolved using rule 91 (g -> g MOD h .)
  ! reduce/reduce conflict for POTENCIA resolved using rule 91 (g -> g MOD h .)
  ! reduce/reduce conflict for MAS resolved using rule 91 (g -> g MOD h .)
  ! reduce/reduce conflict for MENOS resolved using rule 91 (g -> g MOD h .)
  ! reduce/reduce conflict for DISTINTO_QUE resolved using rule 91 (g -> g MOD h .)
  ! reduce/reduce conflict for MENOR_QUE resolved using rule 91 (g -> g MOD h .)
  ! reduce/reduce conflict for MENOR_IGUAL_QUE resolved using rule 91 (g -> g MOD h .)
  ! reduce/reduce conflict for MAYOR_QUE resolved using rule 91 (g -> g MOD h .)
  ! reduce/reduce conflict for MAYOR_IGUAL_QUE resolved using rule 91 (g -> g MOD h .)
  ! reduce/reduce conflict for TRIPLE_IGUAL resolved using rule 91 (g -> g MOD h .)
  ! reduce/reduce conflict for AND resolved using rule 91 (g -> g MOD h .)
  ! reduce/reduce conflict for PUNTO resolved using rule 91 (g -> g MOD h .)
  ! reduce/reduce conflict for OR resolved using rule 91 (g -> g MOD h .)
    TIMES           reduce using rule 91 (g -> g MOD h .)
    DIVIDE          reduce using rule 91 (g -> g MOD h .)
    MOD             reduce using rule 91 (g -> g MOD h .)
    POTENCIA        reduce using rule 91 (g -> g MOD h .)
    MAS             reduce using rule 91 (g -> g MOD h .)
    MENOS           reduce using rule 91 (g -> g MOD h .)
    DISTINTO_QUE    reduce using rule 91 (g -> g MOD h .)
    MENOR_QUE       reduce using rule 91 (g -> g MOD h .)
    MENOR_IGUAL_QUE reduce using rule 91 (g -> g MOD h .)
    MAYOR_QUE       reduce using rule 91 (g -> g MOD h .)
    MAYOR_IGUAL_QUE reduce using rule 91 (g -> g MOD h .)
    TRIPLE_IGUAL    reduce using rule 91 (g -> g MOD h .)
    AND             reduce using rule 91 (g -> g MOD h .)
    PUNTO           reduce using rule 91 (g -> g MOD h .)
    OR              reduce using rule 91 (g -> g MOD h .)
    R_PAREN         reduce using rule 91 (g -> g MOD h .)
    SEMI_COLON      reduce using rule 91 (g -> g MOD h .)
    CONSOLE         reduce using rule 91 (g -> g MOD h .)
    LET             reduce using rule 91 (g -> g MOD h .)
    LITERAL         reduce using rule 91 (g -> g MOD h .)
    IF              reduce using rule 91 (g -> g MOD h .)
    WHILE           reduce using rule 91 (g -> g MOD h .)
    FOR             reduce using rule 91 (g -> g MOD h .)
    INTERFACE       reduce using rule 91 (g -> g MOD h .)
    CONTINUE        reduce using rule 91 (g -> g MOD h .)
    BREAK           reduce using rule 91 (g -> g MOD h .)
    RETURN          reduce using rule 91 (g -> g MOD h .)
    FUNCTION        reduce using rule 91 (g -> g MOD h .)
    NOT             reduce using rule 91 (g -> g MOD h .)
    ENTERO          reduce using rule 91 (g -> g MOD h .)
    DECIMAL         reduce using rule 91 (g -> g MOD h .)
    CADENA          reduce using rule 91 (g -> g MOD h .)
    TRUE            reduce using rule 91 (g -> g MOD h .)
    FALSE           reduce using rule 91 (g -> g MOD h .)
    L_PAREN         reduce using rule 91 (g -> g MOD h .)
    L_CORCHETE      reduce using rule 91 (g -> g MOD h .)
    L_LLAVE         reduce using rule 91 (g -> g MOD h .)
    $end            reduce using rule 91 (g -> g MOD h .)
    R_LLAVE         reduce using rule 91 (g -> g MOD h .)
    R_CORCHETE      reduce using rule 91 (g -> g MOD h .)
    COMA            reduce using rule 91 (g -> g MOD h .)

  ! TIMES           [ reduce using rule 93 (g -> h .) ]
  ! DIVIDE          [ reduce using rule 93 (g -> h .) ]
  ! MOD             [ reduce using rule 93 (g -> h .) ]
  ! POTENCIA        [ reduce using rule 93 (g -> h .) ]
  ! MAS             [ reduce using rule 93 (g -> h .) ]
  ! MENOS           [ reduce using rule 93 (g -> h .) ]
  ! DISTINTO_QUE    [ reduce using rule 93 (g -> h .) ]
  ! MENOR_QUE       [ reduce using rule 93 (g -> h .) ]
  ! MENOR_IGUAL_QUE [ reduce using rule 93 (g -> h .) ]
  ! MAYOR_QUE       [ reduce using rule 93 (g -> h .) ]
  ! MAYOR_IGUAL_QUE [ reduce using rule 93 (g -> h .) ]
  ! TRIPLE_IGUAL    [ reduce using rule 93 (g -> h .) ]
  ! AND             [ reduce using rule 93 (g -> h .) ]
  ! PUNTO           [ reduce using rule 93 (g -> h .) ]
  ! OR              [ reduce using rule 93 (g -> h .) ]


state 158

    (92) g -> g POTENCIA h .
    (93) g -> h .

  ! reduce/reduce conflict for TIMES resolved using rule 92 (g -> g POTENCIA h .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 92 (g -> g POTENCIA h .)
  ! reduce/reduce conflict for MOD resolved using rule 92 (g -> g POTENCIA h .)
  ! reduce/reduce conflict for POTENCIA resolved using rule 92 (g -> g POTENCIA h .)
  ! reduce/reduce conflict for MAS resolved using rule 92 (g -> g POTENCIA h .)
  ! reduce/reduce conflict for MENOS resolved using rule 92 (g -> g POTENCIA h .)
  ! reduce/reduce conflict for DISTINTO_QUE resolved using rule 92 (g -> g POTENCIA h .)
  ! reduce/reduce conflict for MENOR_QUE resolved using rule 92 (g -> g POTENCIA h .)
  ! reduce/reduce conflict for MENOR_IGUAL_QUE resolved using rule 92 (g -> g POTENCIA h .)
  ! reduce/reduce conflict for MAYOR_QUE resolved using rule 92 (g -> g POTENCIA h .)
  ! reduce/reduce conflict for MAYOR_IGUAL_QUE resolved using rule 92 (g -> g POTENCIA h .)
  ! reduce/reduce conflict for TRIPLE_IGUAL resolved using rule 92 (g -> g POTENCIA h .)
  ! reduce/reduce conflict for AND resolved using rule 92 (g -> g POTENCIA h .)
  ! reduce/reduce conflict for PUNTO resolved using rule 92 (g -> g POTENCIA h .)
  ! reduce/reduce conflict for OR resolved using rule 92 (g -> g POTENCIA h .)
    TIMES           reduce using rule 92 (g -> g POTENCIA h .)
    DIVIDE          reduce using rule 92 (g -> g POTENCIA h .)
    MOD             reduce using rule 92 (g -> g POTENCIA h .)
    POTENCIA        reduce using rule 92 (g -> g POTENCIA h .)
    MAS             reduce using rule 92 (g -> g POTENCIA h .)
    MENOS           reduce using rule 92 (g -> g POTENCIA h .)
    DISTINTO_QUE    reduce using rule 92 (g -> g POTENCIA h .)
    MENOR_QUE       reduce using rule 92 (g -> g POTENCIA h .)
    MENOR_IGUAL_QUE reduce using rule 92 (g -> g POTENCIA h .)
    MAYOR_QUE       reduce using rule 92 (g -> g POTENCIA h .)
    MAYOR_IGUAL_QUE reduce using rule 92 (g -> g POTENCIA h .)
    TRIPLE_IGUAL    reduce using rule 92 (g -> g POTENCIA h .)
    AND             reduce using rule 92 (g -> g POTENCIA h .)
    PUNTO           reduce using rule 92 (g -> g POTENCIA h .)
    OR              reduce using rule 92 (g -> g POTENCIA h .)
    R_PAREN         reduce using rule 92 (g -> g POTENCIA h .)
    SEMI_COLON      reduce using rule 92 (g -> g POTENCIA h .)
    CONSOLE         reduce using rule 92 (g -> g POTENCIA h .)
    LET             reduce using rule 92 (g -> g POTENCIA h .)
    LITERAL         reduce using rule 92 (g -> g POTENCIA h .)
    IF              reduce using rule 92 (g -> g POTENCIA h .)
    WHILE           reduce using rule 92 (g -> g POTENCIA h .)
    FOR             reduce using rule 92 (g -> g POTENCIA h .)
    INTERFACE       reduce using rule 92 (g -> g POTENCIA h .)
    CONTINUE        reduce using rule 92 (g -> g POTENCIA h .)
    BREAK           reduce using rule 92 (g -> g POTENCIA h .)
    RETURN          reduce using rule 92 (g -> g POTENCIA h .)
    FUNCTION        reduce using rule 92 (g -> g POTENCIA h .)
    NOT             reduce using rule 92 (g -> g POTENCIA h .)
    ENTERO          reduce using rule 92 (g -> g POTENCIA h .)
    DECIMAL         reduce using rule 92 (g -> g POTENCIA h .)
    CADENA          reduce using rule 92 (g -> g POTENCIA h .)
    TRUE            reduce using rule 92 (g -> g POTENCIA h .)
    FALSE           reduce using rule 92 (g -> g POTENCIA h .)
    L_PAREN         reduce using rule 92 (g -> g POTENCIA h .)
    L_CORCHETE      reduce using rule 92 (g -> g POTENCIA h .)
    L_LLAVE         reduce using rule 92 (g -> g POTENCIA h .)
    $end            reduce using rule 92 (g -> g POTENCIA h .)
    R_LLAVE         reduce using rule 92 (g -> g POTENCIA h .)
    R_CORCHETE      reduce using rule 92 (g -> g POTENCIA h .)
    COMA            reduce using rule 92 (g -> g POTENCIA h .)

  ! TIMES           [ reduce using rule 93 (g -> h .) ]
  ! DIVIDE          [ reduce using rule 93 (g -> h .) ]
  ! MOD             [ reduce using rule 93 (g -> h .) ]
  ! POTENCIA        [ reduce using rule 93 (g -> h .) ]
  ! MAS             [ reduce using rule 93 (g -> h .) ]
  ! MENOS           [ reduce using rule 93 (g -> h .) ]
  ! DISTINTO_QUE    [ reduce using rule 93 (g -> h .) ]
  ! MENOR_QUE       [ reduce using rule 93 (g -> h .) ]
  ! MENOR_IGUAL_QUE [ reduce using rule 93 (g -> h .) ]
  ! MAYOR_QUE       [ reduce using rule 93 (g -> h .) ]
  ! MAYOR_IGUAL_QUE [ reduce using rule 93 (g -> h .) ]
  ! TRIPLE_IGUAL    [ reduce using rule 93 (g -> h .) ]
  ! AND             [ reduce using rule 93 (g -> h .) ]
  ! PUNTO           [ reduce using rule 93 (g -> h .) ]
  ! OR              [ reduce using rule 93 (g -> h .) ]


state 159

    (116) array_pro -> L_CORCHETE values R_CORCHETE .

    TIMES           reduce using rule 116 (array_pro -> L_CORCHETE values R_CORCHETE .)
    DIVIDE          reduce using rule 116 (array_pro -> L_CORCHETE values R_CORCHETE .)
    MOD             reduce using rule 116 (array_pro -> L_CORCHETE values R_CORCHETE .)
    POTENCIA        reduce using rule 116 (array_pro -> L_CORCHETE values R_CORCHETE .)
    MAS             reduce using rule 116 (array_pro -> L_CORCHETE values R_CORCHETE .)
    MENOS           reduce using rule 116 (array_pro -> L_CORCHETE values R_CORCHETE .)
    DISTINTO_QUE    reduce using rule 116 (array_pro -> L_CORCHETE values R_CORCHETE .)
    MENOR_QUE       reduce using rule 116 (array_pro -> L_CORCHETE values R_CORCHETE .)
    MENOR_IGUAL_QUE reduce using rule 116 (array_pro -> L_CORCHETE values R_CORCHETE .)
    MAYOR_QUE       reduce using rule 116 (array_pro -> L_CORCHETE values R_CORCHETE .)
    MAYOR_IGUAL_QUE reduce using rule 116 (array_pro -> L_CORCHETE values R_CORCHETE .)
    TRIPLE_IGUAL    reduce using rule 116 (array_pro -> L_CORCHETE values R_CORCHETE .)
    AND             reduce using rule 116 (array_pro -> L_CORCHETE values R_CORCHETE .)
    PUNTO           reduce using rule 116 (array_pro -> L_CORCHETE values R_CORCHETE .)
    OR              reduce using rule 116 (array_pro -> L_CORCHETE values R_CORCHETE .)
    R_PAREN         reduce using rule 116 (array_pro -> L_CORCHETE values R_CORCHETE .)
    SEMI_COLON      reduce using rule 116 (array_pro -> L_CORCHETE values R_CORCHETE .)
    CONSOLE         reduce using rule 116 (array_pro -> L_CORCHETE values R_CORCHETE .)
    LET             reduce using rule 116 (array_pro -> L_CORCHETE values R_CORCHETE .)
    LITERAL         reduce using rule 116 (array_pro -> L_CORCHETE values R_CORCHETE .)
    IF              reduce using rule 116 (array_pro -> L_CORCHETE values R_CORCHETE .)
    WHILE           reduce using rule 116 (array_pro -> L_CORCHETE values R_CORCHETE .)
    FOR             reduce using rule 116 (array_pro -> L_CORCHETE values R_CORCHETE .)
    INTERFACE       reduce using rule 116 (array_pro -> L_CORCHETE values R_CORCHETE .)
    CONTINUE        reduce using rule 116 (array_pro -> L_CORCHETE values R_CORCHETE .)
    BREAK           reduce using rule 116 (array_pro -> L_CORCHETE values R_CORCHETE .)
    RETURN          reduce using rule 116 (array_pro -> L_CORCHETE values R_CORCHETE .)
    FUNCTION        reduce using rule 116 (array_pro -> L_CORCHETE values R_CORCHETE .)
    NOT             reduce using rule 116 (array_pro -> L_CORCHETE values R_CORCHETE .)
    ENTERO          reduce using rule 116 (array_pro -> L_CORCHETE values R_CORCHETE .)
    DECIMAL         reduce using rule 116 (array_pro -> L_CORCHETE values R_CORCHETE .)
    CADENA          reduce using rule 116 (array_pro -> L_CORCHETE values R_CORCHETE .)
    TRUE            reduce using rule 116 (array_pro -> L_CORCHETE values R_CORCHETE .)
    FALSE           reduce using rule 116 (array_pro -> L_CORCHETE values R_CORCHETE .)
    L_PAREN         reduce using rule 116 (array_pro -> L_CORCHETE values R_CORCHETE .)
    L_CORCHETE      reduce using rule 116 (array_pro -> L_CORCHETE values R_CORCHETE .)
    L_LLAVE         reduce using rule 116 (array_pro -> L_CORCHETE values R_CORCHETE .)
    $end            reduce using rule 116 (array_pro -> L_CORCHETE values R_CORCHETE .)
    R_LLAVE         reduce using rule 116 (array_pro -> L_CORCHETE values R_CORCHETE .)
    R_CORCHETE      reduce using rule 116 (array_pro -> L_CORCHETE values R_CORCHETE .)
    COMA            reduce using rule 116 (array_pro -> L_CORCHETE values R_CORCHETE .)


state 160

    (25) values -> values COMA . a
    (70) a -> . a OR b
    (71) a -> . b
    (72) b -> . b AND c
    (73) b -> . c
    (74) c -> . NOT d
    (75) c -> . d
    (76) d -> . d DISTINTO_QUE e
    (77) d -> . d MENOR_QUE e
    (78) d -> . d MENOR_IGUAL_QUE e
    (79) d -> . d MAYOR_QUE e
    (80) d -> . d MAYOR_IGUAL_QUE e
    (81) d -> . d TRIPLE_IGUAL e
    (82) d -> . e
    (83) e -> . e MAS f
    (84) e -> . e MENOS f
    (85) e -> . f
    (86) f -> . MENOS g
    (87) f -> . MAS g
    (88) f -> . g
    (89) g -> . g TIMES h
    (90) g -> . g DIVIDE h
    (91) g -> . g MOD h
    (92) g -> . g POTENCIA h
    (93) g -> . h
    (94) h -> . ENTERO
    (95) h -> . DECIMAL
    (96) h -> . CADENA
    (97) h -> . LITERAL
    (98) h -> . TRUE
    (99) h -> . FALSE
    (100) h -> . call_function_pro
    (101) h -> . array_pro
    (102) h -> . interface_assi
    (103) h -> . L_PAREN a R_PAREN
    (104) h -> . array_val_pro
    (105) h -> . a PUNTO LITERAL
    (106) h -> . a PUNTO nativeFun L_PAREN expresion R_PAREN
    (107) h -> . a PUNTO nativeFun L_PAREN R_PAREN
    (23) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (24) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (116) array_pro -> . L_CORCHETE values R_CORCHETE
    (113) interface_assi -> . L_LLAVE atributos_assi R_LLAVE
    (108) array_val_pro -> . LITERAL dimensions

    NOT             shift and go to state 37
    MENOS           shift and go to state 34
    MAS             shift and go to state 33
    ENTERO          shift and go to state 43
    DECIMAL         shift and go to state 44
    CADENA          shift and go to state 45
    LITERAL         shift and go to state 71
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    L_PAREN         shift and go to state 20
    L_CORCHETE      shift and go to state 51
    L_LLAVE         shift and go to state 25

    a                              shift and go to state 190
    b                              shift and go to state 35
    c                              shift and go to state 36
    d                              shift and go to state 38
    e                              shift and go to state 39
    f                              shift and go to state 40
    g                              shift and go to state 41
    h                              shift and go to state 42
    call_function_pro              shift and go to state 72
    array_pro                      shift and go to state 48
    interface_assi                 shift and go to state 49
    array_val_pro                  shift and go to state 50

state 161

    (67) console_pro -> CONSOLE PUNTO LOG L_PAREN . expresion R_PAREN
    (68) expresion -> . expresion COMA a
    (69) expresion -> . a
    (70) a -> . a OR b
    (71) a -> . b
    (72) b -> . b AND c
    (73) b -> . c
    (74) c -> . NOT d
    (75) c -> . d
    (76) d -> . d DISTINTO_QUE e
    (77) d -> . d MENOR_QUE e
    (78) d -> . d MENOR_IGUAL_QUE e
    (79) d -> . d MAYOR_QUE e
    (80) d -> . d MAYOR_IGUAL_QUE e
    (81) d -> . d TRIPLE_IGUAL e
    (82) d -> . e
    (83) e -> . e MAS f
    (84) e -> . e MENOS f
    (85) e -> . f
    (86) f -> . MENOS g
    (87) f -> . MAS g
    (88) f -> . g
    (89) g -> . g TIMES h
    (90) g -> . g DIVIDE h
    (91) g -> . g MOD h
    (92) g -> . g POTENCIA h
    (93) g -> . h
    (94) h -> . ENTERO
    (95) h -> . DECIMAL
    (96) h -> . CADENA
    (97) h -> . LITERAL
    (98) h -> . TRUE
    (99) h -> . FALSE
    (100) h -> . call_function_pro
    (101) h -> . array_pro
    (102) h -> . interface_assi
    (103) h -> . L_PAREN a R_PAREN
    (104) h -> . array_val_pro
    (105) h -> . a PUNTO LITERAL
    (106) h -> . a PUNTO nativeFun L_PAREN expresion R_PAREN
    (107) h -> . a PUNTO nativeFun L_PAREN R_PAREN
    (23) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (24) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (116) array_pro -> . L_CORCHETE values R_CORCHETE
    (113) interface_assi -> . L_LLAVE atributos_assi R_LLAVE
    (108) array_val_pro -> . LITERAL dimensions

    NOT             shift and go to state 37
    MENOS           shift and go to state 34
    MAS             shift and go to state 33
    ENTERO          shift and go to state 43
    DECIMAL         shift and go to state 44
    CADENA          shift and go to state 45
    LITERAL         shift and go to state 71
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    L_PAREN         shift and go to state 20
    L_CORCHETE      shift and go to state 51
    L_LLAVE         shift and go to state 25

    expresion                      shift and go to state 191
    a                              shift and go to state 192
    b                              shift and go to state 35
    c                              shift and go to state 36
    d                              shift and go to state 38
    e                              shift and go to state 39
    f                              shift and go to state 40
    g                              shift and go to state 41
    h                              shift and go to state 42
    call_function_pro              shift and go to state 72
    array_pro                      shift and go to state 48
    interface_assi                 shift and go to state 49
    array_val_pro                  shift and go to state 50

state 162

    (105) h -> a PUNTO LITERAL .

    TIMES           reduce using rule 105 (h -> a PUNTO LITERAL .)
    DIVIDE          reduce using rule 105 (h -> a PUNTO LITERAL .)
    MOD             reduce using rule 105 (h -> a PUNTO LITERAL .)
    POTENCIA        reduce using rule 105 (h -> a PUNTO LITERAL .)
    MAS             reduce using rule 105 (h -> a PUNTO LITERAL .)
    MENOS           reduce using rule 105 (h -> a PUNTO LITERAL .)
    DISTINTO_QUE    reduce using rule 105 (h -> a PUNTO LITERAL .)
    MENOR_QUE       reduce using rule 105 (h -> a PUNTO LITERAL .)
    MENOR_IGUAL_QUE reduce using rule 105 (h -> a PUNTO LITERAL .)
    MAYOR_QUE       reduce using rule 105 (h -> a PUNTO LITERAL .)
    MAYOR_IGUAL_QUE reduce using rule 105 (h -> a PUNTO LITERAL .)
    TRIPLE_IGUAL    reduce using rule 105 (h -> a PUNTO LITERAL .)
    AND             reduce using rule 105 (h -> a PUNTO LITERAL .)
    R_PAREN         reduce using rule 105 (h -> a PUNTO LITERAL .)
    OR              reduce using rule 105 (h -> a PUNTO LITERAL .)
    PUNTO           reduce using rule 105 (h -> a PUNTO LITERAL .)
    SEMI_COLON      reduce using rule 105 (h -> a PUNTO LITERAL .)
    CONSOLE         reduce using rule 105 (h -> a PUNTO LITERAL .)
    LET             reduce using rule 105 (h -> a PUNTO LITERAL .)
    LITERAL         reduce using rule 105 (h -> a PUNTO LITERAL .)
    IF              reduce using rule 105 (h -> a PUNTO LITERAL .)
    WHILE           reduce using rule 105 (h -> a PUNTO LITERAL .)
    FOR             reduce using rule 105 (h -> a PUNTO LITERAL .)
    INTERFACE       reduce using rule 105 (h -> a PUNTO LITERAL .)
    CONTINUE        reduce using rule 105 (h -> a PUNTO LITERAL .)
    BREAK           reduce using rule 105 (h -> a PUNTO LITERAL .)
    RETURN          reduce using rule 105 (h -> a PUNTO LITERAL .)
    FUNCTION        reduce using rule 105 (h -> a PUNTO LITERAL .)
    NOT             reduce using rule 105 (h -> a PUNTO LITERAL .)
    ENTERO          reduce using rule 105 (h -> a PUNTO LITERAL .)
    DECIMAL         reduce using rule 105 (h -> a PUNTO LITERAL .)
    CADENA          reduce using rule 105 (h -> a PUNTO LITERAL .)
    TRUE            reduce using rule 105 (h -> a PUNTO LITERAL .)
    FALSE           reduce using rule 105 (h -> a PUNTO LITERAL .)
    L_PAREN         reduce using rule 105 (h -> a PUNTO LITERAL .)
    L_CORCHETE      reduce using rule 105 (h -> a PUNTO LITERAL .)
    L_LLAVE         reduce using rule 105 (h -> a PUNTO LITERAL .)
    $end            reduce using rule 105 (h -> a PUNTO LITERAL .)
    R_LLAVE         reduce using rule 105 (h -> a PUNTO LITERAL .)
    R_CORCHETE      reduce using rule 105 (h -> a PUNTO LITERAL .)
    COMA            reduce using rule 105 (h -> a PUNTO LITERAL .)


state 163

    (42) declaracion_list -> declaracion_list COMA assignacion_instruction .

    COMA            reduce using rule 42 (declaracion_list -> declaracion_list COMA assignacion_instruction .)
    SEMI_COLON      reduce using rule 42 (declaracion_list -> declaracion_list COMA assignacion_instruction .)
    CONSOLE         reduce using rule 42 (declaracion_list -> declaracion_list COMA assignacion_instruction .)
    LET             reduce using rule 42 (declaracion_list -> declaracion_list COMA assignacion_instruction .)
    LITERAL         reduce using rule 42 (declaracion_list -> declaracion_list COMA assignacion_instruction .)
    IF              reduce using rule 42 (declaracion_list -> declaracion_list COMA assignacion_instruction .)
    WHILE           reduce using rule 42 (declaracion_list -> declaracion_list COMA assignacion_instruction .)
    FOR             reduce using rule 42 (declaracion_list -> declaracion_list COMA assignacion_instruction .)
    INTERFACE       reduce using rule 42 (declaracion_list -> declaracion_list COMA assignacion_instruction .)
    CONTINUE        reduce using rule 42 (declaracion_list -> declaracion_list COMA assignacion_instruction .)
    BREAK           reduce using rule 42 (declaracion_list -> declaracion_list COMA assignacion_instruction .)
    RETURN          reduce using rule 42 (declaracion_list -> declaracion_list COMA assignacion_instruction .)
    FUNCTION        reduce using rule 42 (declaracion_list -> declaracion_list COMA assignacion_instruction .)
    NOT             reduce using rule 42 (declaracion_list -> declaracion_list COMA assignacion_instruction .)
    MENOS           reduce using rule 42 (declaracion_list -> declaracion_list COMA assignacion_instruction .)
    MAS             reduce using rule 42 (declaracion_list -> declaracion_list COMA assignacion_instruction .)
    ENTERO          reduce using rule 42 (declaracion_list -> declaracion_list COMA assignacion_instruction .)
    DECIMAL         reduce using rule 42 (declaracion_list -> declaracion_list COMA assignacion_instruction .)
    CADENA          reduce using rule 42 (declaracion_list -> declaracion_list COMA assignacion_instruction .)
    TRUE            reduce using rule 42 (declaracion_list -> declaracion_list COMA assignacion_instruction .)
    FALSE           reduce using rule 42 (declaracion_list -> declaracion_list COMA assignacion_instruction .)
    L_PAREN         reduce using rule 42 (declaracion_list -> declaracion_list COMA assignacion_instruction .)
    L_CORCHETE      reduce using rule 42 (declaracion_list -> declaracion_list COMA assignacion_instruction .)
    L_LLAVE         reduce using rule 42 (declaracion_list -> declaracion_list COMA assignacion_instruction .)
    $end            reduce using rule 42 (declaracion_list -> declaracion_list COMA assignacion_instruction .)
    R_LLAVE         reduce using rule 42 (declaracion_list -> declaracion_list COMA assignacion_instruction .)


state 164

    (52) type -> LITERAL .

    IGUAL           reduce using rule 52 (type -> LITERAL .)
    COMA            reduce using rule 52 (type -> LITERAL .)
    SEMI_COLON      reduce using rule 52 (type -> LITERAL .)
    CONSOLE         reduce using rule 52 (type -> LITERAL .)
    LET             reduce using rule 52 (type -> LITERAL .)
    LITERAL         reduce using rule 52 (type -> LITERAL .)
    IF              reduce using rule 52 (type -> LITERAL .)
    WHILE           reduce using rule 52 (type -> LITERAL .)
    FOR             reduce using rule 52 (type -> LITERAL .)
    INTERFACE       reduce using rule 52 (type -> LITERAL .)
    CONTINUE        reduce using rule 52 (type -> LITERAL .)
    BREAK           reduce using rule 52 (type -> LITERAL .)
    RETURN          reduce using rule 52 (type -> LITERAL .)
    FUNCTION        reduce using rule 52 (type -> LITERAL .)
    NOT             reduce using rule 52 (type -> LITERAL .)
    MENOS           reduce using rule 52 (type -> LITERAL .)
    MAS             reduce using rule 52 (type -> LITERAL .)
    ENTERO          reduce using rule 52 (type -> LITERAL .)
    DECIMAL         reduce using rule 52 (type -> LITERAL .)
    CADENA          reduce using rule 52 (type -> LITERAL .)
    TRUE            reduce using rule 52 (type -> LITERAL .)
    FALSE           reduce using rule 52 (type -> LITERAL .)
    L_PAREN         reduce using rule 52 (type -> LITERAL .)
    L_CORCHETE      reduce using rule 52 (type -> LITERAL .)
    L_LLAVE         reduce using rule 52 (type -> LITERAL .)
    $end            reduce using rule 52 (type -> LITERAL .)
    R_LLAVE         reduce using rule 52 (type -> LITERAL .)
    OF              reduce using rule 52 (type -> LITERAL .)
    R_PAREN         reduce using rule 52 (type -> LITERAL .)


state 165

    (44) assignacion_instruction -> LITERAL COLON type . IGUAL a
    (45) assignacion_instruction -> LITERAL COLON type .

    IGUAL           shift and go to state 193
    COMA            reduce using rule 45 (assignacion_instruction -> LITERAL COLON type .)
    SEMI_COLON      reduce using rule 45 (assignacion_instruction -> LITERAL COLON type .)
    CONSOLE         reduce using rule 45 (assignacion_instruction -> LITERAL COLON type .)
    LET             reduce using rule 45 (assignacion_instruction -> LITERAL COLON type .)
    LITERAL         reduce using rule 45 (assignacion_instruction -> LITERAL COLON type .)
    IF              reduce using rule 45 (assignacion_instruction -> LITERAL COLON type .)
    WHILE           reduce using rule 45 (assignacion_instruction -> LITERAL COLON type .)
    FOR             reduce using rule 45 (assignacion_instruction -> LITERAL COLON type .)
    INTERFACE       reduce using rule 45 (assignacion_instruction -> LITERAL COLON type .)
    CONTINUE        reduce using rule 45 (assignacion_instruction -> LITERAL COLON type .)
    BREAK           reduce using rule 45 (assignacion_instruction -> LITERAL COLON type .)
    RETURN          reduce using rule 45 (assignacion_instruction -> LITERAL COLON type .)
    FUNCTION        reduce using rule 45 (assignacion_instruction -> LITERAL COLON type .)
    NOT             reduce using rule 45 (assignacion_instruction -> LITERAL COLON type .)
    MENOS           reduce using rule 45 (assignacion_instruction -> LITERAL COLON type .)
    MAS             reduce using rule 45 (assignacion_instruction -> LITERAL COLON type .)
    ENTERO          reduce using rule 45 (assignacion_instruction -> LITERAL COLON type .)
    DECIMAL         reduce using rule 45 (assignacion_instruction -> LITERAL COLON type .)
    CADENA          reduce using rule 45 (assignacion_instruction -> LITERAL COLON type .)
    TRUE            reduce using rule 45 (assignacion_instruction -> LITERAL COLON type .)
    FALSE           reduce using rule 45 (assignacion_instruction -> LITERAL COLON type .)
    L_PAREN         reduce using rule 45 (assignacion_instruction -> LITERAL COLON type .)
    L_CORCHETE      reduce using rule 45 (assignacion_instruction -> LITERAL COLON type .)
    L_LLAVE         reduce using rule 45 (assignacion_instruction -> LITERAL COLON type .)
    $end            reduce using rule 45 (assignacion_instruction -> LITERAL COLON type .)
    R_LLAVE         reduce using rule 45 (assignacion_instruction -> LITERAL COLON type .)


state 166

    (48) type -> NUMBER .

    IGUAL           reduce using rule 48 (type -> NUMBER .)
    COMA            reduce using rule 48 (type -> NUMBER .)
    SEMI_COLON      reduce using rule 48 (type -> NUMBER .)
    CONSOLE         reduce using rule 48 (type -> NUMBER .)
    LET             reduce using rule 48 (type -> NUMBER .)
    LITERAL         reduce using rule 48 (type -> NUMBER .)
    IF              reduce using rule 48 (type -> NUMBER .)
    WHILE           reduce using rule 48 (type -> NUMBER .)
    FOR             reduce using rule 48 (type -> NUMBER .)
    INTERFACE       reduce using rule 48 (type -> NUMBER .)
    CONTINUE        reduce using rule 48 (type -> NUMBER .)
    BREAK           reduce using rule 48 (type -> NUMBER .)
    RETURN          reduce using rule 48 (type -> NUMBER .)
    FUNCTION        reduce using rule 48 (type -> NUMBER .)
    NOT             reduce using rule 48 (type -> NUMBER .)
    MENOS           reduce using rule 48 (type -> NUMBER .)
    MAS             reduce using rule 48 (type -> NUMBER .)
    ENTERO          reduce using rule 48 (type -> NUMBER .)
    DECIMAL         reduce using rule 48 (type -> NUMBER .)
    CADENA          reduce using rule 48 (type -> NUMBER .)
    TRUE            reduce using rule 48 (type -> NUMBER .)
    FALSE           reduce using rule 48 (type -> NUMBER .)
    L_PAREN         reduce using rule 48 (type -> NUMBER .)
    L_CORCHETE      reduce using rule 48 (type -> NUMBER .)
    L_LLAVE         reduce using rule 48 (type -> NUMBER .)
    $end            reduce using rule 48 (type -> NUMBER .)
    R_LLAVE         reduce using rule 48 (type -> NUMBER .)
    OF              reduce using rule 48 (type -> NUMBER .)
    R_PAREN         reduce using rule 48 (type -> NUMBER .)


state 167

    (49) type -> STRING .

    IGUAL           reduce using rule 49 (type -> STRING .)
    COMA            reduce using rule 49 (type -> STRING .)
    SEMI_COLON      reduce using rule 49 (type -> STRING .)
    CONSOLE         reduce using rule 49 (type -> STRING .)
    LET             reduce using rule 49 (type -> STRING .)
    LITERAL         reduce using rule 49 (type -> STRING .)
    IF              reduce using rule 49 (type -> STRING .)
    WHILE           reduce using rule 49 (type -> STRING .)
    FOR             reduce using rule 49 (type -> STRING .)
    INTERFACE       reduce using rule 49 (type -> STRING .)
    CONTINUE        reduce using rule 49 (type -> STRING .)
    BREAK           reduce using rule 49 (type -> STRING .)
    RETURN          reduce using rule 49 (type -> STRING .)
    FUNCTION        reduce using rule 49 (type -> STRING .)
    NOT             reduce using rule 49 (type -> STRING .)
    MENOS           reduce using rule 49 (type -> STRING .)
    MAS             reduce using rule 49 (type -> STRING .)
    ENTERO          reduce using rule 49 (type -> STRING .)
    DECIMAL         reduce using rule 49 (type -> STRING .)
    CADENA          reduce using rule 49 (type -> STRING .)
    TRUE            reduce using rule 49 (type -> STRING .)
    FALSE           reduce using rule 49 (type -> STRING .)
    L_PAREN         reduce using rule 49 (type -> STRING .)
    L_CORCHETE      reduce using rule 49 (type -> STRING .)
    L_LLAVE         reduce using rule 49 (type -> STRING .)
    $end            reduce using rule 49 (type -> STRING .)
    R_LLAVE         reduce using rule 49 (type -> STRING .)
    OF              reduce using rule 49 (type -> STRING .)
    R_PAREN         reduce using rule 49 (type -> STRING .)


state 168

    (50) type -> BOOLEAN .

    IGUAL           reduce using rule 50 (type -> BOOLEAN .)
    COMA            reduce using rule 50 (type -> BOOLEAN .)
    SEMI_COLON      reduce using rule 50 (type -> BOOLEAN .)
    CONSOLE         reduce using rule 50 (type -> BOOLEAN .)
    LET             reduce using rule 50 (type -> BOOLEAN .)
    LITERAL         reduce using rule 50 (type -> BOOLEAN .)
    IF              reduce using rule 50 (type -> BOOLEAN .)
    WHILE           reduce using rule 50 (type -> BOOLEAN .)
    FOR             reduce using rule 50 (type -> BOOLEAN .)
    INTERFACE       reduce using rule 50 (type -> BOOLEAN .)
    CONTINUE        reduce using rule 50 (type -> BOOLEAN .)
    BREAK           reduce using rule 50 (type -> BOOLEAN .)
    RETURN          reduce using rule 50 (type -> BOOLEAN .)
    FUNCTION        reduce using rule 50 (type -> BOOLEAN .)
    NOT             reduce using rule 50 (type -> BOOLEAN .)
    MENOS           reduce using rule 50 (type -> BOOLEAN .)
    MAS             reduce using rule 50 (type -> BOOLEAN .)
    ENTERO          reduce using rule 50 (type -> BOOLEAN .)
    DECIMAL         reduce using rule 50 (type -> BOOLEAN .)
    CADENA          reduce using rule 50 (type -> BOOLEAN .)
    TRUE            reduce using rule 50 (type -> BOOLEAN .)
    FALSE           reduce using rule 50 (type -> BOOLEAN .)
    L_PAREN         reduce using rule 50 (type -> BOOLEAN .)
    L_CORCHETE      reduce using rule 50 (type -> BOOLEAN .)
    L_LLAVE         reduce using rule 50 (type -> BOOLEAN .)
    $end            reduce using rule 50 (type -> BOOLEAN .)
    R_LLAVE         reduce using rule 50 (type -> BOOLEAN .)
    OF              reduce using rule 50 (type -> BOOLEAN .)
    R_PAREN         reduce using rule 50 (type -> BOOLEAN .)


state 169

    (51) type -> ANY .

    IGUAL           reduce using rule 51 (type -> ANY .)
    COMA            reduce using rule 51 (type -> ANY .)
    SEMI_COLON      reduce using rule 51 (type -> ANY .)
    CONSOLE         reduce using rule 51 (type -> ANY .)
    LET             reduce using rule 51 (type -> ANY .)
    LITERAL         reduce using rule 51 (type -> ANY .)
    IF              reduce using rule 51 (type -> ANY .)
    WHILE           reduce using rule 51 (type -> ANY .)
    FOR             reduce using rule 51 (type -> ANY .)
    INTERFACE       reduce using rule 51 (type -> ANY .)
    CONTINUE        reduce using rule 51 (type -> ANY .)
    BREAK           reduce using rule 51 (type -> ANY .)
    RETURN          reduce using rule 51 (type -> ANY .)
    FUNCTION        reduce using rule 51 (type -> ANY .)
    NOT             reduce using rule 51 (type -> ANY .)
    MENOS           reduce using rule 51 (type -> ANY .)
    MAS             reduce using rule 51 (type -> ANY .)
    ENTERO          reduce using rule 51 (type -> ANY .)
    DECIMAL         reduce using rule 51 (type -> ANY .)
    CADENA          reduce using rule 51 (type -> ANY .)
    TRUE            reduce using rule 51 (type -> ANY .)
    FALSE           reduce using rule 51 (type -> ANY .)
    L_PAREN         reduce using rule 51 (type -> ANY .)
    L_CORCHETE      reduce using rule 51 (type -> ANY .)
    L_LLAVE         reduce using rule 51 (type -> ANY .)
    $end            reduce using rule 51 (type -> ANY .)
    R_LLAVE         reduce using rule 51 (type -> ANY .)
    OF              reduce using rule 51 (type -> ANY .)
    R_PAREN         reduce using rule 51 (type -> ANY .)


state 170

    (53) type -> NULL .

    IGUAL           reduce using rule 53 (type -> NULL .)
    COMA            reduce using rule 53 (type -> NULL .)
    SEMI_COLON      reduce using rule 53 (type -> NULL .)
    CONSOLE         reduce using rule 53 (type -> NULL .)
    LET             reduce using rule 53 (type -> NULL .)
    LITERAL         reduce using rule 53 (type -> NULL .)
    IF              reduce using rule 53 (type -> NULL .)
    WHILE           reduce using rule 53 (type -> NULL .)
    FOR             reduce using rule 53 (type -> NULL .)
    INTERFACE       reduce using rule 53 (type -> NULL .)
    CONTINUE        reduce using rule 53 (type -> NULL .)
    BREAK           reduce using rule 53 (type -> NULL .)
    RETURN          reduce using rule 53 (type -> NULL .)
    FUNCTION        reduce using rule 53 (type -> NULL .)
    NOT             reduce using rule 53 (type -> NULL .)
    MENOS           reduce using rule 53 (type -> NULL .)
    MAS             reduce using rule 53 (type -> NULL .)
    ENTERO          reduce using rule 53 (type -> NULL .)
    DECIMAL         reduce using rule 53 (type -> NULL .)
    CADENA          reduce using rule 53 (type -> NULL .)
    TRUE            reduce using rule 53 (type -> NULL .)
    FALSE           reduce using rule 53 (type -> NULL .)
    L_PAREN         reduce using rule 53 (type -> NULL .)
    L_CORCHETE      reduce using rule 53 (type -> NULL .)
    L_LLAVE         reduce using rule 53 (type -> NULL .)
    $end            reduce using rule 53 (type -> NULL .)
    R_LLAVE         reduce using rule 53 (type -> NULL .)
    OF              reduce using rule 53 (type -> NULL .)
    R_PAREN         reduce using rule 53 (type -> NULL .)


state 171

    (46) assignacion_instruction -> LITERAL IGUAL a .
    (70) a -> a . OR b
    (105) h -> a . PUNTO LITERAL
    (106) h -> a . PUNTO nativeFun L_PAREN expresion R_PAREN
    (107) h -> a . PUNTO nativeFun L_PAREN R_PAREN

    COMA            reduce using rule 46 (assignacion_instruction -> LITERAL IGUAL a .)
    SEMI_COLON      reduce using rule 46 (assignacion_instruction -> LITERAL IGUAL a .)
    CONSOLE         reduce using rule 46 (assignacion_instruction -> LITERAL IGUAL a .)
    LET             reduce using rule 46 (assignacion_instruction -> LITERAL IGUAL a .)
    LITERAL         reduce using rule 46 (assignacion_instruction -> LITERAL IGUAL a .)
    IF              reduce using rule 46 (assignacion_instruction -> LITERAL IGUAL a .)
    WHILE           reduce using rule 46 (assignacion_instruction -> LITERAL IGUAL a .)
    FOR             reduce using rule 46 (assignacion_instruction -> LITERAL IGUAL a .)
    INTERFACE       reduce using rule 46 (assignacion_instruction -> LITERAL IGUAL a .)
    CONTINUE        reduce using rule 46 (assignacion_instruction -> LITERAL IGUAL a .)
    BREAK           reduce using rule 46 (assignacion_instruction -> LITERAL IGUAL a .)
    RETURN          reduce using rule 46 (assignacion_instruction -> LITERAL IGUAL a .)
    FUNCTION        reduce using rule 46 (assignacion_instruction -> LITERAL IGUAL a .)
    NOT             reduce using rule 46 (assignacion_instruction -> LITERAL IGUAL a .)
    MENOS           reduce using rule 46 (assignacion_instruction -> LITERAL IGUAL a .)
    MAS             reduce using rule 46 (assignacion_instruction -> LITERAL IGUAL a .)
    ENTERO          reduce using rule 46 (assignacion_instruction -> LITERAL IGUAL a .)
    DECIMAL         reduce using rule 46 (assignacion_instruction -> LITERAL IGUAL a .)
    CADENA          reduce using rule 46 (assignacion_instruction -> LITERAL IGUAL a .)
    TRUE            reduce using rule 46 (assignacion_instruction -> LITERAL IGUAL a .)
    FALSE           reduce using rule 46 (assignacion_instruction -> LITERAL IGUAL a .)
    L_PAREN         reduce using rule 46 (assignacion_instruction -> LITERAL IGUAL a .)
    L_CORCHETE      reduce using rule 46 (assignacion_instruction -> LITERAL IGUAL a .)
    L_LLAVE         reduce using rule 46 (assignacion_instruction -> LITERAL IGUAL a .)
    $end            reduce using rule 46 (assignacion_instruction -> LITERAL IGUAL a .)
    R_LLAVE         reduce using rule 46 (assignacion_instruction -> LITERAL IGUAL a .)
    OR              shift and go to state 83
    PUNTO           shift and go to state 113


state 172

    (23) call_function_pro -> LITERAL L_PAREN values R_PAREN .

    SEMI_COLON      reduce using rule 23 (call_function_pro -> LITERAL L_PAREN values R_PAREN .)
    CONSOLE         reduce using rule 23 (call_function_pro -> LITERAL L_PAREN values R_PAREN .)
    LET             reduce using rule 23 (call_function_pro -> LITERAL L_PAREN values R_PAREN .)
    LITERAL         reduce using rule 23 (call_function_pro -> LITERAL L_PAREN values R_PAREN .)
    IF              reduce using rule 23 (call_function_pro -> LITERAL L_PAREN values R_PAREN .)
    WHILE           reduce using rule 23 (call_function_pro -> LITERAL L_PAREN values R_PAREN .)
    FOR             reduce using rule 23 (call_function_pro -> LITERAL L_PAREN values R_PAREN .)
    INTERFACE       reduce using rule 23 (call_function_pro -> LITERAL L_PAREN values R_PAREN .)
    CONTINUE        reduce using rule 23 (call_function_pro -> LITERAL L_PAREN values R_PAREN .)
    BREAK           reduce using rule 23 (call_function_pro -> LITERAL L_PAREN values R_PAREN .)
    RETURN          reduce using rule 23 (call_function_pro -> LITERAL L_PAREN values R_PAREN .)
    FUNCTION        reduce using rule 23 (call_function_pro -> LITERAL L_PAREN values R_PAREN .)
    NOT             reduce using rule 23 (call_function_pro -> LITERAL L_PAREN values R_PAREN .)
    MENOS           reduce using rule 23 (call_function_pro -> LITERAL L_PAREN values R_PAREN .)
    MAS             reduce using rule 23 (call_function_pro -> LITERAL L_PAREN values R_PAREN .)
    ENTERO          reduce using rule 23 (call_function_pro -> LITERAL L_PAREN values R_PAREN .)
    DECIMAL         reduce using rule 23 (call_function_pro -> LITERAL L_PAREN values R_PAREN .)
    CADENA          reduce using rule 23 (call_function_pro -> LITERAL L_PAREN values R_PAREN .)
    TRUE            reduce using rule 23 (call_function_pro -> LITERAL L_PAREN values R_PAREN .)
    FALSE           reduce using rule 23 (call_function_pro -> LITERAL L_PAREN values R_PAREN .)
    L_PAREN         reduce using rule 23 (call_function_pro -> LITERAL L_PAREN values R_PAREN .)
    L_CORCHETE      reduce using rule 23 (call_function_pro -> LITERAL L_PAREN values R_PAREN .)
    L_LLAVE         reduce using rule 23 (call_function_pro -> LITERAL L_PAREN values R_PAREN .)
    $end            reduce using rule 23 (call_function_pro -> LITERAL L_PAREN values R_PAREN .)
    TIMES           reduce using rule 23 (call_function_pro -> LITERAL L_PAREN values R_PAREN .)
    DIVIDE          reduce using rule 23 (call_function_pro -> LITERAL L_PAREN values R_PAREN .)
    MOD             reduce using rule 23 (call_function_pro -> LITERAL L_PAREN values R_PAREN .)
    POTENCIA        reduce using rule 23 (call_function_pro -> LITERAL L_PAREN values R_PAREN .)
    DISTINTO_QUE    reduce using rule 23 (call_function_pro -> LITERAL L_PAREN values R_PAREN .)
    MENOR_QUE       reduce using rule 23 (call_function_pro -> LITERAL L_PAREN values R_PAREN .)
    MENOR_IGUAL_QUE reduce using rule 23 (call_function_pro -> LITERAL L_PAREN values R_PAREN .)
    MAYOR_QUE       reduce using rule 23 (call_function_pro -> LITERAL L_PAREN values R_PAREN .)
    MAYOR_IGUAL_QUE reduce using rule 23 (call_function_pro -> LITERAL L_PAREN values R_PAREN .)
    TRIPLE_IGUAL    reduce using rule 23 (call_function_pro -> LITERAL L_PAREN values R_PAREN .)
    AND             reduce using rule 23 (call_function_pro -> LITERAL L_PAREN values R_PAREN .)
    PUNTO           reduce using rule 23 (call_function_pro -> LITERAL L_PAREN values R_PAREN .)
    OR              reduce using rule 23 (call_function_pro -> LITERAL L_PAREN values R_PAREN .)
    R_PAREN         reduce using rule 23 (call_function_pro -> LITERAL L_PAREN values R_PAREN .)
    R_LLAVE         reduce using rule 23 (call_function_pro -> LITERAL L_PAREN values R_PAREN .)
    R_CORCHETE      reduce using rule 23 (call_function_pro -> LITERAL L_PAREN values R_PAREN .)
    COMA            reduce using rule 23 (call_function_pro -> LITERAL L_PAREN values R_PAREN .)


state 173

    (109) dimensions -> dimensions L_CORCHETE a . R_CORCHETE
    (70) a -> a . OR b
    (105) h -> a . PUNTO LITERAL
    (106) h -> a . PUNTO nativeFun L_PAREN expresion R_PAREN
    (107) h -> a . PUNTO nativeFun L_PAREN R_PAREN

    R_CORCHETE      shift and go to state 194
    OR              shift and go to state 83
    PUNTO           shift and go to state 113


state 174

    (110) dimensions -> L_CORCHETE a R_CORCHETE .

    L_CORCHETE      reduce using rule 110 (dimensions -> L_CORCHETE a R_CORCHETE .)
    TIMES           reduce using rule 110 (dimensions -> L_CORCHETE a R_CORCHETE .)
    DIVIDE          reduce using rule 110 (dimensions -> L_CORCHETE a R_CORCHETE .)
    MOD             reduce using rule 110 (dimensions -> L_CORCHETE a R_CORCHETE .)
    POTENCIA        reduce using rule 110 (dimensions -> L_CORCHETE a R_CORCHETE .)
    MAS             reduce using rule 110 (dimensions -> L_CORCHETE a R_CORCHETE .)
    MENOS           reduce using rule 110 (dimensions -> L_CORCHETE a R_CORCHETE .)
    DISTINTO_QUE    reduce using rule 110 (dimensions -> L_CORCHETE a R_CORCHETE .)
    MENOR_QUE       reduce using rule 110 (dimensions -> L_CORCHETE a R_CORCHETE .)
    MENOR_IGUAL_QUE reduce using rule 110 (dimensions -> L_CORCHETE a R_CORCHETE .)
    MAYOR_QUE       reduce using rule 110 (dimensions -> L_CORCHETE a R_CORCHETE .)
    MAYOR_IGUAL_QUE reduce using rule 110 (dimensions -> L_CORCHETE a R_CORCHETE .)
    TRIPLE_IGUAL    reduce using rule 110 (dimensions -> L_CORCHETE a R_CORCHETE .)
    AND             reduce using rule 110 (dimensions -> L_CORCHETE a R_CORCHETE .)
    PUNTO           reduce using rule 110 (dimensions -> L_CORCHETE a R_CORCHETE .)
    OR              reduce using rule 110 (dimensions -> L_CORCHETE a R_CORCHETE .)
    R_PAREN         reduce using rule 110 (dimensions -> L_CORCHETE a R_CORCHETE .)
    SEMI_COLON      reduce using rule 110 (dimensions -> L_CORCHETE a R_CORCHETE .)
    CONSOLE         reduce using rule 110 (dimensions -> L_CORCHETE a R_CORCHETE .)
    LET             reduce using rule 110 (dimensions -> L_CORCHETE a R_CORCHETE .)
    LITERAL         reduce using rule 110 (dimensions -> L_CORCHETE a R_CORCHETE .)
    IF              reduce using rule 110 (dimensions -> L_CORCHETE a R_CORCHETE .)
    WHILE           reduce using rule 110 (dimensions -> L_CORCHETE a R_CORCHETE .)
    FOR             reduce using rule 110 (dimensions -> L_CORCHETE a R_CORCHETE .)
    INTERFACE       reduce using rule 110 (dimensions -> L_CORCHETE a R_CORCHETE .)
    CONTINUE        reduce using rule 110 (dimensions -> L_CORCHETE a R_CORCHETE .)
    BREAK           reduce using rule 110 (dimensions -> L_CORCHETE a R_CORCHETE .)
    RETURN          reduce using rule 110 (dimensions -> L_CORCHETE a R_CORCHETE .)
    FUNCTION        reduce using rule 110 (dimensions -> L_CORCHETE a R_CORCHETE .)
    NOT             reduce using rule 110 (dimensions -> L_CORCHETE a R_CORCHETE .)
    ENTERO          reduce using rule 110 (dimensions -> L_CORCHETE a R_CORCHETE .)
    DECIMAL         reduce using rule 110 (dimensions -> L_CORCHETE a R_CORCHETE .)
    CADENA          reduce using rule 110 (dimensions -> L_CORCHETE a R_CORCHETE .)
    TRUE            reduce using rule 110 (dimensions -> L_CORCHETE a R_CORCHETE .)
    FALSE           reduce using rule 110 (dimensions -> L_CORCHETE a R_CORCHETE .)
    L_PAREN         reduce using rule 110 (dimensions -> L_CORCHETE a R_CORCHETE .)
    L_LLAVE         reduce using rule 110 (dimensions -> L_CORCHETE a R_CORCHETE .)
    $end            reduce using rule 110 (dimensions -> L_CORCHETE a R_CORCHETE .)
    R_LLAVE         reduce using rule 110 (dimensions -> L_CORCHETE a R_CORCHETE .)
    R_CORCHETE      reduce using rule 110 (dimensions -> L_CORCHETE a R_CORCHETE .)
    COMA            reduce using rule 110 (dimensions -> L_CORCHETE a R_CORCHETE .)


state 175

    (40) interface_assign_pro -> a PUNTO LITERAL IGUAL . a
    (70) a -> . a OR b
    (71) a -> . b
    (72) b -> . b AND c
    (73) b -> . c
    (74) c -> . NOT d
    (75) c -> . d
    (76) d -> . d DISTINTO_QUE e
    (77) d -> . d MENOR_QUE e
    (78) d -> . d MENOR_IGUAL_QUE e
    (79) d -> . d MAYOR_QUE e
    (80) d -> . d MAYOR_IGUAL_QUE e
    (81) d -> . d TRIPLE_IGUAL e
    (82) d -> . e
    (83) e -> . e MAS f
    (84) e -> . e MENOS f
    (85) e -> . f
    (86) f -> . MENOS g
    (87) f -> . MAS g
    (88) f -> . g
    (89) g -> . g TIMES h
    (90) g -> . g DIVIDE h
    (91) g -> . g MOD h
    (92) g -> . g POTENCIA h
    (93) g -> . h
    (94) h -> . ENTERO
    (95) h -> . DECIMAL
    (96) h -> . CADENA
    (97) h -> . LITERAL
    (98) h -> . TRUE
    (99) h -> . FALSE
    (100) h -> . call_function_pro
    (101) h -> . array_pro
    (102) h -> . interface_assi
    (103) h -> . L_PAREN a R_PAREN
    (104) h -> . array_val_pro
    (105) h -> . a PUNTO LITERAL
    (106) h -> . a PUNTO nativeFun L_PAREN expresion R_PAREN
    (107) h -> . a PUNTO nativeFun L_PAREN R_PAREN
    (23) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (24) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (116) array_pro -> . L_CORCHETE values R_CORCHETE
    (113) interface_assi -> . L_LLAVE atributos_assi R_LLAVE
    (108) array_val_pro -> . LITERAL dimensions

    NOT             shift and go to state 37
    MENOS           shift and go to state 34
    MAS             shift and go to state 33
    ENTERO          shift and go to state 43
    DECIMAL         shift and go to state 44
    CADENA          shift and go to state 45
    LITERAL         shift and go to state 71
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    L_PAREN         shift and go to state 20
    L_CORCHETE      shift and go to state 51
    L_LLAVE         shift and go to state 25

    a                              shift and go to state 195
    b                              shift and go to state 35
    c                              shift and go to state 36
    d                              shift and go to state 38
    e                              shift and go to state 39
    f                              shift and go to state 40
    g                              shift and go to state 41
    h                              shift and go to state 42
    call_function_pro              shift and go to state 72
    array_pro                      shift and go to state 48
    interface_assi                 shift and go to state 49
    array_val_pro                  shift and go to state 50

state 176

    (106) h -> a PUNTO nativeFun L_PAREN . expresion R_PAREN
    (107) h -> a PUNTO nativeFun L_PAREN . R_PAREN
    (68) expresion -> . expresion COMA a
    (69) expresion -> . a
    (70) a -> . a OR b
    (71) a -> . b
    (72) b -> . b AND c
    (73) b -> . c
    (74) c -> . NOT d
    (75) c -> . d
    (76) d -> . d DISTINTO_QUE e
    (77) d -> . d MENOR_QUE e
    (78) d -> . d MENOR_IGUAL_QUE e
    (79) d -> . d MAYOR_QUE e
    (80) d -> . d MAYOR_IGUAL_QUE e
    (81) d -> . d TRIPLE_IGUAL e
    (82) d -> . e
    (83) e -> . e MAS f
    (84) e -> . e MENOS f
    (85) e -> . f
    (86) f -> . MENOS g
    (87) f -> . MAS g
    (88) f -> . g
    (89) g -> . g TIMES h
    (90) g -> . g DIVIDE h
    (91) g -> . g MOD h
    (92) g -> . g POTENCIA h
    (93) g -> . h
    (94) h -> . ENTERO
    (95) h -> . DECIMAL
    (96) h -> . CADENA
    (97) h -> . LITERAL
    (98) h -> . TRUE
    (99) h -> . FALSE
    (100) h -> . call_function_pro
    (101) h -> . array_pro
    (102) h -> . interface_assi
    (103) h -> . L_PAREN a R_PAREN
    (104) h -> . array_val_pro
    (105) h -> . a PUNTO LITERAL
    (106) h -> . a PUNTO nativeFun L_PAREN expresion R_PAREN
    (107) h -> . a PUNTO nativeFun L_PAREN R_PAREN
    (23) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (24) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (116) array_pro -> . L_CORCHETE values R_CORCHETE
    (113) interface_assi -> . L_LLAVE atributos_assi R_LLAVE
    (108) array_val_pro -> . LITERAL dimensions

    R_PAREN         shift and go to state 197
    NOT             shift and go to state 37
    MENOS           shift and go to state 34
    MAS             shift and go to state 33
    ENTERO          shift and go to state 43
    DECIMAL         shift and go to state 44
    CADENA          shift and go to state 45
    LITERAL         shift and go to state 71
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    L_PAREN         shift and go to state 20
    L_CORCHETE      shift and go to state 51
    L_LLAVE         shift and go to state 25

    a                              shift and go to state 192
    expresion                      shift and go to state 196
    b                              shift and go to state 35
    c                              shift and go to state 36
    d                              shift and go to state 38
    e                              shift and go to state 39
    f                              shift and go to state 40
    g                              shift and go to state 41
    h                              shift and go to state 42
    call_function_pro              shift and go to state 72
    array_pro                      shift and go to state 48
    interface_assi                 shift and go to state 49
    array_val_pro                  shift and go to state 50

state 177

    (55) if_pro -> IF L_PAREN a R_PAREN . L_LLAVE instrucciones R_LLAVE else_pro

    L_LLAVE         shift and go to state 198


state 178

    (114) atributos_assi -> atributos_assi COMA LITERAL . COLON a

    COLON           shift and go to state 199


state 179

    (115) atributos_assi -> LITERAL COLON a .
    (70) a -> a . OR b
    (105) h -> a . PUNTO LITERAL
    (106) h -> a . PUNTO nativeFun L_PAREN expresion R_PAREN
    (107) h -> a . PUNTO nativeFun L_PAREN R_PAREN

    R_LLAVE         reduce using rule 115 (atributos_assi -> LITERAL COLON a .)
    COMA            reduce using rule 115 (atributos_assi -> LITERAL COLON a .)
    OR              shift and go to state 83
    PUNTO           shift and go to state 113


state 180

    (59) while_pro -> WHILE L_PAREN a R_PAREN . L_LLAVE instrucciones R_LLAVE

    L_LLAVE         shift and go to state 200


state 181

    (60) for_pro -> FOR L_PAREN declaration_instruction SEMI_COLON . a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (70) a -> . a OR b
    (71) a -> . b
    (72) b -> . b AND c
    (73) b -> . c
    (74) c -> . NOT d
    (75) c -> . d
    (76) d -> . d DISTINTO_QUE e
    (77) d -> . d MENOR_QUE e
    (78) d -> . d MENOR_IGUAL_QUE e
    (79) d -> . d MAYOR_QUE e
    (80) d -> . d MAYOR_IGUAL_QUE e
    (81) d -> . d TRIPLE_IGUAL e
    (82) d -> . e
    (83) e -> . e MAS f
    (84) e -> . e MENOS f
    (85) e -> . f
    (86) f -> . MENOS g
    (87) f -> . MAS g
    (88) f -> . g
    (89) g -> . g TIMES h
    (90) g -> . g DIVIDE h
    (91) g -> . g MOD h
    (92) g -> . g POTENCIA h
    (93) g -> . h
    (94) h -> . ENTERO
    (95) h -> . DECIMAL
    (96) h -> . CADENA
    (97) h -> . LITERAL
    (98) h -> . TRUE
    (99) h -> . FALSE
    (100) h -> . call_function_pro
    (101) h -> . array_pro
    (102) h -> . interface_assi
    (103) h -> . L_PAREN a R_PAREN
    (104) h -> . array_val_pro
    (105) h -> . a PUNTO LITERAL
    (106) h -> . a PUNTO nativeFun L_PAREN expresion R_PAREN
    (107) h -> . a PUNTO nativeFun L_PAREN R_PAREN
    (23) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (24) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (116) array_pro -> . L_CORCHETE values R_CORCHETE
    (113) interface_assi -> . L_LLAVE atributos_assi R_LLAVE
    (108) array_val_pro -> . LITERAL dimensions

    NOT             shift and go to state 37
    MENOS           shift and go to state 34
    MAS             shift and go to state 33
    ENTERO          shift and go to state 43
    DECIMAL         shift and go to state 44
    CADENA          shift and go to state 45
    LITERAL         shift and go to state 71
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    L_PAREN         shift and go to state 20
    L_CORCHETE      shift and go to state 51
    L_LLAVE         shift and go to state 25

    a                              shift and go to state 201
    b                              shift and go to state 35
    c                              shift and go to state 36
    d                              shift and go to state 38
    e                              shift and go to state 39
    f                              shift and go to state 40
    g                              shift and go to state 41
    h                              shift and go to state 42
    call_function_pro              shift and go to state 72
    array_pro                      shift and go to state 48
    interface_assi                 shift and go to state 49
    array_val_pro                  shift and go to state 50

state 182

    (61) for_pro -> FOR L_PAREN assig_pro SEMI_COLON . a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (70) a -> . a OR b
    (71) a -> . b
    (72) b -> . b AND c
    (73) b -> . c
    (74) c -> . NOT d
    (75) c -> . d
    (76) d -> . d DISTINTO_QUE e
    (77) d -> . d MENOR_QUE e
    (78) d -> . d MENOR_IGUAL_QUE e
    (79) d -> . d MAYOR_QUE e
    (80) d -> . d MAYOR_IGUAL_QUE e
    (81) d -> . d TRIPLE_IGUAL e
    (82) d -> . e
    (83) e -> . e MAS f
    (84) e -> . e MENOS f
    (85) e -> . f
    (86) f -> . MENOS g
    (87) f -> . MAS g
    (88) f -> . g
    (89) g -> . g TIMES h
    (90) g -> . g DIVIDE h
    (91) g -> . g MOD h
    (92) g -> . g POTENCIA h
    (93) g -> . h
    (94) h -> . ENTERO
    (95) h -> . DECIMAL
    (96) h -> . CADENA
    (97) h -> . LITERAL
    (98) h -> . TRUE
    (99) h -> . FALSE
    (100) h -> . call_function_pro
    (101) h -> . array_pro
    (102) h -> . interface_assi
    (103) h -> . L_PAREN a R_PAREN
    (104) h -> . array_val_pro
    (105) h -> . a PUNTO LITERAL
    (106) h -> . a PUNTO nativeFun L_PAREN expresion R_PAREN
    (107) h -> . a PUNTO nativeFun L_PAREN R_PAREN
    (23) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (24) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (116) array_pro -> . L_CORCHETE values R_CORCHETE
    (113) interface_assi -> . L_LLAVE atributos_assi R_LLAVE
    (108) array_val_pro -> . LITERAL dimensions

    NOT             shift and go to state 37
    MENOS           shift and go to state 34
    MAS             shift and go to state 33
    ENTERO          shift and go to state 43
    DECIMAL         shift and go to state 44
    CADENA          shift and go to state 45
    LITERAL         shift and go to state 71
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    L_PAREN         shift and go to state 20
    L_CORCHETE      shift and go to state 51
    L_LLAVE         shift and go to state 25

    a                              shift and go to state 202
    b                              shift and go to state 35
    c                              shift and go to state 36
    d                              shift and go to state 38
    e                              shift and go to state 39
    f                              shift and go to state 40
    g                              shift and go to state 41
    h                              shift and go to state 42
    call_function_pro              shift and go to state 72
    array_pro                      shift and go to state 48
    interface_assi                 shift and go to state 49
    array_val_pro                  shift and go to state 50

state 183

    (64) for_each_pro -> FOR L_PAREN for_each_dec R_PAREN . L_LLAVE instrucciones R_LLAVE

    L_LLAVE         shift and go to state 203


state 184

    (65) for_each_dec -> LET LITERAL . OF a
    (66) for_each_dec -> LET LITERAL . COLON type OF a
    (44) assignacion_instruction -> LITERAL . COLON type IGUAL a
    (45) assignacion_instruction -> LITERAL . COLON type
    (46) assignacion_instruction -> LITERAL . IGUAL a
    (47) assignacion_instruction -> LITERAL .

    OF              shift and go to state 204
    COLON           shift and go to state 205
    IGUAL           shift and go to state 116
    COMA            reduce using rule 47 (assignacion_instruction -> LITERAL .)
    SEMI_COLON      reduce using rule 47 (assignacion_instruction -> LITERAL .)


state 185

    (35) interface_pro -> INTERFACE LITERAL L_LLAVE interface_atributos . R_LLAVE
    (36) interface_atributos -> interface_atributos . interface_atributo sc
    (38) interface_atributo -> . LITERAL COLON type
    (39) interface_atributo -> . LITERAL

    R_LLAVE         shift and go to state 207
    LITERAL         shift and go to state 206

    interface_atributo             shift and go to state 208

state 186

    (29) parameter_pro -> LITERAL . COLON type
    (30) parameter_pro -> LITERAL .

    COLON           shift and go to state 209
    R_PAREN         reduce using rule 30 (parameter_pro -> LITERAL .)
    COMA            reduce using rule 30 (parameter_pro -> LITERAL .)


state 187

    (21) function_pro -> FUNCTION LITERAL L_PAREN parameters_pro . R_PAREN L_LLAVE instrucciones R_LLAVE
    (27) parameters_pro -> parameters_pro . COMA parameter_pro

    R_PAREN         shift and go to state 210
    COMA            shift and go to state 211


state 188

    (22) function_pro -> FUNCTION LITERAL L_PAREN R_PAREN . L_LLAVE instrucciones R_LLAVE

    L_LLAVE         shift and go to state 212


state 189

    (28) parameters_pro -> parameter_pro .

    R_PAREN         reduce using rule 28 (parameters_pro -> parameter_pro .)
    COMA            reduce using rule 28 (parameters_pro -> parameter_pro .)


state 190

    (25) values -> values COMA a .
    (70) a -> a . OR b
    (105) h -> a . PUNTO LITERAL
    (106) h -> a . PUNTO nativeFun L_PAREN expresion R_PAREN
    (107) h -> a . PUNTO nativeFun L_PAREN R_PAREN

    R_CORCHETE      reduce using rule 25 (values -> values COMA a .)
    COMA            reduce using rule 25 (values -> values COMA a .)
    R_PAREN         reduce using rule 25 (values -> values COMA a .)
    OR              shift and go to state 83
    PUNTO           shift and go to state 113


state 191

    (67) console_pro -> CONSOLE PUNTO LOG L_PAREN expresion . R_PAREN
    (68) expresion -> expresion . COMA a

    R_PAREN         shift and go to state 213
    COMA            shift and go to state 214


state 192

    (69) expresion -> a .
    (70) a -> a . OR b
    (105) h -> a . PUNTO LITERAL
    (106) h -> a . PUNTO nativeFun L_PAREN expresion R_PAREN
    (107) h -> a . PUNTO nativeFun L_PAREN R_PAREN

    R_PAREN         reduce using rule 69 (expresion -> a .)
    COMA            reduce using rule 69 (expresion -> a .)
    OR              shift and go to state 83
    PUNTO           shift and go to state 113


state 193

    (44) assignacion_instruction -> LITERAL COLON type IGUAL . a
    (70) a -> . a OR b
    (71) a -> . b
    (72) b -> . b AND c
    (73) b -> . c
    (74) c -> . NOT d
    (75) c -> . d
    (76) d -> . d DISTINTO_QUE e
    (77) d -> . d MENOR_QUE e
    (78) d -> . d MENOR_IGUAL_QUE e
    (79) d -> . d MAYOR_QUE e
    (80) d -> . d MAYOR_IGUAL_QUE e
    (81) d -> . d TRIPLE_IGUAL e
    (82) d -> . e
    (83) e -> . e MAS f
    (84) e -> . e MENOS f
    (85) e -> . f
    (86) f -> . MENOS g
    (87) f -> . MAS g
    (88) f -> . g
    (89) g -> . g TIMES h
    (90) g -> . g DIVIDE h
    (91) g -> . g MOD h
    (92) g -> . g POTENCIA h
    (93) g -> . h
    (94) h -> . ENTERO
    (95) h -> . DECIMAL
    (96) h -> . CADENA
    (97) h -> . LITERAL
    (98) h -> . TRUE
    (99) h -> . FALSE
    (100) h -> . call_function_pro
    (101) h -> . array_pro
    (102) h -> . interface_assi
    (103) h -> . L_PAREN a R_PAREN
    (104) h -> . array_val_pro
    (105) h -> . a PUNTO LITERAL
    (106) h -> . a PUNTO nativeFun L_PAREN expresion R_PAREN
    (107) h -> . a PUNTO nativeFun L_PAREN R_PAREN
    (23) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (24) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (116) array_pro -> . L_CORCHETE values R_CORCHETE
    (113) interface_assi -> . L_LLAVE atributos_assi R_LLAVE
    (108) array_val_pro -> . LITERAL dimensions

    NOT             shift and go to state 37
    MENOS           shift and go to state 34
    MAS             shift and go to state 33
    ENTERO          shift and go to state 43
    DECIMAL         shift and go to state 44
    CADENA          shift and go to state 45
    LITERAL         shift and go to state 71
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    L_PAREN         shift and go to state 20
    L_CORCHETE      shift and go to state 51
    L_LLAVE         shift and go to state 25

    a                              shift and go to state 215
    b                              shift and go to state 35
    c                              shift and go to state 36
    d                              shift and go to state 38
    e                              shift and go to state 39
    f                              shift and go to state 40
    g                              shift and go to state 41
    h                              shift and go to state 42
    call_function_pro              shift and go to state 72
    array_pro                      shift and go to state 48
    interface_assi                 shift and go to state 49
    array_val_pro                  shift and go to state 50

state 194

    (109) dimensions -> dimensions L_CORCHETE a R_CORCHETE .

    L_CORCHETE      reduce using rule 109 (dimensions -> dimensions L_CORCHETE a R_CORCHETE .)
    TIMES           reduce using rule 109 (dimensions -> dimensions L_CORCHETE a R_CORCHETE .)
    DIVIDE          reduce using rule 109 (dimensions -> dimensions L_CORCHETE a R_CORCHETE .)
    MOD             reduce using rule 109 (dimensions -> dimensions L_CORCHETE a R_CORCHETE .)
    POTENCIA        reduce using rule 109 (dimensions -> dimensions L_CORCHETE a R_CORCHETE .)
    MAS             reduce using rule 109 (dimensions -> dimensions L_CORCHETE a R_CORCHETE .)
    MENOS           reduce using rule 109 (dimensions -> dimensions L_CORCHETE a R_CORCHETE .)
    DISTINTO_QUE    reduce using rule 109 (dimensions -> dimensions L_CORCHETE a R_CORCHETE .)
    MENOR_QUE       reduce using rule 109 (dimensions -> dimensions L_CORCHETE a R_CORCHETE .)
    MENOR_IGUAL_QUE reduce using rule 109 (dimensions -> dimensions L_CORCHETE a R_CORCHETE .)
    MAYOR_QUE       reduce using rule 109 (dimensions -> dimensions L_CORCHETE a R_CORCHETE .)
    MAYOR_IGUAL_QUE reduce using rule 109 (dimensions -> dimensions L_CORCHETE a R_CORCHETE .)
    TRIPLE_IGUAL    reduce using rule 109 (dimensions -> dimensions L_CORCHETE a R_CORCHETE .)
    AND             reduce using rule 109 (dimensions -> dimensions L_CORCHETE a R_CORCHETE .)
    PUNTO           reduce using rule 109 (dimensions -> dimensions L_CORCHETE a R_CORCHETE .)
    OR              reduce using rule 109 (dimensions -> dimensions L_CORCHETE a R_CORCHETE .)
    R_PAREN         reduce using rule 109 (dimensions -> dimensions L_CORCHETE a R_CORCHETE .)
    SEMI_COLON      reduce using rule 109 (dimensions -> dimensions L_CORCHETE a R_CORCHETE .)
    CONSOLE         reduce using rule 109 (dimensions -> dimensions L_CORCHETE a R_CORCHETE .)
    LET             reduce using rule 109 (dimensions -> dimensions L_CORCHETE a R_CORCHETE .)
    LITERAL         reduce using rule 109 (dimensions -> dimensions L_CORCHETE a R_CORCHETE .)
    IF              reduce using rule 109 (dimensions -> dimensions L_CORCHETE a R_CORCHETE .)
    WHILE           reduce using rule 109 (dimensions -> dimensions L_CORCHETE a R_CORCHETE .)
    FOR             reduce using rule 109 (dimensions -> dimensions L_CORCHETE a R_CORCHETE .)
    INTERFACE       reduce using rule 109 (dimensions -> dimensions L_CORCHETE a R_CORCHETE .)
    CONTINUE        reduce using rule 109 (dimensions -> dimensions L_CORCHETE a R_CORCHETE .)
    BREAK           reduce using rule 109 (dimensions -> dimensions L_CORCHETE a R_CORCHETE .)
    RETURN          reduce using rule 109 (dimensions -> dimensions L_CORCHETE a R_CORCHETE .)
    FUNCTION        reduce using rule 109 (dimensions -> dimensions L_CORCHETE a R_CORCHETE .)
    NOT             reduce using rule 109 (dimensions -> dimensions L_CORCHETE a R_CORCHETE .)
    ENTERO          reduce using rule 109 (dimensions -> dimensions L_CORCHETE a R_CORCHETE .)
    DECIMAL         reduce using rule 109 (dimensions -> dimensions L_CORCHETE a R_CORCHETE .)
    CADENA          reduce using rule 109 (dimensions -> dimensions L_CORCHETE a R_CORCHETE .)
    TRUE            reduce using rule 109 (dimensions -> dimensions L_CORCHETE a R_CORCHETE .)
    FALSE           reduce using rule 109 (dimensions -> dimensions L_CORCHETE a R_CORCHETE .)
    L_PAREN         reduce using rule 109 (dimensions -> dimensions L_CORCHETE a R_CORCHETE .)
    L_LLAVE         reduce using rule 109 (dimensions -> dimensions L_CORCHETE a R_CORCHETE .)
    $end            reduce using rule 109 (dimensions -> dimensions L_CORCHETE a R_CORCHETE .)
    R_LLAVE         reduce using rule 109 (dimensions -> dimensions L_CORCHETE a R_CORCHETE .)
    R_CORCHETE      reduce using rule 109 (dimensions -> dimensions L_CORCHETE a R_CORCHETE .)
    COMA            reduce using rule 109 (dimensions -> dimensions L_CORCHETE a R_CORCHETE .)


state 195

    (40) interface_assign_pro -> a PUNTO LITERAL IGUAL a .
    (70) a -> a . OR b
    (105) h -> a . PUNTO LITERAL
    (106) h -> a . PUNTO nativeFun L_PAREN expresion R_PAREN
    (107) h -> a . PUNTO nativeFun L_PAREN R_PAREN

    SEMI_COLON      reduce using rule 40 (interface_assign_pro -> a PUNTO LITERAL IGUAL a .)
    CONSOLE         reduce using rule 40 (interface_assign_pro -> a PUNTO LITERAL IGUAL a .)
    LET             reduce using rule 40 (interface_assign_pro -> a PUNTO LITERAL IGUAL a .)
    LITERAL         reduce using rule 40 (interface_assign_pro -> a PUNTO LITERAL IGUAL a .)
    IF              reduce using rule 40 (interface_assign_pro -> a PUNTO LITERAL IGUAL a .)
    WHILE           reduce using rule 40 (interface_assign_pro -> a PUNTO LITERAL IGUAL a .)
    FOR             reduce using rule 40 (interface_assign_pro -> a PUNTO LITERAL IGUAL a .)
    INTERFACE       reduce using rule 40 (interface_assign_pro -> a PUNTO LITERAL IGUAL a .)
    CONTINUE        reduce using rule 40 (interface_assign_pro -> a PUNTO LITERAL IGUAL a .)
    BREAK           reduce using rule 40 (interface_assign_pro -> a PUNTO LITERAL IGUAL a .)
    RETURN          reduce using rule 40 (interface_assign_pro -> a PUNTO LITERAL IGUAL a .)
    FUNCTION        reduce using rule 40 (interface_assign_pro -> a PUNTO LITERAL IGUAL a .)
    NOT             reduce using rule 40 (interface_assign_pro -> a PUNTO LITERAL IGUAL a .)
    MENOS           reduce using rule 40 (interface_assign_pro -> a PUNTO LITERAL IGUAL a .)
    MAS             reduce using rule 40 (interface_assign_pro -> a PUNTO LITERAL IGUAL a .)
    ENTERO          reduce using rule 40 (interface_assign_pro -> a PUNTO LITERAL IGUAL a .)
    DECIMAL         reduce using rule 40 (interface_assign_pro -> a PUNTO LITERAL IGUAL a .)
    CADENA          reduce using rule 40 (interface_assign_pro -> a PUNTO LITERAL IGUAL a .)
    TRUE            reduce using rule 40 (interface_assign_pro -> a PUNTO LITERAL IGUAL a .)
    FALSE           reduce using rule 40 (interface_assign_pro -> a PUNTO LITERAL IGUAL a .)
    L_PAREN         reduce using rule 40 (interface_assign_pro -> a PUNTO LITERAL IGUAL a .)
    L_CORCHETE      reduce using rule 40 (interface_assign_pro -> a PUNTO LITERAL IGUAL a .)
    L_LLAVE         reduce using rule 40 (interface_assign_pro -> a PUNTO LITERAL IGUAL a .)
    $end            reduce using rule 40 (interface_assign_pro -> a PUNTO LITERAL IGUAL a .)
    R_LLAVE         reduce using rule 40 (interface_assign_pro -> a PUNTO LITERAL IGUAL a .)
    OR              shift and go to state 83
    PUNTO           shift and go to state 113


state 196

    (106) h -> a PUNTO nativeFun L_PAREN expresion . R_PAREN
    (68) expresion -> expresion . COMA a

    R_PAREN         shift and go to state 216
    COMA            shift and go to state 214


state 197

    (107) h -> a PUNTO nativeFun L_PAREN R_PAREN .

    TIMES           reduce using rule 107 (h -> a PUNTO nativeFun L_PAREN R_PAREN .)
    DIVIDE          reduce using rule 107 (h -> a PUNTO nativeFun L_PAREN R_PAREN .)
    MOD             reduce using rule 107 (h -> a PUNTO nativeFun L_PAREN R_PAREN .)
    POTENCIA        reduce using rule 107 (h -> a PUNTO nativeFun L_PAREN R_PAREN .)
    MAS             reduce using rule 107 (h -> a PUNTO nativeFun L_PAREN R_PAREN .)
    MENOS           reduce using rule 107 (h -> a PUNTO nativeFun L_PAREN R_PAREN .)
    DISTINTO_QUE    reduce using rule 107 (h -> a PUNTO nativeFun L_PAREN R_PAREN .)
    MENOR_QUE       reduce using rule 107 (h -> a PUNTO nativeFun L_PAREN R_PAREN .)
    MENOR_IGUAL_QUE reduce using rule 107 (h -> a PUNTO nativeFun L_PAREN R_PAREN .)
    MAYOR_QUE       reduce using rule 107 (h -> a PUNTO nativeFun L_PAREN R_PAREN .)
    MAYOR_IGUAL_QUE reduce using rule 107 (h -> a PUNTO nativeFun L_PAREN R_PAREN .)
    TRIPLE_IGUAL    reduce using rule 107 (h -> a PUNTO nativeFun L_PAREN R_PAREN .)
    AND             reduce using rule 107 (h -> a PUNTO nativeFun L_PAREN R_PAREN .)
    PUNTO           reduce using rule 107 (h -> a PUNTO nativeFun L_PAREN R_PAREN .)
    OR              reduce using rule 107 (h -> a PUNTO nativeFun L_PAREN R_PAREN .)
    R_PAREN         reduce using rule 107 (h -> a PUNTO nativeFun L_PAREN R_PAREN .)
    SEMI_COLON      reduce using rule 107 (h -> a PUNTO nativeFun L_PAREN R_PAREN .)
    CONSOLE         reduce using rule 107 (h -> a PUNTO nativeFun L_PAREN R_PAREN .)
    LET             reduce using rule 107 (h -> a PUNTO nativeFun L_PAREN R_PAREN .)
    LITERAL         reduce using rule 107 (h -> a PUNTO nativeFun L_PAREN R_PAREN .)
    IF              reduce using rule 107 (h -> a PUNTO nativeFun L_PAREN R_PAREN .)
    WHILE           reduce using rule 107 (h -> a PUNTO nativeFun L_PAREN R_PAREN .)
    FOR             reduce using rule 107 (h -> a PUNTO nativeFun L_PAREN R_PAREN .)
    INTERFACE       reduce using rule 107 (h -> a PUNTO nativeFun L_PAREN R_PAREN .)
    CONTINUE        reduce using rule 107 (h -> a PUNTO nativeFun L_PAREN R_PAREN .)
    BREAK           reduce using rule 107 (h -> a PUNTO nativeFun L_PAREN R_PAREN .)
    RETURN          reduce using rule 107 (h -> a PUNTO nativeFun L_PAREN R_PAREN .)
    FUNCTION        reduce using rule 107 (h -> a PUNTO nativeFun L_PAREN R_PAREN .)
    NOT             reduce using rule 107 (h -> a PUNTO nativeFun L_PAREN R_PAREN .)
    ENTERO          reduce using rule 107 (h -> a PUNTO nativeFun L_PAREN R_PAREN .)
    DECIMAL         reduce using rule 107 (h -> a PUNTO nativeFun L_PAREN R_PAREN .)
    CADENA          reduce using rule 107 (h -> a PUNTO nativeFun L_PAREN R_PAREN .)
    TRUE            reduce using rule 107 (h -> a PUNTO nativeFun L_PAREN R_PAREN .)
    FALSE           reduce using rule 107 (h -> a PUNTO nativeFun L_PAREN R_PAREN .)
    L_PAREN         reduce using rule 107 (h -> a PUNTO nativeFun L_PAREN R_PAREN .)
    L_CORCHETE      reduce using rule 107 (h -> a PUNTO nativeFun L_PAREN R_PAREN .)
    L_LLAVE         reduce using rule 107 (h -> a PUNTO nativeFun L_PAREN R_PAREN .)
    $end            reduce using rule 107 (h -> a PUNTO nativeFun L_PAREN R_PAREN .)
    R_LLAVE         reduce using rule 107 (h -> a PUNTO nativeFun L_PAREN R_PAREN .)
    R_CORCHETE      reduce using rule 107 (h -> a PUNTO nativeFun L_PAREN R_PAREN .)
    COMA            reduce using rule 107 (h -> a PUNTO nativeFun L_PAREN R_PAREN .)


state 198

    (55) if_pro -> IF L_PAREN a R_PAREN L_LLAVE . instrucciones R_LLAVE else_pro
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . console_pro sc
    (5) instruccion -> . declaration_instruction sc
    (6) instruccion -> . assig_pro sc
    (7) instruccion -> . interface_assign_pro sc
    (8) instruccion -> . if_pro sc
    (9) instruccion -> . while_pro sc
    (10) instruccion -> . for_pro sc
    (11) instruccion -> . for_each_pro sc
    (12) instruccion -> . interface_pro sc
    (13) instruccion -> . continue_pro sc
    (14) instruccion -> . break_pro sc
    (15) instruccion -> . return_pro sc
    (16) instruccion -> . function_pro sc
    (17) instruccion -> . call_function_pro sc
    (18) instruccion -> . sumadores sc
    (67) console_pro -> . CONSOLE PUNTO LOG L_PAREN expresion R_PAREN
    (41) declaration_instruction -> . LET declaracion_list
    (54) assig_pro -> . LITERAL IGUAL a
    (40) interface_assign_pro -> . a PUNTO LITERAL IGUAL a
    (55) if_pro -> . IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro
    (59) while_pro -> . WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE
    (60) for_pro -> . FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (61) for_pro -> . FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (64) for_each_pro -> . FOR L_PAREN for_each_dec R_PAREN L_LLAVE instrucciones R_LLAVE
    (35) interface_pro -> . INTERFACE LITERAL L_LLAVE interface_atributos R_LLAVE
    (31) continue_pro -> . CONTINUE
    (32) break_pro -> . BREAK
    (33) return_pro -> . RETURN
    (34) return_pro -> . RETURN a
    (21) function_pro -> . FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (22) function_pro -> . FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE
    (23) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (24) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (111) sumadores -> . LITERAL MAS MAS
    (112) sumadores -> . LITERAL MENOS MENOS
    (70) a -> . a OR b
    (71) a -> . b
    (72) b -> . b AND c
    (73) b -> . c
    (74) c -> . NOT d
    (75) c -> . d
    (76) d -> . d DISTINTO_QUE e
    (77) d -> . d MENOR_QUE e
    (78) d -> . d MENOR_IGUAL_QUE e
    (79) d -> . d MAYOR_QUE e
    (80) d -> . d MAYOR_IGUAL_QUE e
    (81) d -> . d TRIPLE_IGUAL e
    (82) d -> . e
    (83) e -> . e MAS f
    (84) e -> . e MENOS f
    (85) e -> . f
    (86) f -> . MENOS g
    (87) f -> . MAS g
    (88) f -> . g
    (89) g -> . g TIMES h
    (90) g -> . g DIVIDE h
    (91) g -> . g MOD h
    (92) g -> . g POTENCIA h
    (93) g -> . h
    (94) h -> . ENTERO
    (95) h -> . DECIMAL
    (96) h -> . CADENA
    (97) h -> . LITERAL
    (98) h -> . TRUE
    (99) h -> . FALSE
    (100) h -> . call_function_pro
    (101) h -> . array_pro
    (102) h -> . interface_assi
    (103) h -> . L_PAREN a R_PAREN
    (104) h -> . array_val_pro
    (105) h -> . a PUNTO LITERAL
    (106) h -> . a PUNTO nativeFun L_PAREN expresion R_PAREN
    (107) h -> . a PUNTO nativeFun L_PAREN R_PAREN
    (116) array_pro -> . L_CORCHETE values R_CORCHETE
    (113) interface_assi -> . L_LLAVE atributos_assi R_LLAVE
    (108) array_val_pro -> . LITERAL dimensions

    CONSOLE         shift and go to state 19
    LET             shift and go to state 21
    LITERAL         shift and go to state 22
    IF              shift and go to state 24
    WHILE           shift and go to state 26
    FOR             shift and go to state 27
    INTERFACE       shift and go to state 28
    CONTINUE        shift and go to state 29
    BREAK           shift and go to state 30
    RETURN          shift and go to state 31
    FUNCTION        shift and go to state 32
    NOT             shift and go to state 37
    MENOS           shift and go to state 34
    MAS             shift and go to state 33
    ENTERO          shift and go to state 43
    DECIMAL         shift and go to state 44
    CADENA          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    L_PAREN         shift and go to state 20
    L_CORCHETE      shift and go to state 51
    L_LLAVE         shift and go to state 25

    a                              shift and go to state 23
    instrucciones                  shift and go to state 217
    instruccion                    shift and go to state 3
    console_pro                    shift and go to state 4
    declaration_instruction        shift and go to state 5
    assig_pro                      shift and go to state 6
    interface_assign_pro           shift and go to state 7
    if_pro                         shift and go to state 8
    while_pro                      shift and go to state 9
    for_pro                        shift and go to state 10
    for_each_pro                   shift and go to state 11
    interface_pro                  shift and go to state 12
    continue_pro                   shift and go to state 13
    break_pro                      shift and go to state 14
    return_pro                     shift and go to state 15
    function_pro                   shift and go to state 16
    call_function_pro              shift and go to state 17
    sumadores                      shift and go to state 18
    b                              shift and go to state 35
    c                              shift and go to state 36
    d                              shift and go to state 38
    e                              shift and go to state 39
    f                              shift and go to state 40
    g                              shift and go to state 41
    h                              shift and go to state 42
    array_pro                      shift and go to state 48
    interface_assi                 shift and go to state 49
    array_val_pro                  shift and go to state 50

state 199

    (114) atributos_assi -> atributos_assi COMA LITERAL COLON . a
    (70) a -> . a OR b
    (71) a -> . b
    (72) b -> . b AND c
    (73) b -> . c
    (74) c -> . NOT d
    (75) c -> . d
    (76) d -> . d DISTINTO_QUE e
    (77) d -> . d MENOR_QUE e
    (78) d -> . d MENOR_IGUAL_QUE e
    (79) d -> . d MAYOR_QUE e
    (80) d -> . d MAYOR_IGUAL_QUE e
    (81) d -> . d TRIPLE_IGUAL e
    (82) d -> . e
    (83) e -> . e MAS f
    (84) e -> . e MENOS f
    (85) e -> . f
    (86) f -> . MENOS g
    (87) f -> . MAS g
    (88) f -> . g
    (89) g -> . g TIMES h
    (90) g -> . g DIVIDE h
    (91) g -> . g MOD h
    (92) g -> . g POTENCIA h
    (93) g -> . h
    (94) h -> . ENTERO
    (95) h -> . DECIMAL
    (96) h -> . CADENA
    (97) h -> . LITERAL
    (98) h -> . TRUE
    (99) h -> . FALSE
    (100) h -> . call_function_pro
    (101) h -> . array_pro
    (102) h -> . interface_assi
    (103) h -> . L_PAREN a R_PAREN
    (104) h -> . array_val_pro
    (105) h -> . a PUNTO LITERAL
    (106) h -> . a PUNTO nativeFun L_PAREN expresion R_PAREN
    (107) h -> . a PUNTO nativeFun L_PAREN R_PAREN
    (23) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (24) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (116) array_pro -> . L_CORCHETE values R_CORCHETE
    (113) interface_assi -> . L_LLAVE atributos_assi R_LLAVE
    (108) array_val_pro -> . LITERAL dimensions

    NOT             shift and go to state 37
    MENOS           shift and go to state 34
    MAS             shift and go to state 33
    ENTERO          shift and go to state 43
    DECIMAL         shift and go to state 44
    CADENA          shift and go to state 45
    LITERAL         shift and go to state 71
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    L_PAREN         shift and go to state 20
    L_CORCHETE      shift and go to state 51
    L_LLAVE         shift and go to state 25

    a                              shift and go to state 218
    b                              shift and go to state 35
    c                              shift and go to state 36
    d                              shift and go to state 38
    e                              shift and go to state 39
    f                              shift and go to state 40
    g                              shift and go to state 41
    h                              shift and go to state 42
    call_function_pro              shift and go to state 72
    array_pro                      shift and go to state 48
    interface_assi                 shift and go to state 49
    array_val_pro                  shift and go to state 50

state 200

    (59) while_pro -> WHILE L_PAREN a R_PAREN L_LLAVE . instrucciones R_LLAVE
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . console_pro sc
    (5) instruccion -> . declaration_instruction sc
    (6) instruccion -> . assig_pro sc
    (7) instruccion -> . interface_assign_pro sc
    (8) instruccion -> . if_pro sc
    (9) instruccion -> . while_pro sc
    (10) instruccion -> . for_pro sc
    (11) instruccion -> . for_each_pro sc
    (12) instruccion -> . interface_pro sc
    (13) instruccion -> . continue_pro sc
    (14) instruccion -> . break_pro sc
    (15) instruccion -> . return_pro sc
    (16) instruccion -> . function_pro sc
    (17) instruccion -> . call_function_pro sc
    (18) instruccion -> . sumadores sc
    (67) console_pro -> . CONSOLE PUNTO LOG L_PAREN expresion R_PAREN
    (41) declaration_instruction -> . LET declaracion_list
    (54) assig_pro -> . LITERAL IGUAL a
    (40) interface_assign_pro -> . a PUNTO LITERAL IGUAL a
    (55) if_pro -> . IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro
    (59) while_pro -> . WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE
    (60) for_pro -> . FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (61) for_pro -> . FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (64) for_each_pro -> . FOR L_PAREN for_each_dec R_PAREN L_LLAVE instrucciones R_LLAVE
    (35) interface_pro -> . INTERFACE LITERAL L_LLAVE interface_atributos R_LLAVE
    (31) continue_pro -> . CONTINUE
    (32) break_pro -> . BREAK
    (33) return_pro -> . RETURN
    (34) return_pro -> . RETURN a
    (21) function_pro -> . FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (22) function_pro -> . FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE
    (23) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (24) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (111) sumadores -> . LITERAL MAS MAS
    (112) sumadores -> . LITERAL MENOS MENOS
    (70) a -> . a OR b
    (71) a -> . b
    (72) b -> . b AND c
    (73) b -> . c
    (74) c -> . NOT d
    (75) c -> . d
    (76) d -> . d DISTINTO_QUE e
    (77) d -> . d MENOR_QUE e
    (78) d -> . d MENOR_IGUAL_QUE e
    (79) d -> . d MAYOR_QUE e
    (80) d -> . d MAYOR_IGUAL_QUE e
    (81) d -> . d TRIPLE_IGUAL e
    (82) d -> . e
    (83) e -> . e MAS f
    (84) e -> . e MENOS f
    (85) e -> . f
    (86) f -> . MENOS g
    (87) f -> . MAS g
    (88) f -> . g
    (89) g -> . g TIMES h
    (90) g -> . g DIVIDE h
    (91) g -> . g MOD h
    (92) g -> . g POTENCIA h
    (93) g -> . h
    (94) h -> . ENTERO
    (95) h -> . DECIMAL
    (96) h -> . CADENA
    (97) h -> . LITERAL
    (98) h -> . TRUE
    (99) h -> . FALSE
    (100) h -> . call_function_pro
    (101) h -> . array_pro
    (102) h -> . interface_assi
    (103) h -> . L_PAREN a R_PAREN
    (104) h -> . array_val_pro
    (105) h -> . a PUNTO LITERAL
    (106) h -> . a PUNTO nativeFun L_PAREN expresion R_PAREN
    (107) h -> . a PUNTO nativeFun L_PAREN R_PAREN
    (116) array_pro -> . L_CORCHETE values R_CORCHETE
    (113) interface_assi -> . L_LLAVE atributos_assi R_LLAVE
    (108) array_val_pro -> . LITERAL dimensions

    CONSOLE         shift and go to state 19
    LET             shift and go to state 21
    LITERAL         shift and go to state 22
    IF              shift and go to state 24
    WHILE           shift and go to state 26
    FOR             shift and go to state 27
    INTERFACE       shift and go to state 28
    CONTINUE        shift and go to state 29
    BREAK           shift and go to state 30
    RETURN          shift and go to state 31
    FUNCTION        shift and go to state 32
    NOT             shift and go to state 37
    MENOS           shift and go to state 34
    MAS             shift and go to state 33
    ENTERO          shift and go to state 43
    DECIMAL         shift and go to state 44
    CADENA          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    L_PAREN         shift and go to state 20
    L_CORCHETE      shift and go to state 51
    L_LLAVE         shift and go to state 25

    a                              shift and go to state 23
    instrucciones                  shift and go to state 219
    instruccion                    shift and go to state 3
    console_pro                    shift and go to state 4
    declaration_instruction        shift and go to state 5
    assig_pro                      shift and go to state 6
    interface_assign_pro           shift and go to state 7
    if_pro                         shift and go to state 8
    while_pro                      shift and go to state 9
    for_pro                        shift and go to state 10
    for_each_pro                   shift and go to state 11
    interface_pro                  shift and go to state 12
    continue_pro                   shift and go to state 13
    break_pro                      shift and go to state 14
    return_pro                     shift and go to state 15
    function_pro                   shift and go to state 16
    call_function_pro              shift and go to state 17
    sumadores                      shift and go to state 18
    b                              shift and go to state 35
    c                              shift and go to state 36
    d                              shift and go to state 38
    e                              shift and go to state 39
    f                              shift and go to state 40
    g                              shift and go to state 41
    h                              shift and go to state 42
    array_pro                      shift and go to state 48
    interface_assi                 shift and go to state 49
    array_val_pro                  shift and go to state 50

state 201

    (60) for_pro -> FOR L_PAREN declaration_instruction SEMI_COLON a . SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (70) a -> a . OR b
    (105) h -> a . PUNTO LITERAL
    (106) h -> a . PUNTO nativeFun L_PAREN expresion R_PAREN
    (107) h -> a . PUNTO nativeFun L_PAREN R_PAREN

    SEMI_COLON      shift and go to state 220
    OR              shift and go to state 83
    PUNTO           shift and go to state 113


state 202

    (61) for_pro -> FOR L_PAREN assig_pro SEMI_COLON a . SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (70) a -> a . OR b
    (105) h -> a . PUNTO LITERAL
    (106) h -> a . PUNTO nativeFun L_PAREN expresion R_PAREN
    (107) h -> a . PUNTO nativeFun L_PAREN R_PAREN

    SEMI_COLON      shift and go to state 221
    OR              shift and go to state 83
    PUNTO           shift and go to state 113


state 203

    (64) for_each_pro -> FOR L_PAREN for_each_dec R_PAREN L_LLAVE . instrucciones R_LLAVE
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . console_pro sc
    (5) instruccion -> . declaration_instruction sc
    (6) instruccion -> . assig_pro sc
    (7) instruccion -> . interface_assign_pro sc
    (8) instruccion -> . if_pro sc
    (9) instruccion -> . while_pro sc
    (10) instruccion -> . for_pro sc
    (11) instruccion -> . for_each_pro sc
    (12) instruccion -> . interface_pro sc
    (13) instruccion -> . continue_pro sc
    (14) instruccion -> . break_pro sc
    (15) instruccion -> . return_pro sc
    (16) instruccion -> . function_pro sc
    (17) instruccion -> . call_function_pro sc
    (18) instruccion -> . sumadores sc
    (67) console_pro -> . CONSOLE PUNTO LOG L_PAREN expresion R_PAREN
    (41) declaration_instruction -> . LET declaracion_list
    (54) assig_pro -> . LITERAL IGUAL a
    (40) interface_assign_pro -> . a PUNTO LITERAL IGUAL a
    (55) if_pro -> . IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro
    (59) while_pro -> . WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE
    (60) for_pro -> . FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (61) for_pro -> . FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (64) for_each_pro -> . FOR L_PAREN for_each_dec R_PAREN L_LLAVE instrucciones R_LLAVE
    (35) interface_pro -> . INTERFACE LITERAL L_LLAVE interface_atributos R_LLAVE
    (31) continue_pro -> . CONTINUE
    (32) break_pro -> . BREAK
    (33) return_pro -> . RETURN
    (34) return_pro -> . RETURN a
    (21) function_pro -> . FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (22) function_pro -> . FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE
    (23) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (24) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (111) sumadores -> . LITERAL MAS MAS
    (112) sumadores -> . LITERAL MENOS MENOS
    (70) a -> . a OR b
    (71) a -> . b
    (72) b -> . b AND c
    (73) b -> . c
    (74) c -> . NOT d
    (75) c -> . d
    (76) d -> . d DISTINTO_QUE e
    (77) d -> . d MENOR_QUE e
    (78) d -> . d MENOR_IGUAL_QUE e
    (79) d -> . d MAYOR_QUE e
    (80) d -> . d MAYOR_IGUAL_QUE e
    (81) d -> . d TRIPLE_IGUAL e
    (82) d -> . e
    (83) e -> . e MAS f
    (84) e -> . e MENOS f
    (85) e -> . f
    (86) f -> . MENOS g
    (87) f -> . MAS g
    (88) f -> . g
    (89) g -> . g TIMES h
    (90) g -> . g DIVIDE h
    (91) g -> . g MOD h
    (92) g -> . g POTENCIA h
    (93) g -> . h
    (94) h -> . ENTERO
    (95) h -> . DECIMAL
    (96) h -> . CADENA
    (97) h -> . LITERAL
    (98) h -> . TRUE
    (99) h -> . FALSE
    (100) h -> . call_function_pro
    (101) h -> . array_pro
    (102) h -> . interface_assi
    (103) h -> . L_PAREN a R_PAREN
    (104) h -> . array_val_pro
    (105) h -> . a PUNTO LITERAL
    (106) h -> . a PUNTO nativeFun L_PAREN expresion R_PAREN
    (107) h -> . a PUNTO nativeFun L_PAREN R_PAREN
    (116) array_pro -> . L_CORCHETE values R_CORCHETE
    (113) interface_assi -> . L_LLAVE atributos_assi R_LLAVE
    (108) array_val_pro -> . LITERAL dimensions

    CONSOLE         shift and go to state 19
    LET             shift and go to state 21
    LITERAL         shift and go to state 22
    IF              shift and go to state 24
    WHILE           shift and go to state 26
    FOR             shift and go to state 27
    INTERFACE       shift and go to state 28
    CONTINUE        shift and go to state 29
    BREAK           shift and go to state 30
    RETURN          shift and go to state 31
    FUNCTION        shift and go to state 32
    NOT             shift and go to state 37
    MENOS           shift and go to state 34
    MAS             shift and go to state 33
    ENTERO          shift and go to state 43
    DECIMAL         shift and go to state 44
    CADENA          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    L_PAREN         shift and go to state 20
    L_CORCHETE      shift and go to state 51
    L_LLAVE         shift and go to state 25

    instrucciones                  shift and go to state 222
    instruccion                    shift and go to state 3
    console_pro                    shift and go to state 4
    declaration_instruction        shift and go to state 5
    assig_pro                      shift and go to state 6
    interface_assign_pro           shift and go to state 7
    if_pro                         shift and go to state 8
    while_pro                      shift and go to state 9
    for_pro                        shift and go to state 10
    for_each_pro                   shift and go to state 11
    interface_pro                  shift and go to state 12
    continue_pro                   shift and go to state 13
    break_pro                      shift and go to state 14
    return_pro                     shift and go to state 15
    function_pro                   shift and go to state 16
    call_function_pro              shift and go to state 17
    sumadores                      shift and go to state 18
    a                              shift and go to state 23
    b                              shift and go to state 35
    c                              shift and go to state 36
    d                              shift and go to state 38
    e                              shift and go to state 39
    f                              shift and go to state 40
    g                              shift and go to state 41
    h                              shift and go to state 42
    array_pro                      shift and go to state 48
    interface_assi                 shift and go to state 49
    array_val_pro                  shift and go to state 50

state 204

    (65) for_each_dec -> LET LITERAL OF . a
    (70) a -> . a OR b
    (71) a -> . b
    (72) b -> . b AND c
    (73) b -> . c
    (74) c -> . NOT d
    (75) c -> . d
    (76) d -> . d DISTINTO_QUE e
    (77) d -> . d MENOR_QUE e
    (78) d -> . d MENOR_IGUAL_QUE e
    (79) d -> . d MAYOR_QUE e
    (80) d -> . d MAYOR_IGUAL_QUE e
    (81) d -> . d TRIPLE_IGUAL e
    (82) d -> . e
    (83) e -> . e MAS f
    (84) e -> . e MENOS f
    (85) e -> . f
    (86) f -> . MENOS g
    (87) f -> . MAS g
    (88) f -> . g
    (89) g -> . g TIMES h
    (90) g -> . g DIVIDE h
    (91) g -> . g MOD h
    (92) g -> . g POTENCIA h
    (93) g -> . h
    (94) h -> . ENTERO
    (95) h -> . DECIMAL
    (96) h -> . CADENA
    (97) h -> . LITERAL
    (98) h -> . TRUE
    (99) h -> . FALSE
    (100) h -> . call_function_pro
    (101) h -> . array_pro
    (102) h -> . interface_assi
    (103) h -> . L_PAREN a R_PAREN
    (104) h -> . array_val_pro
    (105) h -> . a PUNTO LITERAL
    (106) h -> . a PUNTO nativeFun L_PAREN expresion R_PAREN
    (107) h -> . a PUNTO nativeFun L_PAREN R_PAREN
    (23) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (24) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (116) array_pro -> . L_CORCHETE values R_CORCHETE
    (113) interface_assi -> . L_LLAVE atributos_assi R_LLAVE
    (108) array_val_pro -> . LITERAL dimensions

    NOT             shift and go to state 37
    MENOS           shift and go to state 34
    MAS             shift and go to state 33
    ENTERO          shift and go to state 43
    DECIMAL         shift and go to state 44
    CADENA          shift and go to state 45
    LITERAL         shift and go to state 71
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    L_PAREN         shift and go to state 20
    L_CORCHETE      shift and go to state 51
    L_LLAVE         shift and go to state 25

    a                              shift and go to state 223
    b                              shift and go to state 35
    c                              shift and go to state 36
    d                              shift and go to state 38
    e                              shift and go to state 39
    f                              shift and go to state 40
    g                              shift and go to state 41
    h                              shift and go to state 42
    call_function_pro              shift and go to state 72
    array_pro                      shift and go to state 48
    interface_assi                 shift and go to state 49
    array_val_pro                  shift and go to state 50

state 205

    (66) for_each_dec -> LET LITERAL COLON . type OF a
    (44) assignacion_instruction -> LITERAL COLON . type IGUAL a
    (45) assignacion_instruction -> LITERAL COLON . type
    (48) type -> . NUMBER
    (49) type -> . STRING
    (50) type -> . BOOLEAN
    (51) type -> . ANY
    (52) type -> . LITERAL
    (53) type -> . NULL

    NUMBER          shift and go to state 166
    STRING          shift and go to state 167
    BOOLEAN         shift and go to state 168
    ANY             shift and go to state 169
    LITERAL         shift and go to state 164
    NULL            shift and go to state 170

    type                           shift and go to state 224

state 206

    (38) interface_atributo -> LITERAL . COLON type
    (39) interface_atributo -> LITERAL .

    COLON           shift and go to state 225
    SEMI_COLON      reduce using rule 39 (interface_atributo -> LITERAL .)
    R_LLAVE         reduce using rule 39 (interface_atributo -> LITERAL .)
    LITERAL         reduce using rule 39 (interface_atributo -> LITERAL .)


state 207

    (35) interface_pro -> INTERFACE LITERAL L_LLAVE interface_atributos R_LLAVE .

    SEMI_COLON      reduce using rule 35 (interface_pro -> INTERFACE LITERAL L_LLAVE interface_atributos R_LLAVE .)
    CONSOLE         reduce using rule 35 (interface_pro -> INTERFACE LITERAL L_LLAVE interface_atributos R_LLAVE .)
    LET             reduce using rule 35 (interface_pro -> INTERFACE LITERAL L_LLAVE interface_atributos R_LLAVE .)
    LITERAL         reduce using rule 35 (interface_pro -> INTERFACE LITERAL L_LLAVE interface_atributos R_LLAVE .)
    IF              reduce using rule 35 (interface_pro -> INTERFACE LITERAL L_LLAVE interface_atributos R_LLAVE .)
    WHILE           reduce using rule 35 (interface_pro -> INTERFACE LITERAL L_LLAVE interface_atributos R_LLAVE .)
    FOR             reduce using rule 35 (interface_pro -> INTERFACE LITERAL L_LLAVE interface_atributos R_LLAVE .)
    INTERFACE       reduce using rule 35 (interface_pro -> INTERFACE LITERAL L_LLAVE interface_atributos R_LLAVE .)
    CONTINUE        reduce using rule 35 (interface_pro -> INTERFACE LITERAL L_LLAVE interface_atributos R_LLAVE .)
    BREAK           reduce using rule 35 (interface_pro -> INTERFACE LITERAL L_LLAVE interface_atributos R_LLAVE .)
    RETURN          reduce using rule 35 (interface_pro -> INTERFACE LITERAL L_LLAVE interface_atributos R_LLAVE .)
    FUNCTION        reduce using rule 35 (interface_pro -> INTERFACE LITERAL L_LLAVE interface_atributos R_LLAVE .)
    NOT             reduce using rule 35 (interface_pro -> INTERFACE LITERAL L_LLAVE interface_atributos R_LLAVE .)
    MENOS           reduce using rule 35 (interface_pro -> INTERFACE LITERAL L_LLAVE interface_atributos R_LLAVE .)
    MAS             reduce using rule 35 (interface_pro -> INTERFACE LITERAL L_LLAVE interface_atributos R_LLAVE .)
    ENTERO          reduce using rule 35 (interface_pro -> INTERFACE LITERAL L_LLAVE interface_atributos R_LLAVE .)
    DECIMAL         reduce using rule 35 (interface_pro -> INTERFACE LITERAL L_LLAVE interface_atributos R_LLAVE .)
    CADENA          reduce using rule 35 (interface_pro -> INTERFACE LITERAL L_LLAVE interface_atributos R_LLAVE .)
    TRUE            reduce using rule 35 (interface_pro -> INTERFACE LITERAL L_LLAVE interface_atributos R_LLAVE .)
    FALSE           reduce using rule 35 (interface_pro -> INTERFACE LITERAL L_LLAVE interface_atributos R_LLAVE .)
    L_PAREN         reduce using rule 35 (interface_pro -> INTERFACE LITERAL L_LLAVE interface_atributos R_LLAVE .)
    L_CORCHETE      reduce using rule 35 (interface_pro -> INTERFACE LITERAL L_LLAVE interface_atributos R_LLAVE .)
    L_LLAVE         reduce using rule 35 (interface_pro -> INTERFACE LITERAL L_LLAVE interface_atributos R_LLAVE .)
    $end            reduce using rule 35 (interface_pro -> INTERFACE LITERAL L_LLAVE interface_atributos R_LLAVE .)
    R_LLAVE         reduce using rule 35 (interface_pro -> INTERFACE LITERAL L_LLAVE interface_atributos R_LLAVE .)


state 208

    (36) interface_atributos -> interface_atributos interface_atributo . sc
    (19) sc -> . SEMI_COLON
    (20) sc -> .

    SEMI_COLON      shift and go to state 54
    R_LLAVE         reduce using rule 20 (sc -> .)
    LITERAL         reduce using rule 20 (sc -> .)

    sc                             shift and go to state 226

state 209

    (29) parameter_pro -> LITERAL COLON . type
    (48) type -> . NUMBER
    (49) type -> . STRING
    (50) type -> . BOOLEAN
    (51) type -> . ANY
    (52) type -> . LITERAL
    (53) type -> . NULL

    NUMBER          shift and go to state 166
    STRING          shift and go to state 167
    BOOLEAN         shift and go to state 168
    ANY             shift and go to state 169
    LITERAL         shift and go to state 164
    NULL            shift and go to state 170

    type                           shift and go to state 227

state 210

    (21) function_pro -> FUNCTION LITERAL L_PAREN parameters_pro R_PAREN . L_LLAVE instrucciones R_LLAVE

    L_LLAVE         shift and go to state 228


state 211

    (27) parameters_pro -> parameters_pro COMA . parameter_pro
    (29) parameter_pro -> . LITERAL COLON type
    (30) parameter_pro -> . LITERAL

    LITERAL         shift and go to state 186

    parameter_pro                  shift and go to state 229

state 212

    (22) function_pro -> FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE . instrucciones R_LLAVE
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . console_pro sc
    (5) instruccion -> . declaration_instruction sc
    (6) instruccion -> . assig_pro sc
    (7) instruccion -> . interface_assign_pro sc
    (8) instruccion -> . if_pro sc
    (9) instruccion -> . while_pro sc
    (10) instruccion -> . for_pro sc
    (11) instruccion -> . for_each_pro sc
    (12) instruccion -> . interface_pro sc
    (13) instruccion -> . continue_pro sc
    (14) instruccion -> . break_pro sc
    (15) instruccion -> . return_pro sc
    (16) instruccion -> . function_pro sc
    (17) instruccion -> . call_function_pro sc
    (18) instruccion -> . sumadores sc
    (67) console_pro -> . CONSOLE PUNTO LOG L_PAREN expresion R_PAREN
    (41) declaration_instruction -> . LET declaracion_list
    (54) assig_pro -> . LITERAL IGUAL a
    (40) interface_assign_pro -> . a PUNTO LITERAL IGUAL a
    (55) if_pro -> . IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro
    (59) while_pro -> . WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE
    (60) for_pro -> . FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (61) for_pro -> . FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (64) for_each_pro -> . FOR L_PAREN for_each_dec R_PAREN L_LLAVE instrucciones R_LLAVE
    (35) interface_pro -> . INTERFACE LITERAL L_LLAVE interface_atributos R_LLAVE
    (31) continue_pro -> . CONTINUE
    (32) break_pro -> . BREAK
    (33) return_pro -> . RETURN
    (34) return_pro -> . RETURN a
    (21) function_pro -> . FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (22) function_pro -> . FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE
    (23) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (24) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (111) sumadores -> . LITERAL MAS MAS
    (112) sumadores -> . LITERAL MENOS MENOS
    (70) a -> . a OR b
    (71) a -> . b
    (72) b -> . b AND c
    (73) b -> . c
    (74) c -> . NOT d
    (75) c -> . d
    (76) d -> . d DISTINTO_QUE e
    (77) d -> . d MENOR_QUE e
    (78) d -> . d MENOR_IGUAL_QUE e
    (79) d -> . d MAYOR_QUE e
    (80) d -> . d MAYOR_IGUAL_QUE e
    (81) d -> . d TRIPLE_IGUAL e
    (82) d -> . e
    (83) e -> . e MAS f
    (84) e -> . e MENOS f
    (85) e -> . f
    (86) f -> . MENOS g
    (87) f -> . MAS g
    (88) f -> . g
    (89) g -> . g TIMES h
    (90) g -> . g DIVIDE h
    (91) g -> . g MOD h
    (92) g -> . g POTENCIA h
    (93) g -> . h
    (94) h -> . ENTERO
    (95) h -> . DECIMAL
    (96) h -> . CADENA
    (97) h -> . LITERAL
    (98) h -> . TRUE
    (99) h -> . FALSE
    (100) h -> . call_function_pro
    (101) h -> . array_pro
    (102) h -> . interface_assi
    (103) h -> . L_PAREN a R_PAREN
    (104) h -> . array_val_pro
    (105) h -> . a PUNTO LITERAL
    (106) h -> . a PUNTO nativeFun L_PAREN expresion R_PAREN
    (107) h -> . a PUNTO nativeFun L_PAREN R_PAREN
    (116) array_pro -> . L_CORCHETE values R_CORCHETE
    (113) interface_assi -> . L_LLAVE atributos_assi R_LLAVE
    (108) array_val_pro -> . LITERAL dimensions

    CONSOLE         shift and go to state 19
    LET             shift and go to state 21
    LITERAL         shift and go to state 22
    IF              shift and go to state 24
    WHILE           shift and go to state 26
    FOR             shift and go to state 27
    INTERFACE       shift and go to state 28
    CONTINUE        shift and go to state 29
    BREAK           shift and go to state 30
    RETURN          shift and go to state 31
    FUNCTION        shift and go to state 32
    NOT             shift and go to state 37
    MENOS           shift and go to state 34
    MAS             shift and go to state 33
    ENTERO          shift and go to state 43
    DECIMAL         shift and go to state 44
    CADENA          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    L_PAREN         shift and go to state 20
    L_CORCHETE      shift and go to state 51
    L_LLAVE         shift and go to state 25

    instrucciones                  shift and go to state 230
    instruccion                    shift and go to state 3
    console_pro                    shift and go to state 4
    declaration_instruction        shift and go to state 5
    assig_pro                      shift and go to state 6
    interface_assign_pro           shift and go to state 7
    if_pro                         shift and go to state 8
    while_pro                      shift and go to state 9
    for_pro                        shift and go to state 10
    for_each_pro                   shift and go to state 11
    interface_pro                  shift and go to state 12
    continue_pro                   shift and go to state 13
    break_pro                      shift and go to state 14
    return_pro                     shift and go to state 15
    function_pro                   shift and go to state 16
    call_function_pro              shift and go to state 17
    sumadores                      shift and go to state 18
    a                              shift and go to state 23
    b                              shift and go to state 35
    c                              shift and go to state 36
    d                              shift and go to state 38
    e                              shift and go to state 39
    f                              shift and go to state 40
    g                              shift and go to state 41
    h                              shift and go to state 42
    array_pro                      shift and go to state 48
    interface_assi                 shift and go to state 49
    array_val_pro                  shift and go to state 50

state 213

    (67) console_pro -> CONSOLE PUNTO LOG L_PAREN expresion R_PAREN .

    SEMI_COLON      reduce using rule 67 (console_pro -> CONSOLE PUNTO LOG L_PAREN expresion R_PAREN .)
    CONSOLE         reduce using rule 67 (console_pro -> CONSOLE PUNTO LOG L_PAREN expresion R_PAREN .)
    LET             reduce using rule 67 (console_pro -> CONSOLE PUNTO LOG L_PAREN expresion R_PAREN .)
    LITERAL         reduce using rule 67 (console_pro -> CONSOLE PUNTO LOG L_PAREN expresion R_PAREN .)
    IF              reduce using rule 67 (console_pro -> CONSOLE PUNTO LOG L_PAREN expresion R_PAREN .)
    WHILE           reduce using rule 67 (console_pro -> CONSOLE PUNTO LOG L_PAREN expresion R_PAREN .)
    FOR             reduce using rule 67 (console_pro -> CONSOLE PUNTO LOG L_PAREN expresion R_PAREN .)
    INTERFACE       reduce using rule 67 (console_pro -> CONSOLE PUNTO LOG L_PAREN expresion R_PAREN .)
    CONTINUE        reduce using rule 67 (console_pro -> CONSOLE PUNTO LOG L_PAREN expresion R_PAREN .)
    BREAK           reduce using rule 67 (console_pro -> CONSOLE PUNTO LOG L_PAREN expresion R_PAREN .)
    RETURN          reduce using rule 67 (console_pro -> CONSOLE PUNTO LOG L_PAREN expresion R_PAREN .)
    FUNCTION        reduce using rule 67 (console_pro -> CONSOLE PUNTO LOG L_PAREN expresion R_PAREN .)
    NOT             reduce using rule 67 (console_pro -> CONSOLE PUNTO LOG L_PAREN expresion R_PAREN .)
    MENOS           reduce using rule 67 (console_pro -> CONSOLE PUNTO LOG L_PAREN expresion R_PAREN .)
    MAS             reduce using rule 67 (console_pro -> CONSOLE PUNTO LOG L_PAREN expresion R_PAREN .)
    ENTERO          reduce using rule 67 (console_pro -> CONSOLE PUNTO LOG L_PAREN expresion R_PAREN .)
    DECIMAL         reduce using rule 67 (console_pro -> CONSOLE PUNTO LOG L_PAREN expresion R_PAREN .)
    CADENA          reduce using rule 67 (console_pro -> CONSOLE PUNTO LOG L_PAREN expresion R_PAREN .)
    TRUE            reduce using rule 67 (console_pro -> CONSOLE PUNTO LOG L_PAREN expresion R_PAREN .)
    FALSE           reduce using rule 67 (console_pro -> CONSOLE PUNTO LOG L_PAREN expresion R_PAREN .)
    L_PAREN         reduce using rule 67 (console_pro -> CONSOLE PUNTO LOG L_PAREN expresion R_PAREN .)
    L_CORCHETE      reduce using rule 67 (console_pro -> CONSOLE PUNTO LOG L_PAREN expresion R_PAREN .)
    L_LLAVE         reduce using rule 67 (console_pro -> CONSOLE PUNTO LOG L_PAREN expresion R_PAREN .)
    $end            reduce using rule 67 (console_pro -> CONSOLE PUNTO LOG L_PAREN expresion R_PAREN .)
    R_LLAVE         reduce using rule 67 (console_pro -> CONSOLE PUNTO LOG L_PAREN expresion R_PAREN .)


state 214

    (68) expresion -> expresion COMA . a
    (70) a -> . a OR b
    (71) a -> . b
    (72) b -> . b AND c
    (73) b -> . c
    (74) c -> . NOT d
    (75) c -> . d
    (76) d -> . d DISTINTO_QUE e
    (77) d -> . d MENOR_QUE e
    (78) d -> . d MENOR_IGUAL_QUE e
    (79) d -> . d MAYOR_QUE e
    (80) d -> . d MAYOR_IGUAL_QUE e
    (81) d -> . d TRIPLE_IGUAL e
    (82) d -> . e
    (83) e -> . e MAS f
    (84) e -> . e MENOS f
    (85) e -> . f
    (86) f -> . MENOS g
    (87) f -> . MAS g
    (88) f -> . g
    (89) g -> . g TIMES h
    (90) g -> . g DIVIDE h
    (91) g -> . g MOD h
    (92) g -> . g POTENCIA h
    (93) g -> . h
    (94) h -> . ENTERO
    (95) h -> . DECIMAL
    (96) h -> . CADENA
    (97) h -> . LITERAL
    (98) h -> . TRUE
    (99) h -> . FALSE
    (100) h -> . call_function_pro
    (101) h -> . array_pro
    (102) h -> . interface_assi
    (103) h -> . L_PAREN a R_PAREN
    (104) h -> . array_val_pro
    (105) h -> . a PUNTO LITERAL
    (106) h -> . a PUNTO nativeFun L_PAREN expresion R_PAREN
    (107) h -> . a PUNTO nativeFun L_PAREN R_PAREN
    (23) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (24) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (116) array_pro -> . L_CORCHETE values R_CORCHETE
    (113) interface_assi -> . L_LLAVE atributos_assi R_LLAVE
    (108) array_val_pro -> . LITERAL dimensions

    NOT             shift and go to state 37
    MENOS           shift and go to state 34
    MAS             shift and go to state 33
    ENTERO          shift and go to state 43
    DECIMAL         shift and go to state 44
    CADENA          shift and go to state 45
    LITERAL         shift and go to state 71
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    L_PAREN         shift and go to state 20
    L_CORCHETE      shift and go to state 51
    L_LLAVE         shift and go to state 25

    a                              shift and go to state 231
    b                              shift and go to state 35
    c                              shift and go to state 36
    d                              shift and go to state 38
    e                              shift and go to state 39
    f                              shift and go to state 40
    g                              shift and go to state 41
    h                              shift and go to state 42
    call_function_pro              shift and go to state 72
    array_pro                      shift and go to state 48
    interface_assi                 shift and go to state 49
    array_val_pro                  shift and go to state 50

state 215

    (44) assignacion_instruction -> LITERAL COLON type IGUAL a .
    (70) a -> a . OR b
    (105) h -> a . PUNTO LITERAL
    (106) h -> a . PUNTO nativeFun L_PAREN expresion R_PAREN
    (107) h -> a . PUNTO nativeFun L_PAREN R_PAREN

    COMA            reduce using rule 44 (assignacion_instruction -> LITERAL COLON type IGUAL a .)
    SEMI_COLON      reduce using rule 44 (assignacion_instruction -> LITERAL COLON type IGUAL a .)
    CONSOLE         reduce using rule 44 (assignacion_instruction -> LITERAL COLON type IGUAL a .)
    LET             reduce using rule 44 (assignacion_instruction -> LITERAL COLON type IGUAL a .)
    LITERAL         reduce using rule 44 (assignacion_instruction -> LITERAL COLON type IGUAL a .)
    IF              reduce using rule 44 (assignacion_instruction -> LITERAL COLON type IGUAL a .)
    WHILE           reduce using rule 44 (assignacion_instruction -> LITERAL COLON type IGUAL a .)
    FOR             reduce using rule 44 (assignacion_instruction -> LITERAL COLON type IGUAL a .)
    INTERFACE       reduce using rule 44 (assignacion_instruction -> LITERAL COLON type IGUAL a .)
    CONTINUE        reduce using rule 44 (assignacion_instruction -> LITERAL COLON type IGUAL a .)
    BREAK           reduce using rule 44 (assignacion_instruction -> LITERAL COLON type IGUAL a .)
    RETURN          reduce using rule 44 (assignacion_instruction -> LITERAL COLON type IGUAL a .)
    FUNCTION        reduce using rule 44 (assignacion_instruction -> LITERAL COLON type IGUAL a .)
    NOT             reduce using rule 44 (assignacion_instruction -> LITERAL COLON type IGUAL a .)
    MENOS           reduce using rule 44 (assignacion_instruction -> LITERAL COLON type IGUAL a .)
    MAS             reduce using rule 44 (assignacion_instruction -> LITERAL COLON type IGUAL a .)
    ENTERO          reduce using rule 44 (assignacion_instruction -> LITERAL COLON type IGUAL a .)
    DECIMAL         reduce using rule 44 (assignacion_instruction -> LITERAL COLON type IGUAL a .)
    CADENA          reduce using rule 44 (assignacion_instruction -> LITERAL COLON type IGUAL a .)
    TRUE            reduce using rule 44 (assignacion_instruction -> LITERAL COLON type IGUAL a .)
    FALSE           reduce using rule 44 (assignacion_instruction -> LITERAL COLON type IGUAL a .)
    L_PAREN         reduce using rule 44 (assignacion_instruction -> LITERAL COLON type IGUAL a .)
    L_CORCHETE      reduce using rule 44 (assignacion_instruction -> LITERAL COLON type IGUAL a .)
    L_LLAVE         reduce using rule 44 (assignacion_instruction -> LITERAL COLON type IGUAL a .)
    $end            reduce using rule 44 (assignacion_instruction -> LITERAL COLON type IGUAL a .)
    R_LLAVE         reduce using rule 44 (assignacion_instruction -> LITERAL COLON type IGUAL a .)
    OR              shift and go to state 83
    PUNTO           shift and go to state 113


state 216

    (106) h -> a PUNTO nativeFun L_PAREN expresion R_PAREN .

    TIMES           reduce using rule 106 (h -> a PUNTO nativeFun L_PAREN expresion R_PAREN .)
    DIVIDE          reduce using rule 106 (h -> a PUNTO nativeFun L_PAREN expresion R_PAREN .)
    MOD             reduce using rule 106 (h -> a PUNTO nativeFun L_PAREN expresion R_PAREN .)
    POTENCIA        reduce using rule 106 (h -> a PUNTO nativeFun L_PAREN expresion R_PAREN .)
    MAS             reduce using rule 106 (h -> a PUNTO nativeFun L_PAREN expresion R_PAREN .)
    MENOS           reduce using rule 106 (h -> a PUNTO nativeFun L_PAREN expresion R_PAREN .)
    DISTINTO_QUE    reduce using rule 106 (h -> a PUNTO nativeFun L_PAREN expresion R_PAREN .)
    MENOR_QUE       reduce using rule 106 (h -> a PUNTO nativeFun L_PAREN expresion R_PAREN .)
    MENOR_IGUAL_QUE reduce using rule 106 (h -> a PUNTO nativeFun L_PAREN expresion R_PAREN .)
    MAYOR_QUE       reduce using rule 106 (h -> a PUNTO nativeFun L_PAREN expresion R_PAREN .)
    MAYOR_IGUAL_QUE reduce using rule 106 (h -> a PUNTO nativeFun L_PAREN expresion R_PAREN .)
    TRIPLE_IGUAL    reduce using rule 106 (h -> a PUNTO nativeFun L_PAREN expresion R_PAREN .)
    AND             reduce using rule 106 (h -> a PUNTO nativeFun L_PAREN expresion R_PAREN .)
    PUNTO           reduce using rule 106 (h -> a PUNTO nativeFun L_PAREN expresion R_PAREN .)
    OR              reduce using rule 106 (h -> a PUNTO nativeFun L_PAREN expresion R_PAREN .)
    R_PAREN         reduce using rule 106 (h -> a PUNTO nativeFun L_PAREN expresion R_PAREN .)
    SEMI_COLON      reduce using rule 106 (h -> a PUNTO nativeFun L_PAREN expresion R_PAREN .)
    CONSOLE         reduce using rule 106 (h -> a PUNTO nativeFun L_PAREN expresion R_PAREN .)
    LET             reduce using rule 106 (h -> a PUNTO nativeFun L_PAREN expresion R_PAREN .)
    LITERAL         reduce using rule 106 (h -> a PUNTO nativeFun L_PAREN expresion R_PAREN .)
    IF              reduce using rule 106 (h -> a PUNTO nativeFun L_PAREN expresion R_PAREN .)
    WHILE           reduce using rule 106 (h -> a PUNTO nativeFun L_PAREN expresion R_PAREN .)
    FOR             reduce using rule 106 (h -> a PUNTO nativeFun L_PAREN expresion R_PAREN .)
    INTERFACE       reduce using rule 106 (h -> a PUNTO nativeFun L_PAREN expresion R_PAREN .)
    CONTINUE        reduce using rule 106 (h -> a PUNTO nativeFun L_PAREN expresion R_PAREN .)
    BREAK           reduce using rule 106 (h -> a PUNTO nativeFun L_PAREN expresion R_PAREN .)
    RETURN          reduce using rule 106 (h -> a PUNTO nativeFun L_PAREN expresion R_PAREN .)
    FUNCTION        reduce using rule 106 (h -> a PUNTO nativeFun L_PAREN expresion R_PAREN .)
    NOT             reduce using rule 106 (h -> a PUNTO nativeFun L_PAREN expresion R_PAREN .)
    ENTERO          reduce using rule 106 (h -> a PUNTO nativeFun L_PAREN expresion R_PAREN .)
    DECIMAL         reduce using rule 106 (h -> a PUNTO nativeFun L_PAREN expresion R_PAREN .)
    CADENA          reduce using rule 106 (h -> a PUNTO nativeFun L_PAREN expresion R_PAREN .)
    TRUE            reduce using rule 106 (h -> a PUNTO nativeFun L_PAREN expresion R_PAREN .)
    FALSE           reduce using rule 106 (h -> a PUNTO nativeFun L_PAREN expresion R_PAREN .)
    L_PAREN         reduce using rule 106 (h -> a PUNTO nativeFun L_PAREN expresion R_PAREN .)
    L_CORCHETE      reduce using rule 106 (h -> a PUNTO nativeFun L_PAREN expresion R_PAREN .)
    L_LLAVE         reduce using rule 106 (h -> a PUNTO nativeFun L_PAREN expresion R_PAREN .)
    $end            reduce using rule 106 (h -> a PUNTO nativeFun L_PAREN expresion R_PAREN .)
    R_LLAVE         reduce using rule 106 (h -> a PUNTO nativeFun L_PAREN expresion R_PAREN .)
    R_CORCHETE      reduce using rule 106 (h -> a PUNTO nativeFun L_PAREN expresion R_PAREN .)
    COMA            reduce using rule 106 (h -> a PUNTO nativeFun L_PAREN expresion R_PAREN .)


state 217

    (55) if_pro -> IF L_PAREN a R_PAREN L_LLAVE instrucciones . R_LLAVE else_pro
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . console_pro sc
    (5) instruccion -> . declaration_instruction sc
    (6) instruccion -> . assig_pro sc
    (7) instruccion -> . interface_assign_pro sc
    (8) instruccion -> . if_pro sc
    (9) instruccion -> . while_pro sc
    (10) instruccion -> . for_pro sc
    (11) instruccion -> . for_each_pro sc
    (12) instruccion -> . interface_pro sc
    (13) instruccion -> . continue_pro sc
    (14) instruccion -> . break_pro sc
    (15) instruccion -> . return_pro sc
    (16) instruccion -> . function_pro sc
    (17) instruccion -> . call_function_pro sc
    (18) instruccion -> . sumadores sc
    (67) console_pro -> . CONSOLE PUNTO LOG L_PAREN expresion R_PAREN
    (41) declaration_instruction -> . LET declaracion_list
    (54) assig_pro -> . LITERAL IGUAL a
    (40) interface_assign_pro -> . a PUNTO LITERAL IGUAL a
    (55) if_pro -> . IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro
    (59) while_pro -> . WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE
    (60) for_pro -> . FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (61) for_pro -> . FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (64) for_each_pro -> . FOR L_PAREN for_each_dec R_PAREN L_LLAVE instrucciones R_LLAVE
    (35) interface_pro -> . INTERFACE LITERAL L_LLAVE interface_atributos R_LLAVE
    (31) continue_pro -> . CONTINUE
    (32) break_pro -> . BREAK
    (33) return_pro -> . RETURN
    (34) return_pro -> . RETURN a
    (21) function_pro -> . FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (22) function_pro -> . FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE
    (23) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (24) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (111) sumadores -> . LITERAL MAS MAS
    (112) sumadores -> . LITERAL MENOS MENOS
    (70) a -> . a OR b
    (71) a -> . b
    (72) b -> . b AND c
    (73) b -> . c
    (74) c -> . NOT d
    (75) c -> . d
    (76) d -> . d DISTINTO_QUE e
    (77) d -> . d MENOR_QUE e
    (78) d -> . d MENOR_IGUAL_QUE e
    (79) d -> . d MAYOR_QUE e
    (80) d -> . d MAYOR_IGUAL_QUE e
    (81) d -> . d TRIPLE_IGUAL e
    (82) d -> . e
    (83) e -> . e MAS f
    (84) e -> . e MENOS f
    (85) e -> . f
    (86) f -> . MENOS g
    (87) f -> . MAS g
    (88) f -> . g
    (89) g -> . g TIMES h
    (90) g -> . g DIVIDE h
    (91) g -> . g MOD h
    (92) g -> . g POTENCIA h
    (93) g -> . h
    (94) h -> . ENTERO
    (95) h -> . DECIMAL
    (96) h -> . CADENA
    (97) h -> . LITERAL
    (98) h -> . TRUE
    (99) h -> . FALSE
    (100) h -> . call_function_pro
    (101) h -> . array_pro
    (102) h -> . interface_assi
    (103) h -> . L_PAREN a R_PAREN
    (104) h -> . array_val_pro
    (105) h -> . a PUNTO LITERAL
    (106) h -> . a PUNTO nativeFun L_PAREN expresion R_PAREN
    (107) h -> . a PUNTO nativeFun L_PAREN R_PAREN
    (116) array_pro -> . L_CORCHETE values R_CORCHETE
    (113) interface_assi -> . L_LLAVE atributos_assi R_LLAVE
    (108) array_val_pro -> . LITERAL dimensions

    R_LLAVE         shift and go to state 232
    CONSOLE         shift and go to state 19
    LET             shift and go to state 21
    LITERAL         shift and go to state 22
    IF              shift and go to state 24
    WHILE           shift and go to state 26
    FOR             shift and go to state 27
    INTERFACE       shift and go to state 28
    CONTINUE        shift and go to state 29
    BREAK           shift and go to state 30
    RETURN          shift and go to state 31
    FUNCTION        shift and go to state 32
    NOT             shift and go to state 37
    MENOS           shift and go to state 34
    MAS             shift and go to state 33
    ENTERO          shift and go to state 43
    DECIMAL         shift and go to state 44
    CADENA          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    L_PAREN         shift and go to state 20
    L_CORCHETE      shift and go to state 51
    L_LLAVE         shift and go to state 25

    a                              shift and go to state 23
    instruccion                    shift and go to state 52
    console_pro                    shift and go to state 4
    declaration_instruction        shift and go to state 5
    assig_pro                      shift and go to state 6
    interface_assign_pro           shift and go to state 7
    if_pro                         shift and go to state 8
    while_pro                      shift and go to state 9
    for_pro                        shift and go to state 10
    for_each_pro                   shift and go to state 11
    interface_pro                  shift and go to state 12
    continue_pro                   shift and go to state 13
    break_pro                      shift and go to state 14
    return_pro                     shift and go to state 15
    function_pro                   shift and go to state 16
    call_function_pro              shift and go to state 17
    sumadores                      shift and go to state 18
    b                              shift and go to state 35
    c                              shift and go to state 36
    d                              shift and go to state 38
    e                              shift and go to state 39
    f                              shift and go to state 40
    g                              shift and go to state 41
    h                              shift and go to state 42
    array_pro                      shift and go to state 48
    interface_assi                 shift and go to state 49
    array_val_pro                  shift and go to state 50

state 218

    (114) atributos_assi -> atributos_assi COMA LITERAL COLON a .
    (70) a -> a . OR b
    (105) h -> a . PUNTO LITERAL
    (106) h -> a . PUNTO nativeFun L_PAREN expresion R_PAREN
    (107) h -> a . PUNTO nativeFun L_PAREN R_PAREN

    R_LLAVE         reduce using rule 114 (atributos_assi -> atributos_assi COMA LITERAL COLON a .)
    COMA            reduce using rule 114 (atributos_assi -> atributos_assi COMA LITERAL COLON a .)
    OR              shift and go to state 83
    PUNTO           shift and go to state 113


state 219

    (59) while_pro -> WHILE L_PAREN a R_PAREN L_LLAVE instrucciones . R_LLAVE
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . console_pro sc
    (5) instruccion -> . declaration_instruction sc
    (6) instruccion -> . assig_pro sc
    (7) instruccion -> . interface_assign_pro sc
    (8) instruccion -> . if_pro sc
    (9) instruccion -> . while_pro sc
    (10) instruccion -> . for_pro sc
    (11) instruccion -> . for_each_pro sc
    (12) instruccion -> . interface_pro sc
    (13) instruccion -> . continue_pro sc
    (14) instruccion -> . break_pro sc
    (15) instruccion -> . return_pro sc
    (16) instruccion -> . function_pro sc
    (17) instruccion -> . call_function_pro sc
    (18) instruccion -> . sumadores sc
    (67) console_pro -> . CONSOLE PUNTO LOG L_PAREN expresion R_PAREN
    (41) declaration_instruction -> . LET declaracion_list
    (54) assig_pro -> . LITERAL IGUAL a
    (40) interface_assign_pro -> . a PUNTO LITERAL IGUAL a
    (55) if_pro -> . IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro
    (59) while_pro -> . WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE
    (60) for_pro -> . FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (61) for_pro -> . FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (64) for_each_pro -> . FOR L_PAREN for_each_dec R_PAREN L_LLAVE instrucciones R_LLAVE
    (35) interface_pro -> . INTERFACE LITERAL L_LLAVE interface_atributos R_LLAVE
    (31) continue_pro -> . CONTINUE
    (32) break_pro -> . BREAK
    (33) return_pro -> . RETURN
    (34) return_pro -> . RETURN a
    (21) function_pro -> . FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (22) function_pro -> . FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE
    (23) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (24) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (111) sumadores -> . LITERAL MAS MAS
    (112) sumadores -> . LITERAL MENOS MENOS
    (70) a -> . a OR b
    (71) a -> . b
    (72) b -> . b AND c
    (73) b -> . c
    (74) c -> . NOT d
    (75) c -> . d
    (76) d -> . d DISTINTO_QUE e
    (77) d -> . d MENOR_QUE e
    (78) d -> . d MENOR_IGUAL_QUE e
    (79) d -> . d MAYOR_QUE e
    (80) d -> . d MAYOR_IGUAL_QUE e
    (81) d -> . d TRIPLE_IGUAL e
    (82) d -> . e
    (83) e -> . e MAS f
    (84) e -> . e MENOS f
    (85) e -> . f
    (86) f -> . MENOS g
    (87) f -> . MAS g
    (88) f -> . g
    (89) g -> . g TIMES h
    (90) g -> . g DIVIDE h
    (91) g -> . g MOD h
    (92) g -> . g POTENCIA h
    (93) g -> . h
    (94) h -> . ENTERO
    (95) h -> . DECIMAL
    (96) h -> . CADENA
    (97) h -> . LITERAL
    (98) h -> . TRUE
    (99) h -> . FALSE
    (100) h -> . call_function_pro
    (101) h -> . array_pro
    (102) h -> . interface_assi
    (103) h -> . L_PAREN a R_PAREN
    (104) h -> . array_val_pro
    (105) h -> . a PUNTO LITERAL
    (106) h -> . a PUNTO nativeFun L_PAREN expresion R_PAREN
    (107) h -> . a PUNTO nativeFun L_PAREN R_PAREN
    (116) array_pro -> . L_CORCHETE values R_CORCHETE
    (113) interface_assi -> . L_LLAVE atributos_assi R_LLAVE
    (108) array_val_pro -> . LITERAL dimensions

    R_LLAVE         shift and go to state 233
    CONSOLE         shift and go to state 19
    LET             shift and go to state 21
    LITERAL         shift and go to state 22
    IF              shift and go to state 24
    WHILE           shift and go to state 26
    FOR             shift and go to state 27
    INTERFACE       shift and go to state 28
    CONTINUE        shift and go to state 29
    BREAK           shift and go to state 30
    RETURN          shift and go to state 31
    FUNCTION        shift and go to state 32
    NOT             shift and go to state 37
    MENOS           shift and go to state 34
    MAS             shift and go to state 33
    ENTERO          shift and go to state 43
    DECIMAL         shift and go to state 44
    CADENA          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    L_PAREN         shift and go to state 20
    L_CORCHETE      shift and go to state 51
    L_LLAVE         shift and go to state 25

    a                              shift and go to state 23
    instruccion                    shift and go to state 52
    console_pro                    shift and go to state 4
    declaration_instruction        shift and go to state 5
    assig_pro                      shift and go to state 6
    interface_assign_pro           shift and go to state 7
    if_pro                         shift and go to state 8
    while_pro                      shift and go to state 9
    for_pro                        shift and go to state 10
    for_each_pro                   shift and go to state 11
    interface_pro                  shift and go to state 12
    continue_pro                   shift and go to state 13
    break_pro                      shift and go to state 14
    return_pro                     shift and go to state 15
    function_pro                   shift and go to state 16
    call_function_pro              shift and go to state 17
    sumadores                      shift and go to state 18
    b                              shift and go to state 35
    c                              shift and go to state 36
    d                              shift and go to state 38
    e                              shift and go to state 39
    f                              shift and go to state 40
    g                              shift and go to state 41
    h                              shift and go to state 42
    array_pro                      shift and go to state 48
    interface_assi                 shift and go to state 49
    array_val_pro                  shift and go to state 50

state 220

    (60) for_pro -> FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON . inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (62) inDec_pro -> . assig_pro
    (63) inDec_pro -> . sumadores
    (54) assig_pro -> . LITERAL IGUAL a
    (111) sumadores -> . LITERAL MAS MAS
    (112) sumadores -> . LITERAL MENOS MENOS

    LITERAL         shift and go to state 237

    inDec_pro                      shift and go to state 234
    assig_pro                      shift and go to state 235
    sumadores                      shift and go to state 236

state 221

    (61) for_pro -> FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON . inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (62) inDec_pro -> . assig_pro
    (63) inDec_pro -> . sumadores
    (54) assig_pro -> . LITERAL IGUAL a
    (111) sumadores -> . LITERAL MAS MAS
    (112) sumadores -> . LITERAL MENOS MENOS

    LITERAL         shift and go to state 237

    assig_pro                      shift and go to state 235
    inDec_pro                      shift and go to state 238
    sumadores                      shift and go to state 236

state 222

    (64) for_each_pro -> FOR L_PAREN for_each_dec R_PAREN L_LLAVE instrucciones . R_LLAVE
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . console_pro sc
    (5) instruccion -> . declaration_instruction sc
    (6) instruccion -> . assig_pro sc
    (7) instruccion -> . interface_assign_pro sc
    (8) instruccion -> . if_pro sc
    (9) instruccion -> . while_pro sc
    (10) instruccion -> . for_pro sc
    (11) instruccion -> . for_each_pro sc
    (12) instruccion -> . interface_pro sc
    (13) instruccion -> . continue_pro sc
    (14) instruccion -> . break_pro sc
    (15) instruccion -> . return_pro sc
    (16) instruccion -> . function_pro sc
    (17) instruccion -> . call_function_pro sc
    (18) instruccion -> . sumadores sc
    (67) console_pro -> . CONSOLE PUNTO LOG L_PAREN expresion R_PAREN
    (41) declaration_instruction -> . LET declaracion_list
    (54) assig_pro -> . LITERAL IGUAL a
    (40) interface_assign_pro -> . a PUNTO LITERAL IGUAL a
    (55) if_pro -> . IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro
    (59) while_pro -> . WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE
    (60) for_pro -> . FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (61) for_pro -> . FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (64) for_each_pro -> . FOR L_PAREN for_each_dec R_PAREN L_LLAVE instrucciones R_LLAVE
    (35) interface_pro -> . INTERFACE LITERAL L_LLAVE interface_atributos R_LLAVE
    (31) continue_pro -> . CONTINUE
    (32) break_pro -> . BREAK
    (33) return_pro -> . RETURN
    (34) return_pro -> . RETURN a
    (21) function_pro -> . FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (22) function_pro -> . FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE
    (23) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (24) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (111) sumadores -> . LITERAL MAS MAS
    (112) sumadores -> . LITERAL MENOS MENOS
    (70) a -> . a OR b
    (71) a -> . b
    (72) b -> . b AND c
    (73) b -> . c
    (74) c -> . NOT d
    (75) c -> . d
    (76) d -> . d DISTINTO_QUE e
    (77) d -> . d MENOR_QUE e
    (78) d -> . d MENOR_IGUAL_QUE e
    (79) d -> . d MAYOR_QUE e
    (80) d -> . d MAYOR_IGUAL_QUE e
    (81) d -> . d TRIPLE_IGUAL e
    (82) d -> . e
    (83) e -> . e MAS f
    (84) e -> . e MENOS f
    (85) e -> . f
    (86) f -> . MENOS g
    (87) f -> . MAS g
    (88) f -> . g
    (89) g -> . g TIMES h
    (90) g -> . g DIVIDE h
    (91) g -> . g MOD h
    (92) g -> . g POTENCIA h
    (93) g -> . h
    (94) h -> . ENTERO
    (95) h -> . DECIMAL
    (96) h -> . CADENA
    (97) h -> . LITERAL
    (98) h -> . TRUE
    (99) h -> . FALSE
    (100) h -> . call_function_pro
    (101) h -> . array_pro
    (102) h -> . interface_assi
    (103) h -> . L_PAREN a R_PAREN
    (104) h -> . array_val_pro
    (105) h -> . a PUNTO LITERAL
    (106) h -> . a PUNTO nativeFun L_PAREN expresion R_PAREN
    (107) h -> . a PUNTO nativeFun L_PAREN R_PAREN
    (116) array_pro -> . L_CORCHETE values R_CORCHETE
    (113) interface_assi -> . L_LLAVE atributos_assi R_LLAVE
    (108) array_val_pro -> . LITERAL dimensions

    R_LLAVE         shift and go to state 239
    CONSOLE         shift and go to state 19
    LET             shift and go to state 21
    LITERAL         shift and go to state 22
    IF              shift and go to state 24
    WHILE           shift and go to state 26
    FOR             shift and go to state 27
    INTERFACE       shift and go to state 28
    CONTINUE        shift and go to state 29
    BREAK           shift and go to state 30
    RETURN          shift and go to state 31
    FUNCTION        shift and go to state 32
    NOT             shift and go to state 37
    MENOS           shift and go to state 34
    MAS             shift and go to state 33
    ENTERO          shift and go to state 43
    DECIMAL         shift and go to state 44
    CADENA          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    L_PAREN         shift and go to state 20
    L_CORCHETE      shift and go to state 51
    L_LLAVE         shift and go to state 25

    instruccion                    shift and go to state 52
    console_pro                    shift and go to state 4
    declaration_instruction        shift and go to state 5
    assig_pro                      shift and go to state 6
    interface_assign_pro           shift and go to state 7
    if_pro                         shift and go to state 8
    while_pro                      shift and go to state 9
    for_pro                        shift and go to state 10
    for_each_pro                   shift and go to state 11
    interface_pro                  shift and go to state 12
    continue_pro                   shift and go to state 13
    break_pro                      shift and go to state 14
    return_pro                     shift and go to state 15
    function_pro                   shift and go to state 16
    call_function_pro              shift and go to state 17
    sumadores                      shift and go to state 18
    a                              shift and go to state 23
    b                              shift and go to state 35
    c                              shift and go to state 36
    d                              shift and go to state 38
    e                              shift and go to state 39
    f                              shift and go to state 40
    g                              shift and go to state 41
    h                              shift and go to state 42
    array_pro                      shift and go to state 48
    interface_assi                 shift and go to state 49
    array_val_pro                  shift and go to state 50

state 223

    (65) for_each_dec -> LET LITERAL OF a .
    (70) a -> a . OR b
    (105) h -> a . PUNTO LITERAL
    (106) h -> a . PUNTO nativeFun L_PAREN expresion R_PAREN
    (107) h -> a . PUNTO nativeFun L_PAREN R_PAREN

    R_PAREN         reduce using rule 65 (for_each_dec -> LET LITERAL OF a .)
    OR              shift and go to state 83
    PUNTO           shift and go to state 113


state 224

    (66) for_each_dec -> LET LITERAL COLON type . OF a
    (44) assignacion_instruction -> LITERAL COLON type . IGUAL a
    (45) assignacion_instruction -> LITERAL COLON type .

    OF              shift and go to state 240
    IGUAL           shift and go to state 193
    COMA            reduce using rule 45 (assignacion_instruction -> LITERAL COLON type .)
    SEMI_COLON      reduce using rule 45 (assignacion_instruction -> LITERAL COLON type .)


state 225

    (38) interface_atributo -> LITERAL COLON . type
    (48) type -> . NUMBER
    (49) type -> . STRING
    (50) type -> . BOOLEAN
    (51) type -> . ANY
    (52) type -> . LITERAL
    (53) type -> . NULL

    NUMBER          shift and go to state 166
    STRING          shift and go to state 167
    BOOLEAN         shift and go to state 168
    ANY             shift and go to state 169
    LITERAL         shift and go to state 164
    NULL            shift and go to state 170

    type                           shift and go to state 241

state 226

    (36) interface_atributos -> interface_atributos interface_atributo sc .

    R_LLAVE         reduce using rule 36 (interface_atributos -> interface_atributos interface_atributo sc .)
    LITERAL         reduce using rule 36 (interface_atributos -> interface_atributos interface_atributo sc .)


state 227

    (29) parameter_pro -> LITERAL COLON type .

    R_PAREN         reduce using rule 29 (parameter_pro -> LITERAL COLON type .)
    COMA            reduce using rule 29 (parameter_pro -> LITERAL COLON type .)


state 228

    (21) function_pro -> FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE . instrucciones R_LLAVE
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . console_pro sc
    (5) instruccion -> . declaration_instruction sc
    (6) instruccion -> . assig_pro sc
    (7) instruccion -> . interface_assign_pro sc
    (8) instruccion -> . if_pro sc
    (9) instruccion -> . while_pro sc
    (10) instruccion -> . for_pro sc
    (11) instruccion -> . for_each_pro sc
    (12) instruccion -> . interface_pro sc
    (13) instruccion -> . continue_pro sc
    (14) instruccion -> . break_pro sc
    (15) instruccion -> . return_pro sc
    (16) instruccion -> . function_pro sc
    (17) instruccion -> . call_function_pro sc
    (18) instruccion -> . sumadores sc
    (67) console_pro -> . CONSOLE PUNTO LOG L_PAREN expresion R_PAREN
    (41) declaration_instruction -> . LET declaracion_list
    (54) assig_pro -> . LITERAL IGUAL a
    (40) interface_assign_pro -> . a PUNTO LITERAL IGUAL a
    (55) if_pro -> . IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro
    (59) while_pro -> . WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE
    (60) for_pro -> . FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (61) for_pro -> . FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (64) for_each_pro -> . FOR L_PAREN for_each_dec R_PAREN L_LLAVE instrucciones R_LLAVE
    (35) interface_pro -> . INTERFACE LITERAL L_LLAVE interface_atributos R_LLAVE
    (31) continue_pro -> . CONTINUE
    (32) break_pro -> . BREAK
    (33) return_pro -> . RETURN
    (34) return_pro -> . RETURN a
    (21) function_pro -> . FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (22) function_pro -> . FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE
    (23) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (24) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (111) sumadores -> . LITERAL MAS MAS
    (112) sumadores -> . LITERAL MENOS MENOS
    (70) a -> . a OR b
    (71) a -> . b
    (72) b -> . b AND c
    (73) b -> . c
    (74) c -> . NOT d
    (75) c -> . d
    (76) d -> . d DISTINTO_QUE e
    (77) d -> . d MENOR_QUE e
    (78) d -> . d MENOR_IGUAL_QUE e
    (79) d -> . d MAYOR_QUE e
    (80) d -> . d MAYOR_IGUAL_QUE e
    (81) d -> . d TRIPLE_IGUAL e
    (82) d -> . e
    (83) e -> . e MAS f
    (84) e -> . e MENOS f
    (85) e -> . f
    (86) f -> . MENOS g
    (87) f -> . MAS g
    (88) f -> . g
    (89) g -> . g TIMES h
    (90) g -> . g DIVIDE h
    (91) g -> . g MOD h
    (92) g -> . g POTENCIA h
    (93) g -> . h
    (94) h -> . ENTERO
    (95) h -> . DECIMAL
    (96) h -> . CADENA
    (97) h -> . LITERAL
    (98) h -> . TRUE
    (99) h -> . FALSE
    (100) h -> . call_function_pro
    (101) h -> . array_pro
    (102) h -> . interface_assi
    (103) h -> . L_PAREN a R_PAREN
    (104) h -> . array_val_pro
    (105) h -> . a PUNTO LITERAL
    (106) h -> . a PUNTO nativeFun L_PAREN expresion R_PAREN
    (107) h -> . a PUNTO nativeFun L_PAREN R_PAREN
    (116) array_pro -> . L_CORCHETE values R_CORCHETE
    (113) interface_assi -> . L_LLAVE atributos_assi R_LLAVE
    (108) array_val_pro -> . LITERAL dimensions

    CONSOLE         shift and go to state 19
    LET             shift and go to state 21
    LITERAL         shift and go to state 22
    IF              shift and go to state 24
    WHILE           shift and go to state 26
    FOR             shift and go to state 27
    INTERFACE       shift and go to state 28
    CONTINUE        shift and go to state 29
    BREAK           shift and go to state 30
    RETURN          shift and go to state 31
    FUNCTION        shift and go to state 32
    NOT             shift and go to state 37
    MENOS           shift and go to state 34
    MAS             shift and go to state 33
    ENTERO          shift and go to state 43
    DECIMAL         shift and go to state 44
    CADENA          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    L_PAREN         shift and go to state 20
    L_CORCHETE      shift and go to state 51
    L_LLAVE         shift and go to state 25

    instrucciones                  shift and go to state 242
    instruccion                    shift and go to state 3
    console_pro                    shift and go to state 4
    declaration_instruction        shift and go to state 5
    assig_pro                      shift and go to state 6
    interface_assign_pro           shift and go to state 7
    if_pro                         shift and go to state 8
    while_pro                      shift and go to state 9
    for_pro                        shift and go to state 10
    for_each_pro                   shift and go to state 11
    interface_pro                  shift and go to state 12
    continue_pro                   shift and go to state 13
    break_pro                      shift and go to state 14
    return_pro                     shift and go to state 15
    function_pro                   shift and go to state 16
    call_function_pro              shift and go to state 17
    sumadores                      shift and go to state 18
    a                              shift and go to state 23
    b                              shift and go to state 35
    c                              shift and go to state 36
    d                              shift and go to state 38
    e                              shift and go to state 39
    f                              shift and go to state 40
    g                              shift and go to state 41
    h                              shift and go to state 42
    array_pro                      shift and go to state 48
    interface_assi                 shift and go to state 49
    array_val_pro                  shift and go to state 50

state 229

    (27) parameters_pro -> parameters_pro COMA parameter_pro .

    R_PAREN         reduce using rule 27 (parameters_pro -> parameters_pro COMA parameter_pro .)
    COMA            reduce using rule 27 (parameters_pro -> parameters_pro COMA parameter_pro .)


state 230

    (22) function_pro -> FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE instrucciones . R_LLAVE
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . console_pro sc
    (5) instruccion -> . declaration_instruction sc
    (6) instruccion -> . assig_pro sc
    (7) instruccion -> . interface_assign_pro sc
    (8) instruccion -> . if_pro sc
    (9) instruccion -> . while_pro sc
    (10) instruccion -> . for_pro sc
    (11) instruccion -> . for_each_pro sc
    (12) instruccion -> . interface_pro sc
    (13) instruccion -> . continue_pro sc
    (14) instruccion -> . break_pro sc
    (15) instruccion -> . return_pro sc
    (16) instruccion -> . function_pro sc
    (17) instruccion -> . call_function_pro sc
    (18) instruccion -> . sumadores sc
    (67) console_pro -> . CONSOLE PUNTO LOG L_PAREN expresion R_PAREN
    (41) declaration_instruction -> . LET declaracion_list
    (54) assig_pro -> . LITERAL IGUAL a
    (40) interface_assign_pro -> . a PUNTO LITERAL IGUAL a
    (55) if_pro -> . IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro
    (59) while_pro -> . WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE
    (60) for_pro -> . FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (61) for_pro -> . FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (64) for_each_pro -> . FOR L_PAREN for_each_dec R_PAREN L_LLAVE instrucciones R_LLAVE
    (35) interface_pro -> . INTERFACE LITERAL L_LLAVE interface_atributos R_LLAVE
    (31) continue_pro -> . CONTINUE
    (32) break_pro -> . BREAK
    (33) return_pro -> . RETURN
    (34) return_pro -> . RETURN a
    (21) function_pro -> . FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (22) function_pro -> . FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE
    (23) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (24) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (111) sumadores -> . LITERAL MAS MAS
    (112) sumadores -> . LITERAL MENOS MENOS
    (70) a -> . a OR b
    (71) a -> . b
    (72) b -> . b AND c
    (73) b -> . c
    (74) c -> . NOT d
    (75) c -> . d
    (76) d -> . d DISTINTO_QUE e
    (77) d -> . d MENOR_QUE e
    (78) d -> . d MENOR_IGUAL_QUE e
    (79) d -> . d MAYOR_QUE e
    (80) d -> . d MAYOR_IGUAL_QUE e
    (81) d -> . d TRIPLE_IGUAL e
    (82) d -> . e
    (83) e -> . e MAS f
    (84) e -> . e MENOS f
    (85) e -> . f
    (86) f -> . MENOS g
    (87) f -> . MAS g
    (88) f -> . g
    (89) g -> . g TIMES h
    (90) g -> . g DIVIDE h
    (91) g -> . g MOD h
    (92) g -> . g POTENCIA h
    (93) g -> . h
    (94) h -> . ENTERO
    (95) h -> . DECIMAL
    (96) h -> . CADENA
    (97) h -> . LITERAL
    (98) h -> . TRUE
    (99) h -> . FALSE
    (100) h -> . call_function_pro
    (101) h -> . array_pro
    (102) h -> . interface_assi
    (103) h -> . L_PAREN a R_PAREN
    (104) h -> . array_val_pro
    (105) h -> . a PUNTO LITERAL
    (106) h -> . a PUNTO nativeFun L_PAREN expresion R_PAREN
    (107) h -> . a PUNTO nativeFun L_PAREN R_PAREN
    (116) array_pro -> . L_CORCHETE values R_CORCHETE
    (113) interface_assi -> . L_LLAVE atributos_assi R_LLAVE
    (108) array_val_pro -> . LITERAL dimensions

    R_LLAVE         shift and go to state 243
    CONSOLE         shift and go to state 19
    LET             shift and go to state 21
    LITERAL         shift and go to state 22
    IF              shift and go to state 24
    WHILE           shift and go to state 26
    FOR             shift and go to state 27
    INTERFACE       shift and go to state 28
    CONTINUE        shift and go to state 29
    BREAK           shift and go to state 30
    RETURN          shift and go to state 31
    FUNCTION        shift and go to state 32
    NOT             shift and go to state 37
    MENOS           shift and go to state 34
    MAS             shift and go to state 33
    ENTERO          shift and go to state 43
    DECIMAL         shift and go to state 44
    CADENA          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    L_PAREN         shift and go to state 20
    L_CORCHETE      shift and go to state 51
    L_LLAVE         shift and go to state 25

    instruccion                    shift and go to state 52
    console_pro                    shift and go to state 4
    declaration_instruction        shift and go to state 5
    assig_pro                      shift and go to state 6
    interface_assign_pro           shift and go to state 7
    if_pro                         shift and go to state 8
    while_pro                      shift and go to state 9
    for_pro                        shift and go to state 10
    for_each_pro                   shift and go to state 11
    interface_pro                  shift and go to state 12
    continue_pro                   shift and go to state 13
    break_pro                      shift and go to state 14
    return_pro                     shift and go to state 15
    function_pro                   shift and go to state 16
    call_function_pro              shift and go to state 17
    sumadores                      shift and go to state 18
    a                              shift and go to state 23
    b                              shift and go to state 35
    c                              shift and go to state 36
    d                              shift and go to state 38
    e                              shift and go to state 39
    f                              shift and go to state 40
    g                              shift and go to state 41
    h                              shift and go to state 42
    array_pro                      shift and go to state 48
    interface_assi                 shift and go to state 49
    array_val_pro                  shift and go to state 50

state 231

    (68) expresion -> expresion COMA a .
    (70) a -> a . OR b
    (105) h -> a . PUNTO LITERAL
    (106) h -> a . PUNTO nativeFun L_PAREN expresion R_PAREN
    (107) h -> a . PUNTO nativeFun L_PAREN R_PAREN

    R_PAREN         reduce using rule 68 (expresion -> expresion COMA a .)
    COMA            reduce using rule 68 (expresion -> expresion COMA a .)
    OR              shift and go to state 83
    PUNTO           shift and go to state 113


state 232

    (55) if_pro -> IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE . else_pro
    (56) else_pro -> . ELSE IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro
    (57) else_pro -> . ELSE L_LLAVE instrucciones R_LLAVE
    (58) else_pro -> .

    ELSE            shift and go to state 245
    SEMI_COLON      reduce using rule 58 (else_pro -> .)
    CONSOLE         reduce using rule 58 (else_pro -> .)
    LET             reduce using rule 58 (else_pro -> .)
    LITERAL         reduce using rule 58 (else_pro -> .)
    IF              reduce using rule 58 (else_pro -> .)
    WHILE           reduce using rule 58 (else_pro -> .)
    FOR             reduce using rule 58 (else_pro -> .)
    INTERFACE       reduce using rule 58 (else_pro -> .)
    CONTINUE        reduce using rule 58 (else_pro -> .)
    BREAK           reduce using rule 58 (else_pro -> .)
    RETURN          reduce using rule 58 (else_pro -> .)
    FUNCTION        reduce using rule 58 (else_pro -> .)
    NOT             reduce using rule 58 (else_pro -> .)
    MENOS           reduce using rule 58 (else_pro -> .)
    MAS             reduce using rule 58 (else_pro -> .)
    ENTERO          reduce using rule 58 (else_pro -> .)
    DECIMAL         reduce using rule 58 (else_pro -> .)
    CADENA          reduce using rule 58 (else_pro -> .)
    TRUE            reduce using rule 58 (else_pro -> .)
    FALSE           reduce using rule 58 (else_pro -> .)
    L_PAREN         reduce using rule 58 (else_pro -> .)
    L_CORCHETE      reduce using rule 58 (else_pro -> .)
    L_LLAVE         reduce using rule 58 (else_pro -> .)
    $end            reduce using rule 58 (else_pro -> .)
    R_LLAVE         reduce using rule 58 (else_pro -> .)

    else_pro                       shift and go to state 244

state 233

    (59) while_pro -> WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE .

    SEMI_COLON      reduce using rule 59 (while_pro -> WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE .)
    CONSOLE         reduce using rule 59 (while_pro -> WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE .)
    LET             reduce using rule 59 (while_pro -> WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE .)
    LITERAL         reduce using rule 59 (while_pro -> WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE .)
    IF              reduce using rule 59 (while_pro -> WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE .)
    WHILE           reduce using rule 59 (while_pro -> WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE .)
    FOR             reduce using rule 59 (while_pro -> WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE .)
    INTERFACE       reduce using rule 59 (while_pro -> WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE .)
    CONTINUE        reduce using rule 59 (while_pro -> WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE .)
    BREAK           reduce using rule 59 (while_pro -> WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE .)
    RETURN          reduce using rule 59 (while_pro -> WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE .)
    FUNCTION        reduce using rule 59 (while_pro -> WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE .)
    NOT             reduce using rule 59 (while_pro -> WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE .)
    MENOS           reduce using rule 59 (while_pro -> WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE .)
    MAS             reduce using rule 59 (while_pro -> WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE .)
    ENTERO          reduce using rule 59 (while_pro -> WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE .)
    DECIMAL         reduce using rule 59 (while_pro -> WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE .)
    CADENA          reduce using rule 59 (while_pro -> WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE .)
    TRUE            reduce using rule 59 (while_pro -> WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE .)
    FALSE           reduce using rule 59 (while_pro -> WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE .)
    L_PAREN         reduce using rule 59 (while_pro -> WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE .)
    L_CORCHETE      reduce using rule 59 (while_pro -> WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE .)
    L_LLAVE         reduce using rule 59 (while_pro -> WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE .)
    $end            reduce using rule 59 (while_pro -> WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE .)
    R_LLAVE         reduce using rule 59 (while_pro -> WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE .)


state 234

    (60) for_pro -> FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON inDec_pro . R_PAREN L_LLAVE instrucciones R_LLAVE

    R_PAREN         shift and go to state 246


state 235

    (62) inDec_pro -> assig_pro .

    R_PAREN         reduce using rule 62 (inDec_pro -> assig_pro .)


state 236

    (63) inDec_pro -> sumadores .

    R_PAREN         reduce using rule 63 (inDec_pro -> sumadores .)


state 237

    (54) assig_pro -> LITERAL . IGUAL a
    (111) sumadores -> LITERAL . MAS MAS
    (112) sumadores -> LITERAL . MENOS MENOS

    IGUAL           shift and go to state 76
    MAS             shift and go to state 78
    MENOS           shift and go to state 79


state 238

    (61) for_pro -> FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON inDec_pro . R_PAREN L_LLAVE instrucciones R_LLAVE

    R_PAREN         shift and go to state 247


state 239

    (64) for_each_pro -> FOR L_PAREN for_each_dec R_PAREN L_LLAVE instrucciones R_LLAVE .

    SEMI_COLON      reduce using rule 64 (for_each_pro -> FOR L_PAREN for_each_dec R_PAREN L_LLAVE instrucciones R_LLAVE .)
    CONSOLE         reduce using rule 64 (for_each_pro -> FOR L_PAREN for_each_dec R_PAREN L_LLAVE instrucciones R_LLAVE .)
    LET             reduce using rule 64 (for_each_pro -> FOR L_PAREN for_each_dec R_PAREN L_LLAVE instrucciones R_LLAVE .)
    LITERAL         reduce using rule 64 (for_each_pro -> FOR L_PAREN for_each_dec R_PAREN L_LLAVE instrucciones R_LLAVE .)
    IF              reduce using rule 64 (for_each_pro -> FOR L_PAREN for_each_dec R_PAREN L_LLAVE instrucciones R_LLAVE .)
    WHILE           reduce using rule 64 (for_each_pro -> FOR L_PAREN for_each_dec R_PAREN L_LLAVE instrucciones R_LLAVE .)
    FOR             reduce using rule 64 (for_each_pro -> FOR L_PAREN for_each_dec R_PAREN L_LLAVE instrucciones R_LLAVE .)
    INTERFACE       reduce using rule 64 (for_each_pro -> FOR L_PAREN for_each_dec R_PAREN L_LLAVE instrucciones R_LLAVE .)
    CONTINUE        reduce using rule 64 (for_each_pro -> FOR L_PAREN for_each_dec R_PAREN L_LLAVE instrucciones R_LLAVE .)
    BREAK           reduce using rule 64 (for_each_pro -> FOR L_PAREN for_each_dec R_PAREN L_LLAVE instrucciones R_LLAVE .)
    RETURN          reduce using rule 64 (for_each_pro -> FOR L_PAREN for_each_dec R_PAREN L_LLAVE instrucciones R_LLAVE .)
    FUNCTION        reduce using rule 64 (for_each_pro -> FOR L_PAREN for_each_dec R_PAREN L_LLAVE instrucciones R_LLAVE .)
    NOT             reduce using rule 64 (for_each_pro -> FOR L_PAREN for_each_dec R_PAREN L_LLAVE instrucciones R_LLAVE .)
    MENOS           reduce using rule 64 (for_each_pro -> FOR L_PAREN for_each_dec R_PAREN L_LLAVE instrucciones R_LLAVE .)
    MAS             reduce using rule 64 (for_each_pro -> FOR L_PAREN for_each_dec R_PAREN L_LLAVE instrucciones R_LLAVE .)
    ENTERO          reduce using rule 64 (for_each_pro -> FOR L_PAREN for_each_dec R_PAREN L_LLAVE instrucciones R_LLAVE .)
    DECIMAL         reduce using rule 64 (for_each_pro -> FOR L_PAREN for_each_dec R_PAREN L_LLAVE instrucciones R_LLAVE .)
    CADENA          reduce using rule 64 (for_each_pro -> FOR L_PAREN for_each_dec R_PAREN L_LLAVE instrucciones R_LLAVE .)
    TRUE            reduce using rule 64 (for_each_pro -> FOR L_PAREN for_each_dec R_PAREN L_LLAVE instrucciones R_LLAVE .)
    FALSE           reduce using rule 64 (for_each_pro -> FOR L_PAREN for_each_dec R_PAREN L_LLAVE instrucciones R_LLAVE .)
    L_PAREN         reduce using rule 64 (for_each_pro -> FOR L_PAREN for_each_dec R_PAREN L_LLAVE instrucciones R_LLAVE .)
    L_CORCHETE      reduce using rule 64 (for_each_pro -> FOR L_PAREN for_each_dec R_PAREN L_LLAVE instrucciones R_LLAVE .)
    L_LLAVE         reduce using rule 64 (for_each_pro -> FOR L_PAREN for_each_dec R_PAREN L_LLAVE instrucciones R_LLAVE .)
    $end            reduce using rule 64 (for_each_pro -> FOR L_PAREN for_each_dec R_PAREN L_LLAVE instrucciones R_LLAVE .)
    R_LLAVE         reduce using rule 64 (for_each_pro -> FOR L_PAREN for_each_dec R_PAREN L_LLAVE instrucciones R_LLAVE .)


state 240

    (66) for_each_dec -> LET LITERAL COLON type OF . a
    (70) a -> . a OR b
    (71) a -> . b
    (72) b -> . b AND c
    (73) b -> . c
    (74) c -> . NOT d
    (75) c -> . d
    (76) d -> . d DISTINTO_QUE e
    (77) d -> . d MENOR_QUE e
    (78) d -> . d MENOR_IGUAL_QUE e
    (79) d -> . d MAYOR_QUE e
    (80) d -> . d MAYOR_IGUAL_QUE e
    (81) d -> . d TRIPLE_IGUAL e
    (82) d -> . e
    (83) e -> . e MAS f
    (84) e -> . e MENOS f
    (85) e -> . f
    (86) f -> . MENOS g
    (87) f -> . MAS g
    (88) f -> . g
    (89) g -> . g TIMES h
    (90) g -> . g DIVIDE h
    (91) g -> . g MOD h
    (92) g -> . g POTENCIA h
    (93) g -> . h
    (94) h -> . ENTERO
    (95) h -> . DECIMAL
    (96) h -> . CADENA
    (97) h -> . LITERAL
    (98) h -> . TRUE
    (99) h -> . FALSE
    (100) h -> . call_function_pro
    (101) h -> . array_pro
    (102) h -> . interface_assi
    (103) h -> . L_PAREN a R_PAREN
    (104) h -> . array_val_pro
    (105) h -> . a PUNTO LITERAL
    (106) h -> . a PUNTO nativeFun L_PAREN expresion R_PAREN
    (107) h -> . a PUNTO nativeFun L_PAREN R_PAREN
    (23) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (24) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (116) array_pro -> . L_CORCHETE values R_CORCHETE
    (113) interface_assi -> . L_LLAVE atributos_assi R_LLAVE
    (108) array_val_pro -> . LITERAL dimensions

    NOT             shift and go to state 37
    MENOS           shift and go to state 34
    MAS             shift and go to state 33
    ENTERO          shift and go to state 43
    DECIMAL         shift and go to state 44
    CADENA          shift and go to state 45
    LITERAL         shift and go to state 71
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    L_PAREN         shift and go to state 20
    L_CORCHETE      shift and go to state 51
    L_LLAVE         shift and go to state 25

    a                              shift and go to state 248
    b                              shift and go to state 35
    c                              shift and go to state 36
    d                              shift and go to state 38
    e                              shift and go to state 39
    f                              shift and go to state 40
    g                              shift and go to state 41
    h                              shift and go to state 42
    call_function_pro              shift and go to state 72
    array_pro                      shift and go to state 48
    interface_assi                 shift and go to state 49
    array_val_pro                  shift and go to state 50

state 241

    (38) interface_atributo -> LITERAL COLON type .

    SEMI_COLON      reduce using rule 38 (interface_atributo -> LITERAL COLON type .)
    R_LLAVE         reduce using rule 38 (interface_atributo -> LITERAL COLON type .)
    LITERAL         reduce using rule 38 (interface_atributo -> LITERAL COLON type .)


state 242

    (21) function_pro -> FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones . R_LLAVE
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . console_pro sc
    (5) instruccion -> . declaration_instruction sc
    (6) instruccion -> . assig_pro sc
    (7) instruccion -> . interface_assign_pro sc
    (8) instruccion -> . if_pro sc
    (9) instruccion -> . while_pro sc
    (10) instruccion -> . for_pro sc
    (11) instruccion -> . for_each_pro sc
    (12) instruccion -> . interface_pro sc
    (13) instruccion -> . continue_pro sc
    (14) instruccion -> . break_pro sc
    (15) instruccion -> . return_pro sc
    (16) instruccion -> . function_pro sc
    (17) instruccion -> . call_function_pro sc
    (18) instruccion -> . sumadores sc
    (67) console_pro -> . CONSOLE PUNTO LOG L_PAREN expresion R_PAREN
    (41) declaration_instruction -> . LET declaracion_list
    (54) assig_pro -> . LITERAL IGUAL a
    (40) interface_assign_pro -> . a PUNTO LITERAL IGUAL a
    (55) if_pro -> . IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro
    (59) while_pro -> . WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE
    (60) for_pro -> . FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (61) for_pro -> . FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (64) for_each_pro -> . FOR L_PAREN for_each_dec R_PAREN L_LLAVE instrucciones R_LLAVE
    (35) interface_pro -> . INTERFACE LITERAL L_LLAVE interface_atributos R_LLAVE
    (31) continue_pro -> . CONTINUE
    (32) break_pro -> . BREAK
    (33) return_pro -> . RETURN
    (34) return_pro -> . RETURN a
    (21) function_pro -> . FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (22) function_pro -> . FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE
    (23) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (24) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (111) sumadores -> . LITERAL MAS MAS
    (112) sumadores -> . LITERAL MENOS MENOS
    (70) a -> . a OR b
    (71) a -> . b
    (72) b -> . b AND c
    (73) b -> . c
    (74) c -> . NOT d
    (75) c -> . d
    (76) d -> . d DISTINTO_QUE e
    (77) d -> . d MENOR_QUE e
    (78) d -> . d MENOR_IGUAL_QUE e
    (79) d -> . d MAYOR_QUE e
    (80) d -> . d MAYOR_IGUAL_QUE e
    (81) d -> . d TRIPLE_IGUAL e
    (82) d -> . e
    (83) e -> . e MAS f
    (84) e -> . e MENOS f
    (85) e -> . f
    (86) f -> . MENOS g
    (87) f -> . MAS g
    (88) f -> . g
    (89) g -> . g TIMES h
    (90) g -> . g DIVIDE h
    (91) g -> . g MOD h
    (92) g -> . g POTENCIA h
    (93) g -> . h
    (94) h -> . ENTERO
    (95) h -> . DECIMAL
    (96) h -> . CADENA
    (97) h -> . LITERAL
    (98) h -> . TRUE
    (99) h -> . FALSE
    (100) h -> . call_function_pro
    (101) h -> . array_pro
    (102) h -> . interface_assi
    (103) h -> . L_PAREN a R_PAREN
    (104) h -> . array_val_pro
    (105) h -> . a PUNTO LITERAL
    (106) h -> . a PUNTO nativeFun L_PAREN expresion R_PAREN
    (107) h -> . a PUNTO nativeFun L_PAREN R_PAREN
    (116) array_pro -> . L_CORCHETE values R_CORCHETE
    (113) interface_assi -> . L_LLAVE atributos_assi R_LLAVE
    (108) array_val_pro -> . LITERAL dimensions

    R_LLAVE         shift and go to state 249
    CONSOLE         shift and go to state 19
    LET             shift and go to state 21
    LITERAL         shift and go to state 22
    IF              shift and go to state 24
    WHILE           shift and go to state 26
    FOR             shift and go to state 27
    INTERFACE       shift and go to state 28
    CONTINUE        shift and go to state 29
    BREAK           shift and go to state 30
    RETURN          shift and go to state 31
    FUNCTION        shift and go to state 32
    NOT             shift and go to state 37
    MENOS           shift and go to state 34
    MAS             shift and go to state 33
    ENTERO          shift and go to state 43
    DECIMAL         shift and go to state 44
    CADENA          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    L_PAREN         shift and go to state 20
    L_CORCHETE      shift and go to state 51
    L_LLAVE         shift and go to state 25

    instruccion                    shift and go to state 52
    console_pro                    shift and go to state 4
    declaration_instruction        shift and go to state 5
    assig_pro                      shift and go to state 6
    interface_assign_pro           shift and go to state 7
    if_pro                         shift and go to state 8
    while_pro                      shift and go to state 9
    for_pro                        shift and go to state 10
    for_each_pro                   shift and go to state 11
    interface_pro                  shift and go to state 12
    continue_pro                   shift and go to state 13
    break_pro                      shift and go to state 14
    return_pro                     shift and go to state 15
    function_pro                   shift and go to state 16
    call_function_pro              shift and go to state 17
    sumadores                      shift and go to state 18
    a                              shift and go to state 23
    b                              shift and go to state 35
    c                              shift and go to state 36
    d                              shift and go to state 38
    e                              shift and go to state 39
    f                              shift and go to state 40
    g                              shift and go to state 41
    h                              shift and go to state 42
    array_pro                      shift and go to state 48
    interface_assi                 shift and go to state 49
    array_val_pro                  shift and go to state 50

state 243

    (22) function_pro -> FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE .

    SEMI_COLON      reduce using rule 22 (function_pro -> FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE .)
    CONSOLE         reduce using rule 22 (function_pro -> FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE .)
    LET             reduce using rule 22 (function_pro -> FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE .)
    LITERAL         reduce using rule 22 (function_pro -> FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE .)
    IF              reduce using rule 22 (function_pro -> FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE .)
    WHILE           reduce using rule 22 (function_pro -> FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE .)
    FOR             reduce using rule 22 (function_pro -> FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE .)
    INTERFACE       reduce using rule 22 (function_pro -> FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE .)
    CONTINUE        reduce using rule 22 (function_pro -> FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE .)
    BREAK           reduce using rule 22 (function_pro -> FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE .)
    RETURN          reduce using rule 22 (function_pro -> FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE .)
    FUNCTION        reduce using rule 22 (function_pro -> FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE .)
    NOT             reduce using rule 22 (function_pro -> FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE .)
    MENOS           reduce using rule 22 (function_pro -> FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE .)
    MAS             reduce using rule 22 (function_pro -> FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE .)
    ENTERO          reduce using rule 22 (function_pro -> FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE .)
    DECIMAL         reduce using rule 22 (function_pro -> FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE .)
    CADENA          reduce using rule 22 (function_pro -> FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE .)
    TRUE            reduce using rule 22 (function_pro -> FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE .)
    FALSE           reduce using rule 22 (function_pro -> FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE .)
    L_PAREN         reduce using rule 22 (function_pro -> FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE .)
    L_CORCHETE      reduce using rule 22 (function_pro -> FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE .)
    L_LLAVE         reduce using rule 22 (function_pro -> FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE .)
    $end            reduce using rule 22 (function_pro -> FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE .)
    R_LLAVE         reduce using rule 22 (function_pro -> FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE .)


state 244

    (55) if_pro -> IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .

    SEMI_COLON      reduce using rule 55 (if_pro -> IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    CONSOLE         reduce using rule 55 (if_pro -> IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    LET             reduce using rule 55 (if_pro -> IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    LITERAL         reduce using rule 55 (if_pro -> IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    IF              reduce using rule 55 (if_pro -> IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    WHILE           reduce using rule 55 (if_pro -> IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    FOR             reduce using rule 55 (if_pro -> IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    INTERFACE       reduce using rule 55 (if_pro -> IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    CONTINUE        reduce using rule 55 (if_pro -> IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    BREAK           reduce using rule 55 (if_pro -> IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    RETURN          reduce using rule 55 (if_pro -> IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    FUNCTION        reduce using rule 55 (if_pro -> IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    NOT             reduce using rule 55 (if_pro -> IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    MENOS           reduce using rule 55 (if_pro -> IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    MAS             reduce using rule 55 (if_pro -> IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    ENTERO          reduce using rule 55 (if_pro -> IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    DECIMAL         reduce using rule 55 (if_pro -> IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    CADENA          reduce using rule 55 (if_pro -> IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    TRUE            reduce using rule 55 (if_pro -> IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    FALSE           reduce using rule 55 (if_pro -> IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    L_PAREN         reduce using rule 55 (if_pro -> IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    L_CORCHETE      reduce using rule 55 (if_pro -> IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    L_LLAVE         reduce using rule 55 (if_pro -> IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    $end            reduce using rule 55 (if_pro -> IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    R_LLAVE         reduce using rule 55 (if_pro -> IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)


state 245

    (56) else_pro -> ELSE . IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro
    (57) else_pro -> ELSE . L_LLAVE instrucciones R_LLAVE

    IF              shift and go to state 250
    L_LLAVE         shift and go to state 251


state 246

    (60) for_pro -> FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON inDec_pro R_PAREN . L_LLAVE instrucciones R_LLAVE

    L_LLAVE         shift and go to state 252


state 247

    (61) for_pro -> FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON inDec_pro R_PAREN . L_LLAVE instrucciones R_LLAVE

    L_LLAVE         shift and go to state 253


state 248

    (66) for_each_dec -> LET LITERAL COLON type OF a .
    (70) a -> a . OR b
    (105) h -> a . PUNTO LITERAL
    (106) h -> a . PUNTO nativeFun L_PAREN expresion R_PAREN
    (107) h -> a . PUNTO nativeFun L_PAREN R_PAREN

    R_PAREN         reduce using rule 66 (for_each_dec -> LET LITERAL COLON type OF a .)
    OR              shift and go to state 83
    PUNTO           shift and go to state 113


state 249

    (21) function_pro -> FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE .

    SEMI_COLON      reduce using rule 21 (function_pro -> FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    CONSOLE         reduce using rule 21 (function_pro -> FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    LET             reduce using rule 21 (function_pro -> FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    LITERAL         reduce using rule 21 (function_pro -> FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    IF              reduce using rule 21 (function_pro -> FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    WHILE           reduce using rule 21 (function_pro -> FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    FOR             reduce using rule 21 (function_pro -> FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    INTERFACE       reduce using rule 21 (function_pro -> FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    CONTINUE        reduce using rule 21 (function_pro -> FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    BREAK           reduce using rule 21 (function_pro -> FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    RETURN          reduce using rule 21 (function_pro -> FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    FUNCTION        reduce using rule 21 (function_pro -> FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    NOT             reduce using rule 21 (function_pro -> FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    MENOS           reduce using rule 21 (function_pro -> FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    MAS             reduce using rule 21 (function_pro -> FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    ENTERO          reduce using rule 21 (function_pro -> FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    DECIMAL         reduce using rule 21 (function_pro -> FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    CADENA          reduce using rule 21 (function_pro -> FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    TRUE            reduce using rule 21 (function_pro -> FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    FALSE           reduce using rule 21 (function_pro -> FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    L_PAREN         reduce using rule 21 (function_pro -> FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    L_CORCHETE      reduce using rule 21 (function_pro -> FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    L_LLAVE         reduce using rule 21 (function_pro -> FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    $end            reduce using rule 21 (function_pro -> FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    R_LLAVE         reduce using rule 21 (function_pro -> FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)


state 250

    (56) else_pro -> ELSE IF . L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro

    L_PAREN         shift and go to state 254


state 251

    (57) else_pro -> ELSE L_LLAVE . instrucciones R_LLAVE
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . console_pro sc
    (5) instruccion -> . declaration_instruction sc
    (6) instruccion -> . assig_pro sc
    (7) instruccion -> . interface_assign_pro sc
    (8) instruccion -> . if_pro sc
    (9) instruccion -> . while_pro sc
    (10) instruccion -> . for_pro sc
    (11) instruccion -> . for_each_pro sc
    (12) instruccion -> . interface_pro sc
    (13) instruccion -> . continue_pro sc
    (14) instruccion -> . break_pro sc
    (15) instruccion -> . return_pro sc
    (16) instruccion -> . function_pro sc
    (17) instruccion -> . call_function_pro sc
    (18) instruccion -> . sumadores sc
    (67) console_pro -> . CONSOLE PUNTO LOG L_PAREN expresion R_PAREN
    (41) declaration_instruction -> . LET declaracion_list
    (54) assig_pro -> . LITERAL IGUAL a
    (40) interface_assign_pro -> . a PUNTO LITERAL IGUAL a
    (55) if_pro -> . IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro
    (59) while_pro -> . WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE
    (60) for_pro -> . FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (61) for_pro -> . FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (64) for_each_pro -> . FOR L_PAREN for_each_dec R_PAREN L_LLAVE instrucciones R_LLAVE
    (35) interface_pro -> . INTERFACE LITERAL L_LLAVE interface_atributos R_LLAVE
    (31) continue_pro -> . CONTINUE
    (32) break_pro -> . BREAK
    (33) return_pro -> . RETURN
    (34) return_pro -> . RETURN a
    (21) function_pro -> . FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (22) function_pro -> . FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE
    (23) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (24) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (111) sumadores -> . LITERAL MAS MAS
    (112) sumadores -> . LITERAL MENOS MENOS
    (70) a -> . a OR b
    (71) a -> . b
    (72) b -> . b AND c
    (73) b -> . c
    (74) c -> . NOT d
    (75) c -> . d
    (76) d -> . d DISTINTO_QUE e
    (77) d -> . d MENOR_QUE e
    (78) d -> . d MENOR_IGUAL_QUE e
    (79) d -> . d MAYOR_QUE e
    (80) d -> . d MAYOR_IGUAL_QUE e
    (81) d -> . d TRIPLE_IGUAL e
    (82) d -> . e
    (83) e -> . e MAS f
    (84) e -> . e MENOS f
    (85) e -> . f
    (86) f -> . MENOS g
    (87) f -> . MAS g
    (88) f -> . g
    (89) g -> . g TIMES h
    (90) g -> . g DIVIDE h
    (91) g -> . g MOD h
    (92) g -> . g POTENCIA h
    (93) g -> . h
    (94) h -> . ENTERO
    (95) h -> . DECIMAL
    (96) h -> . CADENA
    (97) h -> . LITERAL
    (98) h -> . TRUE
    (99) h -> . FALSE
    (100) h -> . call_function_pro
    (101) h -> . array_pro
    (102) h -> . interface_assi
    (103) h -> . L_PAREN a R_PAREN
    (104) h -> . array_val_pro
    (105) h -> . a PUNTO LITERAL
    (106) h -> . a PUNTO nativeFun L_PAREN expresion R_PAREN
    (107) h -> . a PUNTO nativeFun L_PAREN R_PAREN
    (116) array_pro -> . L_CORCHETE values R_CORCHETE
    (113) interface_assi -> . L_LLAVE atributos_assi R_LLAVE
    (108) array_val_pro -> . LITERAL dimensions

    CONSOLE         shift and go to state 19
    LET             shift and go to state 21
    LITERAL         shift and go to state 22
    IF              shift and go to state 24
    WHILE           shift and go to state 26
    FOR             shift and go to state 27
    INTERFACE       shift and go to state 28
    CONTINUE        shift and go to state 29
    BREAK           shift and go to state 30
    RETURN          shift and go to state 31
    FUNCTION        shift and go to state 32
    NOT             shift and go to state 37
    MENOS           shift and go to state 34
    MAS             shift and go to state 33
    ENTERO          shift and go to state 43
    DECIMAL         shift and go to state 44
    CADENA          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    L_PAREN         shift and go to state 20
    L_CORCHETE      shift and go to state 51
    L_LLAVE         shift and go to state 25

    instrucciones                  shift and go to state 255
    instruccion                    shift and go to state 3
    console_pro                    shift and go to state 4
    declaration_instruction        shift and go to state 5
    assig_pro                      shift and go to state 6
    interface_assign_pro           shift and go to state 7
    if_pro                         shift and go to state 8
    while_pro                      shift and go to state 9
    for_pro                        shift and go to state 10
    for_each_pro                   shift and go to state 11
    interface_pro                  shift and go to state 12
    continue_pro                   shift and go to state 13
    break_pro                      shift and go to state 14
    return_pro                     shift and go to state 15
    function_pro                   shift and go to state 16
    call_function_pro              shift and go to state 17
    sumadores                      shift and go to state 18
    a                              shift and go to state 23
    b                              shift and go to state 35
    c                              shift and go to state 36
    d                              shift and go to state 38
    e                              shift and go to state 39
    f                              shift and go to state 40
    g                              shift and go to state 41
    h                              shift and go to state 42
    array_pro                      shift and go to state 48
    interface_assi                 shift and go to state 49
    array_val_pro                  shift and go to state 50

state 252

    (60) for_pro -> FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE . instrucciones R_LLAVE
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . console_pro sc
    (5) instruccion -> . declaration_instruction sc
    (6) instruccion -> . assig_pro sc
    (7) instruccion -> . interface_assign_pro sc
    (8) instruccion -> . if_pro sc
    (9) instruccion -> . while_pro sc
    (10) instruccion -> . for_pro sc
    (11) instruccion -> . for_each_pro sc
    (12) instruccion -> . interface_pro sc
    (13) instruccion -> . continue_pro sc
    (14) instruccion -> . break_pro sc
    (15) instruccion -> . return_pro sc
    (16) instruccion -> . function_pro sc
    (17) instruccion -> . call_function_pro sc
    (18) instruccion -> . sumadores sc
    (67) console_pro -> . CONSOLE PUNTO LOG L_PAREN expresion R_PAREN
    (41) declaration_instruction -> . LET declaracion_list
    (54) assig_pro -> . LITERAL IGUAL a
    (40) interface_assign_pro -> . a PUNTO LITERAL IGUAL a
    (55) if_pro -> . IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro
    (59) while_pro -> . WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE
    (60) for_pro -> . FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (61) for_pro -> . FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (64) for_each_pro -> . FOR L_PAREN for_each_dec R_PAREN L_LLAVE instrucciones R_LLAVE
    (35) interface_pro -> . INTERFACE LITERAL L_LLAVE interface_atributos R_LLAVE
    (31) continue_pro -> . CONTINUE
    (32) break_pro -> . BREAK
    (33) return_pro -> . RETURN
    (34) return_pro -> . RETURN a
    (21) function_pro -> . FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (22) function_pro -> . FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE
    (23) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (24) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (111) sumadores -> . LITERAL MAS MAS
    (112) sumadores -> . LITERAL MENOS MENOS
    (70) a -> . a OR b
    (71) a -> . b
    (72) b -> . b AND c
    (73) b -> . c
    (74) c -> . NOT d
    (75) c -> . d
    (76) d -> . d DISTINTO_QUE e
    (77) d -> . d MENOR_QUE e
    (78) d -> . d MENOR_IGUAL_QUE e
    (79) d -> . d MAYOR_QUE e
    (80) d -> . d MAYOR_IGUAL_QUE e
    (81) d -> . d TRIPLE_IGUAL e
    (82) d -> . e
    (83) e -> . e MAS f
    (84) e -> . e MENOS f
    (85) e -> . f
    (86) f -> . MENOS g
    (87) f -> . MAS g
    (88) f -> . g
    (89) g -> . g TIMES h
    (90) g -> . g DIVIDE h
    (91) g -> . g MOD h
    (92) g -> . g POTENCIA h
    (93) g -> . h
    (94) h -> . ENTERO
    (95) h -> . DECIMAL
    (96) h -> . CADENA
    (97) h -> . LITERAL
    (98) h -> . TRUE
    (99) h -> . FALSE
    (100) h -> . call_function_pro
    (101) h -> . array_pro
    (102) h -> . interface_assi
    (103) h -> . L_PAREN a R_PAREN
    (104) h -> . array_val_pro
    (105) h -> . a PUNTO LITERAL
    (106) h -> . a PUNTO nativeFun L_PAREN expresion R_PAREN
    (107) h -> . a PUNTO nativeFun L_PAREN R_PAREN
    (116) array_pro -> . L_CORCHETE values R_CORCHETE
    (113) interface_assi -> . L_LLAVE atributos_assi R_LLAVE
    (108) array_val_pro -> . LITERAL dimensions

    CONSOLE         shift and go to state 19
    LET             shift and go to state 21
    LITERAL         shift and go to state 22
    IF              shift and go to state 24
    WHILE           shift and go to state 26
    FOR             shift and go to state 27
    INTERFACE       shift and go to state 28
    CONTINUE        shift and go to state 29
    BREAK           shift and go to state 30
    RETURN          shift and go to state 31
    FUNCTION        shift and go to state 32
    NOT             shift and go to state 37
    MENOS           shift and go to state 34
    MAS             shift and go to state 33
    ENTERO          shift and go to state 43
    DECIMAL         shift and go to state 44
    CADENA          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    L_PAREN         shift and go to state 20
    L_CORCHETE      shift and go to state 51
    L_LLAVE         shift and go to state 25

    declaration_instruction        shift and go to state 5
    a                              shift and go to state 23
    instrucciones                  shift and go to state 256
    instruccion                    shift and go to state 3
    console_pro                    shift and go to state 4
    assig_pro                      shift and go to state 6
    interface_assign_pro           shift and go to state 7
    if_pro                         shift and go to state 8
    while_pro                      shift and go to state 9
    for_pro                        shift and go to state 10
    for_each_pro                   shift and go to state 11
    interface_pro                  shift and go to state 12
    continue_pro                   shift and go to state 13
    break_pro                      shift and go to state 14
    return_pro                     shift and go to state 15
    function_pro                   shift and go to state 16
    call_function_pro              shift and go to state 17
    sumadores                      shift and go to state 18
    b                              shift and go to state 35
    c                              shift and go to state 36
    d                              shift and go to state 38
    e                              shift and go to state 39
    f                              shift and go to state 40
    g                              shift and go to state 41
    h                              shift and go to state 42
    array_pro                      shift and go to state 48
    interface_assi                 shift and go to state 49
    array_val_pro                  shift and go to state 50

state 253

    (61) for_pro -> FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE . instrucciones R_LLAVE
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . console_pro sc
    (5) instruccion -> . declaration_instruction sc
    (6) instruccion -> . assig_pro sc
    (7) instruccion -> . interface_assign_pro sc
    (8) instruccion -> . if_pro sc
    (9) instruccion -> . while_pro sc
    (10) instruccion -> . for_pro sc
    (11) instruccion -> . for_each_pro sc
    (12) instruccion -> . interface_pro sc
    (13) instruccion -> . continue_pro sc
    (14) instruccion -> . break_pro sc
    (15) instruccion -> . return_pro sc
    (16) instruccion -> . function_pro sc
    (17) instruccion -> . call_function_pro sc
    (18) instruccion -> . sumadores sc
    (67) console_pro -> . CONSOLE PUNTO LOG L_PAREN expresion R_PAREN
    (41) declaration_instruction -> . LET declaracion_list
    (54) assig_pro -> . LITERAL IGUAL a
    (40) interface_assign_pro -> . a PUNTO LITERAL IGUAL a
    (55) if_pro -> . IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro
    (59) while_pro -> . WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE
    (60) for_pro -> . FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (61) for_pro -> . FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (64) for_each_pro -> . FOR L_PAREN for_each_dec R_PAREN L_LLAVE instrucciones R_LLAVE
    (35) interface_pro -> . INTERFACE LITERAL L_LLAVE interface_atributos R_LLAVE
    (31) continue_pro -> . CONTINUE
    (32) break_pro -> . BREAK
    (33) return_pro -> . RETURN
    (34) return_pro -> . RETURN a
    (21) function_pro -> . FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (22) function_pro -> . FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE
    (23) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (24) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (111) sumadores -> . LITERAL MAS MAS
    (112) sumadores -> . LITERAL MENOS MENOS
    (70) a -> . a OR b
    (71) a -> . b
    (72) b -> . b AND c
    (73) b -> . c
    (74) c -> . NOT d
    (75) c -> . d
    (76) d -> . d DISTINTO_QUE e
    (77) d -> . d MENOR_QUE e
    (78) d -> . d MENOR_IGUAL_QUE e
    (79) d -> . d MAYOR_QUE e
    (80) d -> . d MAYOR_IGUAL_QUE e
    (81) d -> . d TRIPLE_IGUAL e
    (82) d -> . e
    (83) e -> . e MAS f
    (84) e -> . e MENOS f
    (85) e -> . f
    (86) f -> . MENOS g
    (87) f -> . MAS g
    (88) f -> . g
    (89) g -> . g TIMES h
    (90) g -> . g DIVIDE h
    (91) g -> . g MOD h
    (92) g -> . g POTENCIA h
    (93) g -> . h
    (94) h -> . ENTERO
    (95) h -> . DECIMAL
    (96) h -> . CADENA
    (97) h -> . LITERAL
    (98) h -> . TRUE
    (99) h -> . FALSE
    (100) h -> . call_function_pro
    (101) h -> . array_pro
    (102) h -> . interface_assi
    (103) h -> . L_PAREN a R_PAREN
    (104) h -> . array_val_pro
    (105) h -> . a PUNTO LITERAL
    (106) h -> . a PUNTO nativeFun L_PAREN expresion R_PAREN
    (107) h -> . a PUNTO nativeFun L_PAREN R_PAREN
    (116) array_pro -> . L_CORCHETE values R_CORCHETE
    (113) interface_assi -> . L_LLAVE atributos_assi R_LLAVE
    (108) array_val_pro -> . LITERAL dimensions

    CONSOLE         shift and go to state 19
    LET             shift and go to state 21
    LITERAL         shift and go to state 22
    IF              shift and go to state 24
    WHILE           shift and go to state 26
    FOR             shift and go to state 27
    INTERFACE       shift and go to state 28
    CONTINUE        shift and go to state 29
    BREAK           shift and go to state 30
    RETURN          shift and go to state 31
    FUNCTION        shift and go to state 32
    NOT             shift and go to state 37
    MENOS           shift and go to state 34
    MAS             shift and go to state 33
    ENTERO          shift and go to state 43
    DECIMAL         shift and go to state 44
    CADENA          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    L_PAREN         shift and go to state 20
    L_CORCHETE      shift and go to state 51
    L_LLAVE         shift and go to state 25

    assig_pro                      shift and go to state 6
    a                              shift and go to state 23
    instrucciones                  shift and go to state 257
    instruccion                    shift and go to state 3
    console_pro                    shift and go to state 4
    declaration_instruction        shift and go to state 5
    interface_assign_pro           shift and go to state 7
    if_pro                         shift and go to state 8
    while_pro                      shift and go to state 9
    for_pro                        shift and go to state 10
    for_each_pro                   shift and go to state 11
    interface_pro                  shift and go to state 12
    continue_pro                   shift and go to state 13
    break_pro                      shift and go to state 14
    return_pro                     shift and go to state 15
    function_pro                   shift and go to state 16
    call_function_pro              shift and go to state 17
    sumadores                      shift and go to state 18
    b                              shift and go to state 35
    c                              shift and go to state 36
    d                              shift and go to state 38
    e                              shift and go to state 39
    f                              shift and go to state 40
    g                              shift and go to state 41
    h                              shift and go to state 42
    array_pro                      shift and go to state 48
    interface_assi                 shift and go to state 49
    array_val_pro                  shift and go to state 50

state 254

    (56) else_pro -> ELSE IF L_PAREN . a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro
    (70) a -> . a OR b
    (71) a -> . b
    (72) b -> . b AND c
    (73) b -> . c
    (74) c -> . NOT d
    (75) c -> . d
    (76) d -> . d DISTINTO_QUE e
    (77) d -> . d MENOR_QUE e
    (78) d -> . d MENOR_IGUAL_QUE e
    (79) d -> . d MAYOR_QUE e
    (80) d -> . d MAYOR_IGUAL_QUE e
    (81) d -> . d TRIPLE_IGUAL e
    (82) d -> . e
    (83) e -> . e MAS f
    (84) e -> . e MENOS f
    (85) e -> . f
    (86) f -> . MENOS g
    (87) f -> . MAS g
    (88) f -> . g
    (89) g -> . g TIMES h
    (90) g -> . g DIVIDE h
    (91) g -> . g MOD h
    (92) g -> . g POTENCIA h
    (93) g -> . h
    (94) h -> . ENTERO
    (95) h -> . DECIMAL
    (96) h -> . CADENA
    (97) h -> . LITERAL
    (98) h -> . TRUE
    (99) h -> . FALSE
    (100) h -> . call_function_pro
    (101) h -> . array_pro
    (102) h -> . interface_assi
    (103) h -> . L_PAREN a R_PAREN
    (104) h -> . array_val_pro
    (105) h -> . a PUNTO LITERAL
    (106) h -> . a PUNTO nativeFun L_PAREN expresion R_PAREN
    (107) h -> . a PUNTO nativeFun L_PAREN R_PAREN
    (23) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (24) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (116) array_pro -> . L_CORCHETE values R_CORCHETE
    (113) interface_assi -> . L_LLAVE atributos_assi R_LLAVE
    (108) array_val_pro -> . LITERAL dimensions

    NOT             shift and go to state 37
    MENOS           shift and go to state 34
    MAS             shift and go to state 33
    ENTERO          shift and go to state 43
    DECIMAL         shift and go to state 44
    CADENA          shift and go to state 45
    LITERAL         shift and go to state 71
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    L_PAREN         shift and go to state 20
    L_CORCHETE      shift and go to state 51
    L_LLAVE         shift and go to state 25

    a                              shift and go to state 258
    b                              shift and go to state 35
    c                              shift and go to state 36
    d                              shift and go to state 38
    e                              shift and go to state 39
    f                              shift and go to state 40
    g                              shift and go to state 41
    h                              shift and go to state 42
    call_function_pro              shift and go to state 72
    array_pro                      shift and go to state 48
    interface_assi                 shift and go to state 49
    array_val_pro                  shift and go to state 50

state 255

    (57) else_pro -> ELSE L_LLAVE instrucciones . R_LLAVE
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . console_pro sc
    (5) instruccion -> . declaration_instruction sc
    (6) instruccion -> . assig_pro sc
    (7) instruccion -> . interface_assign_pro sc
    (8) instruccion -> . if_pro sc
    (9) instruccion -> . while_pro sc
    (10) instruccion -> . for_pro sc
    (11) instruccion -> . for_each_pro sc
    (12) instruccion -> . interface_pro sc
    (13) instruccion -> . continue_pro sc
    (14) instruccion -> . break_pro sc
    (15) instruccion -> . return_pro sc
    (16) instruccion -> . function_pro sc
    (17) instruccion -> . call_function_pro sc
    (18) instruccion -> . sumadores sc
    (67) console_pro -> . CONSOLE PUNTO LOG L_PAREN expresion R_PAREN
    (41) declaration_instruction -> . LET declaracion_list
    (54) assig_pro -> . LITERAL IGUAL a
    (40) interface_assign_pro -> . a PUNTO LITERAL IGUAL a
    (55) if_pro -> . IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro
    (59) while_pro -> . WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE
    (60) for_pro -> . FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (61) for_pro -> . FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (64) for_each_pro -> . FOR L_PAREN for_each_dec R_PAREN L_LLAVE instrucciones R_LLAVE
    (35) interface_pro -> . INTERFACE LITERAL L_LLAVE interface_atributos R_LLAVE
    (31) continue_pro -> . CONTINUE
    (32) break_pro -> . BREAK
    (33) return_pro -> . RETURN
    (34) return_pro -> . RETURN a
    (21) function_pro -> . FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (22) function_pro -> . FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE
    (23) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (24) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (111) sumadores -> . LITERAL MAS MAS
    (112) sumadores -> . LITERAL MENOS MENOS
    (70) a -> . a OR b
    (71) a -> . b
    (72) b -> . b AND c
    (73) b -> . c
    (74) c -> . NOT d
    (75) c -> . d
    (76) d -> . d DISTINTO_QUE e
    (77) d -> . d MENOR_QUE e
    (78) d -> . d MENOR_IGUAL_QUE e
    (79) d -> . d MAYOR_QUE e
    (80) d -> . d MAYOR_IGUAL_QUE e
    (81) d -> . d TRIPLE_IGUAL e
    (82) d -> . e
    (83) e -> . e MAS f
    (84) e -> . e MENOS f
    (85) e -> . f
    (86) f -> . MENOS g
    (87) f -> . MAS g
    (88) f -> . g
    (89) g -> . g TIMES h
    (90) g -> . g DIVIDE h
    (91) g -> . g MOD h
    (92) g -> . g POTENCIA h
    (93) g -> . h
    (94) h -> . ENTERO
    (95) h -> . DECIMAL
    (96) h -> . CADENA
    (97) h -> . LITERAL
    (98) h -> . TRUE
    (99) h -> . FALSE
    (100) h -> . call_function_pro
    (101) h -> . array_pro
    (102) h -> . interface_assi
    (103) h -> . L_PAREN a R_PAREN
    (104) h -> . array_val_pro
    (105) h -> . a PUNTO LITERAL
    (106) h -> . a PUNTO nativeFun L_PAREN expresion R_PAREN
    (107) h -> . a PUNTO nativeFun L_PAREN R_PAREN
    (116) array_pro -> . L_CORCHETE values R_CORCHETE
    (113) interface_assi -> . L_LLAVE atributos_assi R_LLAVE
    (108) array_val_pro -> . LITERAL dimensions

    R_LLAVE         shift and go to state 259
    CONSOLE         shift and go to state 19
    LET             shift and go to state 21
    LITERAL         shift and go to state 22
    IF              shift and go to state 24
    WHILE           shift and go to state 26
    FOR             shift and go to state 27
    INTERFACE       shift and go to state 28
    CONTINUE        shift and go to state 29
    BREAK           shift and go to state 30
    RETURN          shift and go to state 31
    FUNCTION        shift and go to state 32
    NOT             shift and go to state 37
    MENOS           shift and go to state 34
    MAS             shift and go to state 33
    ENTERO          shift and go to state 43
    DECIMAL         shift and go to state 44
    CADENA          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    L_PAREN         shift and go to state 20
    L_CORCHETE      shift and go to state 51
    L_LLAVE         shift and go to state 25

    instruccion                    shift and go to state 52
    console_pro                    shift and go to state 4
    declaration_instruction        shift and go to state 5
    assig_pro                      shift and go to state 6
    interface_assign_pro           shift and go to state 7
    if_pro                         shift and go to state 8
    while_pro                      shift and go to state 9
    for_pro                        shift and go to state 10
    for_each_pro                   shift and go to state 11
    interface_pro                  shift and go to state 12
    continue_pro                   shift and go to state 13
    break_pro                      shift and go to state 14
    return_pro                     shift and go to state 15
    function_pro                   shift and go to state 16
    call_function_pro              shift and go to state 17
    sumadores                      shift and go to state 18
    a                              shift and go to state 23
    b                              shift and go to state 35
    c                              shift and go to state 36
    d                              shift and go to state 38
    e                              shift and go to state 39
    f                              shift and go to state 40
    g                              shift and go to state 41
    h                              shift and go to state 42
    array_pro                      shift and go to state 48
    interface_assi                 shift and go to state 49
    array_val_pro                  shift and go to state 50

state 256

    (60) for_pro -> FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones . R_LLAVE
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . console_pro sc
    (5) instruccion -> . declaration_instruction sc
    (6) instruccion -> . assig_pro sc
    (7) instruccion -> . interface_assign_pro sc
    (8) instruccion -> . if_pro sc
    (9) instruccion -> . while_pro sc
    (10) instruccion -> . for_pro sc
    (11) instruccion -> . for_each_pro sc
    (12) instruccion -> . interface_pro sc
    (13) instruccion -> . continue_pro sc
    (14) instruccion -> . break_pro sc
    (15) instruccion -> . return_pro sc
    (16) instruccion -> . function_pro sc
    (17) instruccion -> . call_function_pro sc
    (18) instruccion -> . sumadores sc
    (67) console_pro -> . CONSOLE PUNTO LOG L_PAREN expresion R_PAREN
    (41) declaration_instruction -> . LET declaracion_list
    (54) assig_pro -> . LITERAL IGUAL a
    (40) interface_assign_pro -> . a PUNTO LITERAL IGUAL a
    (55) if_pro -> . IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro
    (59) while_pro -> . WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE
    (60) for_pro -> . FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (61) for_pro -> . FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (64) for_each_pro -> . FOR L_PAREN for_each_dec R_PAREN L_LLAVE instrucciones R_LLAVE
    (35) interface_pro -> . INTERFACE LITERAL L_LLAVE interface_atributos R_LLAVE
    (31) continue_pro -> . CONTINUE
    (32) break_pro -> . BREAK
    (33) return_pro -> . RETURN
    (34) return_pro -> . RETURN a
    (21) function_pro -> . FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (22) function_pro -> . FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE
    (23) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (24) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (111) sumadores -> . LITERAL MAS MAS
    (112) sumadores -> . LITERAL MENOS MENOS
    (70) a -> . a OR b
    (71) a -> . b
    (72) b -> . b AND c
    (73) b -> . c
    (74) c -> . NOT d
    (75) c -> . d
    (76) d -> . d DISTINTO_QUE e
    (77) d -> . d MENOR_QUE e
    (78) d -> . d MENOR_IGUAL_QUE e
    (79) d -> . d MAYOR_QUE e
    (80) d -> . d MAYOR_IGUAL_QUE e
    (81) d -> . d TRIPLE_IGUAL e
    (82) d -> . e
    (83) e -> . e MAS f
    (84) e -> . e MENOS f
    (85) e -> . f
    (86) f -> . MENOS g
    (87) f -> . MAS g
    (88) f -> . g
    (89) g -> . g TIMES h
    (90) g -> . g DIVIDE h
    (91) g -> . g MOD h
    (92) g -> . g POTENCIA h
    (93) g -> . h
    (94) h -> . ENTERO
    (95) h -> . DECIMAL
    (96) h -> . CADENA
    (97) h -> . LITERAL
    (98) h -> . TRUE
    (99) h -> . FALSE
    (100) h -> . call_function_pro
    (101) h -> . array_pro
    (102) h -> . interface_assi
    (103) h -> . L_PAREN a R_PAREN
    (104) h -> . array_val_pro
    (105) h -> . a PUNTO LITERAL
    (106) h -> . a PUNTO nativeFun L_PAREN expresion R_PAREN
    (107) h -> . a PUNTO nativeFun L_PAREN R_PAREN
    (116) array_pro -> . L_CORCHETE values R_CORCHETE
    (113) interface_assi -> . L_LLAVE atributos_assi R_LLAVE
    (108) array_val_pro -> . LITERAL dimensions

    R_LLAVE         shift and go to state 260
    CONSOLE         shift and go to state 19
    LET             shift and go to state 21
    LITERAL         shift and go to state 22
    IF              shift and go to state 24
    WHILE           shift and go to state 26
    FOR             shift and go to state 27
    INTERFACE       shift and go to state 28
    CONTINUE        shift and go to state 29
    BREAK           shift and go to state 30
    RETURN          shift and go to state 31
    FUNCTION        shift and go to state 32
    NOT             shift and go to state 37
    MENOS           shift and go to state 34
    MAS             shift and go to state 33
    ENTERO          shift and go to state 43
    DECIMAL         shift and go to state 44
    CADENA          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    L_PAREN         shift and go to state 20
    L_CORCHETE      shift and go to state 51
    L_LLAVE         shift and go to state 25

    declaration_instruction        shift and go to state 5
    a                              shift and go to state 23
    instruccion                    shift and go to state 52
    console_pro                    shift and go to state 4
    assig_pro                      shift and go to state 6
    interface_assign_pro           shift and go to state 7
    if_pro                         shift and go to state 8
    while_pro                      shift and go to state 9
    for_pro                        shift and go to state 10
    for_each_pro                   shift and go to state 11
    interface_pro                  shift and go to state 12
    continue_pro                   shift and go to state 13
    break_pro                      shift and go to state 14
    return_pro                     shift and go to state 15
    function_pro                   shift and go to state 16
    call_function_pro              shift and go to state 17
    sumadores                      shift and go to state 18
    b                              shift and go to state 35
    c                              shift and go to state 36
    d                              shift and go to state 38
    e                              shift and go to state 39
    f                              shift and go to state 40
    g                              shift and go to state 41
    h                              shift and go to state 42
    array_pro                      shift and go to state 48
    interface_assi                 shift and go to state 49
    array_val_pro                  shift and go to state 50

state 257

    (61) for_pro -> FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones . R_LLAVE
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . console_pro sc
    (5) instruccion -> . declaration_instruction sc
    (6) instruccion -> . assig_pro sc
    (7) instruccion -> . interface_assign_pro sc
    (8) instruccion -> . if_pro sc
    (9) instruccion -> . while_pro sc
    (10) instruccion -> . for_pro sc
    (11) instruccion -> . for_each_pro sc
    (12) instruccion -> . interface_pro sc
    (13) instruccion -> . continue_pro sc
    (14) instruccion -> . break_pro sc
    (15) instruccion -> . return_pro sc
    (16) instruccion -> . function_pro sc
    (17) instruccion -> . call_function_pro sc
    (18) instruccion -> . sumadores sc
    (67) console_pro -> . CONSOLE PUNTO LOG L_PAREN expresion R_PAREN
    (41) declaration_instruction -> . LET declaracion_list
    (54) assig_pro -> . LITERAL IGUAL a
    (40) interface_assign_pro -> . a PUNTO LITERAL IGUAL a
    (55) if_pro -> . IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro
    (59) while_pro -> . WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE
    (60) for_pro -> . FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (61) for_pro -> . FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (64) for_each_pro -> . FOR L_PAREN for_each_dec R_PAREN L_LLAVE instrucciones R_LLAVE
    (35) interface_pro -> . INTERFACE LITERAL L_LLAVE interface_atributos R_LLAVE
    (31) continue_pro -> . CONTINUE
    (32) break_pro -> . BREAK
    (33) return_pro -> . RETURN
    (34) return_pro -> . RETURN a
    (21) function_pro -> . FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (22) function_pro -> . FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE
    (23) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (24) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (111) sumadores -> . LITERAL MAS MAS
    (112) sumadores -> . LITERAL MENOS MENOS
    (70) a -> . a OR b
    (71) a -> . b
    (72) b -> . b AND c
    (73) b -> . c
    (74) c -> . NOT d
    (75) c -> . d
    (76) d -> . d DISTINTO_QUE e
    (77) d -> . d MENOR_QUE e
    (78) d -> . d MENOR_IGUAL_QUE e
    (79) d -> . d MAYOR_QUE e
    (80) d -> . d MAYOR_IGUAL_QUE e
    (81) d -> . d TRIPLE_IGUAL e
    (82) d -> . e
    (83) e -> . e MAS f
    (84) e -> . e MENOS f
    (85) e -> . f
    (86) f -> . MENOS g
    (87) f -> . MAS g
    (88) f -> . g
    (89) g -> . g TIMES h
    (90) g -> . g DIVIDE h
    (91) g -> . g MOD h
    (92) g -> . g POTENCIA h
    (93) g -> . h
    (94) h -> . ENTERO
    (95) h -> . DECIMAL
    (96) h -> . CADENA
    (97) h -> . LITERAL
    (98) h -> . TRUE
    (99) h -> . FALSE
    (100) h -> . call_function_pro
    (101) h -> . array_pro
    (102) h -> . interface_assi
    (103) h -> . L_PAREN a R_PAREN
    (104) h -> . array_val_pro
    (105) h -> . a PUNTO LITERAL
    (106) h -> . a PUNTO nativeFun L_PAREN expresion R_PAREN
    (107) h -> . a PUNTO nativeFun L_PAREN R_PAREN
    (116) array_pro -> . L_CORCHETE values R_CORCHETE
    (113) interface_assi -> . L_LLAVE atributos_assi R_LLAVE
    (108) array_val_pro -> . LITERAL dimensions

    R_LLAVE         shift and go to state 261
    CONSOLE         shift and go to state 19
    LET             shift and go to state 21
    LITERAL         shift and go to state 22
    IF              shift and go to state 24
    WHILE           shift and go to state 26
    FOR             shift and go to state 27
    INTERFACE       shift and go to state 28
    CONTINUE        shift and go to state 29
    BREAK           shift and go to state 30
    RETURN          shift and go to state 31
    FUNCTION        shift and go to state 32
    NOT             shift and go to state 37
    MENOS           shift and go to state 34
    MAS             shift and go to state 33
    ENTERO          shift and go to state 43
    DECIMAL         shift and go to state 44
    CADENA          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    L_PAREN         shift and go to state 20
    L_CORCHETE      shift and go to state 51
    L_LLAVE         shift and go to state 25

    assig_pro                      shift and go to state 6
    a                              shift and go to state 23
    instruccion                    shift and go to state 52
    console_pro                    shift and go to state 4
    declaration_instruction        shift and go to state 5
    interface_assign_pro           shift and go to state 7
    if_pro                         shift and go to state 8
    while_pro                      shift and go to state 9
    for_pro                        shift and go to state 10
    for_each_pro                   shift and go to state 11
    interface_pro                  shift and go to state 12
    continue_pro                   shift and go to state 13
    break_pro                      shift and go to state 14
    return_pro                     shift and go to state 15
    function_pro                   shift and go to state 16
    call_function_pro              shift and go to state 17
    sumadores                      shift and go to state 18
    b                              shift and go to state 35
    c                              shift and go to state 36
    d                              shift and go to state 38
    e                              shift and go to state 39
    f                              shift and go to state 40
    g                              shift and go to state 41
    h                              shift and go to state 42
    array_pro                      shift and go to state 48
    interface_assi                 shift and go to state 49
    array_val_pro                  shift and go to state 50

state 258

    (56) else_pro -> ELSE IF L_PAREN a . R_PAREN L_LLAVE instrucciones R_LLAVE else_pro
    (70) a -> a . OR b
    (105) h -> a . PUNTO LITERAL
    (106) h -> a . PUNTO nativeFun L_PAREN expresion R_PAREN
    (107) h -> a . PUNTO nativeFun L_PAREN R_PAREN

    R_PAREN         shift and go to state 262
    OR              shift and go to state 83
    PUNTO           shift and go to state 113


state 259

    (57) else_pro -> ELSE L_LLAVE instrucciones R_LLAVE .

    SEMI_COLON      reduce using rule 57 (else_pro -> ELSE L_LLAVE instrucciones R_LLAVE .)
    CONSOLE         reduce using rule 57 (else_pro -> ELSE L_LLAVE instrucciones R_LLAVE .)
    LET             reduce using rule 57 (else_pro -> ELSE L_LLAVE instrucciones R_LLAVE .)
    LITERAL         reduce using rule 57 (else_pro -> ELSE L_LLAVE instrucciones R_LLAVE .)
    IF              reduce using rule 57 (else_pro -> ELSE L_LLAVE instrucciones R_LLAVE .)
    WHILE           reduce using rule 57 (else_pro -> ELSE L_LLAVE instrucciones R_LLAVE .)
    FOR             reduce using rule 57 (else_pro -> ELSE L_LLAVE instrucciones R_LLAVE .)
    INTERFACE       reduce using rule 57 (else_pro -> ELSE L_LLAVE instrucciones R_LLAVE .)
    CONTINUE        reduce using rule 57 (else_pro -> ELSE L_LLAVE instrucciones R_LLAVE .)
    BREAK           reduce using rule 57 (else_pro -> ELSE L_LLAVE instrucciones R_LLAVE .)
    RETURN          reduce using rule 57 (else_pro -> ELSE L_LLAVE instrucciones R_LLAVE .)
    FUNCTION        reduce using rule 57 (else_pro -> ELSE L_LLAVE instrucciones R_LLAVE .)
    NOT             reduce using rule 57 (else_pro -> ELSE L_LLAVE instrucciones R_LLAVE .)
    MENOS           reduce using rule 57 (else_pro -> ELSE L_LLAVE instrucciones R_LLAVE .)
    MAS             reduce using rule 57 (else_pro -> ELSE L_LLAVE instrucciones R_LLAVE .)
    ENTERO          reduce using rule 57 (else_pro -> ELSE L_LLAVE instrucciones R_LLAVE .)
    DECIMAL         reduce using rule 57 (else_pro -> ELSE L_LLAVE instrucciones R_LLAVE .)
    CADENA          reduce using rule 57 (else_pro -> ELSE L_LLAVE instrucciones R_LLAVE .)
    TRUE            reduce using rule 57 (else_pro -> ELSE L_LLAVE instrucciones R_LLAVE .)
    FALSE           reduce using rule 57 (else_pro -> ELSE L_LLAVE instrucciones R_LLAVE .)
    L_PAREN         reduce using rule 57 (else_pro -> ELSE L_LLAVE instrucciones R_LLAVE .)
    L_CORCHETE      reduce using rule 57 (else_pro -> ELSE L_LLAVE instrucciones R_LLAVE .)
    L_LLAVE         reduce using rule 57 (else_pro -> ELSE L_LLAVE instrucciones R_LLAVE .)
    $end            reduce using rule 57 (else_pro -> ELSE L_LLAVE instrucciones R_LLAVE .)
    R_LLAVE         reduce using rule 57 (else_pro -> ELSE L_LLAVE instrucciones R_LLAVE .)


state 260

    (60) for_pro -> FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE .

    SEMI_COLON      reduce using rule 60 (for_pro -> FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    CONSOLE         reduce using rule 60 (for_pro -> FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    LET             reduce using rule 60 (for_pro -> FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    LITERAL         reduce using rule 60 (for_pro -> FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    IF              reduce using rule 60 (for_pro -> FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    WHILE           reduce using rule 60 (for_pro -> FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    FOR             reduce using rule 60 (for_pro -> FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    INTERFACE       reduce using rule 60 (for_pro -> FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    CONTINUE        reduce using rule 60 (for_pro -> FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    BREAK           reduce using rule 60 (for_pro -> FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    RETURN          reduce using rule 60 (for_pro -> FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    FUNCTION        reduce using rule 60 (for_pro -> FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    NOT             reduce using rule 60 (for_pro -> FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    MENOS           reduce using rule 60 (for_pro -> FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    MAS             reduce using rule 60 (for_pro -> FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    ENTERO          reduce using rule 60 (for_pro -> FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    DECIMAL         reduce using rule 60 (for_pro -> FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    CADENA          reduce using rule 60 (for_pro -> FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    TRUE            reduce using rule 60 (for_pro -> FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    FALSE           reduce using rule 60 (for_pro -> FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    L_PAREN         reduce using rule 60 (for_pro -> FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    L_CORCHETE      reduce using rule 60 (for_pro -> FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    L_LLAVE         reduce using rule 60 (for_pro -> FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    $end            reduce using rule 60 (for_pro -> FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    R_LLAVE         reduce using rule 60 (for_pro -> FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)


state 261

    (61) for_pro -> FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE .

    SEMI_COLON      reduce using rule 61 (for_pro -> FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    CONSOLE         reduce using rule 61 (for_pro -> FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    LET             reduce using rule 61 (for_pro -> FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    LITERAL         reduce using rule 61 (for_pro -> FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    IF              reduce using rule 61 (for_pro -> FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    WHILE           reduce using rule 61 (for_pro -> FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    FOR             reduce using rule 61 (for_pro -> FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    INTERFACE       reduce using rule 61 (for_pro -> FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    CONTINUE        reduce using rule 61 (for_pro -> FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    BREAK           reduce using rule 61 (for_pro -> FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    RETURN          reduce using rule 61 (for_pro -> FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    FUNCTION        reduce using rule 61 (for_pro -> FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    NOT             reduce using rule 61 (for_pro -> FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    MENOS           reduce using rule 61 (for_pro -> FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    MAS             reduce using rule 61 (for_pro -> FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    ENTERO          reduce using rule 61 (for_pro -> FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    DECIMAL         reduce using rule 61 (for_pro -> FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    CADENA          reduce using rule 61 (for_pro -> FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    TRUE            reduce using rule 61 (for_pro -> FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    FALSE           reduce using rule 61 (for_pro -> FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    L_PAREN         reduce using rule 61 (for_pro -> FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    L_CORCHETE      reduce using rule 61 (for_pro -> FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    L_LLAVE         reduce using rule 61 (for_pro -> FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    $end            reduce using rule 61 (for_pro -> FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    R_LLAVE         reduce using rule 61 (for_pro -> FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)


state 262

    (56) else_pro -> ELSE IF L_PAREN a R_PAREN . L_LLAVE instrucciones R_LLAVE else_pro

    L_LLAVE         shift and go to state 263


state 263

    (56) else_pro -> ELSE IF L_PAREN a R_PAREN L_LLAVE . instrucciones R_LLAVE else_pro
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . console_pro sc
    (5) instruccion -> . declaration_instruction sc
    (6) instruccion -> . assig_pro sc
    (7) instruccion -> . interface_assign_pro sc
    (8) instruccion -> . if_pro sc
    (9) instruccion -> . while_pro sc
    (10) instruccion -> . for_pro sc
    (11) instruccion -> . for_each_pro sc
    (12) instruccion -> . interface_pro sc
    (13) instruccion -> . continue_pro sc
    (14) instruccion -> . break_pro sc
    (15) instruccion -> . return_pro sc
    (16) instruccion -> . function_pro sc
    (17) instruccion -> . call_function_pro sc
    (18) instruccion -> . sumadores sc
    (67) console_pro -> . CONSOLE PUNTO LOG L_PAREN expresion R_PAREN
    (41) declaration_instruction -> . LET declaracion_list
    (54) assig_pro -> . LITERAL IGUAL a
    (40) interface_assign_pro -> . a PUNTO LITERAL IGUAL a
    (55) if_pro -> . IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro
    (59) while_pro -> . WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE
    (60) for_pro -> . FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (61) for_pro -> . FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (64) for_each_pro -> . FOR L_PAREN for_each_dec R_PAREN L_LLAVE instrucciones R_LLAVE
    (35) interface_pro -> . INTERFACE LITERAL L_LLAVE interface_atributos R_LLAVE
    (31) continue_pro -> . CONTINUE
    (32) break_pro -> . BREAK
    (33) return_pro -> . RETURN
    (34) return_pro -> . RETURN a
    (21) function_pro -> . FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (22) function_pro -> . FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE
    (23) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (24) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (111) sumadores -> . LITERAL MAS MAS
    (112) sumadores -> . LITERAL MENOS MENOS
    (70) a -> . a OR b
    (71) a -> . b
    (72) b -> . b AND c
    (73) b -> . c
    (74) c -> . NOT d
    (75) c -> . d
    (76) d -> . d DISTINTO_QUE e
    (77) d -> . d MENOR_QUE e
    (78) d -> . d MENOR_IGUAL_QUE e
    (79) d -> . d MAYOR_QUE e
    (80) d -> . d MAYOR_IGUAL_QUE e
    (81) d -> . d TRIPLE_IGUAL e
    (82) d -> . e
    (83) e -> . e MAS f
    (84) e -> . e MENOS f
    (85) e -> . f
    (86) f -> . MENOS g
    (87) f -> . MAS g
    (88) f -> . g
    (89) g -> . g TIMES h
    (90) g -> . g DIVIDE h
    (91) g -> . g MOD h
    (92) g -> . g POTENCIA h
    (93) g -> . h
    (94) h -> . ENTERO
    (95) h -> . DECIMAL
    (96) h -> . CADENA
    (97) h -> . LITERAL
    (98) h -> . TRUE
    (99) h -> . FALSE
    (100) h -> . call_function_pro
    (101) h -> . array_pro
    (102) h -> . interface_assi
    (103) h -> . L_PAREN a R_PAREN
    (104) h -> . array_val_pro
    (105) h -> . a PUNTO LITERAL
    (106) h -> . a PUNTO nativeFun L_PAREN expresion R_PAREN
    (107) h -> . a PUNTO nativeFun L_PAREN R_PAREN
    (116) array_pro -> . L_CORCHETE values R_CORCHETE
    (113) interface_assi -> . L_LLAVE atributos_assi R_LLAVE
    (108) array_val_pro -> . LITERAL dimensions

    CONSOLE         shift and go to state 19
    LET             shift and go to state 21
    LITERAL         shift and go to state 22
    IF              shift and go to state 24
    WHILE           shift and go to state 26
    FOR             shift and go to state 27
    INTERFACE       shift and go to state 28
    CONTINUE        shift and go to state 29
    BREAK           shift and go to state 30
    RETURN          shift and go to state 31
    FUNCTION        shift and go to state 32
    NOT             shift and go to state 37
    MENOS           shift and go to state 34
    MAS             shift and go to state 33
    ENTERO          shift and go to state 43
    DECIMAL         shift and go to state 44
    CADENA          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    L_PAREN         shift and go to state 20
    L_CORCHETE      shift and go to state 51
    L_LLAVE         shift and go to state 25

    a                              shift and go to state 23
    instrucciones                  shift and go to state 264
    instruccion                    shift and go to state 3
    console_pro                    shift and go to state 4
    declaration_instruction        shift and go to state 5
    assig_pro                      shift and go to state 6
    interface_assign_pro           shift and go to state 7
    if_pro                         shift and go to state 8
    while_pro                      shift and go to state 9
    for_pro                        shift and go to state 10
    for_each_pro                   shift and go to state 11
    interface_pro                  shift and go to state 12
    continue_pro                   shift and go to state 13
    break_pro                      shift and go to state 14
    return_pro                     shift and go to state 15
    function_pro                   shift and go to state 16
    call_function_pro              shift and go to state 17
    sumadores                      shift and go to state 18
    b                              shift and go to state 35
    c                              shift and go to state 36
    d                              shift and go to state 38
    e                              shift and go to state 39
    f                              shift and go to state 40
    g                              shift and go to state 41
    h                              shift and go to state 42
    array_pro                      shift and go to state 48
    interface_assi                 shift and go to state 49
    array_val_pro                  shift and go to state 50

state 264

    (56) else_pro -> ELSE IF L_PAREN a R_PAREN L_LLAVE instrucciones . R_LLAVE else_pro
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . console_pro sc
    (5) instruccion -> . declaration_instruction sc
    (6) instruccion -> . assig_pro sc
    (7) instruccion -> . interface_assign_pro sc
    (8) instruccion -> . if_pro sc
    (9) instruccion -> . while_pro sc
    (10) instruccion -> . for_pro sc
    (11) instruccion -> . for_each_pro sc
    (12) instruccion -> . interface_pro sc
    (13) instruccion -> . continue_pro sc
    (14) instruccion -> . break_pro sc
    (15) instruccion -> . return_pro sc
    (16) instruccion -> . function_pro sc
    (17) instruccion -> . call_function_pro sc
    (18) instruccion -> . sumadores sc
    (67) console_pro -> . CONSOLE PUNTO LOG L_PAREN expresion R_PAREN
    (41) declaration_instruction -> . LET declaracion_list
    (54) assig_pro -> . LITERAL IGUAL a
    (40) interface_assign_pro -> . a PUNTO LITERAL IGUAL a
    (55) if_pro -> . IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro
    (59) while_pro -> . WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE
    (60) for_pro -> . FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (61) for_pro -> . FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (64) for_each_pro -> . FOR L_PAREN for_each_dec R_PAREN L_LLAVE instrucciones R_LLAVE
    (35) interface_pro -> . INTERFACE LITERAL L_LLAVE interface_atributos R_LLAVE
    (31) continue_pro -> . CONTINUE
    (32) break_pro -> . BREAK
    (33) return_pro -> . RETURN
    (34) return_pro -> . RETURN a
    (21) function_pro -> . FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (22) function_pro -> . FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE
    (23) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (24) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (111) sumadores -> . LITERAL MAS MAS
    (112) sumadores -> . LITERAL MENOS MENOS
    (70) a -> . a OR b
    (71) a -> . b
    (72) b -> . b AND c
    (73) b -> . c
    (74) c -> . NOT d
    (75) c -> . d
    (76) d -> . d DISTINTO_QUE e
    (77) d -> . d MENOR_QUE e
    (78) d -> . d MENOR_IGUAL_QUE e
    (79) d -> . d MAYOR_QUE e
    (80) d -> . d MAYOR_IGUAL_QUE e
    (81) d -> . d TRIPLE_IGUAL e
    (82) d -> . e
    (83) e -> . e MAS f
    (84) e -> . e MENOS f
    (85) e -> . f
    (86) f -> . MENOS g
    (87) f -> . MAS g
    (88) f -> . g
    (89) g -> . g TIMES h
    (90) g -> . g DIVIDE h
    (91) g -> . g MOD h
    (92) g -> . g POTENCIA h
    (93) g -> . h
    (94) h -> . ENTERO
    (95) h -> . DECIMAL
    (96) h -> . CADENA
    (97) h -> . LITERAL
    (98) h -> . TRUE
    (99) h -> . FALSE
    (100) h -> . call_function_pro
    (101) h -> . array_pro
    (102) h -> . interface_assi
    (103) h -> . L_PAREN a R_PAREN
    (104) h -> . array_val_pro
    (105) h -> . a PUNTO LITERAL
    (106) h -> . a PUNTO nativeFun L_PAREN expresion R_PAREN
    (107) h -> . a PUNTO nativeFun L_PAREN R_PAREN
    (116) array_pro -> . L_CORCHETE values R_CORCHETE
    (113) interface_assi -> . L_LLAVE atributos_assi R_LLAVE
    (108) array_val_pro -> . LITERAL dimensions

    R_LLAVE         shift and go to state 265
    CONSOLE         shift and go to state 19
    LET             shift and go to state 21
    LITERAL         shift and go to state 22
    IF              shift and go to state 24
    WHILE           shift and go to state 26
    FOR             shift and go to state 27
    INTERFACE       shift and go to state 28
    CONTINUE        shift and go to state 29
    BREAK           shift and go to state 30
    RETURN          shift and go to state 31
    FUNCTION        shift and go to state 32
    NOT             shift and go to state 37
    MENOS           shift and go to state 34
    MAS             shift and go to state 33
    ENTERO          shift and go to state 43
    DECIMAL         shift and go to state 44
    CADENA          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    L_PAREN         shift and go to state 20
    L_CORCHETE      shift and go to state 51
    L_LLAVE         shift and go to state 25

    a                              shift and go to state 23
    instruccion                    shift and go to state 52
    console_pro                    shift and go to state 4
    declaration_instruction        shift and go to state 5
    assig_pro                      shift and go to state 6
    interface_assign_pro           shift and go to state 7
    if_pro                         shift and go to state 8
    while_pro                      shift and go to state 9
    for_pro                        shift and go to state 10
    for_each_pro                   shift and go to state 11
    interface_pro                  shift and go to state 12
    continue_pro                   shift and go to state 13
    break_pro                      shift and go to state 14
    return_pro                     shift and go to state 15
    function_pro                   shift and go to state 16
    call_function_pro              shift and go to state 17
    sumadores                      shift and go to state 18
    b                              shift and go to state 35
    c                              shift and go to state 36
    d                              shift and go to state 38
    e                              shift and go to state 39
    f                              shift and go to state 40
    g                              shift and go to state 41
    h                              shift and go to state 42
    array_pro                      shift and go to state 48
    interface_assi                 shift and go to state 49
    array_val_pro                  shift and go to state 50

state 265

    (56) else_pro -> ELSE IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE . else_pro
    (56) else_pro -> . ELSE IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro
    (57) else_pro -> . ELSE L_LLAVE instrucciones R_LLAVE
    (58) else_pro -> .

    ELSE            shift and go to state 245
    SEMI_COLON      reduce using rule 58 (else_pro -> .)
    CONSOLE         reduce using rule 58 (else_pro -> .)
    LET             reduce using rule 58 (else_pro -> .)
    LITERAL         reduce using rule 58 (else_pro -> .)
    IF              reduce using rule 58 (else_pro -> .)
    WHILE           reduce using rule 58 (else_pro -> .)
    FOR             reduce using rule 58 (else_pro -> .)
    INTERFACE       reduce using rule 58 (else_pro -> .)
    CONTINUE        reduce using rule 58 (else_pro -> .)
    BREAK           reduce using rule 58 (else_pro -> .)
    RETURN          reduce using rule 58 (else_pro -> .)
    FUNCTION        reduce using rule 58 (else_pro -> .)
    NOT             reduce using rule 58 (else_pro -> .)
    MENOS           reduce using rule 58 (else_pro -> .)
    MAS             reduce using rule 58 (else_pro -> .)
    ENTERO          reduce using rule 58 (else_pro -> .)
    DECIMAL         reduce using rule 58 (else_pro -> .)
    CADENA          reduce using rule 58 (else_pro -> .)
    TRUE            reduce using rule 58 (else_pro -> .)
    FALSE           reduce using rule 58 (else_pro -> .)
    L_PAREN         reduce using rule 58 (else_pro -> .)
    L_CORCHETE      reduce using rule 58 (else_pro -> .)
    L_LLAVE         reduce using rule 58 (else_pro -> .)
    $end            reduce using rule 58 (else_pro -> .)
    R_LLAVE         reduce using rule 58 (else_pro -> .)

    else_pro                       shift and go to state 266

state 266

    (56) else_pro -> ELSE IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .

    SEMI_COLON      reduce using rule 56 (else_pro -> ELSE IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    CONSOLE         reduce using rule 56 (else_pro -> ELSE IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    LET             reduce using rule 56 (else_pro -> ELSE IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    LITERAL         reduce using rule 56 (else_pro -> ELSE IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    IF              reduce using rule 56 (else_pro -> ELSE IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    WHILE           reduce using rule 56 (else_pro -> ELSE IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    FOR             reduce using rule 56 (else_pro -> ELSE IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    INTERFACE       reduce using rule 56 (else_pro -> ELSE IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    CONTINUE        reduce using rule 56 (else_pro -> ELSE IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    BREAK           reduce using rule 56 (else_pro -> ELSE IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    RETURN          reduce using rule 56 (else_pro -> ELSE IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    FUNCTION        reduce using rule 56 (else_pro -> ELSE IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    NOT             reduce using rule 56 (else_pro -> ELSE IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    MENOS           reduce using rule 56 (else_pro -> ELSE IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    MAS             reduce using rule 56 (else_pro -> ELSE IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    ENTERO          reduce using rule 56 (else_pro -> ELSE IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    DECIMAL         reduce using rule 56 (else_pro -> ELSE IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    CADENA          reduce using rule 56 (else_pro -> ELSE IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    TRUE            reduce using rule 56 (else_pro -> ELSE IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    FALSE           reduce using rule 56 (else_pro -> ELSE IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    L_PAREN         reduce using rule 56 (else_pro -> ELSE IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    L_CORCHETE      reduce using rule 56 (else_pro -> ELSE IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    L_LLAVE         reduce using rule 56 (else_pro -> ELSE IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    $end            reduce using rule 56 (else_pro -> ELSE IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    R_LLAVE         reduce using rule 56 (else_pro -> ELSE IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for MAS in state 22 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 22 resolved as shift
WARNING: shift/reduce conflict for NOT in state 31 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 31 resolved as shift
WARNING: shift/reduce conflict for MAS in state 31 resolved as shift
WARNING: shift/reduce conflict for ENTERO in state 31 resolved as shift
WARNING: shift/reduce conflict for DECIMAL in state 31 resolved as shift
WARNING: shift/reduce conflict for CADENA in state 31 resolved as shift
WARNING: shift/reduce conflict for LITERAL in state 31 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 31 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 31 resolved as shift
WARNING: shift/reduce conflict for L_PAREN in state 31 resolved as shift
WARNING: shift/reduce conflict for L_CORCHETE in state 31 resolved as shift
WARNING: shift/reduce conflict for L_LLAVE in state 31 resolved as shift
WARNING: shift/reduce conflict for MAS in state 39 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 39 resolved as shift
WARNING: shift/reduce conflict for L_PAREN in state 71 resolved as shift
WARNING: shift/reduce conflict for L_CORCHETE in state 71 resolved as shift
WARNING: shift/reduce conflict for L_CORCHETE in state 80 resolved as shift
WARNING: shift/reduce conflict for MAS in state 147 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 147 resolved as shift
WARNING: shift/reduce conflict for MAS in state 148 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 148 resolved as shift
WARNING: shift/reduce conflict for MAS in state 149 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 149 resolved as shift
WARNING: shift/reduce conflict for MAS in state 150 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 150 resolved as shift
WARNING: shift/reduce conflict for MAS in state 151 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 151 resolved as shift
WARNING: shift/reduce conflict for MAS in state 152 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 152 resolved as shift
WARNING: reduce/reduce conflict in state 17 resolved using rule (sc -> <empty>)
WARNING: rejected rule (h -> call_function_pro) in state 17
WARNING: reduce/reduce conflict in state 92 resolved using rule (f -> MAS g)
WARNING: rejected rule (f -> g) in state 92
WARNING: reduce/reduce conflict in state 94 resolved using rule (f -> MENOS g)
WARNING: rejected rule (f -> g) in state 94
WARNING: reduce/reduce conflict in state 96 resolved using rule (c -> NOT d)
WARNING: rejected rule (c -> d) in state 96
WARNING: reduce/reduce conflict in state 133 resolved using rule (a -> a OR b)
WARNING: rejected rule (a -> b) in state 133
WARNING: reduce/reduce conflict in state 146 resolved using rule (b -> b AND c)
WARNING: rejected rule (b -> c) in state 146
WARNING: reduce/reduce conflict in state 147 resolved using rule (d -> d DISTINTO_QUE e)
WARNING: rejected rule (d -> e) in state 147
WARNING: reduce/reduce conflict in state 148 resolved using rule (d -> d MENOR_QUE e)
WARNING: rejected rule (d -> e) in state 148
WARNING: reduce/reduce conflict in state 149 resolved using rule (d -> d MENOR_IGUAL_QUE e)
WARNING: rejected rule (d -> e) in state 149
WARNING: reduce/reduce conflict in state 150 resolved using rule (d -> d MAYOR_QUE e)
WARNING: rejected rule (d -> e) in state 150
WARNING: reduce/reduce conflict in state 151 resolved using rule (d -> d MAYOR_IGUAL_QUE e)
WARNING: rejected rule (d -> e) in state 151
WARNING: reduce/reduce conflict in state 152 resolved using rule (d -> d TRIPLE_IGUAL e)
WARNING: rejected rule (d -> e) in state 152
WARNING: reduce/reduce conflict in state 153 resolved using rule (e -> e MAS f)
WARNING: rejected rule (e -> f) in state 153
WARNING: reduce/reduce conflict in state 154 resolved using rule (e -> e MENOS f)
WARNING: rejected rule (e -> f) in state 154
WARNING: reduce/reduce conflict in state 155 resolved using rule (g -> g TIMES h)
WARNING: rejected rule (g -> h) in state 155
WARNING: reduce/reduce conflict in state 156 resolved using rule (g -> g DIVIDE h)
WARNING: rejected rule (g -> h) in state 156
WARNING: reduce/reduce conflict in state 157 resolved using rule (g -> g MOD h)
WARNING: rejected rule (g -> h) in state 157
WARNING: reduce/reduce conflict in state 158 resolved using rule (g -> g POTENCIA h)
WARNING: rejected rule (g -> h) in state 158
