Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    BREAK
    CONCAT
    CONTINUE
    FOR
    FUNCTION
    INTERFACE
    L_CORCHETE
    NULL
    RETURN
    R_CORCHETE
    SPLIT
    TOEXPONENTIAL
    TOFIXED
    TOLOWERCASE
    TOSTRING
    TOUPPERCASE

Grammar

Rule 0     S' -> init
Rule 1     init -> instrucciones
Rule 2     instrucciones -> instrucciones instruccion
Rule 3     instrucciones -> instruccion
Rule 4     instruccion -> console_pro
Rule 5     instruccion -> declaration_instruction
Rule 6     instruccion -> assig_pro
Rule 7     instruccion -> if_pro
Rule 8     instruccion -> while_pro
Rule 9     instruccion -> sumadores SEMI_COLON
Rule 10    declaration_instruction -> LET declaracion_list SEMI_COLON
Rule 11    declaracion_list -> declaracion_list COMA assignacion_instruction
Rule 12    declaracion_list -> assignacion_instruction
Rule 13    assignacion_instruction -> LITERAL COLON type IGUAL a
Rule 14    assignacion_instruction -> LITERAL COLON type
Rule 15    assignacion_instruction -> LITERAL IGUAL a
Rule 16    type -> NUMBER
Rule 17    type -> STRING
Rule 18    type -> BOOLEAN
Rule 19    type -> ANY
Rule 20    assig_pro -> LITERAL IGUAL a SEMI_COLON
Rule 21    if_pro -> IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro
Rule 22    else_pro -> ELSE IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro
Rule 23    else_pro -> ELSE L_LLAVE instrucciones R_LLAVE
Rule 24    else_pro -> <empty>
Rule 25    while_pro -> WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE
Rule 26    console_pro -> CONSOLE PUNTO LOG L_PAREN expresion R_PAREN SEMI_COLON
Rule 27    expresion -> expresion COMA a
Rule 28    expresion -> a
Rule 29    a -> a OR b
Rule 30    a -> b
Rule 31    b -> b AND c
Rule 32    b -> c
Rule 33    c -> NOT d
Rule 34    c -> d
Rule 35    d -> d DISTINTO_QUE e
Rule 36    d -> d MENOR_QUE e
Rule 37    d -> d MENOR_IGUAL_QUE e
Rule 38    d -> d MAYOR_QUE e
Rule 39    d -> d MAYOR_IGUAL_QUE e
Rule 40    d -> d TRIPLE_IGUAL e
Rule 41    d -> e
Rule 42    e -> e MAS f
Rule 43    e -> e MENOS f
Rule 44    e -> f
Rule 45    f -> f TIMES g
Rule 46    f -> f DIVIDE g
Rule 47    f -> f MOD g
Rule 48    f -> f POTENCIA g
Rule 49    f -> g
Rule 50    g -> ENTERO
Rule 51    g -> DECIMAL
Rule 52    g -> CADENA
Rule 53    g -> LITERAL
Rule 54    g -> L_PAREN a R_PAREN
Rule 55    sumadores -> LITERAL MAS MAS
Rule 56    sumadores -> LITERAL MENOS MENOS

Terminals, with rules where they appear

AND                  : 31
ANY                  : 19
BOOLEAN              : 18
BREAK                : 
CADENA               : 52
COLON                : 13 14
COMA                 : 11 27
CONCAT               : 
CONSOLE              : 26
CONTINUE             : 
DECIMAL              : 51
DISTINTO_QUE         : 35
DIVIDE               : 46
ELSE                 : 22 23
ENTERO               : 50
FOR                  : 
FUNCTION             : 
IF                   : 21 22
IGUAL                : 13 15 20
INTERFACE            : 
LET                  : 10
LITERAL              : 13 14 15 20 53 55 56
LOG                  : 26
L_CORCHETE           : 
L_LLAVE              : 21 22 23 25
L_PAREN              : 21 22 25 26 54
MAS                  : 42 55 55
MAYOR_IGUAL_QUE      : 39
MAYOR_QUE            : 38
MENOR_IGUAL_QUE      : 37
MENOR_QUE            : 36
MENOS                : 43 56 56
MOD                  : 47
NOT                  : 33
NULL                 : 
NUMBER               : 16
OR                   : 29
POTENCIA             : 48
PUNTO                : 26
RETURN               : 
R_CORCHETE           : 
R_LLAVE              : 21 22 23 25
R_PAREN              : 21 22 25 26 54
SEMI_COLON           : 9 10 20 26
SPLIT                : 
STRING               : 17
TIMES                : 45
TOEXPONENTIAL        : 
TOFIXED              : 
TOLOWERCASE          : 
TOSTRING             : 
TOUPPERCASE          : 
TRIPLE_IGUAL         : 40
WHILE                : 25
error                : 

Nonterminals, with rules where they appear

a                    : 13 15 20 21 22 25 27 28 29 54
assig_pro            : 6
assignacion_instruction : 11 12
b                    : 29 30 31
c                    : 31 32
console_pro          : 4
d                    : 33 34 35 36 37 38 39 40
declaracion_list     : 10 11
declaration_instruction : 5
e                    : 35 36 37 38 39 40 41 42 43
else_pro             : 21 22
expresion            : 26 27
f                    : 42 43 44 45 46 47 48
g                    : 45 46 47 48 49
if_pro               : 7
init                 : 0
instruccion          : 2 3
instrucciones        : 1 2 21 22 23 25
sumadores            : 9
type                 : 13 14
while_pro            : 8

Parsing method: LALR

state 0

    (0) S' -> . init
    (1) init -> . instrucciones
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . console_pro
    (5) instruccion -> . declaration_instruction
    (6) instruccion -> . assig_pro
    (7) instruccion -> . if_pro
    (8) instruccion -> . while_pro
    (9) instruccion -> . sumadores SEMI_COLON
    (26) console_pro -> . CONSOLE PUNTO LOG L_PAREN expresion R_PAREN SEMI_COLON
    (10) declaration_instruction -> . LET declaracion_list SEMI_COLON
    (20) assig_pro -> . LITERAL IGUAL a SEMI_COLON
    (21) if_pro -> . IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro
    (25) while_pro -> . WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE
    (55) sumadores -> . LITERAL MAS MAS
    (56) sumadores -> . LITERAL MENOS MENOS

    CONSOLE         shift and go to state 10
    LET             shift and go to state 11
    LITERAL         shift and go to state 12
    IF              shift and go to state 13
    WHILE           shift and go to state 14

    init                           shift and go to state 1
    instrucciones                  shift and go to state 2
    instruccion                    shift and go to state 3
    console_pro                    shift and go to state 4
    declaration_instruction        shift and go to state 5
    assig_pro                      shift and go to state 6
    if_pro                         shift and go to state 7
    while_pro                      shift and go to state 8
    sumadores                      shift and go to state 9

state 1

    (0) S' -> init .



state 2

    (1) init -> instrucciones .
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . console_pro
    (5) instruccion -> . declaration_instruction
    (6) instruccion -> . assig_pro
    (7) instruccion -> . if_pro
    (8) instruccion -> . while_pro
    (9) instruccion -> . sumadores SEMI_COLON
    (26) console_pro -> . CONSOLE PUNTO LOG L_PAREN expresion R_PAREN SEMI_COLON
    (10) declaration_instruction -> . LET declaracion_list SEMI_COLON
    (20) assig_pro -> . LITERAL IGUAL a SEMI_COLON
    (21) if_pro -> . IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro
    (25) while_pro -> . WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE
    (55) sumadores -> . LITERAL MAS MAS
    (56) sumadores -> . LITERAL MENOS MENOS

    $end            reduce using rule 1 (init -> instrucciones .)
    CONSOLE         shift and go to state 10
    LET             shift and go to state 11
    LITERAL         shift and go to state 12
    IF              shift and go to state 13
    WHILE           shift and go to state 14

    instruccion                    shift and go to state 15
    console_pro                    shift and go to state 4
    declaration_instruction        shift and go to state 5
    assig_pro                      shift and go to state 6
    if_pro                         shift and go to state 7
    while_pro                      shift and go to state 8
    sumadores                      shift and go to state 9

state 3

    (3) instrucciones -> instruccion .

    CONSOLE         reduce using rule 3 (instrucciones -> instruccion .)
    LET             reduce using rule 3 (instrucciones -> instruccion .)
    LITERAL         reduce using rule 3 (instrucciones -> instruccion .)
    IF              reduce using rule 3 (instrucciones -> instruccion .)
    WHILE           reduce using rule 3 (instrucciones -> instruccion .)
    $end            reduce using rule 3 (instrucciones -> instruccion .)
    R_LLAVE         reduce using rule 3 (instrucciones -> instruccion .)


state 4

    (4) instruccion -> console_pro .

    CONSOLE         reduce using rule 4 (instruccion -> console_pro .)
    LET             reduce using rule 4 (instruccion -> console_pro .)
    LITERAL         reduce using rule 4 (instruccion -> console_pro .)
    IF              reduce using rule 4 (instruccion -> console_pro .)
    WHILE           reduce using rule 4 (instruccion -> console_pro .)
    $end            reduce using rule 4 (instruccion -> console_pro .)
    R_LLAVE         reduce using rule 4 (instruccion -> console_pro .)


state 5

    (5) instruccion -> declaration_instruction .

    CONSOLE         reduce using rule 5 (instruccion -> declaration_instruction .)
    LET             reduce using rule 5 (instruccion -> declaration_instruction .)
    LITERAL         reduce using rule 5 (instruccion -> declaration_instruction .)
    IF              reduce using rule 5 (instruccion -> declaration_instruction .)
    WHILE           reduce using rule 5 (instruccion -> declaration_instruction .)
    $end            reduce using rule 5 (instruccion -> declaration_instruction .)
    R_LLAVE         reduce using rule 5 (instruccion -> declaration_instruction .)


state 6

    (6) instruccion -> assig_pro .

    CONSOLE         reduce using rule 6 (instruccion -> assig_pro .)
    LET             reduce using rule 6 (instruccion -> assig_pro .)
    LITERAL         reduce using rule 6 (instruccion -> assig_pro .)
    IF              reduce using rule 6 (instruccion -> assig_pro .)
    WHILE           reduce using rule 6 (instruccion -> assig_pro .)
    $end            reduce using rule 6 (instruccion -> assig_pro .)
    R_LLAVE         reduce using rule 6 (instruccion -> assig_pro .)


state 7

    (7) instruccion -> if_pro .

    CONSOLE         reduce using rule 7 (instruccion -> if_pro .)
    LET             reduce using rule 7 (instruccion -> if_pro .)
    LITERAL         reduce using rule 7 (instruccion -> if_pro .)
    IF              reduce using rule 7 (instruccion -> if_pro .)
    WHILE           reduce using rule 7 (instruccion -> if_pro .)
    $end            reduce using rule 7 (instruccion -> if_pro .)
    R_LLAVE         reduce using rule 7 (instruccion -> if_pro .)


state 8

    (8) instruccion -> while_pro .

    CONSOLE         reduce using rule 8 (instruccion -> while_pro .)
    LET             reduce using rule 8 (instruccion -> while_pro .)
    LITERAL         reduce using rule 8 (instruccion -> while_pro .)
    IF              reduce using rule 8 (instruccion -> while_pro .)
    WHILE           reduce using rule 8 (instruccion -> while_pro .)
    $end            reduce using rule 8 (instruccion -> while_pro .)
    R_LLAVE         reduce using rule 8 (instruccion -> while_pro .)


state 9

    (9) instruccion -> sumadores . SEMI_COLON

    SEMI_COLON      shift and go to state 16


state 10

    (26) console_pro -> CONSOLE . PUNTO LOG L_PAREN expresion R_PAREN SEMI_COLON

    PUNTO           shift and go to state 17


state 11

    (10) declaration_instruction -> LET . declaracion_list SEMI_COLON
    (11) declaracion_list -> . declaracion_list COMA assignacion_instruction
    (12) declaracion_list -> . assignacion_instruction
    (13) assignacion_instruction -> . LITERAL COLON type IGUAL a
    (14) assignacion_instruction -> . LITERAL COLON type
    (15) assignacion_instruction -> . LITERAL IGUAL a

    LITERAL         shift and go to state 20

    declaracion_list               shift and go to state 18
    assignacion_instruction        shift and go to state 19

state 12

    (20) assig_pro -> LITERAL . IGUAL a SEMI_COLON
    (55) sumadores -> LITERAL . MAS MAS
    (56) sumadores -> LITERAL . MENOS MENOS

    IGUAL           shift and go to state 21
    MAS             shift and go to state 22
    MENOS           shift and go to state 23


state 13

    (21) if_pro -> IF . L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro

    L_PAREN         shift and go to state 24


state 14

    (25) while_pro -> WHILE . L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE

    L_PAREN         shift and go to state 25


state 15

    (2) instrucciones -> instrucciones instruccion .

    CONSOLE         reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    LET             reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    LITERAL         reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    IF              reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    WHILE           reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    $end            reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    R_LLAVE         reduce using rule 2 (instrucciones -> instrucciones instruccion .)


state 16

    (9) instruccion -> sumadores SEMI_COLON .

    CONSOLE         reduce using rule 9 (instruccion -> sumadores SEMI_COLON .)
    LET             reduce using rule 9 (instruccion -> sumadores SEMI_COLON .)
    LITERAL         reduce using rule 9 (instruccion -> sumadores SEMI_COLON .)
    IF              reduce using rule 9 (instruccion -> sumadores SEMI_COLON .)
    WHILE           reduce using rule 9 (instruccion -> sumadores SEMI_COLON .)
    $end            reduce using rule 9 (instruccion -> sumadores SEMI_COLON .)
    R_LLAVE         reduce using rule 9 (instruccion -> sumadores SEMI_COLON .)


state 17

    (26) console_pro -> CONSOLE PUNTO . LOG L_PAREN expresion R_PAREN SEMI_COLON

    LOG             shift and go to state 26


state 18

    (10) declaration_instruction -> LET declaracion_list . SEMI_COLON
    (11) declaracion_list -> declaracion_list . COMA assignacion_instruction

    SEMI_COLON      shift and go to state 27
    COMA            shift and go to state 28


state 19

    (12) declaracion_list -> assignacion_instruction .

    SEMI_COLON      reduce using rule 12 (declaracion_list -> assignacion_instruction .)
    COMA            reduce using rule 12 (declaracion_list -> assignacion_instruction .)


state 20

    (13) assignacion_instruction -> LITERAL . COLON type IGUAL a
    (14) assignacion_instruction -> LITERAL . COLON type
    (15) assignacion_instruction -> LITERAL . IGUAL a

    COLON           shift and go to state 29
    IGUAL           shift and go to state 30


state 21

    (20) assig_pro -> LITERAL IGUAL . a SEMI_COLON
    (29) a -> . a OR b
    (30) a -> . b
    (31) b -> . b AND c
    (32) b -> . c
    (33) c -> . NOT d
    (34) c -> . d
    (35) d -> . d DISTINTO_QUE e
    (36) d -> . d MENOR_QUE e
    (37) d -> . d MENOR_IGUAL_QUE e
    (38) d -> . d MAYOR_QUE e
    (39) d -> . d MAYOR_IGUAL_QUE e
    (40) d -> . d TRIPLE_IGUAL e
    (41) d -> . e
    (42) e -> . e MAS f
    (43) e -> . e MENOS f
    (44) e -> . f
    (45) f -> . f TIMES g
    (46) f -> . f DIVIDE g
    (47) f -> . f MOD g
    (48) f -> . f POTENCIA g
    (49) f -> . g
    (50) g -> . ENTERO
    (51) g -> . DECIMAL
    (52) g -> . CADENA
    (53) g -> . LITERAL
    (54) g -> . L_PAREN a R_PAREN

    NOT             shift and go to state 35
    ENTERO          shift and go to state 40
    DECIMAL         shift and go to state 41
    CADENA          shift and go to state 42
    LITERAL         shift and go to state 31
    L_PAREN         shift and go to state 43

    a                              shift and go to state 32
    b                              shift and go to state 33
    c                              shift and go to state 34
    d                              shift and go to state 36
    e                              shift and go to state 37
    f                              shift and go to state 38
    g                              shift and go to state 39

state 22

    (55) sumadores -> LITERAL MAS . MAS

    MAS             shift and go to state 44


state 23

    (56) sumadores -> LITERAL MENOS . MENOS

    MENOS           shift and go to state 45


state 24

    (21) if_pro -> IF L_PAREN . a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro
    (29) a -> . a OR b
    (30) a -> . b
    (31) b -> . b AND c
    (32) b -> . c
    (33) c -> . NOT d
    (34) c -> . d
    (35) d -> . d DISTINTO_QUE e
    (36) d -> . d MENOR_QUE e
    (37) d -> . d MENOR_IGUAL_QUE e
    (38) d -> . d MAYOR_QUE e
    (39) d -> . d MAYOR_IGUAL_QUE e
    (40) d -> . d TRIPLE_IGUAL e
    (41) d -> . e
    (42) e -> . e MAS f
    (43) e -> . e MENOS f
    (44) e -> . f
    (45) f -> . f TIMES g
    (46) f -> . f DIVIDE g
    (47) f -> . f MOD g
    (48) f -> . f POTENCIA g
    (49) f -> . g
    (50) g -> . ENTERO
    (51) g -> . DECIMAL
    (52) g -> . CADENA
    (53) g -> . LITERAL
    (54) g -> . L_PAREN a R_PAREN

    NOT             shift and go to state 35
    ENTERO          shift and go to state 40
    DECIMAL         shift and go to state 41
    CADENA          shift and go to state 42
    LITERAL         shift and go to state 31
    L_PAREN         shift and go to state 43

    a                              shift and go to state 46
    b                              shift and go to state 33
    c                              shift and go to state 34
    d                              shift and go to state 36
    e                              shift and go to state 37
    f                              shift and go to state 38
    g                              shift and go to state 39

state 25

    (25) while_pro -> WHILE L_PAREN . a R_PAREN L_LLAVE instrucciones R_LLAVE
    (29) a -> . a OR b
    (30) a -> . b
    (31) b -> . b AND c
    (32) b -> . c
    (33) c -> . NOT d
    (34) c -> . d
    (35) d -> . d DISTINTO_QUE e
    (36) d -> . d MENOR_QUE e
    (37) d -> . d MENOR_IGUAL_QUE e
    (38) d -> . d MAYOR_QUE e
    (39) d -> . d MAYOR_IGUAL_QUE e
    (40) d -> . d TRIPLE_IGUAL e
    (41) d -> . e
    (42) e -> . e MAS f
    (43) e -> . e MENOS f
    (44) e -> . f
    (45) f -> . f TIMES g
    (46) f -> . f DIVIDE g
    (47) f -> . f MOD g
    (48) f -> . f POTENCIA g
    (49) f -> . g
    (50) g -> . ENTERO
    (51) g -> . DECIMAL
    (52) g -> . CADENA
    (53) g -> . LITERAL
    (54) g -> . L_PAREN a R_PAREN

    NOT             shift and go to state 35
    ENTERO          shift and go to state 40
    DECIMAL         shift and go to state 41
    CADENA          shift and go to state 42
    LITERAL         shift and go to state 31
    L_PAREN         shift and go to state 43

    a                              shift and go to state 47
    b                              shift and go to state 33
    c                              shift and go to state 34
    d                              shift and go to state 36
    e                              shift and go to state 37
    f                              shift and go to state 38
    g                              shift and go to state 39

state 26

    (26) console_pro -> CONSOLE PUNTO LOG . L_PAREN expresion R_PAREN SEMI_COLON

    L_PAREN         shift and go to state 48


state 27

    (10) declaration_instruction -> LET declaracion_list SEMI_COLON .

    CONSOLE         reduce using rule 10 (declaration_instruction -> LET declaracion_list SEMI_COLON .)
    LET             reduce using rule 10 (declaration_instruction -> LET declaracion_list SEMI_COLON .)
    LITERAL         reduce using rule 10 (declaration_instruction -> LET declaracion_list SEMI_COLON .)
    IF              reduce using rule 10 (declaration_instruction -> LET declaracion_list SEMI_COLON .)
    WHILE           reduce using rule 10 (declaration_instruction -> LET declaracion_list SEMI_COLON .)
    $end            reduce using rule 10 (declaration_instruction -> LET declaracion_list SEMI_COLON .)
    R_LLAVE         reduce using rule 10 (declaration_instruction -> LET declaracion_list SEMI_COLON .)


state 28

    (11) declaracion_list -> declaracion_list COMA . assignacion_instruction
    (13) assignacion_instruction -> . LITERAL COLON type IGUAL a
    (14) assignacion_instruction -> . LITERAL COLON type
    (15) assignacion_instruction -> . LITERAL IGUAL a

    LITERAL         shift and go to state 20

    assignacion_instruction        shift and go to state 49

state 29

    (13) assignacion_instruction -> LITERAL COLON . type IGUAL a
    (14) assignacion_instruction -> LITERAL COLON . type
    (16) type -> . NUMBER
    (17) type -> . STRING
    (18) type -> . BOOLEAN
    (19) type -> . ANY

    NUMBER          shift and go to state 51
    STRING          shift and go to state 52
    BOOLEAN         shift and go to state 53
    ANY             shift and go to state 54

    type                           shift and go to state 50

state 30

    (15) assignacion_instruction -> LITERAL IGUAL . a
    (29) a -> . a OR b
    (30) a -> . b
    (31) b -> . b AND c
    (32) b -> . c
    (33) c -> . NOT d
    (34) c -> . d
    (35) d -> . d DISTINTO_QUE e
    (36) d -> . d MENOR_QUE e
    (37) d -> . d MENOR_IGUAL_QUE e
    (38) d -> . d MAYOR_QUE e
    (39) d -> . d MAYOR_IGUAL_QUE e
    (40) d -> . d TRIPLE_IGUAL e
    (41) d -> . e
    (42) e -> . e MAS f
    (43) e -> . e MENOS f
    (44) e -> . f
    (45) f -> . f TIMES g
    (46) f -> . f DIVIDE g
    (47) f -> . f MOD g
    (48) f -> . f POTENCIA g
    (49) f -> . g
    (50) g -> . ENTERO
    (51) g -> . DECIMAL
    (52) g -> . CADENA
    (53) g -> . LITERAL
    (54) g -> . L_PAREN a R_PAREN

    NOT             shift and go to state 35
    ENTERO          shift and go to state 40
    DECIMAL         shift and go to state 41
    CADENA          shift and go to state 42
    LITERAL         shift and go to state 31
    L_PAREN         shift and go to state 43

    a                              shift and go to state 55
    b                              shift and go to state 33
    c                              shift and go to state 34
    d                              shift and go to state 36
    e                              shift and go to state 37
    f                              shift and go to state 38
    g                              shift and go to state 39

state 31

    (53) g -> LITERAL .

    TIMES           reduce using rule 53 (g -> LITERAL .)
    DIVIDE          reduce using rule 53 (g -> LITERAL .)
    MOD             reduce using rule 53 (g -> LITERAL .)
    POTENCIA        reduce using rule 53 (g -> LITERAL .)
    MAS             reduce using rule 53 (g -> LITERAL .)
    MENOS           reduce using rule 53 (g -> LITERAL .)
    DISTINTO_QUE    reduce using rule 53 (g -> LITERAL .)
    MENOR_QUE       reduce using rule 53 (g -> LITERAL .)
    MENOR_IGUAL_QUE reduce using rule 53 (g -> LITERAL .)
    MAYOR_QUE       reduce using rule 53 (g -> LITERAL .)
    MAYOR_IGUAL_QUE reduce using rule 53 (g -> LITERAL .)
    TRIPLE_IGUAL    reduce using rule 53 (g -> LITERAL .)
    AND             reduce using rule 53 (g -> LITERAL .)
    SEMI_COLON      reduce using rule 53 (g -> LITERAL .)
    OR              reduce using rule 53 (g -> LITERAL .)
    R_PAREN         reduce using rule 53 (g -> LITERAL .)
    COMA            reduce using rule 53 (g -> LITERAL .)


state 32

    (20) assig_pro -> LITERAL IGUAL a . SEMI_COLON
    (29) a -> a . OR b

    SEMI_COLON      shift and go to state 56
    OR              shift and go to state 57


state 33

    (30) a -> b .
    (31) b -> b . AND c

    SEMI_COLON      reduce using rule 30 (a -> b .)
    OR              reduce using rule 30 (a -> b .)
    R_PAREN         reduce using rule 30 (a -> b .)
    COMA            reduce using rule 30 (a -> b .)
    AND             shift and go to state 58


state 34

    (32) b -> c .

    AND             reduce using rule 32 (b -> c .)
    SEMI_COLON      reduce using rule 32 (b -> c .)
    OR              reduce using rule 32 (b -> c .)
    R_PAREN         reduce using rule 32 (b -> c .)
    COMA            reduce using rule 32 (b -> c .)


state 35

    (33) c -> NOT . d
    (35) d -> . d DISTINTO_QUE e
    (36) d -> . d MENOR_QUE e
    (37) d -> . d MENOR_IGUAL_QUE e
    (38) d -> . d MAYOR_QUE e
    (39) d -> . d MAYOR_IGUAL_QUE e
    (40) d -> . d TRIPLE_IGUAL e
    (41) d -> . e
    (42) e -> . e MAS f
    (43) e -> . e MENOS f
    (44) e -> . f
    (45) f -> . f TIMES g
    (46) f -> . f DIVIDE g
    (47) f -> . f MOD g
    (48) f -> . f POTENCIA g
    (49) f -> . g
    (50) g -> . ENTERO
    (51) g -> . DECIMAL
    (52) g -> . CADENA
    (53) g -> . LITERAL
    (54) g -> . L_PAREN a R_PAREN

    ENTERO          shift and go to state 40
    DECIMAL         shift and go to state 41
    CADENA          shift and go to state 42
    LITERAL         shift and go to state 31
    L_PAREN         shift and go to state 43

    d                              shift and go to state 59
    e                              shift and go to state 37
    f                              shift and go to state 38
    g                              shift and go to state 39

state 36

    (34) c -> d .
    (35) d -> d . DISTINTO_QUE e
    (36) d -> d . MENOR_QUE e
    (37) d -> d . MENOR_IGUAL_QUE e
    (38) d -> d . MAYOR_QUE e
    (39) d -> d . MAYOR_IGUAL_QUE e
    (40) d -> d . TRIPLE_IGUAL e

    AND             reduce using rule 34 (c -> d .)
    SEMI_COLON      reduce using rule 34 (c -> d .)
    OR              reduce using rule 34 (c -> d .)
    R_PAREN         reduce using rule 34 (c -> d .)
    COMA            reduce using rule 34 (c -> d .)
    DISTINTO_QUE    shift and go to state 60
    MENOR_QUE       shift and go to state 61
    MENOR_IGUAL_QUE shift and go to state 62
    MAYOR_QUE       shift and go to state 63
    MAYOR_IGUAL_QUE shift and go to state 64
    TRIPLE_IGUAL    shift and go to state 65


state 37

    (41) d -> e .
    (42) e -> e . MAS f
    (43) e -> e . MENOS f

    DISTINTO_QUE    reduce using rule 41 (d -> e .)
    MENOR_QUE       reduce using rule 41 (d -> e .)
    MENOR_IGUAL_QUE reduce using rule 41 (d -> e .)
    MAYOR_QUE       reduce using rule 41 (d -> e .)
    MAYOR_IGUAL_QUE reduce using rule 41 (d -> e .)
    TRIPLE_IGUAL    reduce using rule 41 (d -> e .)
    AND             reduce using rule 41 (d -> e .)
    SEMI_COLON      reduce using rule 41 (d -> e .)
    OR              reduce using rule 41 (d -> e .)
    R_PAREN         reduce using rule 41 (d -> e .)
    COMA            reduce using rule 41 (d -> e .)
    MAS             shift and go to state 66
    MENOS           shift and go to state 67


state 38

    (44) e -> f .
    (45) f -> f . TIMES g
    (46) f -> f . DIVIDE g
    (47) f -> f . MOD g
    (48) f -> f . POTENCIA g

    MAS             reduce using rule 44 (e -> f .)
    MENOS           reduce using rule 44 (e -> f .)
    DISTINTO_QUE    reduce using rule 44 (e -> f .)
    MENOR_QUE       reduce using rule 44 (e -> f .)
    MENOR_IGUAL_QUE reduce using rule 44 (e -> f .)
    MAYOR_QUE       reduce using rule 44 (e -> f .)
    MAYOR_IGUAL_QUE reduce using rule 44 (e -> f .)
    TRIPLE_IGUAL    reduce using rule 44 (e -> f .)
    AND             reduce using rule 44 (e -> f .)
    SEMI_COLON      reduce using rule 44 (e -> f .)
    OR              reduce using rule 44 (e -> f .)
    R_PAREN         reduce using rule 44 (e -> f .)
    COMA            reduce using rule 44 (e -> f .)
    TIMES           shift and go to state 68
    DIVIDE          shift and go to state 69
    MOD             shift and go to state 70
    POTENCIA        shift and go to state 71


state 39

    (49) f -> g .

    TIMES           reduce using rule 49 (f -> g .)
    DIVIDE          reduce using rule 49 (f -> g .)
    MOD             reduce using rule 49 (f -> g .)
    POTENCIA        reduce using rule 49 (f -> g .)
    MAS             reduce using rule 49 (f -> g .)
    MENOS           reduce using rule 49 (f -> g .)
    DISTINTO_QUE    reduce using rule 49 (f -> g .)
    MENOR_QUE       reduce using rule 49 (f -> g .)
    MENOR_IGUAL_QUE reduce using rule 49 (f -> g .)
    MAYOR_QUE       reduce using rule 49 (f -> g .)
    MAYOR_IGUAL_QUE reduce using rule 49 (f -> g .)
    TRIPLE_IGUAL    reduce using rule 49 (f -> g .)
    AND             reduce using rule 49 (f -> g .)
    SEMI_COLON      reduce using rule 49 (f -> g .)
    OR              reduce using rule 49 (f -> g .)
    R_PAREN         reduce using rule 49 (f -> g .)
    COMA            reduce using rule 49 (f -> g .)


state 40

    (50) g -> ENTERO .

    TIMES           reduce using rule 50 (g -> ENTERO .)
    DIVIDE          reduce using rule 50 (g -> ENTERO .)
    MOD             reduce using rule 50 (g -> ENTERO .)
    POTENCIA        reduce using rule 50 (g -> ENTERO .)
    MAS             reduce using rule 50 (g -> ENTERO .)
    MENOS           reduce using rule 50 (g -> ENTERO .)
    DISTINTO_QUE    reduce using rule 50 (g -> ENTERO .)
    MENOR_QUE       reduce using rule 50 (g -> ENTERO .)
    MENOR_IGUAL_QUE reduce using rule 50 (g -> ENTERO .)
    MAYOR_QUE       reduce using rule 50 (g -> ENTERO .)
    MAYOR_IGUAL_QUE reduce using rule 50 (g -> ENTERO .)
    TRIPLE_IGUAL    reduce using rule 50 (g -> ENTERO .)
    AND             reduce using rule 50 (g -> ENTERO .)
    SEMI_COLON      reduce using rule 50 (g -> ENTERO .)
    OR              reduce using rule 50 (g -> ENTERO .)
    R_PAREN         reduce using rule 50 (g -> ENTERO .)
    COMA            reduce using rule 50 (g -> ENTERO .)


state 41

    (51) g -> DECIMAL .

    TIMES           reduce using rule 51 (g -> DECIMAL .)
    DIVIDE          reduce using rule 51 (g -> DECIMAL .)
    MOD             reduce using rule 51 (g -> DECIMAL .)
    POTENCIA        reduce using rule 51 (g -> DECIMAL .)
    MAS             reduce using rule 51 (g -> DECIMAL .)
    MENOS           reduce using rule 51 (g -> DECIMAL .)
    DISTINTO_QUE    reduce using rule 51 (g -> DECIMAL .)
    MENOR_QUE       reduce using rule 51 (g -> DECIMAL .)
    MENOR_IGUAL_QUE reduce using rule 51 (g -> DECIMAL .)
    MAYOR_QUE       reduce using rule 51 (g -> DECIMAL .)
    MAYOR_IGUAL_QUE reduce using rule 51 (g -> DECIMAL .)
    TRIPLE_IGUAL    reduce using rule 51 (g -> DECIMAL .)
    AND             reduce using rule 51 (g -> DECIMAL .)
    SEMI_COLON      reduce using rule 51 (g -> DECIMAL .)
    OR              reduce using rule 51 (g -> DECIMAL .)
    R_PAREN         reduce using rule 51 (g -> DECIMAL .)
    COMA            reduce using rule 51 (g -> DECIMAL .)


state 42

    (52) g -> CADENA .

    TIMES           reduce using rule 52 (g -> CADENA .)
    DIVIDE          reduce using rule 52 (g -> CADENA .)
    MOD             reduce using rule 52 (g -> CADENA .)
    POTENCIA        reduce using rule 52 (g -> CADENA .)
    MAS             reduce using rule 52 (g -> CADENA .)
    MENOS           reduce using rule 52 (g -> CADENA .)
    DISTINTO_QUE    reduce using rule 52 (g -> CADENA .)
    MENOR_QUE       reduce using rule 52 (g -> CADENA .)
    MENOR_IGUAL_QUE reduce using rule 52 (g -> CADENA .)
    MAYOR_QUE       reduce using rule 52 (g -> CADENA .)
    MAYOR_IGUAL_QUE reduce using rule 52 (g -> CADENA .)
    TRIPLE_IGUAL    reduce using rule 52 (g -> CADENA .)
    AND             reduce using rule 52 (g -> CADENA .)
    SEMI_COLON      reduce using rule 52 (g -> CADENA .)
    OR              reduce using rule 52 (g -> CADENA .)
    R_PAREN         reduce using rule 52 (g -> CADENA .)
    COMA            reduce using rule 52 (g -> CADENA .)


state 43

    (54) g -> L_PAREN . a R_PAREN
    (29) a -> . a OR b
    (30) a -> . b
    (31) b -> . b AND c
    (32) b -> . c
    (33) c -> . NOT d
    (34) c -> . d
    (35) d -> . d DISTINTO_QUE e
    (36) d -> . d MENOR_QUE e
    (37) d -> . d MENOR_IGUAL_QUE e
    (38) d -> . d MAYOR_QUE e
    (39) d -> . d MAYOR_IGUAL_QUE e
    (40) d -> . d TRIPLE_IGUAL e
    (41) d -> . e
    (42) e -> . e MAS f
    (43) e -> . e MENOS f
    (44) e -> . f
    (45) f -> . f TIMES g
    (46) f -> . f DIVIDE g
    (47) f -> . f MOD g
    (48) f -> . f POTENCIA g
    (49) f -> . g
    (50) g -> . ENTERO
    (51) g -> . DECIMAL
    (52) g -> . CADENA
    (53) g -> . LITERAL
    (54) g -> . L_PAREN a R_PAREN

    NOT             shift and go to state 35
    ENTERO          shift and go to state 40
    DECIMAL         shift and go to state 41
    CADENA          shift and go to state 42
    LITERAL         shift and go to state 31
    L_PAREN         shift and go to state 43

    a                              shift and go to state 72
    b                              shift and go to state 33
    c                              shift and go to state 34
    d                              shift and go to state 36
    e                              shift and go to state 37
    f                              shift and go to state 38
    g                              shift and go to state 39

state 44

    (55) sumadores -> LITERAL MAS MAS .

    SEMI_COLON      reduce using rule 55 (sumadores -> LITERAL MAS MAS .)


state 45

    (56) sumadores -> LITERAL MENOS MENOS .

    SEMI_COLON      reduce using rule 56 (sumadores -> LITERAL MENOS MENOS .)


state 46

    (21) if_pro -> IF L_PAREN a . R_PAREN L_LLAVE instrucciones R_LLAVE else_pro
    (29) a -> a . OR b

    R_PAREN         shift and go to state 73
    OR              shift and go to state 57


state 47

    (25) while_pro -> WHILE L_PAREN a . R_PAREN L_LLAVE instrucciones R_LLAVE
    (29) a -> a . OR b

    R_PAREN         shift and go to state 74
    OR              shift and go to state 57


state 48

    (26) console_pro -> CONSOLE PUNTO LOG L_PAREN . expresion R_PAREN SEMI_COLON
    (27) expresion -> . expresion COMA a
    (28) expresion -> . a
    (29) a -> . a OR b
    (30) a -> . b
    (31) b -> . b AND c
    (32) b -> . c
    (33) c -> . NOT d
    (34) c -> . d
    (35) d -> . d DISTINTO_QUE e
    (36) d -> . d MENOR_QUE e
    (37) d -> . d MENOR_IGUAL_QUE e
    (38) d -> . d MAYOR_QUE e
    (39) d -> . d MAYOR_IGUAL_QUE e
    (40) d -> . d TRIPLE_IGUAL e
    (41) d -> . e
    (42) e -> . e MAS f
    (43) e -> . e MENOS f
    (44) e -> . f
    (45) f -> . f TIMES g
    (46) f -> . f DIVIDE g
    (47) f -> . f MOD g
    (48) f -> . f POTENCIA g
    (49) f -> . g
    (50) g -> . ENTERO
    (51) g -> . DECIMAL
    (52) g -> . CADENA
    (53) g -> . LITERAL
    (54) g -> . L_PAREN a R_PAREN

    NOT             shift and go to state 35
    ENTERO          shift and go to state 40
    DECIMAL         shift and go to state 41
    CADENA          shift and go to state 42
    LITERAL         shift and go to state 31
    L_PAREN         shift and go to state 43

    expresion                      shift and go to state 75
    a                              shift and go to state 76
    b                              shift and go to state 33
    c                              shift and go to state 34
    d                              shift and go to state 36
    e                              shift and go to state 37
    f                              shift and go to state 38
    g                              shift and go to state 39

state 49

    (11) declaracion_list -> declaracion_list COMA assignacion_instruction .

    SEMI_COLON      reduce using rule 11 (declaracion_list -> declaracion_list COMA assignacion_instruction .)
    COMA            reduce using rule 11 (declaracion_list -> declaracion_list COMA assignacion_instruction .)


state 50

    (13) assignacion_instruction -> LITERAL COLON type . IGUAL a
    (14) assignacion_instruction -> LITERAL COLON type .

    IGUAL           shift and go to state 77
    SEMI_COLON      reduce using rule 14 (assignacion_instruction -> LITERAL COLON type .)
    COMA            reduce using rule 14 (assignacion_instruction -> LITERAL COLON type .)


state 51

    (16) type -> NUMBER .

    IGUAL           reduce using rule 16 (type -> NUMBER .)
    SEMI_COLON      reduce using rule 16 (type -> NUMBER .)
    COMA            reduce using rule 16 (type -> NUMBER .)


state 52

    (17) type -> STRING .

    IGUAL           reduce using rule 17 (type -> STRING .)
    SEMI_COLON      reduce using rule 17 (type -> STRING .)
    COMA            reduce using rule 17 (type -> STRING .)


state 53

    (18) type -> BOOLEAN .

    IGUAL           reduce using rule 18 (type -> BOOLEAN .)
    SEMI_COLON      reduce using rule 18 (type -> BOOLEAN .)
    COMA            reduce using rule 18 (type -> BOOLEAN .)


state 54

    (19) type -> ANY .

    IGUAL           reduce using rule 19 (type -> ANY .)
    SEMI_COLON      reduce using rule 19 (type -> ANY .)
    COMA            reduce using rule 19 (type -> ANY .)


state 55

    (15) assignacion_instruction -> LITERAL IGUAL a .
    (29) a -> a . OR b

    SEMI_COLON      reduce using rule 15 (assignacion_instruction -> LITERAL IGUAL a .)
    COMA            reduce using rule 15 (assignacion_instruction -> LITERAL IGUAL a .)
    OR              shift and go to state 57


state 56

    (20) assig_pro -> LITERAL IGUAL a SEMI_COLON .

    CONSOLE         reduce using rule 20 (assig_pro -> LITERAL IGUAL a SEMI_COLON .)
    LET             reduce using rule 20 (assig_pro -> LITERAL IGUAL a SEMI_COLON .)
    LITERAL         reduce using rule 20 (assig_pro -> LITERAL IGUAL a SEMI_COLON .)
    IF              reduce using rule 20 (assig_pro -> LITERAL IGUAL a SEMI_COLON .)
    WHILE           reduce using rule 20 (assig_pro -> LITERAL IGUAL a SEMI_COLON .)
    $end            reduce using rule 20 (assig_pro -> LITERAL IGUAL a SEMI_COLON .)
    R_LLAVE         reduce using rule 20 (assig_pro -> LITERAL IGUAL a SEMI_COLON .)


state 57

    (29) a -> a OR . b
    (31) b -> . b AND c
    (32) b -> . c
    (33) c -> . NOT d
    (34) c -> . d
    (35) d -> . d DISTINTO_QUE e
    (36) d -> . d MENOR_QUE e
    (37) d -> . d MENOR_IGUAL_QUE e
    (38) d -> . d MAYOR_QUE e
    (39) d -> . d MAYOR_IGUAL_QUE e
    (40) d -> . d TRIPLE_IGUAL e
    (41) d -> . e
    (42) e -> . e MAS f
    (43) e -> . e MENOS f
    (44) e -> . f
    (45) f -> . f TIMES g
    (46) f -> . f DIVIDE g
    (47) f -> . f MOD g
    (48) f -> . f POTENCIA g
    (49) f -> . g
    (50) g -> . ENTERO
    (51) g -> . DECIMAL
    (52) g -> . CADENA
    (53) g -> . LITERAL
    (54) g -> . L_PAREN a R_PAREN

    NOT             shift and go to state 35
    ENTERO          shift and go to state 40
    DECIMAL         shift and go to state 41
    CADENA          shift and go to state 42
    LITERAL         shift and go to state 31
    L_PAREN         shift and go to state 43

    b                              shift and go to state 78
    c                              shift and go to state 34
    d                              shift and go to state 36
    e                              shift and go to state 37
    f                              shift and go to state 38
    g                              shift and go to state 39

state 58

    (31) b -> b AND . c
    (33) c -> . NOT d
    (34) c -> . d
    (35) d -> . d DISTINTO_QUE e
    (36) d -> . d MENOR_QUE e
    (37) d -> . d MENOR_IGUAL_QUE e
    (38) d -> . d MAYOR_QUE e
    (39) d -> . d MAYOR_IGUAL_QUE e
    (40) d -> . d TRIPLE_IGUAL e
    (41) d -> . e
    (42) e -> . e MAS f
    (43) e -> . e MENOS f
    (44) e -> . f
    (45) f -> . f TIMES g
    (46) f -> . f DIVIDE g
    (47) f -> . f MOD g
    (48) f -> . f POTENCIA g
    (49) f -> . g
    (50) g -> . ENTERO
    (51) g -> . DECIMAL
    (52) g -> . CADENA
    (53) g -> . LITERAL
    (54) g -> . L_PAREN a R_PAREN

    NOT             shift and go to state 35
    ENTERO          shift and go to state 40
    DECIMAL         shift and go to state 41
    CADENA          shift and go to state 42
    LITERAL         shift and go to state 31
    L_PAREN         shift and go to state 43

    c                              shift and go to state 79
    d                              shift and go to state 36
    e                              shift and go to state 37
    f                              shift and go to state 38
    g                              shift and go to state 39

state 59

    (33) c -> NOT d .
    (35) d -> d . DISTINTO_QUE e
    (36) d -> d . MENOR_QUE e
    (37) d -> d . MENOR_IGUAL_QUE e
    (38) d -> d . MAYOR_QUE e
    (39) d -> d . MAYOR_IGUAL_QUE e
    (40) d -> d . TRIPLE_IGUAL e

    AND             reduce using rule 33 (c -> NOT d .)
    SEMI_COLON      reduce using rule 33 (c -> NOT d .)
    OR              reduce using rule 33 (c -> NOT d .)
    R_PAREN         reduce using rule 33 (c -> NOT d .)
    COMA            reduce using rule 33 (c -> NOT d .)
    DISTINTO_QUE    shift and go to state 60
    MENOR_QUE       shift and go to state 61
    MENOR_IGUAL_QUE shift and go to state 62
    MAYOR_QUE       shift and go to state 63
    MAYOR_IGUAL_QUE shift and go to state 64
    TRIPLE_IGUAL    shift and go to state 65


state 60

    (35) d -> d DISTINTO_QUE . e
    (42) e -> . e MAS f
    (43) e -> . e MENOS f
    (44) e -> . f
    (45) f -> . f TIMES g
    (46) f -> . f DIVIDE g
    (47) f -> . f MOD g
    (48) f -> . f POTENCIA g
    (49) f -> . g
    (50) g -> . ENTERO
    (51) g -> . DECIMAL
    (52) g -> . CADENA
    (53) g -> . LITERAL
    (54) g -> . L_PAREN a R_PAREN

    ENTERO          shift and go to state 40
    DECIMAL         shift and go to state 41
    CADENA          shift and go to state 42
    LITERAL         shift and go to state 31
    L_PAREN         shift and go to state 43

    e                              shift and go to state 80
    f                              shift and go to state 38
    g                              shift and go to state 39

state 61

    (36) d -> d MENOR_QUE . e
    (42) e -> . e MAS f
    (43) e -> . e MENOS f
    (44) e -> . f
    (45) f -> . f TIMES g
    (46) f -> . f DIVIDE g
    (47) f -> . f MOD g
    (48) f -> . f POTENCIA g
    (49) f -> . g
    (50) g -> . ENTERO
    (51) g -> . DECIMAL
    (52) g -> . CADENA
    (53) g -> . LITERAL
    (54) g -> . L_PAREN a R_PAREN

    ENTERO          shift and go to state 40
    DECIMAL         shift and go to state 41
    CADENA          shift and go to state 42
    LITERAL         shift and go to state 31
    L_PAREN         shift and go to state 43

    e                              shift and go to state 81
    f                              shift and go to state 38
    g                              shift and go to state 39

state 62

    (37) d -> d MENOR_IGUAL_QUE . e
    (42) e -> . e MAS f
    (43) e -> . e MENOS f
    (44) e -> . f
    (45) f -> . f TIMES g
    (46) f -> . f DIVIDE g
    (47) f -> . f MOD g
    (48) f -> . f POTENCIA g
    (49) f -> . g
    (50) g -> . ENTERO
    (51) g -> . DECIMAL
    (52) g -> . CADENA
    (53) g -> . LITERAL
    (54) g -> . L_PAREN a R_PAREN

    ENTERO          shift and go to state 40
    DECIMAL         shift and go to state 41
    CADENA          shift and go to state 42
    LITERAL         shift and go to state 31
    L_PAREN         shift and go to state 43

    e                              shift and go to state 82
    f                              shift and go to state 38
    g                              shift and go to state 39

state 63

    (38) d -> d MAYOR_QUE . e
    (42) e -> . e MAS f
    (43) e -> . e MENOS f
    (44) e -> . f
    (45) f -> . f TIMES g
    (46) f -> . f DIVIDE g
    (47) f -> . f MOD g
    (48) f -> . f POTENCIA g
    (49) f -> . g
    (50) g -> . ENTERO
    (51) g -> . DECIMAL
    (52) g -> . CADENA
    (53) g -> . LITERAL
    (54) g -> . L_PAREN a R_PAREN

    ENTERO          shift and go to state 40
    DECIMAL         shift and go to state 41
    CADENA          shift and go to state 42
    LITERAL         shift and go to state 31
    L_PAREN         shift and go to state 43

    e                              shift and go to state 83
    f                              shift and go to state 38
    g                              shift and go to state 39

state 64

    (39) d -> d MAYOR_IGUAL_QUE . e
    (42) e -> . e MAS f
    (43) e -> . e MENOS f
    (44) e -> . f
    (45) f -> . f TIMES g
    (46) f -> . f DIVIDE g
    (47) f -> . f MOD g
    (48) f -> . f POTENCIA g
    (49) f -> . g
    (50) g -> . ENTERO
    (51) g -> . DECIMAL
    (52) g -> . CADENA
    (53) g -> . LITERAL
    (54) g -> . L_PAREN a R_PAREN

    ENTERO          shift and go to state 40
    DECIMAL         shift and go to state 41
    CADENA          shift and go to state 42
    LITERAL         shift and go to state 31
    L_PAREN         shift and go to state 43

    e                              shift and go to state 84
    f                              shift and go to state 38
    g                              shift and go to state 39

state 65

    (40) d -> d TRIPLE_IGUAL . e
    (42) e -> . e MAS f
    (43) e -> . e MENOS f
    (44) e -> . f
    (45) f -> . f TIMES g
    (46) f -> . f DIVIDE g
    (47) f -> . f MOD g
    (48) f -> . f POTENCIA g
    (49) f -> . g
    (50) g -> . ENTERO
    (51) g -> . DECIMAL
    (52) g -> . CADENA
    (53) g -> . LITERAL
    (54) g -> . L_PAREN a R_PAREN

    ENTERO          shift and go to state 40
    DECIMAL         shift and go to state 41
    CADENA          shift and go to state 42
    LITERAL         shift and go to state 31
    L_PAREN         shift and go to state 43

    e                              shift and go to state 85
    f                              shift and go to state 38
    g                              shift and go to state 39

state 66

    (42) e -> e MAS . f
    (45) f -> . f TIMES g
    (46) f -> . f DIVIDE g
    (47) f -> . f MOD g
    (48) f -> . f POTENCIA g
    (49) f -> . g
    (50) g -> . ENTERO
    (51) g -> . DECIMAL
    (52) g -> . CADENA
    (53) g -> . LITERAL
    (54) g -> . L_PAREN a R_PAREN

    ENTERO          shift and go to state 40
    DECIMAL         shift and go to state 41
    CADENA          shift and go to state 42
    LITERAL         shift and go to state 31
    L_PAREN         shift and go to state 43

    f                              shift and go to state 86
    g                              shift and go to state 39

state 67

    (43) e -> e MENOS . f
    (45) f -> . f TIMES g
    (46) f -> . f DIVIDE g
    (47) f -> . f MOD g
    (48) f -> . f POTENCIA g
    (49) f -> . g
    (50) g -> . ENTERO
    (51) g -> . DECIMAL
    (52) g -> . CADENA
    (53) g -> . LITERAL
    (54) g -> . L_PAREN a R_PAREN

    ENTERO          shift and go to state 40
    DECIMAL         shift and go to state 41
    CADENA          shift and go to state 42
    LITERAL         shift and go to state 31
    L_PAREN         shift and go to state 43

    f                              shift and go to state 87
    g                              shift and go to state 39

state 68

    (45) f -> f TIMES . g
    (50) g -> . ENTERO
    (51) g -> . DECIMAL
    (52) g -> . CADENA
    (53) g -> . LITERAL
    (54) g -> . L_PAREN a R_PAREN

    ENTERO          shift and go to state 40
    DECIMAL         shift and go to state 41
    CADENA          shift and go to state 42
    LITERAL         shift and go to state 31
    L_PAREN         shift and go to state 43

    g                              shift and go to state 88

state 69

    (46) f -> f DIVIDE . g
    (50) g -> . ENTERO
    (51) g -> . DECIMAL
    (52) g -> . CADENA
    (53) g -> . LITERAL
    (54) g -> . L_PAREN a R_PAREN

    ENTERO          shift and go to state 40
    DECIMAL         shift and go to state 41
    CADENA          shift and go to state 42
    LITERAL         shift and go to state 31
    L_PAREN         shift and go to state 43

    g                              shift and go to state 89

state 70

    (47) f -> f MOD . g
    (50) g -> . ENTERO
    (51) g -> . DECIMAL
    (52) g -> . CADENA
    (53) g -> . LITERAL
    (54) g -> . L_PAREN a R_PAREN

    ENTERO          shift and go to state 40
    DECIMAL         shift and go to state 41
    CADENA          shift and go to state 42
    LITERAL         shift and go to state 31
    L_PAREN         shift and go to state 43

    g                              shift and go to state 90

state 71

    (48) f -> f POTENCIA . g
    (50) g -> . ENTERO
    (51) g -> . DECIMAL
    (52) g -> . CADENA
    (53) g -> . LITERAL
    (54) g -> . L_PAREN a R_PAREN

    ENTERO          shift and go to state 40
    DECIMAL         shift and go to state 41
    CADENA          shift and go to state 42
    LITERAL         shift and go to state 31
    L_PAREN         shift and go to state 43

    g                              shift and go to state 91

state 72

    (54) g -> L_PAREN a . R_PAREN
    (29) a -> a . OR b

    R_PAREN         shift and go to state 92
    OR              shift and go to state 57


state 73

    (21) if_pro -> IF L_PAREN a R_PAREN . L_LLAVE instrucciones R_LLAVE else_pro

    L_LLAVE         shift and go to state 93


state 74

    (25) while_pro -> WHILE L_PAREN a R_PAREN . L_LLAVE instrucciones R_LLAVE

    L_LLAVE         shift and go to state 94


state 75

    (26) console_pro -> CONSOLE PUNTO LOG L_PAREN expresion . R_PAREN SEMI_COLON
    (27) expresion -> expresion . COMA a

    R_PAREN         shift and go to state 95
    COMA            shift and go to state 96


state 76

    (28) expresion -> a .
    (29) a -> a . OR b

    R_PAREN         reduce using rule 28 (expresion -> a .)
    COMA            reduce using rule 28 (expresion -> a .)
    OR              shift and go to state 57


state 77

    (13) assignacion_instruction -> LITERAL COLON type IGUAL . a
    (29) a -> . a OR b
    (30) a -> . b
    (31) b -> . b AND c
    (32) b -> . c
    (33) c -> . NOT d
    (34) c -> . d
    (35) d -> . d DISTINTO_QUE e
    (36) d -> . d MENOR_QUE e
    (37) d -> . d MENOR_IGUAL_QUE e
    (38) d -> . d MAYOR_QUE e
    (39) d -> . d MAYOR_IGUAL_QUE e
    (40) d -> . d TRIPLE_IGUAL e
    (41) d -> . e
    (42) e -> . e MAS f
    (43) e -> . e MENOS f
    (44) e -> . f
    (45) f -> . f TIMES g
    (46) f -> . f DIVIDE g
    (47) f -> . f MOD g
    (48) f -> . f POTENCIA g
    (49) f -> . g
    (50) g -> . ENTERO
    (51) g -> . DECIMAL
    (52) g -> . CADENA
    (53) g -> . LITERAL
    (54) g -> . L_PAREN a R_PAREN

    NOT             shift and go to state 35
    ENTERO          shift and go to state 40
    DECIMAL         shift and go to state 41
    CADENA          shift and go to state 42
    LITERAL         shift and go to state 31
    L_PAREN         shift and go to state 43

    a                              shift and go to state 97
    b                              shift and go to state 33
    c                              shift and go to state 34
    d                              shift and go to state 36
    e                              shift and go to state 37
    f                              shift and go to state 38
    g                              shift and go to state 39

state 78

    (29) a -> a OR b .
    (31) b -> b . AND c

    SEMI_COLON      reduce using rule 29 (a -> a OR b .)
    OR              reduce using rule 29 (a -> a OR b .)
    R_PAREN         reduce using rule 29 (a -> a OR b .)
    COMA            reduce using rule 29 (a -> a OR b .)
    AND             shift and go to state 58


state 79

    (31) b -> b AND c .

    AND             reduce using rule 31 (b -> b AND c .)
    SEMI_COLON      reduce using rule 31 (b -> b AND c .)
    OR              reduce using rule 31 (b -> b AND c .)
    R_PAREN         reduce using rule 31 (b -> b AND c .)
    COMA            reduce using rule 31 (b -> b AND c .)


state 80

    (35) d -> d DISTINTO_QUE e .
    (42) e -> e . MAS f
    (43) e -> e . MENOS f

    DISTINTO_QUE    reduce using rule 35 (d -> d DISTINTO_QUE e .)
    MENOR_QUE       reduce using rule 35 (d -> d DISTINTO_QUE e .)
    MENOR_IGUAL_QUE reduce using rule 35 (d -> d DISTINTO_QUE e .)
    MAYOR_QUE       reduce using rule 35 (d -> d DISTINTO_QUE e .)
    MAYOR_IGUAL_QUE reduce using rule 35 (d -> d DISTINTO_QUE e .)
    TRIPLE_IGUAL    reduce using rule 35 (d -> d DISTINTO_QUE e .)
    AND             reduce using rule 35 (d -> d DISTINTO_QUE e .)
    SEMI_COLON      reduce using rule 35 (d -> d DISTINTO_QUE e .)
    OR              reduce using rule 35 (d -> d DISTINTO_QUE e .)
    R_PAREN         reduce using rule 35 (d -> d DISTINTO_QUE e .)
    COMA            reduce using rule 35 (d -> d DISTINTO_QUE e .)
    MAS             shift and go to state 66
    MENOS           shift and go to state 67


state 81

    (36) d -> d MENOR_QUE e .
    (42) e -> e . MAS f
    (43) e -> e . MENOS f

    DISTINTO_QUE    reduce using rule 36 (d -> d MENOR_QUE e .)
    MENOR_QUE       reduce using rule 36 (d -> d MENOR_QUE e .)
    MENOR_IGUAL_QUE reduce using rule 36 (d -> d MENOR_QUE e .)
    MAYOR_QUE       reduce using rule 36 (d -> d MENOR_QUE e .)
    MAYOR_IGUAL_QUE reduce using rule 36 (d -> d MENOR_QUE e .)
    TRIPLE_IGUAL    reduce using rule 36 (d -> d MENOR_QUE e .)
    AND             reduce using rule 36 (d -> d MENOR_QUE e .)
    SEMI_COLON      reduce using rule 36 (d -> d MENOR_QUE e .)
    OR              reduce using rule 36 (d -> d MENOR_QUE e .)
    R_PAREN         reduce using rule 36 (d -> d MENOR_QUE e .)
    COMA            reduce using rule 36 (d -> d MENOR_QUE e .)
    MAS             shift and go to state 66
    MENOS           shift and go to state 67


state 82

    (37) d -> d MENOR_IGUAL_QUE e .
    (42) e -> e . MAS f
    (43) e -> e . MENOS f

    DISTINTO_QUE    reduce using rule 37 (d -> d MENOR_IGUAL_QUE e .)
    MENOR_QUE       reduce using rule 37 (d -> d MENOR_IGUAL_QUE e .)
    MENOR_IGUAL_QUE reduce using rule 37 (d -> d MENOR_IGUAL_QUE e .)
    MAYOR_QUE       reduce using rule 37 (d -> d MENOR_IGUAL_QUE e .)
    MAYOR_IGUAL_QUE reduce using rule 37 (d -> d MENOR_IGUAL_QUE e .)
    TRIPLE_IGUAL    reduce using rule 37 (d -> d MENOR_IGUAL_QUE e .)
    AND             reduce using rule 37 (d -> d MENOR_IGUAL_QUE e .)
    SEMI_COLON      reduce using rule 37 (d -> d MENOR_IGUAL_QUE e .)
    OR              reduce using rule 37 (d -> d MENOR_IGUAL_QUE e .)
    R_PAREN         reduce using rule 37 (d -> d MENOR_IGUAL_QUE e .)
    COMA            reduce using rule 37 (d -> d MENOR_IGUAL_QUE e .)
    MAS             shift and go to state 66
    MENOS           shift and go to state 67


state 83

    (38) d -> d MAYOR_QUE e .
    (42) e -> e . MAS f
    (43) e -> e . MENOS f

    DISTINTO_QUE    reduce using rule 38 (d -> d MAYOR_QUE e .)
    MENOR_QUE       reduce using rule 38 (d -> d MAYOR_QUE e .)
    MENOR_IGUAL_QUE reduce using rule 38 (d -> d MAYOR_QUE e .)
    MAYOR_QUE       reduce using rule 38 (d -> d MAYOR_QUE e .)
    MAYOR_IGUAL_QUE reduce using rule 38 (d -> d MAYOR_QUE e .)
    TRIPLE_IGUAL    reduce using rule 38 (d -> d MAYOR_QUE e .)
    AND             reduce using rule 38 (d -> d MAYOR_QUE e .)
    SEMI_COLON      reduce using rule 38 (d -> d MAYOR_QUE e .)
    OR              reduce using rule 38 (d -> d MAYOR_QUE e .)
    R_PAREN         reduce using rule 38 (d -> d MAYOR_QUE e .)
    COMA            reduce using rule 38 (d -> d MAYOR_QUE e .)
    MAS             shift and go to state 66
    MENOS           shift and go to state 67


state 84

    (39) d -> d MAYOR_IGUAL_QUE e .
    (42) e -> e . MAS f
    (43) e -> e . MENOS f

    DISTINTO_QUE    reduce using rule 39 (d -> d MAYOR_IGUAL_QUE e .)
    MENOR_QUE       reduce using rule 39 (d -> d MAYOR_IGUAL_QUE e .)
    MENOR_IGUAL_QUE reduce using rule 39 (d -> d MAYOR_IGUAL_QUE e .)
    MAYOR_QUE       reduce using rule 39 (d -> d MAYOR_IGUAL_QUE e .)
    MAYOR_IGUAL_QUE reduce using rule 39 (d -> d MAYOR_IGUAL_QUE e .)
    TRIPLE_IGUAL    reduce using rule 39 (d -> d MAYOR_IGUAL_QUE e .)
    AND             reduce using rule 39 (d -> d MAYOR_IGUAL_QUE e .)
    SEMI_COLON      reduce using rule 39 (d -> d MAYOR_IGUAL_QUE e .)
    OR              reduce using rule 39 (d -> d MAYOR_IGUAL_QUE e .)
    R_PAREN         reduce using rule 39 (d -> d MAYOR_IGUAL_QUE e .)
    COMA            reduce using rule 39 (d -> d MAYOR_IGUAL_QUE e .)
    MAS             shift and go to state 66
    MENOS           shift and go to state 67


state 85

    (40) d -> d TRIPLE_IGUAL e .
    (42) e -> e . MAS f
    (43) e -> e . MENOS f

    DISTINTO_QUE    reduce using rule 40 (d -> d TRIPLE_IGUAL e .)
    MENOR_QUE       reduce using rule 40 (d -> d TRIPLE_IGUAL e .)
    MENOR_IGUAL_QUE reduce using rule 40 (d -> d TRIPLE_IGUAL e .)
    MAYOR_QUE       reduce using rule 40 (d -> d TRIPLE_IGUAL e .)
    MAYOR_IGUAL_QUE reduce using rule 40 (d -> d TRIPLE_IGUAL e .)
    TRIPLE_IGUAL    reduce using rule 40 (d -> d TRIPLE_IGUAL e .)
    AND             reduce using rule 40 (d -> d TRIPLE_IGUAL e .)
    SEMI_COLON      reduce using rule 40 (d -> d TRIPLE_IGUAL e .)
    OR              reduce using rule 40 (d -> d TRIPLE_IGUAL e .)
    R_PAREN         reduce using rule 40 (d -> d TRIPLE_IGUAL e .)
    COMA            reduce using rule 40 (d -> d TRIPLE_IGUAL e .)
    MAS             shift and go to state 66
    MENOS           shift and go to state 67


state 86

    (42) e -> e MAS f .
    (45) f -> f . TIMES g
    (46) f -> f . DIVIDE g
    (47) f -> f . MOD g
    (48) f -> f . POTENCIA g

    MAS             reduce using rule 42 (e -> e MAS f .)
    MENOS           reduce using rule 42 (e -> e MAS f .)
    DISTINTO_QUE    reduce using rule 42 (e -> e MAS f .)
    MENOR_QUE       reduce using rule 42 (e -> e MAS f .)
    MENOR_IGUAL_QUE reduce using rule 42 (e -> e MAS f .)
    MAYOR_QUE       reduce using rule 42 (e -> e MAS f .)
    MAYOR_IGUAL_QUE reduce using rule 42 (e -> e MAS f .)
    TRIPLE_IGUAL    reduce using rule 42 (e -> e MAS f .)
    AND             reduce using rule 42 (e -> e MAS f .)
    SEMI_COLON      reduce using rule 42 (e -> e MAS f .)
    OR              reduce using rule 42 (e -> e MAS f .)
    R_PAREN         reduce using rule 42 (e -> e MAS f .)
    COMA            reduce using rule 42 (e -> e MAS f .)
    TIMES           shift and go to state 68
    DIVIDE          shift and go to state 69
    MOD             shift and go to state 70
    POTENCIA        shift and go to state 71


state 87

    (43) e -> e MENOS f .
    (45) f -> f . TIMES g
    (46) f -> f . DIVIDE g
    (47) f -> f . MOD g
    (48) f -> f . POTENCIA g

    MAS             reduce using rule 43 (e -> e MENOS f .)
    MENOS           reduce using rule 43 (e -> e MENOS f .)
    DISTINTO_QUE    reduce using rule 43 (e -> e MENOS f .)
    MENOR_QUE       reduce using rule 43 (e -> e MENOS f .)
    MENOR_IGUAL_QUE reduce using rule 43 (e -> e MENOS f .)
    MAYOR_QUE       reduce using rule 43 (e -> e MENOS f .)
    MAYOR_IGUAL_QUE reduce using rule 43 (e -> e MENOS f .)
    TRIPLE_IGUAL    reduce using rule 43 (e -> e MENOS f .)
    AND             reduce using rule 43 (e -> e MENOS f .)
    SEMI_COLON      reduce using rule 43 (e -> e MENOS f .)
    OR              reduce using rule 43 (e -> e MENOS f .)
    R_PAREN         reduce using rule 43 (e -> e MENOS f .)
    COMA            reduce using rule 43 (e -> e MENOS f .)
    TIMES           shift and go to state 68
    DIVIDE          shift and go to state 69
    MOD             shift and go to state 70
    POTENCIA        shift and go to state 71


state 88

    (45) f -> f TIMES g .

    TIMES           reduce using rule 45 (f -> f TIMES g .)
    DIVIDE          reduce using rule 45 (f -> f TIMES g .)
    MOD             reduce using rule 45 (f -> f TIMES g .)
    POTENCIA        reduce using rule 45 (f -> f TIMES g .)
    MAS             reduce using rule 45 (f -> f TIMES g .)
    MENOS           reduce using rule 45 (f -> f TIMES g .)
    DISTINTO_QUE    reduce using rule 45 (f -> f TIMES g .)
    MENOR_QUE       reduce using rule 45 (f -> f TIMES g .)
    MENOR_IGUAL_QUE reduce using rule 45 (f -> f TIMES g .)
    MAYOR_QUE       reduce using rule 45 (f -> f TIMES g .)
    MAYOR_IGUAL_QUE reduce using rule 45 (f -> f TIMES g .)
    TRIPLE_IGUAL    reduce using rule 45 (f -> f TIMES g .)
    AND             reduce using rule 45 (f -> f TIMES g .)
    SEMI_COLON      reduce using rule 45 (f -> f TIMES g .)
    OR              reduce using rule 45 (f -> f TIMES g .)
    R_PAREN         reduce using rule 45 (f -> f TIMES g .)
    COMA            reduce using rule 45 (f -> f TIMES g .)


state 89

    (46) f -> f DIVIDE g .

    TIMES           reduce using rule 46 (f -> f DIVIDE g .)
    DIVIDE          reduce using rule 46 (f -> f DIVIDE g .)
    MOD             reduce using rule 46 (f -> f DIVIDE g .)
    POTENCIA        reduce using rule 46 (f -> f DIVIDE g .)
    MAS             reduce using rule 46 (f -> f DIVIDE g .)
    MENOS           reduce using rule 46 (f -> f DIVIDE g .)
    DISTINTO_QUE    reduce using rule 46 (f -> f DIVIDE g .)
    MENOR_QUE       reduce using rule 46 (f -> f DIVIDE g .)
    MENOR_IGUAL_QUE reduce using rule 46 (f -> f DIVIDE g .)
    MAYOR_QUE       reduce using rule 46 (f -> f DIVIDE g .)
    MAYOR_IGUAL_QUE reduce using rule 46 (f -> f DIVIDE g .)
    TRIPLE_IGUAL    reduce using rule 46 (f -> f DIVIDE g .)
    AND             reduce using rule 46 (f -> f DIVIDE g .)
    SEMI_COLON      reduce using rule 46 (f -> f DIVIDE g .)
    OR              reduce using rule 46 (f -> f DIVIDE g .)
    R_PAREN         reduce using rule 46 (f -> f DIVIDE g .)
    COMA            reduce using rule 46 (f -> f DIVIDE g .)


state 90

    (47) f -> f MOD g .

    TIMES           reduce using rule 47 (f -> f MOD g .)
    DIVIDE          reduce using rule 47 (f -> f MOD g .)
    MOD             reduce using rule 47 (f -> f MOD g .)
    POTENCIA        reduce using rule 47 (f -> f MOD g .)
    MAS             reduce using rule 47 (f -> f MOD g .)
    MENOS           reduce using rule 47 (f -> f MOD g .)
    DISTINTO_QUE    reduce using rule 47 (f -> f MOD g .)
    MENOR_QUE       reduce using rule 47 (f -> f MOD g .)
    MENOR_IGUAL_QUE reduce using rule 47 (f -> f MOD g .)
    MAYOR_QUE       reduce using rule 47 (f -> f MOD g .)
    MAYOR_IGUAL_QUE reduce using rule 47 (f -> f MOD g .)
    TRIPLE_IGUAL    reduce using rule 47 (f -> f MOD g .)
    AND             reduce using rule 47 (f -> f MOD g .)
    SEMI_COLON      reduce using rule 47 (f -> f MOD g .)
    OR              reduce using rule 47 (f -> f MOD g .)
    R_PAREN         reduce using rule 47 (f -> f MOD g .)
    COMA            reduce using rule 47 (f -> f MOD g .)


state 91

    (48) f -> f POTENCIA g .

    TIMES           reduce using rule 48 (f -> f POTENCIA g .)
    DIVIDE          reduce using rule 48 (f -> f POTENCIA g .)
    MOD             reduce using rule 48 (f -> f POTENCIA g .)
    POTENCIA        reduce using rule 48 (f -> f POTENCIA g .)
    MAS             reduce using rule 48 (f -> f POTENCIA g .)
    MENOS           reduce using rule 48 (f -> f POTENCIA g .)
    DISTINTO_QUE    reduce using rule 48 (f -> f POTENCIA g .)
    MENOR_QUE       reduce using rule 48 (f -> f POTENCIA g .)
    MENOR_IGUAL_QUE reduce using rule 48 (f -> f POTENCIA g .)
    MAYOR_QUE       reduce using rule 48 (f -> f POTENCIA g .)
    MAYOR_IGUAL_QUE reduce using rule 48 (f -> f POTENCIA g .)
    TRIPLE_IGUAL    reduce using rule 48 (f -> f POTENCIA g .)
    AND             reduce using rule 48 (f -> f POTENCIA g .)
    SEMI_COLON      reduce using rule 48 (f -> f POTENCIA g .)
    OR              reduce using rule 48 (f -> f POTENCIA g .)
    R_PAREN         reduce using rule 48 (f -> f POTENCIA g .)
    COMA            reduce using rule 48 (f -> f POTENCIA g .)


state 92

    (54) g -> L_PAREN a R_PAREN .

    TIMES           reduce using rule 54 (g -> L_PAREN a R_PAREN .)
    DIVIDE          reduce using rule 54 (g -> L_PAREN a R_PAREN .)
    MOD             reduce using rule 54 (g -> L_PAREN a R_PAREN .)
    POTENCIA        reduce using rule 54 (g -> L_PAREN a R_PAREN .)
    MAS             reduce using rule 54 (g -> L_PAREN a R_PAREN .)
    MENOS           reduce using rule 54 (g -> L_PAREN a R_PAREN .)
    DISTINTO_QUE    reduce using rule 54 (g -> L_PAREN a R_PAREN .)
    MENOR_QUE       reduce using rule 54 (g -> L_PAREN a R_PAREN .)
    MENOR_IGUAL_QUE reduce using rule 54 (g -> L_PAREN a R_PAREN .)
    MAYOR_QUE       reduce using rule 54 (g -> L_PAREN a R_PAREN .)
    MAYOR_IGUAL_QUE reduce using rule 54 (g -> L_PAREN a R_PAREN .)
    TRIPLE_IGUAL    reduce using rule 54 (g -> L_PAREN a R_PAREN .)
    AND             reduce using rule 54 (g -> L_PAREN a R_PAREN .)
    SEMI_COLON      reduce using rule 54 (g -> L_PAREN a R_PAREN .)
    OR              reduce using rule 54 (g -> L_PAREN a R_PAREN .)
    R_PAREN         reduce using rule 54 (g -> L_PAREN a R_PAREN .)
    COMA            reduce using rule 54 (g -> L_PAREN a R_PAREN .)


state 93

    (21) if_pro -> IF L_PAREN a R_PAREN L_LLAVE . instrucciones R_LLAVE else_pro
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . console_pro
    (5) instruccion -> . declaration_instruction
    (6) instruccion -> . assig_pro
    (7) instruccion -> . if_pro
    (8) instruccion -> . while_pro
    (9) instruccion -> . sumadores SEMI_COLON
    (26) console_pro -> . CONSOLE PUNTO LOG L_PAREN expresion R_PAREN SEMI_COLON
    (10) declaration_instruction -> . LET declaracion_list SEMI_COLON
    (20) assig_pro -> . LITERAL IGUAL a SEMI_COLON
    (21) if_pro -> . IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro
    (25) while_pro -> . WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE
    (55) sumadores -> . LITERAL MAS MAS
    (56) sumadores -> . LITERAL MENOS MENOS

    CONSOLE         shift and go to state 10
    LET             shift and go to state 11
    LITERAL         shift and go to state 12
    IF              shift and go to state 13
    WHILE           shift and go to state 14

    instrucciones                  shift and go to state 98
    instruccion                    shift and go to state 3
    console_pro                    shift and go to state 4
    declaration_instruction        shift and go to state 5
    assig_pro                      shift and go to state 6
    if_pro                         shift and go to state 7
    while_pro                      shift and go to state 8
    sumadores                      shift and go to state 9

state 94

    (25) while_pro -> WHILE L_PAREN a R_PAREN L_LLAVE . instrucciones R_LLAVE
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . console_pro
    (5) instruccion -> . declaration_instruction
    (6) instruccion -> . assig_pro
    (7) instruccion -> . if_pro
    (8) instruccion -> . while_pro
    (9) instruccion -> . sumadores SEMI_COLON
    (26) console_pro -> . CONSOLE PUNTO LOG L_PAREN expresion R_PAREN SEMI_COLON
    (10) declaration_instruction -> . LET declaracion_list SEMI_COLON
    (20) assig_pro -> . LITERAL IGUAL a SEMI_COLON
    (21) if_pro -> . IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro
    (25) while_pro -> . WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE
    (55) sumadores -> . LITERAL MAS MAS
    (56) sumadores -> . LITERAL MENOS MENOS

    CONSOLE         shift and go to state 10
    LET             shift and go to state 11
    LITERAL         shift and go to state 12
    IF              shift and go to state 13
    WHILE           shift and go to state 14

    instrucciones                  shift and go to state 99
    instruccion                    shift and go to state 3
    console_pro                    shift and go to state 4
    declaration_instruction        shift and go to state 5
    assig_pro                      shift and go to state 6
    if_pro                         shift and go to state 7
    while_pro                      shift and go to state 8
    sumadores                      shift and go to state 9

state 95

    (26) console_pro -> CONSOLE PUNTO LOG L_PAREN expresion R_PAREN . SEMI_COLON

    SEMI_COLON      shift and go to state 100


state 96

    (27) expresion -> expresion COMA . a
    (29) a -> . a OR b
    (30) a -> . b
    (31) b -> . b AND c
    (32) b -> . c
    (33) c -> . NOT d
    (34) c -> . d
    (35) d -> . d DISTINTO_QUE e
    (36) d -> . d MENOR_QUE e
    (37) d -> . d MENOR_IGUAL_QUE e
    (38) d -> . d MAYOR_QUE e
    (39) d -> . d MAYOR_IGUAL_QUE e
    (40) d -> . d TRIPLE_IGUAL e
    (41) d -> . e
    (42) e -> . e MAS f
    (43) e -> . e MENOS f
    (44) e -> . f
    (45) f -> . f TIMES g
    (46) f -> . f DIVIDE g
    (47) f -> . f MOD g
    (48) f -> . f POTENCIA g
    (49) f -> . g
    (50) g -> . ENTERO
    (51) g -> . DECIMAL
    (52) g -> . CADENA
    (53) g -> . LITERAL
    (54) g -> . L_PAREN a R_PAREN

    NOT             shift and go to state 35
    ENTERO          shift and go to state 40
    DECIMAL         shift and go to state 41
    CADENA          shift and go to state 42
    LITERAL         shift and go to state 31
    L_PAREN         shift and go to state 43

    a                              shift and go to state 101
    b                              shift and go to state 33
    c                              shift and go to state 34
    d                              shift and go to state 36
    e                              shift and go to state 37
    f                              shift and go to state 38
    g                              shift and go to state 39

state 97

    (13) assignacion_instruction -> LITERAL COLON type IGUAL a .
    (29) a -> a . OR b

    SEMI_COLON      reduce using rule 13 (assignacion_instruction -> LITERAL COLON type IGUAL a .)
    COMA            reduce using rule 13 (assignacion_instruction -> LITERAL COLON type IGUAL a .)
    OR              shift and go to state 57


state 98

    (21) if_pro -> IF L_PAREN a R_PAREN L_LLAVE instrucciones . R_LLAVE else_pro
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . console_pro
    (5) instruccion -> . declaration_instruction
    (6) instruccion -> . assig_pro
    (7) instruccion -> . if_pro
    (8) instruccion -> . while_pro
    (9) instruccion -> . sumadores SEMI_COLON
    (26) console_pro -> . CONSOLE PUNTO LOG L_PAREN expresion R_PAREN SEMI_COLON
    (10) declaration_instruction -> . LET declaracion_list SEMI_COLON
    (20) assig_pro -> . LITERAL IGUAL a SEMI_COLON
    (21) if_pro -> . IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro
    (25) while_pro -> . WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE
    (55) sumadores -> . LITERAL MAS MAS
    (56) sumadores -> . LITERAL MENOS MENOS

    R_LLAVE         shift and go to state 102
    CONSOLE         shift and go to state 10
    LET             shift and go to state 11
    LITERAL         shift and go to state 12
    IF              shift and go to state 13
    WHILE           shift and go to state 14

    instruccion                    shift and go to state 15
    console_pro                    shift and go to state 4
    declaration_instruction        shift and go to state 5
    assig_pro                      shift and go to state 6
    if_pro                         shift and go to state 7
    while_pro                      shift and go to state 8
    sumadores                      shift and go to state 9

state 99

    (25) while_pro -> WHILE L_PAREN a R_PAREN L_LLAVE instrucciones . R_LLAVE
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . console_pro
    (5) instruccion -> . declaration_instruction
    (6) instruccion -> . assig_pro
    (7) instruccion -> . if_pro
    (8) instruccion -> . while_pro
    (9) instruccion -> . sumadores SEMI_COLON
    (26) console_pro -> . CONSOLE PUNTO LOG L_PAREN expresion R_PAREN SEMI_COLON
    (10) declaration_instruction -> . LET declaracion_list SEMI_COLON
    (20) assig_pro -> . LITERAL IGUAL a SEMI_COLON
    (21) if_pro -> . IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro
    (25) while_pro -> . WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE
    (55) sumadores -> . LITERAL MAS MAS
    (56) sumadores -> . LITERAL MENOS MENOS

    R_LLAVE         shift and go to state 103
    CONSOLE         shift and go to state 10
    LET             shift and go to state 11
    LITERAL         shift and go to state 12
    IF              shift and go to state 13
    WHILE           shift and go to state 14

    instruccion                    shift and go to state 15
    console_pro                    shift and go to state 4
    declaration_instruction        shift and go to state 5
    assig_pro                      shift and go to state 6
    if_pro                         shift and go to state 7
    while_pro                      shift and go to state 8
    sumadores                      shift and go to state 9

state 100

    (26) console_pro -> CONSOLE PUNTO LOG L_PAREN expresion R_PAREN SEMI_COLON .

    CONSOLE         reduce using rule 26 (console_pro -> CONSOLE PUNTO LOG L_PAREN expresion R_PAREN SEMI_COLON .)
    LET             reduce using rule 26 (console_pro -> CONSOLE PUNTO LOG L_PAREN expresion R_PAREN SEMI_COLON .)
    LITERAL         reduce using rule 26 (console_pro -> CONSOLE PUNTO LOG L_PAREN expresion R_PAREN SEMI_COLON .)
    IF              reduce using rule 26 (console_pro -> CONSOLE PUNTO LOG L_PAREN expresion R_PAREN SEMI_COLON .)
    WHILE           reduce using rule 26 (console_pro -> CONSOLE PUNTO LOG L_PAREN expresion R_PAREN SEMI_COLON .)
    $end            reduce using rule 26 (console_pro -> CONSOLE PUNTO LOG L_PAREN expresion R_PAREN SEMI_COLON .)
    R_LLAVE         reduce using rule 26 (console_pro -> CONSOLE PUNTO LOG L_PAREN expresion R_PAREN SEMI_COLON .)


state 101

    (27) expresion -> expresion COMA a .
    (29) a -> a . OR b

    R_PAREN         reduce using rule 27 (expresion -> expresion COMA a .)
    COMA            reduce using rule 27 (expresion -> expresion COMA a .)
    OR              shift and go to state 57


state 102

    (21) if_pro -> IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE . else_pro
    (22) else_pro -> . ELSE IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro
    (23) else_pro -> . ELSE L_LLAVE instrucciones R_LLAVE
    (24) else_pro -> .

    ELSE            shift and go to state 105
    CONSOLE         reduce using rule 24 (else_pro -> .)
    LET             reduce using rule 24 (else_pro -> .)
    LITERAL         reduce using rule 24 (else_pro -> .)
    IF              reduce using rule 24 (else_pro -> .)
    WHILE           reduce using rule 24 (else_pro -> .)
    $end            reduce using rule 24 (else_pro -> .)
    R_LLAVE         reduce using rule 24 (else_pro -> .)

    else_pro                       shift and go to state 104

state 103

    (25) while_pro -> WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE .

    CONSOLE         reduce using rule 25 (while_pro -> WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE .)
    LET             reduce using rule 25 (while_pro -> WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE .)
    LITERAL         reduce using rule 25 (while_pro -> WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE .)
    IF              reduce using rule 25 (while_pro -> WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE .)
    WHILE           reduce using rule 25 (while_pro -> WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE .)
    $end            reduce using rule 25 (while_pro -> WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE .)
    R_LLAVE         reduce using rule 25 (while_pro -> WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE .)


state 104

    (21) if_pro -> IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .

    CONSOLE         reduce using rule 21 (if_pro -> IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    LET             reduce using rule 21 (if_pro -> IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    LITERAL         reduce using rule 21 (if_pro -> IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    IF              reduce using rule 21 (if_pro -> IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    WHILE           reduce using rule 21 (if_pro -> IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    $end            reduce using rule 21 (if_pro -> IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    R_LLAVE         reduce using rule 21 (if_pro -> IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)


state 105

    (22) else_pro -> ELSE . IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro
    (23) else_pro -> ELSE . L_LLAVE instrucciones R_LLAVE

    IF              shift and go to state 106
    L_LLAVE         shift and go to state 107


state 106

    (22) else_pro -> ELSE IF . L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro

    L_PAREN         shift and go to state 108


state 107

    (23) else_pro -> ELSE L_LLAVE . instrucciones R_LLAVE
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . console_pro
    (5) instruccion -> . declaration_instruction
    (6) instruccion -> . assig_pro
    (7) instruccion -> . if_pro
    (8) instruccion -> . while_pro
    (9) instruccion -> . sumadores SEMI_COLON
    (26) console_pro -> . CONSOLE PUNTO LOG L_PAREN expresion R_PAREN SEMI_COLON
    (10) declaration_instruction -> . LET declaracion_list SEMI_COLON
    (20) assig_pro -> . LITERAL IGUAL a SEMI_COLON
    (21) if_pro -> . IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro
    (25) while_pro -> . WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE
    (55) sumadores -> . LITERAL MAS MAS
    (56) sumadores -> . LITERAL MENOS MENOS

    CONSOLE         shift and go to state 10
    LET             shift and go to state 11
    LITERAL         shift and go to state 12
    IF              shift and go to state 13
    WHILE           shift and go to state 14

    instrucciones                  shift and go to state 109
    instruccion                    shift and go to state 3
    console_pro                    shift and go to state 4
    declaration_instruction        shift and go to state 5
    assig_pro                      shift and go to state 6
    if_pro                         shift and go to state 7
    while_pro                      shift and go to state 8
    sumadores                      shift and go to state 9

state 108

    (22) else_pro -> ELSE IF L_PAREN . a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro
    (29) a -> . a OR b
    (30) a -> . b
    (31) b -> . b AND c
    (32) b -> . c
    (33) c -> . NOT d
    (34) c -> . d
    (35) d -> . d DISTINTO_QUE e
    (36) d -> . d MENOR_QUE e
    (37) d -> . d MENOR_IGUAL_QUE e
    (38) d -> . d MAYOR_QUE e
    (39) d -> . d MAYOR_IGUAL_QUE e
    (40) d -> . d TRIPLE_IGUAL e
    (41) d -> . e
    (42) e -> . e MAS f
    (43) e -> . e MENOS f
    (44) e -> . f
    (45) f -> . f TIMES g
    (46) f -> . f DIVIDE g
    (47) f -> . f MOD g
    (48) f -> . f POTENCIA g
    (49) f -> . g
    (50) g -> . ENTERO
    (51) g -> . DECIMAL
    (52) g -> . CADENA
    (53) g -> . LITERAL
    (54) g -> . L_PAREN a R_PAREN

    NOT             shift and go to state 35
    ENTERO          shift and go to state 40
    DECIMAL         shift and go to state 41
    CADENA          shift and go to state 42
    LITERAL         shift and go to state 31
    L_PAREN         shift and go to state 43

    a                              shift and go to state 110
    b                              shift and go to state 33
    c                              shift and go to state 34
    d                              shift and go to state 36
    e                              shift and go to state 37
    f                              shift and go to state 38
    g                              shift and go to state 39

state 109

    (23) else_pro -> ELSE L_LLAVE instrucciones . R_LLAVE
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . console_pro
    (5) instruccion -> . declaration_instruction
    (6) instruccion -> . assig_pro
    (7) instruccion -> . if_pro
    (8) instruccion -> . while_pro
    (9) instruccion -> . sumadores SEMI_COLON
    (26) console_pro -> . CONSOLE PUNTO LOG L_PAREN expresion R_PAREN SEMI_COLON
    (10) declaration_instruction -> . LET declaracion_list SEMI_COLON
    (20) assig_pro -> . LITERAL IGUAL a SEMI_COLON
    (21) if_pro -> . IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro
    (25) while_pro -> . WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE
    (55) sumadores -> . LITERAL MAS MAS
    (56) sumadores -> . LITERAL MENOS MENOS

    R_LLAVE         shift and go to state 111
    CONSOLE         shift and go to state 10
    LET             shift and go to state 11
    LITERAL         shift and go to state 12
    IF              shift and go to state 13
    WHILE           shift and go to state 14

    instruccion                    shift and go to state 15
    console_pro                    shift and go to state 4
    declaration_instruction        shift and go to state 5
    assig_pro                      shift and go to state 6
    if_pro                         shift and go to state 7
    while_pro                      shift and go to state 8
    sumadores                      shift and go to state 9

state 110

    (22) else_pro -> ELSE IF L_PAREN a . R_PAREN L_LLAVE instrucciones R_LLAVE else_pro
    (29) a -> a . OR b

    R_PAREN         shift and go to state 112
    OR              shift and go to state 57


state 111

    (23) else_pro -> ELSE L_LLAVE instrucciones R_LLAVE .

    CONSOLE         reduce using rule 23 (else_pro -> ELSE L_LLAVE instrucciones R_LLAVE .)
    LET             reduce using rule 23 (else_pro -> ELSE L_LLAVE instrucciones R_LLAVE .)
    LITERAL         reduce using rule 23 (else_pro -> ELSE L_LLAVE instrucciones R_LLAVE .)
    IF              reduce using rule 23 (else_pro -> ELSE L_LLAVE instrucciones R_LLAVE .)
    WHILE           reduce using rule 23 (else_pro -> ELSE L_LLAVE instrucciones R_LLAVE .)
    $end            reduce using rule 23 (else_pro -> ELSE L_LLAVE instrucciones R_LLAVE .)
    R_LLAVE         reduce using rule 23 (else_pro -> ELSE L_LLAVE instrucciones R_LLAVE .)


state 112

    (22) else_pro -> ELSE IF L_PAREN a R_PAREN . L_LLAVE instrucciones R_LLAVE else_pro

    L_LLAVE         shift and go to state 113


state 113

    (22) else_pro -> ELSE IF L_PAREN a R_PAREN L_LLAVE . instrucciones R_LLAVE else_pro
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . console_pro
    (5) instruccion -> . declaration_instruction
    (6) instruccion -> . assig_pro
    (7) instruccion -> . if_pro
    (8) instruccion -> . while_pro
    (9) instruccion -> . sumadores SEMI_COLON
    (26) console_pro -> . CONSOLE PUNTO LOG L_PAREN expresion R_PAREN SEMI_COLON
    (10) declaration_instruction -> . LET declaracion_list SEMI_COLON
    (20) assig_pro -> . LITERAL IGUAL a SEMI_COLON
    (21) if_pro -> . IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro
    (25) while_pro -> . WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE
    (55) sumadores -> . LITERAL MAS MAS
    (56) sumadores -> . LITERAL MENOS MENOS

    CONSOLE         shift and go to state 10
    LET             shift and go to state 11
    LITERAL         shift and go to state 12
    IF              shift and go to state 13
    WHILE           shift and go to state 14

    instrucciones                  shift and go to state 114
    instruccion                    shift and go to state 3
    console_pro                    shift and go to state 4
    declaration_instruction        shift and go to state 5
    assig_pro                      shift and go to state 6
    if_pro                         shift and go to state 7
    while_pro                      shift and go to state 8
    sumadores                      shift and go to state 9

state 114

    (22) else_pro -> ELSE IF L_PAREN a R_PAREN L_LLAVE instrucciones . R_LLAVE else_pro
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . console_pro
    (5) instruccion -> . declaration_instruction
    (6) instruccion -> . assig_pro
    (7) instruccion -> . if_pro
    (8) instruccion -> . while_pro
    (9) instruccion -> . sumadores SEMI_COLON
    (26) console_pro -> . CONSOLE PUNTO LOG L_PAREN expresion R_PAREN SEMI_COLON
    (10) declaration_instruction -> . LET declaracion_list SEMI_COLON
    (20) assig_pro -> . LITERAL IGUAL a SEMI_COLON
    (21) if_pro -> . IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro
    (25) while_pro -> . WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE
    (55) sumadores -> . LITERAL MAS MAS
    (56) sumadores -> . LITERAL MENOS MENOS

    R_LLAVE         shift and go to state 115
    CONSOLE         shift and go to state 10
    LET             shift and go to state 11
    LITERAL         shift and go to state 12
    IF              shift and go to state 13
    WHILE           shift and go to state 14

    instruccion                    shift and go to state 15
    console_pro                    shift and go to state 4
    declaration_instruction        shift and go to state 5
    assig_pro                      shift and go to state 6
    if_pro                         shift and go to state 7
    while_pro                      shift and go to state 8
    sumadores                      shift and go to state 9

state 115

    (22) else_pro -> ELSE IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE . else_pro
    (22) else_pro -> . ELSE IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro
    (23) else_pro -> . ELSE L_LLAVE instrucciones R_LLAVE
    (24) else_pro -> .

    ELSE            shift and go to state 105
    CONSOLE         reduce using rule 24 (else_pro -> .)
    LET             reduce using rule 24 (else_pro -> .)
    LITERAL         reduce using rule 24 (else_pro -> .)
    IF              reduce using rule 24 (else_pro -> .)
    WHILE           reduce using rule 24 (else_pro -> .)
    $end            reduce using rule 24 (else_pro -> .)
    R_LLAVE         reduce using rule 24 (else_pro -> .)

    else_pro                       shift and go to state 116

state 116

    (22) else_pro -> ELSE IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .

    CONSOLE         reduce using rule 22 (else_pro -> ELSE IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    LET             reduce using rule 22 (else_pro -> ELSE IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    LITERAL         reduce using rule 22 (else_pro -> ELSE IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    IF              reduce using rule 22 (else_pro -> ELSE IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    WHILE           reduce using rule 22 (else_pro -> ELSE IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    $end            reduce using rule 22 (else_pro -> ELSE IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    R_LLAVE         reduce using rule 22 (else_pro -> ELSE IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)

