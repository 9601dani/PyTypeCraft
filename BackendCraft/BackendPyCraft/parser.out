Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    NULL

Grammar

Rule 0     S' -> init
Rule 1     init -> instrucciones
Rule 2     instrucciones -> instrucciones instruccion
Rule 3     instrucciones -> instruccion
Rule 4     instruccion -> console_pro sc
Rule 5     instruccion -> declaration_instruction sc
Rule 6     instruccion -> assig_pro sc
Rule 7     instruccion -> if_pro sc
Rule 8     instruccion -> while_pro sc
Rule 9     instruccion -> for_pro sc
Rule 10    instruccion -> for_each_pro sc
Rule 11    instruccion -> interface_pro sc
Rule 12    instruccion -> continue_pro sc
Rule 13    instruccion -> break_pro sc
Rule 14    instruccion -> return_pro sc
Rule 15    instruccion -> function_pro sc
Rule 16    instruccion -> call_function_pro sc
Rule 17    instruccion -> sumadores sc
Rule 18    sc -> SEMI_COLON
Rule 19    sc -> <empty>
Rule 20    function_pro -> FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE
Rule 21    function_pro -> FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE
Rule 22    call_function_pro -> LITERAL L_PAREN values R_PAREN
Rule 23    call_function_pro -> LITERAL L_PAREN R_PAREN
Rule 24    values -> values COMA a
Rule 25    values -> a
Rule 26    parameters_pro -> parameters_pro COMA parameter_pro
Rule 27    parameters_pro -> parameter_pro
Rule 28    parameter_pro -> LITERAL COLON type
Rule 29    parameter_pro -> LITERAL
Rule 30    continue_pro -> CONTINUE
Rule 31    break_pro -> BREAK
Rule 32    return_pro -> RETURN
Rule 33    return_pro -> RETURN a
Rule 34    interface_pro -> INTERFACE LITERAL L_LLAVE interface_atributos R_LLAVE
Rule 35    interface_atributos -> interface_atributos interface_atributo sc
Rule 36    interface_atributos -> <empty>
Rule 37    interface_atributo -> LITERAL COLON type
Rule 38    interface_atributo -> LITERAL
Rule 39    declaration_instruction -> LET declaracion_list
Rule 40    declaracion_list -> declaracion_list COMA assignacion_instruction
Rule 41    declaracion_list -> assignacion_instruction
Rule 42    assignacion_instruction -> LITERAL COLON type IGUAL a
Rule 43    assignacion_instruction -> LITERAL COLON type
Rule 44    assignacion_instruction -> LITERAL IGUAL a
Rule 45    type -> NUMBER
Rule 46    type -> STRING
Rule 47    type -> BOOLEAN
Rule 48    type -> ANY
Rule 49    type -> LITERAL
Rule 50    assig_pro -> LITERAL IGUAL a
Rule 51    if_pro -> IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro
Rule 52    else_pro -> ELSE IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro
Rule 53    else_pro -> ELSE L_LLAVE instrucciones R_LLAVE
Rule 54    else_pro -> <empty>
Rule 55    while_pro -> WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE
Rule 56    for_pro -> FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE
Rule 57    for_pro -> FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE
Rule 58    for_each_pro -> FOR L_PAREN for_each_dec R_PAREN L_LLAVE instrucciones R_LLAVE
Rule 59    for_each_dec -> LET LITERAL OF a
Rule 60    for_each_dec -> LET LITERAL COLON type OF a
Rule 61    console_pro -> CONSOLE PUNTO LOG L_PAREN expresion R_PAREN
Rule 62    expresion -> expresion COMA a
Rule 63    expresion -> a
Rule 64    a -> a OR b
Rule 65    a -> b
Rule 66    b -> b AND c
Rule 67    b -> c
Rule 68    c -> NOT d
Rule 69    c -> d
Rule 70    d -> d DISTINTO_QUE e
Rule 71    d -> d MENOR_QUE e
Rule 72    d -> d MENOR_IGUAL_QUE e
Rule 73    d -> d MAYOR_QUE e
Rule 74    d -> d MAYOR_IGUAL_QUE e
Rule 75    d -> d TRIPLE_IGUAL e
Rule 76    d -> e
Rule 77    e -> e MAS f
Rule 78    e -> e MENOS f
Rule 79    e -> f
Rule 80    f -> f TIMES g
Rule 81    f -> f DIVIDE g
Rule 82    f -> f MOD g
Rule 83    f -> f POTENCIA g
Rule 84    f -> g
Rule 85    f -> g PUNTO nativeFun L_PAREN expresion R_PAREN
Rule 86    g -> ENTERO
Rule 87    g -> DECIMAL
Rule 88    g -> CADENA
Rule 89    g -> LITERAL
Rule 90    g -> call_function_pro
Rule 91    g -> array_pro
Rule 92    g -> interface_assi
Rule 93    g -> L_PAREN a R_PAREN
Rule 94    sumadores -> LITERAL MAS MAS
Rule 95    sumadores -> LITERAL MENOS MENOS
Rule 96    interface_assi -> L_LLAVE atributos_assi R_LLAVE
Rule 97    atributos_assi -> atributos_assi COMA LITERAL COLON a
Rule 98    atributos_assi -> LITERAL COLON a
Rule 99    array_pro -> L_CORCHETE values R_CORCHETE
Rule 100   nativeFun -> TOSTRING
Rule 101   nativeFun -> TOFIXED
Rule 102   nativeFun -> TOEXPONENTIAL
Rule 103   nativeFun -> TOLOWERCASE
Rule 104   nativeFun -> TOUPPERCASE
Rule 105   nativeFun -> SPLIT
Rule 106   nativeFun -> CONCAT

Terminals, with rules where they appear

AND                  : 66
ANY                  : 48
BOOLEAN              : 47
BREAK                : 31
CADENA               : 88
COLON                : 28 37 42 43 60 97 98
COMA                 : 24 26 40 62 97
CONCAT               : 106
CONSOLE              : 61
CONTINUE             : 30
DECIMAL              : 87
DISTINTO_QUE         : 70
DIVIDE               : 81
ELSE                 : 52 53
ENTERO               : 86
FOR                  : 56 57 58
FUNCTION             : 20 21
IF                   : 51 52
IGUAL                : 42 44 50
INTERFACE            : 34
LET                  : 39 59 60
LITERAL              : 20 21 22 23 28 29 34 37 38 42 43 44 49 50 59 60 89 94 95 97 98
LOG                  : 61
L_CORCHETE           : 99
L_LLAVE              : 20 21 34 51 52 53 55 56 57 58 96
L_PAREN              : 20 21 22 23 51 52 55 56 57 58 61 85 93
MAS                  : 77 94 94
MAYOR_IGUAL_QUE      : 74
MAYOR_QUE            : 73
MENOR_IGUAL_QUE      : 72
MENOR_QUE            : 71
MENOS                : 78 95 95
MOD                  : 82
NOT                  : 68
NULL                 : 
NUMBER               : 45
OF                   : 59 60
OR                   : 64
POTENCIA             : 83
PUNTO                : 61 85
RETURN               : 32 33
R_CORCHETE           : 99
R_LLAVE              : 20 21 34 51 52 53 55 56 57 58 96
R_PAREN              : 20 21 22 23 51 52 55 56 57 58 61 85 93
SEMI_COLON           : 18 56 56 57 57
SPLIT                : 105
STRING               : 46
TIMES                : 80
TOEXPONENTIAL        : 102
TOFIXED              : 101
TOLOWERCASE          : 103
TOSTRING             : 100
TOUPPERCASE          : 104
TRIPLE_IGUAL         : 75
WHILE                : 55
error                : 

Nonterminals, with rules where they appear

a                    : 24 25 33 42 44 50 51 52 55 56 57 59 60 62 63 64 93 97 98
array_pro            : 91
assig_pro            : 6 56 57 57
assignacion_instruction : 40 41
atributos_assi       : 96 97
b                    : 64 65 66
break_pro            : 13
c                    : 66 67
call_function_pro    : 16 90
console_pro          : 4
continue_pro         : 12
d                    : 68 69 70 71 72 73 74 75
declaracion_list     : 39 40
declaration_instruction : 5 56
e                    : 70 71 72 73 74 75 76 77 78
else_pro             : 51 52
expresion            : 61 62 85
f                    : 77 78 79 80 81 82 83
for_each_dec         : 58
for_each_pro         : 10
for_pro              : 9
function_pro         : 15
g                    : 80 81 82 83 84 85
if_pro               : 7
init                 : 0
instruccion          : 2 3
instrucciones        : 1 2 20 21 51 52 53 55 56 57 58
interface_assi       : 92
interface_atributo   : 35
interface_atributos  : 34 35
interface_pro        : 11
nativeFun            : 85
parameter_pro        : 26 27
parameters_pro       : 20 26
return_pro           : 14
sc                   : 4 5 6 7 8 9 10 11 12 13 14 15 16 17 35
sumadores            : 17
type                 : 28 37 42 43 60
values               : 22 24 99
while_pro            : 8

Parsing method: LALR

state 0

    (0) S' -> . init
    (1) init -> . instrucciones
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . console_pro sc
    (5) instruccion -> . declaration_instruction sc
    (6) instruccion -> . assig_pro sc
    (7) instruccion -> . if_pro sc
    (8) instruccion -> . while_pro sc
    (9) instruccion -> . for_pro sc
    (10) instruccion -> . for_each_pro sc
    (11) instruccion -> . interface_pro sc
    (12) instruccion -> . continue_pro sc
    (13) instruccion -> . break_pro sc
    (14) instruccion -> . return_pro sc
    (15) instruccion -> . function_pro sc
    (16) instruccion -> . call_function_pro sc
    (17) instruccion -> . sumadores sc
    (61) console_pro -> . CONSOLE PUNTO LOG L_PAREN expresion R_PAREN
    (39) declaration_instruction -> . LET declaracion_list
    (50) assig_pro -> . LITERAL IGUAL a
    (51) if_pro -> . IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro
    (55) while_pro -> . WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE
    (56) for_pro -> . FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (57) for_pro -> . FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (58) for_each_pro -> . FOR L_PAREN for_each_dec R_PAREN L_LLAVE instrucciones R_LLAVE
    (34) interface_pro -> . INTERFACE LITERAL L_LLAVE interface_atributos R_LLAVE
    (30) continue_pro -> . CONTINUE
    (31) break_pro -> . BREAK
    (32) return_pro -> . RETURN
    (33) return_pro -> . RETURN a
    (20) function_pro -> . FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (21) function_pro -> . FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE
    (22) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (23) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (94) sumadores -> . LITERAL MAS MAS
    (95) sumadores -> . LITERAL MENOS MENOS

    CONSOLE         shift and go to state 18
    LET             shift and go to state 19
    LITERAL         shift and go to state 20
    IF              shift and go to state 21
    WHILE           shift and go to state 22
    FOR             shift and go to state 23
    INTERFACE       shift and go to state 24
    CONTINUE        shift and go to state 25
    BREAK           shift and go to state 26
    RETURN          shift and go to state 27
    FUNCTION        shift and go to state 28

    init                           shift and go to state 1
    instrucciones                  shift and go to state 2
    instruccion                    shift and go to state 3
    console_pro                    shift and go to state 4
    declaration_instruction        shift and go to state 5
    assig_pro                      shift and go to state 6
    if_pro                         shift and go to state 7
    while_pro                      shift and go to state 8
    for_pro                        shift and go to state 9
    for_each_pro                   shift and go to state 10
    interface_pro                  shift and go to state 11
    continue_pro                   shift and go to state 12
    break_pro                      shift and go to state 13
    return_pro                     shift and go to state 14
    function_pro                   shift and go to state 15
    call_function_pro              shift and go to state 16
    sumadores                      shift and go to state 17

state 1

    (0) S' -> init .



state 2

    (1) init -> instrucciones .
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . console_pro sc
    (5) instruccion -> . declaration_instruction sc
    (6) instruccion -> . assig_pro sc
    (7) instruccion -> . if_pro sc
    (8) instruccion -> . while_pro sc
    (9) instruccion -> . for_pro sc
    (10) instruccion -> . for_each_pro sc
    (11) instruccion -> . interface_pro sc
    (12) instruccion -> . continue_pro sc
    (13) instruccion -> . break_pro sc
    (14) instruccion -> . return_pro sc
    (15) instruccion -> . function_pro sc
    (16) instruccion -> . call_function_pro sc
    (17) instruccion -> . sumadores sc
    (61) console_pro -> . CONSOLE PUNTO LOG L_PAREN expresion R_PAREN
    (39) declaration_instruction -> . LET declaracion_list
    (50) assig_pro -> . LITERAL IGUAL a
    (51) if_pro -> . IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro
    (55) while_pro -> . WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE
    (56) for_pro -> . FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (57) for_pro -> . FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (58) for_each_pro -> . FOR L_PAREN for_each_dec R_PAREN L_LLAVE instrucciones R_LLAVE
    (34) interface_pro -> . INTERFACE LITERAL L_LLAVE interface_atributos R_LLAVE
    (30) continue_pro -> . CONTINUE
    (31) break_pro -> . BREAK
    (32) return_pro -> . RETURN
    (33) return_pro -> . RETURN a
    (20) function_pro -> . FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (21) function_pro -> . FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE
    (22) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (23) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (94) sumadores -> . LITERAL MAS MAS
    (95) sumadores -> . LITERAL MENOS MENOS

    $end            reduce using rule 1 (init -> instrucciones .)
    CONSOLE         shift and go to state 18
    LET             shift and go to state 19
    LITERAL         shift and go to state 20
    IF              shift and go to state 21
    WHILE           shift and go to state 22
    FOR             shift and go to state 23
    INTERFACE       shift and go to state 24
    CONTINUE        shift and go to state 25
    BREAK           shift and go to state 26
    RETURN          shift and go to state 27
    FUNCTION        shift and go to state 28

    instruccion                    shift and go to state 29
    console_pro                    shift and go to state 4
    declaration_instruction        shift and go to state 5
    assig_pro                      shift and go to state 6
    if_pro                         shift and go to state 7
    while_pro                      shift and go to state 8
    for_pro                        shift and go to state 9
    for_each_pro                   shift and go to state 10
    interface_pro                  shift and go to state 11
    continue_pro                   shift and go to state 12
    break_pro                      shift and go to state 13
    return_pro                     shift and go to state 14
    function_pro                   shift and go to state 15
    call_function_pro              shift and go to state 16
    sumadores                      shift and go to state 17

state 3

    (3) instrucciones -> instruccion .

    CONSOLE         reduce using rule 3 (instrucciones -> instruccion .)
    LET             reduce using rule 3 (instrucciones -> instruccion .)
    LITERAL         reduce using rule 3 (instrucciones -> instruccion .)
    IF              reduce using rule 3 (instrucciones -> instruccion .)
    WHILE           reduce using rule 3 (instrucciones -> instruccion .)
    FOR             reduce using rule 3 (instrucciones -> instruccion .)
    INTERFACE       reduce using rule 3 (instrucciones -> instruccion .)
    CONTINUE        reduce using rule 3 (instrucciones -> instruccion .)
    BREAK           reduce using rule 3 (instrucciones -> instruccion .)
    RETURN          reduce using rule 3 (instrucciones -> instruccion .)
    FUNCTION        reduce using rule 3 (instrucciones -> instruccion .)
    $end            reduce using rule 3 (instrucciones -> instruccion .)
    R_LLAVE         reduce using rule 3 (instrucciones -> instruccion .)


state 4

    (4) instruccion -> console_pro . sc
    (18) sc -> . SEMI_COLON
    (19) sc -> .

    SEMI_COLON      shift and go to state 31
    CONSOLE         reduce using rule 19 (sc -> .)
    LET             reduce using rule 19 (sc -> .)
    LITERAL         reduce using rule 19 (sc -> .)
    IF              reduce using rule 19 (sc -> .)
    WHILE           reduce using rule 19 (sc -> .)
    FOR             reduce using rule 19 (sc -> .)
    INTERFACE       reduce using rule 19 (sc -> .)
    CONTINUE        reduce using rule 19 (sc -> .)
    BREAK           reduce using rule 19 (sc -> .)
    RETURN          reduce using rule 19 (sc -> .)
    FUNCTION        reduce using rule 19 (sc -> .)
    $end            reduce using rule 19 (sc -> .)
    R_LLAVE         reduce using rule 19 (sc -> .)

    sc                             shift and go to state 30

state 5

    (5) instruccion -> declaration_instruction . sc
    (18) sc -> . SEMI_COLON
    (19) sc -> .

    SEMI_COLON      shift and go to state 31
    CONSOLE         reduce using rule 19 (sc -> .)
    LET             reduce using rule 19 (sc -> .)
    LITERAL         reduce using rule 19 (sc -> .)
    IF              reduce using rule 19 (sc -> .)
    WHILE           reduce using rule 19 (sc -> .)
    FOR             reduce using rule 19 (sc -> .)
    INTERFACE       reduce using rule 19 (sc -> .)
    CONTINUE        reduce using rule 19 (sc -> .)
    BREAK           reduce using rule 19 (sc -> .)
    RETURN          reduce using rule 19 (sc -> .)
    FUNCTION        reduce using rule 19 (sc -> .)
    $end            reduce using rule 19 (sc -> .)
    R_LLAVE         reduce using rule 19 (sc -> .)

    sc                             shift and go to state 32

state 6

    (6) instruccion -> assig_pro . sc
    (18) sc -> . SEMI_COLON
    (19) sc -> .

    SEMI_COLON      shift and go to state 31
    CONSOLE         reduce using rule 19 (sc -> .)
    LET             reduce using rule 19 (sc -> .)
    LITERAL         reduce using rule 19 (sc -> .)
    IF              reduce using rule 19 (sc -> .)
    WHILE           reduce using rule 19 (sc -> .)
    FOR             reduce using rule 19 (sc -> .)
    INTERFACE       reduce using rule 19 (sc -> .)
    CONTINUE        reduce using rule 19 (sc -> .)
    BREAK           reduce using rule 19 (sc -> .)
    RETURN          reduce using rule 19 (sc -> .)
    FUNCTION        reduce using rule 19 (sc -> .)
    $end            reduce using rule 19 (sc -> .)
    R_LLAVE         reduce using rule 19 (sc -> .)

    sc                             shift and go to state 33

state 7

    (7) instruccion -> if_pro . sc
    (18) sc -> . SEMI_COLON
    (19) sc -> .

    SEMI_COLON      shift and go to state 31
    CONSOLE         reduce using rule 19 (sc -> .)
    LET             reduce using rule 19 (sc -> .)
    LITERAL         reduce using rule 19 (sc -> .)
    IF              reduce using rule 19 (sc -> .)
    WHILE           reduce using rule 19 (sc -> .)
    FOR             reduce using rule 19 (sc -> .)
    INTERFACE       reduce using rule 19 (sc -> .)
    CONTINUE        reduce using rule 19 (sc -> .)
    BREAK           reduce using rule 19 (sc -> .)
    RETURN          reduce using rule 19 (sc -> .)
    FUNCTION        reduce using rule 19 (sc -> .)
    $end            reduce using rule 19 (sc -> .)
    R_LLAVE         reduce using rule 19 (sc -> .)

    sc                             shift and go to state 34

state 8

    (8) instruccion -> while_pro . sc
    (18) sc -> . SEMI_COLON
    (19) sc -> .

    SEMI_COLON      shift and go to state 31
    CONSOLE         reduce using rule 19 (sc -> .)
    LET             reduce using rule 19 (sc -> .)
    LITERAL         reduce using rule 19 (sc -> .)
    IF              reduce using rule 19 (sc -> .)
    WHILE           reduce using rule 19 (sc -> .)
    FOR             reduce using rule 19 (sc -> .)
    INTERFACE       reduce using rule 19 (sc -> .)
    CONTINUE        reduce using rule 19 (sc -> .)
    BREAK           reduce using rule 19 (sc -> .)
    RETURN          reduce using rule 19 (sc -> .)
    FUNCTION        reduce using rule 19 (sc -> .)
    $end            reduce using rule 19 (sc -> .)
    R_LLAVE         reduce using rule 19 (sc -> .)

    sc                             shift and go to state 35

state 9

    (9) instruccion -> for_pro . sc
    (18) sc -> . SEMI_COLON
    (19) sc -> .

    SEMI_COLON      shift and go to state 31
    CONSOLE         reduce using rule 19 (sc -> .)
    LET             reduce using rule 19 (sc -> .)
    LITERAL         reduce using rule 19 (sc -> .)
    IF              reduce using rule 19 (sc -> .)
    WHILE           reduce using rule 19 (sc -> .)
    FOR             reduce using rule 19 (sc -> .)
    INTERFACE       reduce using rule 19 (sc -> .)
    CONTINUE        reduce using rule 19 (sc -> .)
    BREAK           reduce using rule 19 (sc -> .)
    RETURN          reduce using rule 19 (sc -> .)
    FUNCTION        reduce using rule 19 (sc -> .)
    $end            reduce using rule 19 (sc -> .)
    R_LLAVE         reduce using rule 19 (sc -> .)

    sc                             shift and go to state 36

state 10

    (10) instruccion -> for_each_pro . sc
    (18) sc -> . SEMI_COLON
    (19) sc -> .

    SEMI_COLON      shift and go to state 31
    CONSOLE         reduce using rule 19 (sc -> .)
    LET             reduce using rule 19 (sc -> .)
    LITERAL         reduce using rule 19 (sc -> .)
    IF              reduce using rule 19 (sc -> .)
    WHILE           reduce using rule 19 (sc -> .)
    FOR             reduce using rule 19 (sc -> .)
    INTERFACE       reduce using rule 19 (sc -> .)
    CONTINUE        reduce using rule 19 (sc -> .)
    BREAK           reduce using rule 19 (sc -> .)
    RETURN          reduce using rule 19 (sc -> .)
    FUNCTION        reduce using rule 19 (sc -> .)
    $end            reduce using rule 19 (sc -> .)
    R_LLAVE         reduce using rule 19 (sc -> .)

    sc                             shift and go to state 37

state 11

    (11) instruccion -> interface_pro . sc
    (18) sc -> . SEMI_COLON
    (19) sc -> .

    SEMI_COLON      shift and go to state 31
    CONSOLE         reduce using rule 19 (sc -> .)
    LET             reduce using rule 19 (sc -> .)
    LITERAL         reduce using rule 19 (sc -> .)
    IF              reduce using rule 19 (sc -> .)
    WHILE           reduce using rule 19 (sc -> .)
    FOR             reduce using rule 19 (sc -> .)
    INTERFACE       reduce using rule 19 (sc -> .)
    CONTINUE        reduce using rule 19 (sc -> .)
    BREAK           reduce using rule 19 (sc -> .)
    RETURN          reduce using rule 19 (sc -> .)
    FUNCTION        reduce using rule 19 (sc -> .)
    $end            reduce using rule 19 (sc -> .)
    R_LLAVE         reduce using rule 19 (sc -> .)

    sc                             shift and go to state 38

state 12

    (12) instruccion -> continue_pro . sc
    (18) sc -> . SEMI_COLON
    (19) sc -> .

    SEMI_COLON      shift and go to state 31
    CONSOLE         reduce using rule 19 (sc -> .)
    LET             reduce using rule 19 (sc -> .)
    LITERAL         reduce using rule 19 (sc -> .)
    IF              reduce using rule 19 (sc -> .)
    WHILE           reduce using rule 19 (sc -> .)
    FOR             reduce using rule 19 (sc -> .)
    INTERFACE       reduce using rule 19 (sc -> .)
    CONTINUE        reduce using rule 19 (sc -> .)
    BREAK           reduce using rule 19 (sc -> .)
    RETURN          reduce using rule 19 (sc -> .)
    FUNCTION        reduce using rule 19 (sc -> .)
    $end            reduce using rule 19 (sc -> .)
    R_LLAVE         reduce using rule 19 (sc -> .)

    sc                             shift and go to state 39

state 13

    (13) instruccion -> break_pro . sc
    (18) sc -> . SEMI_COLON
    (19) sc -> .

    SEMI_COLON      shift and go to state 31
    CONSOLE         reduce using rule 19 (sc -> .)
    LET             reduce using rule 19 (sc -> .)
    LITERAL         reduce using rule 19 (sc -> .)
    IF              reduce using rule 19 (sc -> .)
    WHILE           reduce using rule 19 (sc -> .)
    FOR             reduce using rule 19 (sc -> .)
    INTERFACE       reduce using rule 19 (sc -> .)
    CONTINUE        reduce using rule 19 (sc -> .)
    BREAK           reduce using rule 19 (sc -> .)
    RETURN          reduce using rule 19 (sc -> .)
    FUNCTION        reduce using rule 19 (sc -> .)
    $end            reduce using rule 19 (sc -> .)
    R_LLAVE         reduce using rule 19 (sc -> .)

    sc                             shift and go to state 40

state 14

    (14) instruccion -> return_pro . sc
    (18) sc -> . SEMI_COLON
    (19) sc -> .

    SEMI_COLON      shift and go to state 31
    CONSOLE         reduce using rule 19 (sc -> .)
    LET             reduce using rule 19 (sc -> .)
    LITERAL         reduce using rule 19 (sc -> .)
    IF              reduce using rule 19 (sc -> .)
    WHILE           reduce using rule 19 (sc -> .)
    FOR             reduce using rule 19 (sc -> .)
    INTERFACE       reduce using rule 19 (sc -> .)
    CONTINUE        reduce using rule 19 (sc -> .)
    BREAK           reduce using rule 19 (sc -> .)
    RETURN          reduce using rule 19 (sc -> .)
    FUNCTION        reduce using rule 19 (sc -> .)
    $end            reduce using rule 19 (sc -> .)
    R_LLAVE         reduce using rule 19 (sc -> .)

    sc                             shift and go to state 41

state 15

    (15) instruccion -> function_pro . sc
    (18) sc -> . SEMI_COLON
    (19) sc -> .

    SEMI_COLON      shift and go to state 31
    CONSOLE         reduce using rule 19 (sc -> .)
    LET             reduce using rule 19 (sc -> .)
    LITERAL         reduce using rule 19 (sc -> .)
    IF              reduce using rule 19 (sc -> .)
    WHILE           reduce using rule 19 (sc -> .)
    FOR             reduce using rule 19 (sc -> .)
    INTERFACE       reduce using rule 19 (sc -> .)
    CONTINUE        reduce using rule 19 (sc -> .)
    BREAK           reduce using rule 19 (sc -> .)
    RETURN          reduce using rule 19 (sc -> .)
    FUNCTION        reduce using rule 19 (sc -> .)
    $end            reduce using rule 19 (sc -> .)
    R_LLAVE         reduce using rule 19 (sc -> .)

    sc                             shift and go to state 42

state 16

    (16) instruccion -> call_function_pro . sc
    (18) sc -> . SEMI_COLON
    (19) sc -> .

    SEMI_COLON      shift and go to state 31
    CONSOLE         reduce using rule 19 (sc -> .)
    LET             reduce using rule 19 (sc -> .)
    LITERAL         reduce using rule 19 (sc -> .)
    IF              reduce using rule 19 (sc -> .)
    WHILE           reduce using rule 19 (sc -> .)
    FOR             reduce using rule 19 (sc -> .)
    INTERFACE       reduce using rule 19 (sc -> .)
    CONTINUE        reduce using rule 19 (sc -> .)
    BREAK           reduce using rule 19 (sc -> .)
    RETURN          reduce using rule 19 (sc -> .)
    FUNCTION        reduce using rule 19 (sc -> .)
    $end            reduce using rule 19 (sc -> .)
    R_LLAVE         reduce using rule 19 (sc -> .)

    sc                             shift and go to state 43

state 17

    (17) instruccion -> sumadores . sc
    (18) sc -> . SEMI_COLON
    (19) sc -> .

    SEMI_COLON      shift and go to state 31
    CONSOLE         reduce using rule 19 (sc -> .)
    LET             reduce using rule 19 (sc -> .)
    LITERAL         reduce using rule 19 (sc -> .)
    IF              reduce using rule 19 (sc -> .)
    WHILE           reduce using rule 19 (sc -> .)
    FOR             reduce using rule 19 (sc -> .)
    INTERFACE       reduce using rule 19 (sc -> .)
    CONTINUE        reduce using rule 19 (sc -> .)
    BREAK           reduce using rule 19 (sc -> .)
    RETURN          reduce using rule 19 (sc -> .)
    FUNCTION        reduce using rule 19 (sc -> .)
    $end            reduce using rule 19 (sc -> .)
    R_LLAVE         reduce using rule 19 (sc -> .)

    sc                             shift and go to state 44

state 18

    (61) console_pro -> CONSOLE . PUNTO LOG L_PAREN expresion R_PAREN

    PUNTO           shift and go to state 45


state 19

    (39) declaration_instruction -> LET . declaracion_list
    (40) declaracion_list -> . declaracion_list COMA assignacion_instruction
    (41) declaracion_list -> . assignacion_instruction
    (42) assignacion_instruction -> . LITERAL COLON type IGUAL a
    (43) assignacion_instruction -> . LITERAL COLON type
    (44) assignacion_instruction -> . LITERAL IGUAL a

    LITERAL         shift and go to state 48

    declaracion_list               shift and go to state 46
    assignacion_instruction        shift and go to state 47

state 20

    (50) assig_pro -> LITERAL . IGUAL a
    (22) call_function_pro -> LITERAL . L_PAREN values R_PAREN
    (23) call_function_pro -> LITERAL . L_PAREN R_PAREN
    (94) sumadores -> LITERAL . MAS MAS
    (95) sumadores -> LITERAL . MENOS MENOS

    IGUAL           shift and go to state 49
    L_PAREN         shift and go to state 50
    MAS             shift and go to state 51
    MENOS           shift and go to state 52


state 21

    (51) if_pro -> IF . L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro

    L_PAREN         shift and go to state 53


state 22

    (55) while_pro -> WHILE . L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE

    L_PAREN         shift and go to state 54


state 23

    (56) for_pro -> FOR . L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (57) for_pro -> FOR . L_PAREN assig_pro SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (58) for_each_pro -> FOR . L_PAREN for_each_dec R_PAREN L_LLAVE instrucciones R_LLAVE

    L_PAREN         shift and go to state 55


state 24

    (34) interface_pro -> INTERFACE . LITERAL L_LLAVE interface_atributos R_LLAVE

    LITERAL         shift and go to state 56


state 25

    (30) continue_pro -> CONTINUE .

    SEMI_COLON      reduce using rule 30 (continue_pro -> CONTINUE .)
    CONSOLE         reduce using rule 30 (continue_pro -> CONTINUE .)
    LET             reduce using rule 30 (continue_pro -> CONTINUE .)
    LITERAL         reduce using rule 30 (continue_pro -> CONTINUE .)
    IF              reduce using rule 30 (continue_pro -> CONTINUE .)
    WHILE           reduce using rule 30 (continue_pro -> CONTINUE .)
    FOR             reduce using rule 30 (continue_pro -> CONTINUE .)
    INTERFACE       reduce using rule 30 (continue_pro -> CONTINUE .)
    CONTINUE        reduce using rule 30 (continue_pro -> CONTINUE .)
    BREAK           reduce using rule 30 (continue_pro -> CONTINUE .)
    RETURN          reduce using rule 30 (continue_pro -> CONTINUE .)
    FUNCTION        reduce using rule 30 (continue_pro -> CONTINUE .)
    $end            reduce using rule 30 (continue_pro -> CONTINUE .)
    R_LLAVE         reduce using rule 30 (continue_pro -> CONTINUE .)


state 26

    (31) break_pro -> BREAK .

    SEMI_COLON      reduce using rule 31 (break_pro -> BREAK .)
    CONSOLE         reduce using rule 31 (break_pro -> BREAK .)
    LET             reduce using rule 31 (break_pro -> BREAK .)
    LITERAL         reduce using rule 31 (break_pro -> BREAK .)
    IF              reduce using rule 31 (break_pro -> BREAK .)
    WHILE           reduce using rule 31 (break_pro -> BREAK .)
    FOR             reduce using rule 31 (break_pro -> BREAK .)
    INTERFACE       reduce using rule 31 (break_pro -> BREAK .)
    CONTINUE        reduce using rule 31 (break_pro -> BREAK .)
    BREAK           reduce using rule 31 (break_pro -> BREAK .)
    RETURN          reduce using rule 31 (break_pro -> BREAK .)
    FUNCTION        reduce using rule 31 (break_pro -> BREAK .)
    $end            reduce using rule 31 (break_pro -> BREAK .)
    R_LLAVE         reduce using rule 31 (break_pro -> BREAK .)


state 27

    (32) return_pro -> RETURN .
    (33) return_pro -> RETURN . a
    (64) a -> . a OR b
    (65) a -> . b
    (66) b -> . b AND c
    (67) b -> . c
    (68) c -> . NOT d
    (69) c -> . d
    (70) d -> . d DISTINTO_QUE e
    (71) d -> . d MENOR_QUE e
    (72) d -> . d MENOR_IGUAL_QUE e
    (73) d -> . d MAYOR_QUE e
    (74) d -> . d MAYOR_IGUAL_QUE e
    (75) d -> . d TRIPLE_IGUAL e
    (76) d -> . e
    (77) e -> . e MAS f
    (78) e -> . e MENOS f
    (79) e -> . f
    (80) f -> . f TIMES g
    (81) f -> . f DIVIDE g
    (82) f -> . f MOD g
    (83) f -> . f POTENCIA g
    (84) f -> . g
    (85) f -> . g PUNTO nativeFun L_PAREN expresion R_PAREN
    (86) g -> . ENTERO
    (87) g -> . DECIMAL
    (88) g -> . CADENA
    (89) g -> . LITERAL
    (90) g -> . call_function_pro
    (91) g -> . array_pro
    (92) g -> . interface_assi
    (93) g -> . L_PAREN a R_PAREN
    (22) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (23) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (99) array_pro -> . L_CORCHETE values R_CORCHETE
    (96) interface_assi -> . L_LLAVE atributos_assi R_LLAVE

  ! shift/reduce conflict for LITERAL resolved as shift
    SEMI_COLON      reduce using rule 32 (return_pro -> RETURN .)
    CONSOLE         reduce using rule 32 (return_pro -> RETURN .)
    LET             reduce using rule 32 (return_pro -> RETURN .)
    IF              reduce using rule 32 (return_pro -> RETURN .)
    WHILE           reduce using rule 32 (return_pro -> RETURN .)
    FOR             reduce using rule 32 (return_pro -> RETURN .)
    INTERFACE       reduce using rule 32 (return_pro -> RETURN .)
    CONTINUE        reduce using rule 32 (return_pro -> RETURN .)
    BREAK           reduce using rule 32 (return_pro -> RETURN .)
    RETURN          reduce using rule 32 (return_pro -> RETURN .)
    FUNCTION        reduce using rule 32 (return_pro -> RETURN .)
    $end            reduce using rule 32 (return_pro -> RETURN .)
    R_LLAVE         reduce using rule 32 (return_pro -> RETURN .)
    NOT             shift and go to state 60
    ENTERO          shift and go to state 66
    DECIMAL         shift and go to state 67
    CADENA          shift and go to state 68
    LITERAL         shift and go to state 69
    L_PAREN         shift and go to state 65
    L_CORCHETE      shift and go to state 73
    L_LLAVE         shift and go to state 74

  ! LITERAL         [ reduce using rule 32 (return_pro -> RETURN .) ]

    a                              shift and go to state 57
    b                              shift and go to state 58
    c                              shift and go to state 59
    d                              shift and go to state 61
    e                              shift and go to state 62
    f                              shift and go to state 63
    g                              shift and go to state 64
    call_function_pro              shift and go to state 70
    array_pro                      shift and go to state 71
    interface_assi                 shift and go to state 72

state 28

    (20) function_pro -> FUNCTION . LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (21) function_pro -> FUNCTION . LITERAL L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE

    LITERAL         shift and go to state 75


state 29

    (2) instrucciones -> instrucciones instruccion .

    CONSOLE         reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    LET             reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    LITERAL         reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    IF              reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    WHILE           reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    FOR             reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    INTERFACE       reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    CONTINUE        reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    BREAK           reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    RETURN          reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    FUNCTION        reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    $end            reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    R_LLAVE         reduce using rule 2 (instrucciones -> instrucciones instruccion .)


state 30

    (4) instruccion -> console_pro sc .

    CONSOLE         reduce using rule 4 (instruccion -> console_pro sc .)
    LET             reduce using rule 4 (instruccion -> console_pro sc .)
    LITERAL         reduce using rule 4 (instruccion -> console_pro sc .)
    IF              reduce using rule 4 (instruccion -> console_pro sc .)
    WHILE           reduce using rule 4 (instruccion -> console_pro sc .)
    FOR             reduce using rule 4 (instruccion -> console_pro sc .)
    INTERFACE       reduce using rule 4 (instruccion -> console_pro sc .)
    CONTINUE        reduce using rule 4 (instruccion -> console_pro sc .)
    BREAK           reduce using rule 4 (instruccion -> console_pro sc .)
    RETURN          reduce using rule 4 (instruccion -> console_pro sc .)
    FUNCTION        reduce using rule 4 (instruccion -> console_pro sc .)
    $end            reduce using rule 4 (instruccion -> console_pro sc .)
    R_LLAVE         reduce using rule 4 (instruccion -> console_pro sc .)


state 31

    (18) sc -> SEMI_COLON .

    CONSOLE         reduce using rule 18 (sc -> SEMI_COLON .)
    LET             reduce using rule 18 (sc -> SEMI_COLON .)
    LITERAL         reduce using rule 18 (sc -> SEMI_COLON .)
    IF              reduce using rule 18 (sc -> SEMI_COLON .)
    WHILE           reduce using rule 18 (sc -> SEMI_COLON .)
    FOR             reduce using rule 18 (sc -> SEMI_COLON .)
    INTERFACE       reduce using rule 18 (sc -> SEMI_COLON .)
    CONTINUE        reduce using rule 18 (sc -> SEMI_COLON .)
    BREAK           reduce using rule 18 (sc -> SEMI_COLON .)
    RETURN          reduce using rule 18 (sc -> SEMI_COLON .)
    FUNCTION        reduce using rule 18 (sc -> SEMI_COLON .)
    $end            reduce using rule 18 (sc -> SEMI_COLON .)
    R_LLAVE         reduce using rule 18 (sc -> SEMI_COLON .)


state 32

    (5) instruccion -> declaration_instruction sc .

    CONSOLE         reduce using rule 5 (instruccion -> declaration_instruction sc .)
    LET             reduce using rule 5 (instruccion -> declaration_instruction sc .)
    LITERAL         reduce using rule 5 (instruccion -> declaration_instruction sc .)
    IF              reduce using rule 5 (instruccion -> declaration_instruction sc .)
    WHILE           reduce using rule 5 (instruccion -> declaration_instruction sc .)
    FOR             reduce using rule 5 (instruccion -> declaration_instruction sc .)
    INTERFACE       reduce using rule 5 (instruccion -> declaration_instruction sc .)
    CONTINUE        reduce using rule 5 (instruccion -> declaration_instruction sc .)
    BREAK           reduce using rule 5 (instruccion -> declaration_instruction sc .)
    RETURN          reduce using rule 5 (instruccion -> declaration_instruction sc .)
    FUNCTION        reduce using rule 5 (instruccion -> declaration_instruction sc .)
    $end            reduce using rule 5 (instruccion -> declaration_instruction sc .)
    R_LLAVE         reduce using rule 5 (instruccion -> declaration_instruction sc .)


state 33

    (6) instruccion -> assig_pro sc .

    CONSOLE         reduce using rule 6 (instruccion -> assig_pro sc .)
    LET             reduce using rule 6 (instruccion -> assig_pro sc .)
    LITERAL         reduce using rule 6 (instruccion -> assig_pro sc .)
    IF              reduce using rule 6 (instruccion -> assig_pro sc .)
    WHILE           reduce using rule 6 (instruccion -> assig_pro sc .)
    FOR             reduce using rule 6 (instruccion -> assig_pro sc .)
    INTERFACE       reduce using rule 6 (instruccion -> assig_pro sc .)
    CONTINUE        reduce using rule 6 (instruccion -> assig_pro sc .)
    BREAK           reduce using rule 6 (instruccion -> assig_pro sc .)
    RETURN          reduce using rule 6 (instruccion -> assig_pro sc .)
    FUNCTION        reduce using rule 6 (instruccion -> assig_pro sc .)
    $end            reduce using rule 6 (instruccion -> assig_pro sc .)
    R_LLAVE         reduce using rule 6 (instruccion -> assig_pro sc .)


state 34

    (7) instruccion -> if_pro sc .

    CONSOLE         reduce using rule 7 (instruccion -> if_pro sc .)
    LET             reduce using rule 7 (instruccion -> if_pro sc .)
    LITERAL         reduce using rule 7 (instruccion -> if_pro sc .)
    IF              reduce using rule 7 (instruccion -> if_pro sc .)
    WHILE           reduce using rule 7 (instruccion -> if_pro sc .)
    FOR             reduce using rule 7 (instruccion -> if_pro sc .)
    INTERFACE       reduce using rule 7 (instruccion -> if_pro sc .)
    CONTINUE        reduce using rule 7 (instruccion -> if_pro sc .)
    BREAK           reduce using rule 7 (instruccion -> if_pro sc .)
    RETURN          reduce using rule 7 (instruccion -> if_pro sc .)
    FUNCTION        reduce using rule 7 (instruccion -> if_pro sc .)
    $end            reduce using rule 7 (instruccion -> if_pro sc .)
    R_LLAVE         reduce using rule 7 (instruccion -> if_pro sc .)


state 35

    (8) instruccion -> while_pro sc .

    CONSOLE         reduce using rule 8 (instruccion -> while_pro sc .)
    LET             reduce using rule 8 (instruccion -> while_pro sc .)
    LITERAL         reduce using rule 8 (instruccion -> while_pro sc .)
    IF              reduce using rule 8 (instruccion -> while_pro sc .)
    WHILE           reduce using rule 8 (instruccion -> while_pro sc .)
    FOR             reduce using rule 8 (instruccion -> while_pro sc .)
    INTERFACE       reduce using rule 8 (instruccion -> while_pro sc .)
    CONTINUE        reduce using rule 8 (instruccion -> while_pro sc .)
    BREAK           reduce using rule 8 (instruccion -> while_pro sc .)
    RETURN          reduce using rule 8 (instruccion -> while_pro sc .)
    FUNCTION        reduce using rule 8 (instruccion -> while_pro sc .)
    $end            reduce using rule 8 (instruccion -> while_pro sc .)
    R_LLAVE         reduce using rule 8 (instruccion -> while_pro sc .)


state 36

    (9) instruccion -> for_pro sc .

    CONSOLE         reduce using rule 9 (instruccion -> for_pro sc .)
    LET             reduce using rule 9 (instruccion -> for_pro sc .)
    LITERAL         reduce using rule 9 (instruccion -> for_pro sc .)
    IF              reduce using rule 9 (instruccion -> for_pro sc .)
    WHILE           reduce using rule 9 (instruccion -> for_pro sc .)
    FOR             reduce using rule 9 (instruccion -> for_pro sc .)
    INTERFACE       reduce using rule 9 (instruccion -> for_pro sc .)
    CONTINUE        reduce using rule 9 (instruccion -> for_pro sc .)
    BREAK           reduce using rule 9 (instruccion -> for_pro sc .)
    RETURN          reduce using rule 9 (instruccion -> for_pro sc .)
    FUNCTION        reduce using rule 9 (instruccion -> for_pro sc .)
    $end            reduce using rule 9 (instruccion -> for_pro sc .)
    R_LLAVE         reduce using rule 9 (instruccion -> for_pro sc .)


state 37

    (10) instruccion -> for_each_pro sc .

    CONSOLE         reduce using rule 10 (instruccion -> for_each_pro sc .)
    LET             reduce using rule 10 (instruccion -> for_each_pro sc .)
    LITERAL         reduce using rule 10 (instruccion -> for_each_pro sc .)
    IF              reduce using rule 10 (instruccion -> for_each_pro sc .)
    WHILE           reduce using rule 10 (instruccion -> for_each_pro sc .)
    FOR             reduce using rule 10 (instruccion -> for_each_pro sc .)
    INTERFACE       reduce using rule 10 (instruccion -> for_each_pro sc .)
    CONTINUE        reduce using rule 10 (instruccion -> for_each_pro sc .)
    BREAK           reduce using rule 10 (instruccion -> for_each_pro sc .)
    RETURN          reduce using rule 10 (instruccion -> for_each_pro sc .)
    FUNCTION        reduce using rule 10 (instruccion -> for_each_pro sc .)
    $end            reduce using rule 10 (instruccion -> for_each_pro sc .)
    R_LLAVE         reduce using rule 10 (instruccion -> for_each_pro sc .)


state 38

    (11) instruccion -> interface_pro sc .

    CONSOLE         reduce using rule 11 (instruccion -> interface_pro sc .)
    LET             reduce using rule 11 (instruccion -> interface_pro sc .)
    LITERAL         reduce using rule 11 (instruccion -> interface_pro sc .)
    IF              reduce using rule 11 (instruccion -> interface_pro sc .)
    WHILE           reduce using rule 11 (instruccion -> interface_pro sc .)
    FOR             reduce using rule 11 (instruccion -> interface_pro sc .)
    INTERFACE       reduce using rule 11 (instruccion -> interface_pro sc .)
    CONTINUE        reduce using rule 11 (instruccion -> interface_pro sc .)
    BREAK           reduce using rule 11 (instruccion -> interface_pro sc .)
    RETURN          reduce using rule 11 (instruccion -> interface_pro sc .)
    FUNCTION        reduce using rule 11 (instruccion -> interface_pro sc .)
    $end            reduce using rule 11 (instruccion -> interface_pro sc .)
    R_LLAVE         reduce using rule 11 (instruccion -> interface_pro sc .)


state 39

    (12) instruccion -> continue_pro sc .

    CONSOLE         reduce using rule 12 (instruccion -> continue_pro sc .)
    LET             reduce using rule 12 (instruccion -> continue_pro sc .)
    LITERAL         reduce using rule 12 (instruccion -> continue_pro sc .)
    IF              reduce using rule 12 (instruccion -> continue_pro sc .)
    WHILE           reduce using rule 12 (instruccion -> continue_pro sc .)
    FOR             reduce using rule 12 (instruccion -> continue_pro sc .)
    INTERFACE       reduce using rule 12 (instruccion -> continue_pro sc .)
    CONTINUE        reduce using rule 12 (instruccion -> continue_pro sc .)
    BREAK           reduce using rule 12 (instruccion -> continue_pro sc .)
    RETURN          reduce using rule 12 (instruccion -> continue_pro sc .)
    FUNCTION        reduce using rule 12 (instruccion -> continue_pro sc .)
    $end            reduce using rule 12 (instruccion -> continue_pro sc .)
    R_LLAVE         reduce using rule 12 (instruccion -> continue_pro sc .)


state 40

    (13) instruccion -> break_pro sc .

    CONSOLE         reduce using rule 13 (instruccion -> break_pro sc .)
    LET             reduce using rule 13 (instruccion -> break_pro sc .)
    LITERAL         reduce using rule 13 (instruccion -> break_pro sc .)
    IF              reduce using rule 13 (instruccion -> break_pro sc .)
    WHILE           reduce using rule 13 (instruccion -> break_pro sc .)
    FOR             reduce using rule 13 (instruccion -> break_pro sc .)
    INTERFACE       reduce using rule 13 (instruccion -> break_pro sc .)
    CONTINUE        reduce using rule 13 (instruccion -> break_pro sc .)
    BREAK           reduce using rule 13 (instruccion -> break_pro sc .)
    RETURN          reduce using rule 13 (instruccion -> break_pro sc .)
    FUNCTION        reduce using rule 13 (instruccion -> break_pro sc .)
    $end            reduce using rule 13 (instruccion -> break_pro sc .)
    R_LLAVE         reduce using rule 13 (instruccion -> break_pro sc .)


state 41

    (14) instruccion -> return_pro sc .

    CONSOLE         reduce using rule 14 (instruccion -> return_pro sc .)
    LET             reduce using rule 14 (instruccion -> return_pro sc .)
    LITERAL         reduce using rule 14 (instruccion -> return_pro sc .)
    IF              reduce using rule 14 (instruccion -> return_pro sc .)
    WHILE           reduce using rule 14 (instruccion -> return_pro sc .)
    FOR             reduce using rule 14 (instruccion -> return_pro sc .)
    INTERFACE       reduce using rule 14 (instruccion -> return_pro sc .)
    CONTINUE        reduce using rule 14 (instruccion -> return_pro sc .)
    BREAK           reduce using rule 14 (instruccion -> return_pro sc .)
    RETURN          reduce using rule 14 (instruccion -> return_pro sc .)
    FUNCTION        reduce using rule 14 (instruccion -> return_pro sc .)
    $end            reduce using rule 14 (instruccion -> return_pro sc .)
    R_LLAVE         reduce using rule 14 (instruccion -> return_pro sc .)


state 42

    (15) instruccion -> function_pro sc .

    CONSOLE         reduce using rule 15 (instruccion -> function_pro sc .)
    LET             reduce using rule 15 (instruccion -> function_pro sc .)
    LITERAL         reduce using rule 15 (instruccion -> function_pro sc .)
    IF              reduce using rule 15 (instruccion -> function_pro sc .)
    WHILE           reduce using rule 15 (instruccion -> function_pro sc .)
    FOR             reduce using rule 15 (instruccion -> function_pro sc .)
    INTERFACE       reduce using rule 15 (instruccion -> function_pro sc .)
    CONTINUE        reduce using rule 15 (instruccion -> function_pro sc .)
    BREAK           reduce using rule 15 (instruccion -> function_pro sc .)
    RETURN          reduce using rule 15 (instruccion -> function_pro sc .)
    FUNCTION        reduce using rule 15 (instruccion -> function_pro sc .)
    $end            reduce using rule 15 (instruccion -> function_pro sc .)
    R_LLAVE         reduce using rule 15 (instruccion -> function_pro sc .)


state 43

    (16) instruccion -> call_function_pro sc .

    CONSOLE         reduce using rule 16 (instruccion -> call_function_pro sc .)
    LET             reduce using rule 16 (instruccion -> call_function_pro sc .)
    LITERAL         reduce using rule 16 (instruccion -> call_function_pro sc .)
    IF              reduce using rule 16 (instruccion -> call_function_pro sc .)
    WHILE           reduce using rule 16 (instruccion -> call_function_pro sc .)
    FOR             reduce using rule 16 (instruccion -> call_function_pro sc .)
    INTERFACE       reduce using rule 16 (instruccion -> call_function_pro sc .)
    CONTINUE        reduce using rule 16 (instruccion -> call_function_pro sc .)
    BREAK           reduce using rule 16 (instruccion -> call_function_pro sc .)
    RETURN          reduce using rule 16 (instruccion -> call_function_pro sc .)
    FUNCTION        reduce using rule 16 (instruccion -> call_function_pro sc .)
    $end            reduce using rule 16 (instruccion -> call_function_pro sc .)
    R_LLAVE         reduce using rule 16 (instruccion -> call_function_pro sc .)


state 44

    (17) instruccion -> sumadores sc .

    CONSOLE         reduce using rule 17 (instruccion -> sumadores sc .)
    LET             reduce using rule 17 (instruccion -> sumadores sc .)
    LITERAL         reduce using rule 17 (instruccion -> sumadores sc .)
    IF              reduce using rule 17 (instruccion -> sumadores sc .)
    WHILE           reduce using rule 17 (instruccion -> sumadores sc .)
    FOR             reduce using rule 17 (instruccion -> sumadores sc .)
    INTERFACE       reduce using rule 17 (instruccion -> sumadores sc .)
    CONTINUE        reduce using rule 17 (instruccion -> sumadores sc .)
    BREAK           reduce using rule 17 (instruccion -> sumadores sc .)
    RETURN          reduce using rule 17 (instruccion -> sumadores sc .)
    FUNCTION        reduce using rule 17 (instruccion -> sumadores sc .)
    $end            reduce using rule 17 (instruccion -> sumadores sc .)
    R_LLAVE         reduce using rule 17 (instruccion -> sumadores sc .)


state 45

    (61) console_pro -> CONSOLE PUNTO . LOG L_PAREN expresion R_PAREN

    LOG             shift and go to state 76


state 46

    (39) declaration_instruction -> LET declaracion_list .
    (40) declaracion_list -> declaracion_list . COMA assignacion_instruction

    SEMI_COLON      reduce using rule 39 (declaration_instruction -> LET declaracion_list .)
    CONSOLE         reduce using rule 39 (declaration_instruction -> LET declaracion_list .)
    LET             reduce using rule 39 (declaration_instruction -> LET declaracion_list .)
    LITERAL         reduce using rule 39 (declaration_instruction -> LET declaracion_list .)
    IF              reduce using rule 39 (declaration_instruction -> LET declaracion_list .)
    WHILE           reduce using rule 39 (declaration_instruction -> LET declaracion_list .)
    FOR             reduce using rule 39 (declaration_instruction -> LET declaracion_list .)
    INTERFACE       reduce using rule 39 (declaration_instruction -> LET declaracion_list .)
    CONTINUE        reduce using rule 39 (declaration_instruction -> LET declaracion_list .)
    BREAK           reduce using rule 39 (declaration_instruction -> LET declaracion_list .)
    RETURN          reduce using rule 39 (declaration_instruction -> LET declaracion_list .)
    FUNCTION        reduce using rule 39 (declaration_instruction -> LET declaracion_list .)
    $end            reduce using rule 39 (declaration_instruction -> LET declaracion_list .)
    R_LLAVE         reduce using rule 39 (declaration_instruction -> LET declaracion_list .)
    COMA            shift and go to state 77


state 47

    (41) declaracion_list -> assignacion_instruction .

    COMA            reduce using rule 41 (declaracion_list -> assignacion_instruction .)
    SEMI_COLON      reduce using rule 41 (declaracion_list -> assignacion_instruction .)
    CONSOLE         reduce using rule 41 (declaracion_list -> assignacion_instruction .)
    LET             reduce using rule 41 (declaracion_list -> assignacion_instruction .)
    LITERAL         reduce using rule 41 (declaracion_list -> assignacion_instruction .)
    IF              reduce using rule 41 (declaracion_list -> assignacion_instruction .)
    WHILE           reduce using rule 41 (declaracion_list -> assignacion_instruction .)
    FOR             reduce using rule 41 (declaracion_list -> assignacion_instruction .)
    INTERFACE       reduce using rule 41 (declaracion_list -> assignacion_instruction .)
    CONTINUE        reduce using rule 41 (declaracion_list -> assignacion_instruction .)
    BREAK           reduce using rule 41 (declaracion_list -> assignacion_instruction .)
    RETURN          reduce using rule 41 (declaracion_list -> assignacion_instruction .)
    FUNCTION        reduce using rule 41 (declaracion_list -> assignacion_instruction .)
    $end            reduce using rule 41 (declaracion_list -> assignacion_instruction .)
    R_LLAVE         reduce using rule 41 (declaracion_list -> assignacion_instruction .)


state 48

    (42) assignacion_instruction -> LITERAL . COLON type IGUAL a
    (43) assignacion_instruction -> LITERAL . COLON type
    (44) assignacion_instruction -> LITERAL . IGUAL a

    COLON           shift and go to state 78
    IGUAL           shift and go to state 79


state 49

    (50) assig_pro -> LITERAL IGUAL . a
    (64) a -> . a OR b
    (65) a -> . b
    (66) b -> . b AND c
    (67) b -> . c
    (68) c -> . NOT d
    (69) c -> . d
    (70) d -> . d DISTINTO_QUE e
    (71) d -> . d MENOR_QUE e
    (72) d -> . d MENOR_IGUAL_QUE e
    (73) d -> . d MAYOR_QUE e
    (74) d -> . d MAYOR_IGUAL_QUE e
    (75) d -> . d TRIPLE_IGUAL e
    (76) d -> . e
    (77) e -> . e MAS f
    (78) e -> . e MENOS f
    (79) e -> . f
    (80) f -> . f TIMES g
    (81) f -> . f DIVIDE g
    (82) f -> . f MOD g
    (83) f -> . f POTENCIA g
    (84) f -> . g
    (85) f -> . g PUNTO nativeFun L_PAREN expresion R_PAREN
    (86) g -> . ENTERO
    (87) g -> . DECIMAL
    (88) g -> . CADENA
    (89) g -> . LITERAL
    (90) g -> . call_function_pro
    (91) g -> . array_pro
    (92) g -> . interface_assi
    (93) g -> . L_PAREN a R_PAREN
    (22) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (23) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (99) array_pro -> . L_CORCHETE values R_CORCHETE
    (96) interface_assi -> . L_LLAVE atributos_assi R_LLAVE

    NOT             shift and go to state 60
    ENTERO          shift and go to state 66
    DECIMAL         shift and go to state 67
    CADENA          shift and go to state 68
    LITERAL         shift and go to state 69
    L_PAREN         shift and go to state 65
    L_CORCHETE      shift and go to state 73
    L_LLAVE         shift and go to state 74

    a                              shift and go to state 80
    b                              shift and go to state 58
    c                              shift and go to state 59
    d                              shift and go to state 61
    e                              shift and go to state 62
    f                              shift and go to state 63
    g                              shift and go to state 64
    call_function_pro              shift and go to state 70
    array_pro                      shift and go to state 71
    interface_assi                 shift and go to state 72

state 50

    (22) call_function_pro -> LITERAL L_PAREN . values R_PAREN
    (23) call_function_pro -> LITERAL L_PAREN . R_PAREN
    (24) values -> . values COMA a
    (25) values -> . a
    (64) a -> . a OR b
    (65) a -> . b
    (66) b -> . b AND c
    (67) b -> . c
    (68) c -> . NOT d
    (69) c -> . d
    (70) d -> . d DISTINTO_QUE e
    (71) d -> . d MENOR_QUE e
    (72) d -> . d MENOR_IGUAL_QUE e
    (73) d -> . d MAYOR_QUE e
    (74) d -> . d MAYOR_IGUAL_QUE e
    (75) d -> . d TRIPLE_IGUAL e
    (76) d -> . e
    (77) e -> . e MAS f
    (78) e -> . e MENOS f
    (79) e -> . f
    (80) f -> . f TIMES g
    (81) f -> . f DIVIDE g
    (82) f -> . f MOD g
    (83) f -> . f POTENCIA g
    (84) f -> . g
    (85) f -> . g PUNTO nativeFun L_PAREN expresion R_PAREN
    (86) g -> . ENTERO
    (87) g -> . DECIMAL
    (88) g -> . CADENA
    (89) g -> . LITERAL
    (90) g -> . call_function_pro
    (91) g -> . array_pro
    (92) g -> . interface_assi
    (93) g -> . L_PAREN a R_PAREN
    (22) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (23) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (99) array_pro -> . L_CORCHETE values R_CORCHETE
    (96) interface_assi -> . L_LLAVE atributos_assi R_LLAVE

    R_PAREN         shift and go to state 82
    NOT             shift and go to state 60
    ENTERO          shift and go to state 66
    DECIMAL         shift and go to state 67
    CADENA          shift and go to state 68
    LITERAL         shift and go to state 69
    L_PAREN         shift and go to state 65
    L_CORCHETE      shift and go to state 73
    L_LLAVE         shift and go to state 74

    values                         shift and go to state 81
    a                              shift and go to state 83
    b                              shift and go to state 58
    c                              shift and go to state 59
    d                              shift and go to state 61
    e                              shift and go to state 62
    f                              shift and go to state 63
    g                              shift and go to state 64
    call_function_pro              shift and go to state 70
    array_pro                      shift and go to state 71
    interface_assi                 shift and go to state 72

state 51

    (94) sumadores -> LITERAL MAS . MAS

    MAS             shift and go to state 84


state 52

    (95) sumadores -> LITERAL MENOS . MENOS

    MENOS           shift and go to state 85


state 53

    (51) if_pro -> IF L_PAREN . a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro
    (64) a -> . a OR b
    (65) a -> . b
    (66) b -> . b AND c
    (67) b -> . c
    (68) c -> . NOT d
    (69) c -> . d
    (70) d -> . d DISTINTO_QUE e
    (71) d -> . d MENOR_QUE e
    (72) d -> . d MENOR_IGUAL_QUE e
    (73) d -> . d MAYOR_QUE e
    (74) d -> . d MAYOR_IGUAL_QUE e
    (75) d -> . d TRIPLE_IGUAL e
    (76) d -> . e
    (77) e -> . e MAS f
    (78) e -> . e MENOS f
    (79) e -> . f
    (80) f -> . f TIMES g
    (81) f -> . f DIVIDE g
    (82) f -> . f MOD g
    (83) f -> . f POTENCIA g
    (84) f -> . g
    (85) f -> . g PUNTO nativeFun L_PAREN expresion R_PAREN
    (86) g -> . ENTERO
    (87) g -> . DECIMAL
    (88) g -> . CADENA
    (89) g -> . LITERAL
    (90) g -> . call_function_pro
    (91) g -> . array_pro
    (92) g -> . interface_assi
    (93) g -> . L_PAREN a R_PAREN
    (22) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (23) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (99) array_pro -> . L_CORCHETE values R_CORCHETE
    (96) interface_assi -> . L_LLAVE atributos_assi R_LLAVE

    NOT             shift and go to state 60
    ENTERO          shift and go to state 66
    DECIMAL         shift and go to state 67
    CADENA          shift and go to state 68
    LITERAL         shift and go to state 69
    L_PAREN         shift and go to state 65
    L_CORCHETE      shift and go to state 73
    L_LLAVE         shift and go to state 74

    a                              shift and go to state 86
    b                              shift and go to state 58
    c                              shift and go to state 59
    d                              shift and go to state 61
    e                              shift and go to state 62
    f                              shift and go to state 63
    g                              shift and go to state 64
    call_function_pro              shift and go to state 70
    array_pro                      shift and go to state 71
    interface_assi                 shift and go to state 72

state 54

    (55) while_pro -> WHILE L_PAREN . a R_PAREN L_LLAVE instrucciones R_LLAVE
    (64) a -> . a OR b
    (65) a -> . b
    (66) b -> . b AND c
    (67) b -> . c
    (68) c -> . NOT d
    (69) c -> . d
    (70) d -> . d DISTINTO_QUE e
    (71) d -> . d MENOR_QUE e
    (72) d -> . d MENOR_IGUAL_QUE e
    (73) d -> . d MAYOR_QUE e
    (74) d -> . d MAYOR_IGUAL_QUE e
    (75) d -> . d TRIPLE_IGUAL e
    (76) d -> . e
    (77) e -> . e MAS f
    (78) e -> . e MENOS f
    (79) e -> . f
    (80) f -> . f TIMES g
    (81) f -> . f DIVIDE g
    (82) f -> . f MOD g
    (83) f -> . f POTENCIA g
    (84) f -> . g
    (85) f -> . g PUNTO nativeFun L_PAREN expresion R_PAREN
    (86) g -> . ENTERO
    (87) g -> . DECIMAL
    (88) g -> . CADENA
    (89) g -> . LITERAL
    (90) g -> . call_function_pro
    (91) g -> . array_pro
    (92) g -> . interface_assi
    (93) g -> . L_PAREN a R_PAREN
    (22) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (23) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (99) array_pro -> . L_CORCHETE values R_CORCHETE
    (96) interface_assi -> . L_LLAVE atributos_assi R_LLAVE

    NOT             shift and go to state 60
    ENTERO          shift and go to state 66
    DECIMAL         shift and go to state 67
    CADENA          shift and go to state 68
    LITERAL         shift and go to state 69
    L_PAREN         shift and go to state 65
    L_CORCHETE      shift and go to state 73
    L_LLAVE         shift and go to state 74

    a                              shift and go to state 87
    b                              shift and go to state 58
    c                              shift and go to state 59
    d                              shift and go to state 61
    e                              shift and go to state 62
    f                              shift and go to state 63
    g                              shift and go to state 64
    call_function_pro              shift and go to state 70
    array_pro                      shift and go to state 71
    interface_assi                 shift and go to state 72

state 55

    (56) for_pro -> FOR L_PAREN . declaration_instruction SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (57) for_pro -> FOR L_PAREN . assig_pro SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (58) for_each_pro -> FOR L_PAREN . for_each_dec R_PAREN L_LLAVE instrucciones R_LLAVE
    (39) declaration_instruction -> . LET declaracion_list
    (50) assig_pro -> . LITERAL IGUAL a
    (59) for_each_dec -> . LET LITERAL OF a
    (60) for_each_dec -> . LET LITERAL COLON type OF a

    LET             shift and go to state 91
    LITERAL         shift and go to state 92

    declaration_instruction        shift and go to state 88
    assig_pro                      shift and go to state 89
    for_each_dec                   shift and go to state 90

state 56

    (34) interface_pro -> INTERFACE LITERAL . L_LLAVE interface_atributos R_LLAVE

    L_LLAVE         shift and go to state 93


state 57

    (33) return_pro -> RETURN a .
    (64) a -> a . OR b

    SEMI_COLON      reduce using rule 33 (return_pro -> RETURN a .)
    CONSOLE         reduce using rule 33 (return_pro -> RETURN a .)
    LET             reduce using rule 33 (return_pro -> RETURN a .)
    LITERAL         reduce using rule 33 (return_pro -> RETURN a .)
    IF              reduce using rule 33 (return_pro -> RETURN a .)
    WHILE           reduce using rule 33 (return_pro -> RETURN a .)
    FOR             reduce using rule 33 (return_pro -> RETURN a .)
    INTERFACE       reduce using rule 33 (return_pro -> RETURN a .)
    CONTINUE        reduce using rule 33 (return_pro -> RETURN a .)
    BREAK           reduce using rule 33 (return_pro -> RETURN a .)
    RETURN          reduce using rule 33 (return_pro -> RETURN a .)
    FUNCTION        reduce using rule 33 (return_pro -> RETURN a .)
    $end            reduce using rule 33 (return_pro -> RETURN a .)
    R_LLAVE         reduce using rule 33 (return_pro -> RETURN a .)
    OR              shift and go to state 94


state 58

    (65) a -> b .
    (66) b -> b . AND c

    OR              reduce using rule 65 (a -> b .)
    SEMI_COLON      reduce using rule 65 (a -> b .)
    CONSOLE         reduce using rule 65 (a -> b .)
    LET             reduce using rule 65 (a -> b .)
    LITERAL         reduce using rule 65 (a -> b .)
    IF              reduce using rule 65 (a -> b .)
    WHILE           reduce using rule 65 (a -> b .)
    FOR             reduce using rule 65 (a -> b .)
    INTERFACE       reduce using rule 65 (a -> b .)
    CONTINUE        reduce using rule 65 (a -> b .)
    BREAK           reduce using rule 65 (a -> b .)
    RETURN          reduce using rule 65 (a -> b .)
    FUNCTION        reduce using rule 65 (a -> b .)
    $end            reduce using rule 65 (a -> b .)
    R_LLAVE         reduce using rule 65 (a -> b .)
    R_PAREN         reduce using rule 65 (a -> b .)
    COMA            reduce using rule 65 (a -> b .)
    R_CORCHETE      reduce using rule 65 (a -> b .)
    AND             shift and go to state 95


state 59

    (67) b -> c .

    AND             reduce using rule 67 (b -> c .)
    OR              reduce using rule 67 (b -> c .)
    SEMI_COLON      reduce using rule 67 (b -> c .)
    CONSOLE         reduce using rule 67 (b -> c .)
    LET             reduce using rule 67 (b -> c .)
    LITERAL         reduce using rule 67 (b -> c .)
    IF              reduce using rule 67 (b -> c .)
    WHILE           reduce using rule 67 (b -> c .)
    FOR             reduce using rule 67 (b -> c .)
    INTERFACE       reduce using rule 67 (b -> c .)
    CONTINUE        reduce using rule 67 (b -> c .)
    BREAK           reduce using rule 67 (b -> c .)
    RETURN          reduce using rule 67 (b -> c .)
    FUNCTION        reduce using rule 67 (b -> c .)
    $end            reduce using rule 67 (b -> c .)
    R_LLAVE         reduce using rule 67 (b -> c .)
    R_PAREN         reduce using rule 67 (b -> c .)
    COMA            reduce using rule 67 (b -> c .)
    R_CORCHETE      reduce using rule 67 (b -> c .)


state 60

    (68) c -> NOT . d
    (70) d -> . d DISTINTO_QUE e
    (71) d -> . d MENOR_QUE e
    (72) d -> . d MENOR_IGUAL_QUE e
    (73) d -> . d MAYOR_QUE e
    (74) d -> . d MAYOR_IGUAL_QUE e
    (75) d -> . d TRIPLE_IGUAL e
    (76) d -> . e
    (77) e -> . e MAS f
    (78) e -> . e MENOS f
    (79) e -> . f
    (80) f -> . f TIMES g
    (81) f -> . f DIVIDE g
    (82) f -> . f MOD g
    (83) f -> . f POTENCIA g
    (84) f -> . g
    (85) f -> . g PUNTO nativeFun L_PAREN expresion R_PAREN
    (86) g -> . ENTERO
    (87) g -> . DECIMAL
    (88) g -> . CADENA
    (89) g -> . LITERAL
    (90) g -> . call_function_pro
    (91) g -> . array_pro
    (92) g -> . interface_assi
    (93) g -> . L_PAREN a R_PAREN
    (22) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (23) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (99) array_pro -> . L_CORCHETE values R_CORCHETE
    (96) interface_assi -> . L_LLAVE atributos_assi R_LLAVE

    ENTERO          shift and go to state 66
    DECIMAL         shift and go to state 67
    CADENA          shift and go to state 68
    LITERAL         shift and go to state 69
    L_PAREN         shift and go to state 65
    L_CORCHETE      shift and go to state 73
    L_LLAVE         shift and go to state 74

    d                              shift and go to state 96
    e                              shift and go to state 62
    f                              shift and go to state 63
    g                              shift and go to state 64
    call_function_pro              shift and go to state 70
    array_pro                      shift and go to state 71
    interface_assi                 shift and go to state 72

state 61

    (69) c -> d .
    (70) d -> d . DISTINTO_QUE e
    (71) d -> d . MENOR_QUE e
    (72) d -> d . MENOR_IGUAL_QUE e
    (73) d -> d . MAYOR_QUE e
    (74) d -> d . MAYOR_IGUAL_QUE e
    (75) d -> d . TRIPLE_IGUAL e

    AND             reduce using rule 69 (c -> d .)
    OR              reduce using rule 69 (c -> d .)
    SEMI_COLON      reduce using rule 69 (c -> d .)
    CONSOLE         reduce using rule 69 (c -> d .)
    LET             reduce using rule 69 (c -> d .)
    LITERAL         reduce using rule 69 (c -> d .)
    IF              reduce using rule 69 (c -> d .)
    WHILE           reduce using rule 69 (c -> d .)
    FOR             reduce using rule 69 (c -> d .)
    INTERFACE       reduce using rule 69 (c -> d .)
    CONTINUE        reduce using rule 69 (c -> d .)
    BREAK           reduce using rule 69 (c -> d .)
    RETURN          reduce using rule 69 (c -> d .)
    FUNCTION        reduce using rule 69 (c -> d .)
    $end            reduce using rule 69 (c -> d .)
    R_LLAVE         reduce using rule 69 (c -> d .)
    R_PAREN         reduce using rule 69 (c -> d .)
    COMA            reduce using rule 69 (c -> d .)
    R_CORCHETE      reduce using rule 69 (c -> d .)
    DISTINTO_QUE    shift and go to state 97
    MENOR_QUE       shift and go to state 98
    MENOR_IGUAL_QUE shift and go to state 99
    MAYOR_QUE       shift and go to state 100
    MAYOR_IGUAL_QUE shift and go to state 101
    TRIPLE_IGUAL    shift and go to state 102


state 62

    (76) d -> e .
    (77) e -> e . MAS f
    (78) e -> e . MENOS f

    DISTINTO_QUE    reduce using rule 76 (d -> e .)
    MENOR_QUE       reduce using rule 76 (d -> e .)
    MENOR_IGUAL_QUE reduce using rule 76 (d -> e .)
    MAYOR_QUE       reduce using rule 76 (d -> e .)
    MAYOR_IGUAL_QUE reduce using rule 76 (d -> e .)
    TRIPLE_IGUAL    reduce using rule 76 (d -> e .)
    AND             reduce using rule 76 (d -> e .)
    OR              reduce using rule 76 (d -> e .)
    SEMI_COLON      reduce using rule 76 (d -> e .)
    CONSOLE         reduce using rule 76 (d -> e .)
    LET             reduce using rule 76 (d -> e .)
    LITERAL         reduce using rule 76 (d -> e .)
    IF              reduce using rule 76 (d -> e .)
    WHILE           reduce using rule 76 (d -> e .)
    FOR             reduce using rule 76 (d -> e .)
    INTERFACE       reduce using rule 76 (d -> e .)
    CONTINUE        reduce using rule 76 (d -> e .)
    BREAK           reduce using rule 76 (d -> e .)
    RETURN          reduce using rule 76 (d -> e .)
    FUNCTION        reduce using rule 76 (d -> e .)
    $end            reduce using rule 76 (d -> e .)
    R_LLAVE         reduce using rule 76 (d -> e .)
    R_PAREN         reduce using rule 76 (d -> e .)
    COMA            reduce using rule 76 (d -> e .)
    R_CORCHETE      reduce using rule 76 (d -> e .)
    MAS             shift and go to state 103
    MENOS           shift and go to state 104


state 63

    (79) e -> f .
    (80) f -> f . TIMES g
    (81) f -> f . DIVIDE g
    (82) f -> f . MOD g
    (83) f -> f . POTENCIA g

    MAS             reduce using rule 79 (e -> f .)
    MENOS           reduce using rule 79 (e -> f .)
    DISTINTO_QUE    reduce using rule 79 (e -> f .)
    MENOR_QUE       reduce using rule 79 (e -> f .)
    MENOR_IGUAL_QUE reduce using rule 79 (e -> f .)
    MAYOR_QUE       reduce using rule 79 (e -> f .)
    MAYOR_IGUAL_QUE reduce using rule 79 (e -> f .)
    TRIPLE_IGUAL    reduce using rule 79 (e -> f .)
    AND             reduce using rule 79 (e -> f .)
    OR              reduce using rule 79 (e -> f .)
    SEMI_COLON      reduce using rule 79 (e -> f .)
    CONSOLE         reduce using rule 79 (e -> f .)
    LET             reduce using rule 79 (e -> f .)
    LITERAL         reduce using rule 79 (e -> f .)
    IF              reduce using rule 79 (e -> f .)
    WHILE           reduce using rule 79 (e -> f .)
    FOR             reduce using rule 79 (e -> f .)
    INTERFACE       reduce using rule 79 (e -> f .)
    CONTINUE        reduce using rule 79 (e -> f .)
    BREAK           reduce using rule 79 (e -> f .)
    RETURN          reduce using rule 79 (e -> f .)
    FUNCTION        reduce using rule 79 (e -> f .)
    $end            reduce using rule 79 (e -> f .)
    R_LLAVE         reduce using rule 79 (e -> f .)
    R_PAREN         reduce using rule 79 (e -> f .)
    COMA            reduce using rule 79 (e -> f .)
    R_CORCHETE      reduce using rule 79 (e -> f .)
    TIMES           shift and go to state 105
    DIVIDE          shift and go to state 106
    MOD             shift and go to state 107
    POTENCIA        shift and go to state 108


state 64

    (84) f -> g .
    (85) f -> g . PUNTO nativeFun L_PAREN expresion R_PAREN

    TIMES           reduce using rule 84 (f -> g .)
    DIVIDE          reduce using rule 84 (f -> g .)
    MOD             reduce using rule 84 (f -> g .)
    POTENCIA        reduce using rule 84 (f -> g .)
    MAS             reduce using rule 84 (f -> g .)
    MENOS           reduce using rule 84 (f -> g .)
    DISTINTO_QUE    reduce using rule 84 (f -> g .)
    MENOR_QUE       reduce using rule 84 (f -> g .)
    MENOR_IGUAL_QUE reduce using rule 84 (f -> g .)
    MAYOR_QUE       reduce using rule 84 (f -> g .)
    MAYOR_IGUAL_QUE reduce using rule 84 (f -> g .)
    TRIPLE_IGUAL    reduce using rule 84 (f -> g .)
    AND             reduce using rule 84 (f -> g .)
    OR              reduce using rule 84 (f -> g .)
    SEMI_COLON      reduce using rule 84 (f -> g .)
    CONSOLE         reduce using rule 84 (f -> g .)
    LET             reduce using rule 84 (f -> g .)
    LITERAL         reduce using rule 84 (f -> g .)
    IF              reduce using rule 84 (f -> g .)
    WHILE           reduce using rule 84 (f -> g .)
    FOR             reduce using rule 84 (f -> g .)
    INTERFACE       reduce using rule 84 (f -> g .)
    CONTINUE        reduce using rule 84 (f -> g .)
    BREAK           reduce using rule 84 (f -> g .)
    RETURN          reduce using rule 84 (f -> g .)
    FUNCTION        reduce using rule 84 (f -> g .)
    $end            reduce using rule 84 (f -> g .)
    R_LLAVE         reduce using rule 84 (f -> g .)
    R_PAREN         reduce using rule 84 (f -> g .)
    COMA            reduce using rule 84 (f -> g .)
    R_CORCHETE      reduce using rule 84 (f -> g .)
    PUNTO           shift and go to state 109


state 65

    (93) g -> L_PAREN . a R_PAREN
    (64) a -> . a OR b
    (65) a -> . b
    (66) b -> . b AND c
    (67) b -> . c
    (68) c -> . NOT d
    (69) c -> . d
    (70) d -> . d DISTINTO_QUE e
    (71) d -> . d MENOR_QUE e
    (72) d -> . d MENOR_IGUAL_QUE e
    (73) d -> . d MAYOR_QUE e
    (74) d -> . d MAYOR_IGUAL_QUE e
    (75) d -> . d TRIPLE_IGUAL e
    (76) d -> . e
    (77) e -> . e MAS f
    (78) e -> . e MENOS f
    (79) e -> . f
    (80) f -> . f TIMES g
    (81) f -> . f DIVIDE g
    (82) f -> . f MOD g
    (83) f -> . f POTENCIA g
    (84) f -> . g
    (85) f -> . g PUNTO nativeFun L_PAREN expresion R_PAREN
    (86) g -> . ENTERO
    (87) g -> . DECIMAL
    (88) g -> . CADENA
    (89) g -> . LITERAL
    (90) g -> . call_function_pro
    (91) g -> . array_pro
    (92) g -> . interface_assi
    (93) g -> . L_PAREN a R_PAREN
    (22) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (23) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (99) array_pro -> . L_CORCHETE values R_CORCHETE
    (96) interface_assi -> . L_LLAVE atributos_assi R_LLAVE

    NOT             shift and go to state 60
    ENTERO          shift and go to state 66
    DECIMAL         shift and go to state 67
    CADENA          shift and go to state 68
    LITERAL         shift and go to state 69
    L_PAREN         shift and go to state 65
    L_CORCHETE      shift and go to state 73
    L_LLAVE         shift and go to state 74

    a                              shift and go to state 110
    b                              shift and go to state 58
    c                              shift and go to state 59
    d                              shift and go to state 61
    e                              shift and go to state 62
    f                              shift and go to state 63
    g                              shift and go to state 64
    call_function_pro              shift and go to state 70
    array_pro                      shift and go to state 71
    interface_assi                 shift and go to state 72

state 66

    (86) g -> ENTERO .

    PUNTO           reduce using rule 86 (g -> ENTERO .)
    TIMES           reduce using rule 86 (g -> ENTERO .)
    DIVIDE          reduce using rule 86 (g -> ENTERO .)
    MOD             reduce using rule 86 (g -> ENTERO .)
    POTENCIA        reduce using rule 86 (g -> ENTERO .)
    MAS             reduce using rule 86 (g -> ENTERO .)
    MENOS           reduce using rule 86 (g -> ENTERO .)
    DISTINTO_QUE    reduce using rule 86 (g -> ENTERO .)
    MENOR_QUE       reduce using rule 86 (g -> ENTERO .)
    MENOR_IGUAL_QUE reduce using rule 86 (g -> ENTERO .)
    MAYOR_QUE       reduce using rule 86 (g -> ENTERO .)
    MAYOR_IGUAL_QUE reduce using rule 86 (g -> ENTERO .)
    TRIPLE_IGUAL    reduce using rule 86 (g -> ENTERO .)
    AND             reduce using rule 86 (g -> ENTERO .)
    OR              reduce using rule 86 (g -> ENTERO .)
    SEMI_COLON      reduce using rule 86 (g -> ENTERO .)
    CONSOLE         reduce using rule 86 (g -> ENTERO .)
    LET             reduce using rule 86 (g -> ENTERO .)
    LITERAL         reduce using rule 86 (g -> ENTERO .)
    IF              reduce using rule 86 (g -> ENTERO .)
    WHILE           reduce using rule 86 (g -> ENTERO .)
    FOR             reduce using rule 86 (g -> ENTERO .)
    INTERFACE       reduce using rule 86 (g -> ENTERO .)
    CONTINUE        reduce using rule 86 (g -> ENTERO .)
    BREAK           reduce using rule 86 (g -> ENTERO .)
    RETURN          reduce using rule 86 (g -> ENTERO .)
    FUNCTION        reduce using rule 86 (g -> ENTERO .)
    $end            reduce using rule 86 (g -> ENTERO .)
    R_LLAVE         reduce using rule 86 (g -> ENTERO .)
    R_PAREN         reduce using rule 86 (g -> ENTERO .)
    COMA            reduce using rule 86 (g -> ENTERO .)
    R_CORCHETE      reduce using rule 86 (g -> ENTERO .)


state 67

    (87) g -> DECIMAL .

    PUNTO           reduce using rule 87 (g -> DECIMAL .)
    TIMES           reduce using rule 87 (g -> DECIMAL .)
    DIVIDE          reduce using rule 87 (g -> DECIMAL .)
    MOD             reduce using rule 87 (g -> DECIMAL .)
    POTENCIA        reduce using rule 87 (g -> DECIMAL .)
    MAS             reduce using rule 87 (g -> DECIMAL .)
    MENOS           reduce using rule 87 (g -> DECIMAL .)
    DISTINTO_QUE    reduce using rule 87 (g -> DECIMAL .)
    MENOR_QUE       reduce using rule 87 (g -> DECIMAL .)
    MENOR_IGUAL_QUE reduce using rule 87 (g -> DECIMAL .)
    MAYOR_QUE       reduce using rule 87 (g -> DECIMAL .)
    MAYOR_IGUAL_QUE reduce using rule 87 (g -> DECIMAL .)
    TRIPLE_IGUAL    reduce using rule 87 (g -> DECIMAL .)
    AND             reduce using rule 87 (g -> DECIMAL .)
    OR              reduce using rule 87 (g -> DECIMAL .)
    SEMI_COLON      reduce using rule 87 (g -> DECIMAL .)
    CONSOLE         reduce using rule 87 (g -> DECIMAL .)
    LET             reduce using rule 87 (g -> DECIMAL .)
    LITERAL         reduce using rule 87 (g -> DECIMAL .)
    IF              reduce using rule 87 (g -> DECIMAL .)
    WHILE           reduce using rule 87 (g -> DECIMAL .)
    FOR             reduce using rule 87 (g -> DECIMAL .)
    INTERFACE       reduce using rule 87 (g -> DECIMAL .)
    CONTINUE        reduce using rule 87 (g -> DECIMAL .)
    BREAK           reduce using rule 87 (g -> DECIMAL .)
    RETURN          reduce using rule 87 (g -> DECIMAL .)
    FUNCTION        reduce using rule 87 (g -> DECIMAL .)
    $end            reduce using rule 87 (g -> DECIMAL .)
    R_LLAVE         reduce using rule 87 (g -> DECIMAL .)
    R_PAREN         reduce using rule 87 (g -> DECIMAL .)
    COMA            reduce using rule 87 (g -> DECIMAL .)
    R_CORCHETE      reduce using rule 87 (g -> DECIMAL .)


state 68

    (88) g -> CADENA .

    PUNTO           reduce using rule 88 (g -> CADENA .)
    TIMES           reduce using rule 88 (g -> CADENA .)
    DIVIDE          reduce using rule 88 (g -> CADENA .)
    MOD             reduce using rule 88 (g -> CADENA .)
    POTENCIA        reduce using rule 88 (g -> CADENA .)
    MAS             reduce using rule 88 (g -> CADENA .)
    MENOS           reduce using rule 88 (g -> CADENA .)
    DISTINTO_QUE    reduce using rule 88 (g -> CADENA .)
    MENOR_QUE       reduce using rule 88 (g -> CADENA .)
    MENOR_IGUAL_QUE reduce using rule 88 (g -> CADENA .)
    MAYOR_QUE       reduce using rule 88 (g -> CADENA .)
    MAYOR_IGUAL_QUE reduce using rule 88 (g -> CADENA .)
    TRIPLE_IGUAL    reduce using rule 88 (g -> CADENA .)
    AND             reduce using rule 88 (g -> CADENA .)
    OR              reduce using rule 88 (g -> CADENA .)
    SEMI_COLON      reduce using rule 88 (g -> CADENA .)
    CONSOLE         reduce using rule 88 (g -> CADENA .)
    LET             reduce using rule 88 (g -> CADENA .)
    LITERAL         reduce using rule 88 (g -> CADENA .)
    IF              reduce using rule 88 (g -> CADENA .)
    WHILE           reduce using rule 88 (g -> CADENA .)
    FOR             reduce using rule 88 (g -> CADENA .)
    INTERFACE       reduce using rule 88 (g -> CADENA .)
    CONTINUE        reduce using rule 88 (g -> CADENA .)
    BREAK           reduce using rule 88 (g -> CADENA .)
    RETURN          reduce using rule 88 (g -> CADENA .)
    FUNCTION        reduce using rule 88 (g -> CADENA .)
    $end            reduce using rule 88 (g -> CADENA .)
    R_LLAVE         reduce using rule 88 (g -> CADENA .)
    R_PAREN         reduce using rule 88 (g -> CADENA .)
    COMA            reduce using rule 88 (g -> CADENA .)
    R_CORCHETE      reduce using rule 88 (g -> CADENA .)


state 69

    (89) g -> LITERAL .
    (22) call_function_pro -> LITERAL . L_PAREN values R_PAREN
    (23) call_function_pro -> LITERAL . L_PAREN R_PAREN

    PUNTO           reduce using rule 89 (g -> LITERAL .)
    TIMES           reduce using rule 89 (g -> LITERAL .)
    DIVIDE          reduce using rule 89 (g -> LITERAL .)
    MOD             reduce using rule 89 (g -> LITERAL .)
    POTENCIA        reduce using rule 89 (g -> LITERAL .)
    MAS             reduce using rule 89 (g -> LITERAL .)
    MENOS           reduce using rule 89 (g -> LITERAL .)
    DISTINTO_QUE    reduce using rule 89 (g -> LITERAL .)
    MENOR_QUE       reduce using rule 89 (g -> LITERAL .)
    MENOR_IGUAL_QUE reduce using rule 89 (g -> LITERAL .)
    MAYOR_QUE       reduce using rule 89 (g -> LITERAL .)
    MAYOR_IGUAL_QUE reduce using rule 89 (g -> LITERAL .)
    TRIPLE_IGUAL    reduce using rule 89 (g -> LITERAL .)
    AND             reduce using rule 89 (g -> LITERAL .)
    OR              reduce using rule 89 (g -> LITERAL .)
    SEMI_COLON      reduce using rule 89 (g -> LITERAL .)
    CONSOLE         reduce using rule 89 (g -> LITERAL .)
    LET             reduce using rule 89 (g -> LITERAL .)
    LITERAL         reduce using rule 89 (g -> LITERAL .)
    IF              reduce using rule 89 (g -> LITERAL .)
    WHILE           reduce using rule 89 (g -> LITERAL .)
    FOR             reduce using rule 89 (g -> LITERAL .)
    INTERFACE       reduce using rule 89 (g -> LITERAL .)
    CONTINUE        reduce using rule 89 (g -> LITERAL .)
    BREAK           reduce using rule 89 (g -> LITERAL .)
    RETURN          reduce using rule 89 (g -> LITERAL .)
    FUNCTION        reduce using rule 89 (g -> LITERAL .)
    $end            reduce using rule 89 (g -> LITERAL .)
    R_LLAVE         reduce using rule 89 (g -> LITERAL .)
    R_PAREN         reduce using rule 89 (g -> LITERAL .)
    COMA            reduce using rule 89 (g -> LITERAL .)
    R_CORCHETE      reduce using rule 89 (g -> LITERAL .)
    L_PAREN         shift and go to state 50


state 70

    (90) g -> call_function_pro .

    PUNTO           reduce using rule 90 (g -> call_function_pro .)
    TIMES           reduce using rule 90 (g -> call_function_pro .)
    DIVIDE          reduce using rule 90 (g -> call_function_pro .)
    MOD             reduce using rule 90 (g -> call_function_pro .)
    POTENCIA        reduce using rule 90 (g -> call_function_pro .)
    MAS             reduce using rule 90 (g -> call_function_pro .)
    MENOS           reduce using rule 90 (g -> call_function_pro .)
    DISTINTO_QUE    reduce using rule 90 (g -> call_function_pro .)
    MENOR_QUE       reduce using rule 90 (g -> call_function_pro .)
    MENOR_IGUAL_QUE reduce using rule 90 (g -> call_function_pro .)
    MAYOR_QUE       reduce using rule 90 (g -> call_function_pro .)
    MAYOR_IGUAL_QUE reduce using rule 90 (g -> call_function_pro .)
    TRIPLE_IGUAL    reduce using rule 90 (g -> call_function_pro .)
    AND             reduce using rule 90 (g -> call_function_pro .)
    OR              reduce using rule 90 (g -> call_function_pro .)
    SEMI_COLON      reduce using rule 90 (g -> call_function_pro .)
    CONSOLE         reduce using rule 90 (g -> call_function_pro .)
    LET             reduce using rule 90 (g -> call_function_pro .)
    LITERAL         reduce using rule 90 (g -> call_function_pro .)
    IF              reduce using rule 90 (g -> call_function_pro .)
    WHILE           reduce using rule 90 (g -> call_function_pro .)
    FOR             reduce using rule 90 (g -> call_function_pro .)
    INTERFACE       reduce using rule 90 (g -> call_function_pro .)
    CONTINUE        reduce using rule 90 (g -> call_function_pro .)
    BREAK           reduce using rule 90 (g -> call_function_pro .)
    RETURN          reduce using rule 90 (g -> call_function_pro .)
    FUNCTION        reduce using rule 90 (g -> call_function_pro .)
    $end            reduce using rule 90 (g -> call_function_pro .)
    R_LLAVE         reduce using rule 90 (g -> call_function_pro .)
    R_PAREN         reduce using rule 90 (g -> call_function_pro .)
    COMA            reduce using rule 90 (g -> call_function_pro .)
    R_CORCHETE      reduce using rule 90 (g -> call_function_pro .)


state 71

    (91) g -> array_pro .

    PUNTO           reduce using rule 91 (g -> array_pro .)
    TIMES           reduce using rule 91 (g -> array_pro .)
    DIVIDE          reduce using rule 91 (g -> array_pro .)
    MOD             reduce using rule 91 (g -> array_pro .)
    POTENCIA        reduce using rule 91 (g -> array_pro .)
    MAS             reduce using rule 91 (g -> array_pro .)
    MENOS           reduce using rule 91 (g -> array_pro .)
    DISTINTO_QUE    reduce using rule 91 (g -> array_pro .)
    MENOR_QUE       reduce using rule 91 (g -> array_pro .)
    MENOR_IGUAL_QUE reduce using rule 91 (g -> array_pro .)
    MAYOR_QUE       reduce using rule 91 (g -> array_pro .)
    MAYOR_IGUAL_QUE reduce using rule 91 (g -> array_pro .)
    TRIPLE_IGUAL    reduce using rule 91 (g -> array_pro .)
    AND             reduce using rule 91 (g -> array_pro .)
    OR              reduce using rule 91 (g -> array_pro .)
    SEMI_COLON      reduce using rule 91 (g -> array_pro .)
    CONSOLE         reduce using rule 91 (g -> array_pro .)
    LET             reduce using rule 91 (g -> array_pro .)
    LITERAL         reduce using rule 91 (g -> array_pro .)
    IF              reduce using rule 91 (g -> array_pro .)
    WHILE           reduce using rule 91 (g -> array_pro .)
    FOR             reduce using rule 91 (g -> array_pro .)
    INTERFACE       reduce using rule 91 (g -> array_pro .)
    CONTINUE        reduce using rule 91 (g -> array_pro .)
    BREAK           reduce using rule 91 (g -> array_pro .)
    RETURN          reduce using rule 91 (g -> array_pro .)
    FUNCTION        reduce using rule 91 (g -> array_pro .)
    $end            reduce using rule 91 (g -> array_pro .)
    R_LLAVE         reduce using rule 91 (g -> array_pro .)
    R_PAREN         reduce using rule 91 (g -> array_pro .)
    COMA            reduce using rule 91 (g -> array_pro .)
    R_CORCHETE      reduce using rule 91 (g -> array_pro .)


state 72

    (92) g -> interface_assi .

    PUNTO           reduce using rule 92 (g -> interface_assi .)
    TIMES           reduce using rule 92 (g -> interface_assi .)
    DIVIDE          reduce using rule 92 (g -> interface_assi .)
    MOD             reduce using rule 92 (g -> interface_assi .)
    POTENCIA        reduce using rule 92 (g -> interface_assi .)
    MAS             reduce using rule 92 (g -> interface_assi .)
    MENOS           reduce using rule 92 (g -> interface_assi .)
    DISTINTO_QUE    reduce using rule 92 (g -> interface_assi .)
    MENOR_QUE       reduce using rule 92 (g -> interface_assi .)
    MENOR_IGUAL_QUE reduce using rule 92 (g -> interface_assi .)
    MAYOR_QUE       reduce using rule 92 (g -> interface_assi .)
    MAYOR_IGUAL_QUE reduce using rule 92 (g -> interface_assi .)
    TRIPLE_IGUAL    reduce using rule 92 (g -> interface_assi .)
    AND             reduce using rule 92 (g -> interface_assi .)
    OR              reduce using rule 92 (g -> interface_assi .)
    SEMI_COLON      reduce using rule 92 (g -> interface_assi .)
    CONSOLE         reduce using rule 92 (g -> interface_assi .)
    LET             reduce using rule 92 (g -> interface_assi .)
    LITERAL         reduce using rule 92 (g -> interface_assi .)
    IF              reduce using rule 92 (g -> interface_assi .)
    WHILE           reduce using rule 92 (g -> interface_assi .)
    FOR             reduce using rule 92 (g -> interface_assi .)
    INTERFACE       reduce using rule 92 (g -> interface_assi .)
    CONTINUE        reduce using rule 92 (g -> interface_assi .)
    BREAK           reduce using rule 92 (g -> interface_assi .)
    RETURN          reduce using rule 92 (g -> interface_assi .)
    FUNCTION        reduce using rule 92 (g -> interface_assi .)
    $end            reduce using rule 92 (g -> interface_assi .)
    R_LLAVE         reduce using rule 92 (g -> interface_assi .)
    R_PAREN         reduce using rule 92 (g -> interface_assi .)
    COMA            reduce using rule 92 (g -> interface_assi .)
    R_CORCHETE      reduce using rule 92 (g -> interface_assi .)


state 73

    (99) array_pro -> L_CORCHETE . values R_CORCHETE
    (24) values -> . values COMA a
    (25) values -> . a
    (64) a -> . a OR b
    (65) a -> . b
    (66) b -> . b AND c
    (67) b -> . c
    (68) c -> . NOT d
    (69) c -> . d
    (70) d -> . d DISTINTO_QUE e
    (71) d -> . d MENOR_QUE e
    (72) d -> . d MENOR_IGUAL_QUE e
    (73) d -> . d MAYOR_QUE e
    (74) d -> . d MAYOR_IGUAL_QUE e
    (75) d -> . d TRIPLE_IGUAL e
    (76) d -> . e
    (77) e -> . e MAS f
    (78) e -> . e MENOS f
    (79) e -> . f
    (80) f -> . f TIMES g
    (81) f -> . f DIVIDE g
    (82) f -> . f MOD g
    (83) f -> . f POTENCIA g
    (84) f -> . g
    (85) f -> . g PUNTO nativeFun L_PAREN expresion R_PAREN
    (86) g -> . ENTERO
    (87) g -> . DECIMAL
    (88) g -> . CADENA
    (89) g -> . LITERAL
    (90) g -> . call_function_pro
    (91) g -> . array_pro
    (92) g -> . interface_assi
    (93) g -> . L_PAREN a R_PAREN
    (22) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (23) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (99) array_pro -> . L_CORCHETE values R_CORCHETE
    (96) interface_assi -> . L_LLAVE atributos_assi R_LLAVE

    NOT             shift and go to state 60
    ENTERO          shift and go to state 66
    DECIMAL         shift and go to state 67
    CADENA          shift and go to state 68
    LITERAL         shift and go to state 69
    L_PAREN         shift and go to state 65
    L_CORCHETE      shift and go to state 73
    L_LLAVE         shift and go to state 74

    values                         shift and go to state 111
    a                              shift and go to state 83
    b                              shift and go to state 58
    c                              shift and go to state 59
    d                              shift and go to state 61
    e                              shift and go to state 62
    f                              shift and go to state 63
    g                              shift and go to state 64
    call_function_pro              shift and go to state 70
    array_pro                      shift and go to state 71
    interface_assi                 shift and go to state 72

state 74

    (96) interface_assi -> L_LLAVE . atributos_assi R_LLAVE
    (97) atributos_assi -> . atributos_assi COMA LITERAL COLON a
    (98) atributos_assi -> . LITERAL COLON a

    LITERAL         shift and go to state 113

    atributos_assi                 shift and go to state 112

state 75

    (20) function_pro -> FUNCTION LITERAL . L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (21) function_pro -> FUNCTION LITERAL . L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE

    L_PAREN         shift and go to state 114


state 76

    (61) console_pro -> CONSOLE PUNTO LOG . L_PAREN expresion R_PAREN

    L_PAREN         shift and go to state 115


state 77

    (40) declaracion_list -> declaracion_list COMA . assignacion_instruction
    (42) assignacion_instruction -> . LITERAL COLON type IGUAL a
    (43) assignacion_instruction -> . LITERAL COLON type
    (44) assignacion_instruction -> . LITERAL IGUAL a

    LITERAL         shift and go to state 48

    assignacion_instruction        shift and go to state 116

state 78

    (42) assignacion_instruction -> LITERAL COLON . type IGUAL a
    (43) assignacion_instruction -> LITERAL COLON . type
    (45) type -> . NUMBER
    (46) type -> . STRING
    (47) type -> . BOOLEAN
    (48) type -> . ANY
    (49) type -> . LITERAL

    NUMBER          shift and go to state 119
    STRING          shift and go to state 120
    BOOLEAN         shift and go to state 121
    ANY             shift and go to state 122
    LITERAL         shift and go to state 117

    type                           shift and go to state 118

state 79

    (44) assignacion_instruction -> LITERAL IGUAL . a
    (64) a -> . a OR b
    (65) a -> . b
    (66) b -> . b AND c
    (67) b -> . c
    (68) c -> . NOT d
    (69) c -> . d
    (70) d -> . d DISTINTO_QUE e
    (71) d -> . d MENOR_QUE e
    (72) d -> . d MENOR_IGUAL_QUE e
    (73) d -> . d MAYOR_QUE e
    (74) d -> . d MAYOR_IGUAL_QUE e
    (75) d -> . d TRIPLE_IGUAL e
    (76) d -> . e
    (77) e -> . e MAS f
    (78) e -> . e MENOS f
    (79) e -> . f
    (80) f -> . f TIMES g
    (81) f -> . f DIVIDE g
    (82) f -> . f MOD g
    (83) f -> . f POTENCIA g
    (84) f -> . g
    (85) f -> . g PUNTO nativeFun L_PAREN expresion R_PAREN
    (86) g -> . ENTERO
    (87) g -> . DECIMAL
    (88) g -> . CADENA
    (89) g -> . LITERAL
    (90) g -> . call_function_pro
    (91) g -> . array_pro
    (92) g -> . interface_assi
    (93) g -> . L_PAREN a R_PAREN
    (22) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (23) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (99) array_pro -> . L_CORCHETE values R_CORCHETE
    (96) interface_assi -> . L_LLAVE atributos_assi R_LLAVE

    NOT             shift and go to state 60
    ENTERO          shift and go to state 66
    DECIMAL         shift and go to state 67
    CADENA          shift and go to state 68
    LITERAL         shift and go to state 69
    L_PAREN         shift and go to state 65
    L_CORCHETE      shift and go to state 73
    L_LLAVE         shift and go to state 74

    a                              shift and go to state 123
    b                              shift and go to state 58
    c                              shift and go to state 59
    d                              shift and go to state 61
    e                              shift and go to state 62
    f                              shift and go to state 63
    g                              shift and go to state 64
    call_function_pro              shift and go to state 70
    array_pro                      shift and go to state 71
    interface_assi                 shift and go to state 72

state 80

    (50) assig_pro -> LITERAL IGUAL a .
    (64) a -> a . OR b

    SEMI_COLON      reduce using rule 50 (assig_pro -> LITERAL IGUAL a .)
    CONSOLE         reduce using rule 50 (assig_pro -> LITERAL IGUAL a .)
    LET             reduce using rule 50 (assig_pro -> LITERAL IGUAL a .)
    LITERAL         reduce using rule 50 (assig_pro -> LITERAL IGUAL a .)
    IF              reduce using rule 50 (assig_pro -> LITERAL IGUAL a .)
    WHILE           reduce using rule 50 (assig_pro -> LITERAL IGUAL a .)
    FOR             reduce using rule 50 (assig_pro -> LITERAL IGUAL a .)
    INTERFACE       reduce using rule 50 (assig_pro -> LITERAL IGUAL a .)
    CONTINUE        reduce using rule 50 (assig_pro -> LITERAL IGUAL a .)
    BREAK           reduce using rule 50 (assig_pro -> LITERAL IGUAL a .)
    RETURN          reduce using rule 50 (assig_pro -> LITERAL IGUAL a .)
    FUNCTION        reduce using rule 50 (assig_pro -> LITERAL IGUAL a .)
    $end            reduce using rule 50 (assig_pro -> LITERAL IGUAL a .)
    R_LLAVE         reduce using rule 50 (assig_pro -> LITERAL IGUAL a .)
    R_PAREN         reduce using rule 50 (assig_pro -> LITERAL IGUAL a .)
    OR              shift and go to state 94


state 81

    (22) call_function_pro -> LITERAL L_PAREN values . R_PAREN
    (24) values -> values . COMA a

    R_PAREN         shift and go to state 124
    COMA            shift and go to state 125


state 82

    (23) call_function_pro -> LITERAL L_PAREN R_PAREN .

    SEMI_COLON      reduce using rule 23 (call_function_pro -> LITERAL L_PAREN R_PAREN .)
    CONSOLE         reduce using rule 23 (call_function_pro -> LITERAL L_PAREN R_PAREN .)
    LET             reduce using rule 23 (call_function_pro -> LITERAL L_PAREN R_PAREN .)
    LITERAL         reduce using rule 23 (call_function_pro -> LITERAL L_PAREN R_PAREN .)
    IF              reduce using rule 23 (call_function_pro -> LITERAL L_PAREN R_PAREN .)
    WHILE           reduce using rule 23 (call_function_pro -> LITERAL L_PAREN R_PAREN .)
    FOR             reduce using rule 23 (call_function_pro -> LITERAL L_PAREN R_PAREN .)
    INTERFACE       reduce using rule 23 (call_function_pro -> LITERAL L_PAREN R_PAREN .)
    CONTINUE        reduce using rule 23 (call_function_pro -> LITERAL L_PAREN R_PAREN .)
    BREAK           reduce using rule 23 (call_function_pro -> LITERAL L_PAREN R_PAREN .)
    RETURN          reduce using rule 23 (call_function_pro -> LITERAL L_PAREN R_PAREN .)
    FUNCTION        reduce using rule 23 (call_function_pro -> LITERAL L_PAREN R_PAREN .)
    $end            reduce using rule 23 (call_function_pro -> LITERAL L_PAREN R_PAREN .)
    PUNTO           reduce using rule 23 (call_function_pro -> LITERAL L_PAREN R_PAREN .)
    TIMES           reduce using rule 23 (call_function_pro -> LITERAL L_PAREN R_PAREN .)
    DIVIDE          reduce using rule 23 (call_function_pro -> LITERAL L_PAREN R_PAREN .)
    MOD             reduce using rule 23 (call_function_pro -> LITERAL L_PAREN R_PAREN .)
    POTENCIA        reduce using rule 23 (call_function_pro -> LITERAL L_PAREN R_PAREN .)
    MAS             reduce using rule 23 (call_function_pro -> LITERAL L_PAREN R_PAREN .)
    MENOS           reduce using rule 23 (call_function_pro -> LITERAL L_PAREN R_PAREN .)
    DISTINTO_QUE    reduce using rule 23 (call_function_pro -> LITERAL L_PAREN R_PAREN .)
    MENOR_QUE       reduce using rule 23 (call_function_pro -> LITERAL L_PAREN R_PAREN .)
    MENOR_IGUAL_QUE reduce using rule 23 (call_function_pro -> LITERAL L_PAREN R_PAREN .)
    MAYOR_QUE       reduce using rule 23 (call_function_pro -> LITERAL L_PAREN R_PAREN .)
    MAYOR_IGUAL_QUE reduce using rule 23 (call_function_pro -> LITERAL L_PAREN R_PAREN .)
    TRIPLE_IGUAL    reduce using rule 23 (call_function_pro -> LITERAL L_PAREN R_PAREN .)
    AND             reduce using rule 23 (call_function_pro -> LITERAL L_PAREN R_PAREN .)
    OR              reduce using rule 23 (call_function_pro -> LITERAL L_PAREN R_PAREN .)
    R_LLAVE         reduce using rule 23 (call_function_pro -> LITERAL L_PAREN R_PAREN .)
    R_PAREN         reduce using rule 23 (call_function_pro -> LITERAL L_PAREN R_PAREN .)
    COMA            reduce using rule 23 (call_function_pro -> LITERAL L_PAREN R_PAREN .)
    R_CORCHETE      reduce using rule 23 (call_function_pro -> LITERAL L_PAREN R_PAREN .)


state 83

    (25) values -> a .
    (64) a -> a . OR b

    R_PAREN         reduce using rule 25 (values -> a .)
    COMA            reduce using rule 25 (values -> a .)
    R_CORCHETE      reduce using rule 25 (values -> a .)
    OR              shift and go to state 94


state 84

    (94) sumadores -> LITERAL MAS MAS .

    SEMI_COLON      reduce using rule 94 (sumadores -> LITERAL MAS MAS .)
    CONSOLE         reduce using rule 94 (sumadores -> LITERAL MAS MAS .)
    LET             reduce using rule 94 (sumadores -> LITERAL MAS MAS .)
    LITERAL         reduce using rule 94 (sumadores -> LITERAL MAS MAS .)
    IF              reduce using rule 94 (sumadores -> LITERAL MAS MAS .)
    WHILE           reduce using rule 94 (sumadores -> LITERAL MAS MAS .)
    FOR             reduce using rule 94 (sumadores -> LITERAL MAS MAS .)
    INTERFACE       reduce using rule 94 (sumadores -> LITERAL MAS MAS .)
    CONTINUE        reduce using rule 94 (sumadores -> LITERAL MAS MAS .)
    BREAK           reduce using rule 94 (sumadores -> LITERAL MAS MAS .)
    RETURN          reduce using rule 94 (sumadores -> LITERAL MAS MAS .)
    FUNCTION        reduce using rule 94 (sumadores -> LITERAL MAS MAS .)
    $end            reduce using rule 94 (sumadores -> LITERAL MAS MAS .)
    R_LLAVE         reduce using rule 94 (sumadores -> LITERAL MAS MAS .)


state 85

    (95) sumadores -> LITERAL MENOS MENOS .

    SEMI_COLON      reduce using rule 95 (sumadores -> LITERAL MENOS MENOS .)
    CONSOLE         reduce using rule 95 (sumadores -> LITERAL MENOS MENOS .)
    LET             reduce using rule 95 (sumadores -> LITERAL MENOS MENOS .)
    LITERAL         reduce using rule 95 (sumadores -> LITERAL MENOS MENOS .)
    IF              reduce using rule 95 (sumadores -> LITERAL MENOS MENOS .)
    WHILE           reduce using rule 95 (sumadores -> LITERAL MENOS MENOS .)
    FOR             reduce using rule 95 (sumadores -> LITERAL MENOS MENOS .)
    INTERFACE       reduce using rule 95 (sumadores -> LITERAL MENOS MENOS .)
    CONTINUE        reduce using rule 95 (sumadores -> LITERAL MENOS MENOS .)
    BREAK           reduce using rule 95 (sumadores -> LITERAL MENOS MENOS .)
    RETURN          reduce using rule 95 (sumadores -> LITERAL MENOS MENOS .)
    FUNCTION        reduce using rule 95 (sumadores -> LITERAL MENOS MENOS .)
    $end            reduce using rule 95 (sumadores -> LITERAL MENOS MENOS .)
    R_LLAVE         reduce using rule 95 (sumadores -> LITERAL MENOS MENOS .)


state 86

    (51) if_pro -> IF L_PAREN a . R_PAREN L_LLAVE instrucciones R_LLAVE else_pro
    (64) a -> a . OR b

    R_PAREN         shift and go to state 126
    OR              shift and go to state 94


state 87

    (55) while_pro -> WHILE L_PAREN a . R_PAREN L_LLAVE instrucciones R_LLAVE
    (64) a -> a . OR b

    R_PAREN         shift and go to state 127
    OR              shift and go to state 94


state 88

    (56) for_pro -> FOR L_PAREN declaration_instruction . SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE

    SEMI_COLON      shift and go to state 128


state 89

    (57) for_pro -> FOR L_PAREN assig_pro . SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE

    SEMI_COLON      shift and go to state 129


state 90

    (58) for_each_pro -> FOR L_PAREN for_each_dec . R_PAREN L_LLAVE instrucciones R_LLAVE

    R_PAREN         shift and go to state 130


state 91

    (39) declaration_instruction -> LET . declaracion_list
    (59) for_each_dec -> LET . LITERAL OF a
    (60) for_each_dec -> LET . LITERAL COLON type OF a
    (40) declaracion_list -> . declaracion_list COMA assignacion_instruction
    (41) declaracion_list -> . assignacion_instruction
    (42) assignacion_instruction -> . LITERAL COLON type IGUAL a
    (43) assignacion_instruction -> . LITERAL COLON type
    (44) assignacion_instruction -> . LITERAL IGUAL a

    LITERAL         shift and go to state 131

    declaracion_list               shift and go to state 46
    assignacion_instruction        shift and go to state 47

state 92

    (50) assig_pro -> LITERAL . IGUAL a

    IGUAL           shift and go to state 49


state 93

    (34) interface_pro -> INTERFACE LITERAL L_LLAVE . interface_atributos R_LLAVE
    (35) interface_atributos -> . interface_atributos interface_atributo sc
    (36) interface_atributos -> .

    R_LLAVE         reduce using rule 36 (interface_atributos -> .)
    LITERAL         reduce using rule 36 (interface_atributos -> .)

    interface_atributos            shift and go to state 132

state 94

    (64) a -> a OR . b
    (66) b -> . b AND c
    (67) b -> . c
    (68) c -> . NOT d
    (69) c -> . d
    (70) d -> . d DISTINTO_QUE e
    (71) d -> . d MENOR_QUE e
    (72) d -> . d MENOR_IGUAL_QUE e
    (73) d -> . d MAYOR_QUE e
    (74) d -> . d MAYOR_IGUAL_QUE e
    (75) d -> . d TRIPLE_IGUAL e
    (76) d -> . e
    (77) e -> . e MAS f
    (78) e -> . e MENOS f
    (79) e -> . f
    (80) f -> . f TIMES g
    (81) f -> . f DIVIDE g
    (82) f -> . f MOD g
    (83) f -> . f POTENCIA g
    (84) f -> . g
    (85) f -> . g PUNTO nativeFun L_PAREN expresion R_PAREN
    (86) g -> . ENTERO
    (87) g -> . DECIMAL
    (88) g -> . CADENA
    (89) g -> . LITERAL
    (90) g -> . call_function_pro
    (91) g -> . array_pro
    (92) g -> . interface_assi
    (93) g -> . L_PAREN a R_PAREN
    (22) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (23) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (99) array_pro -> . L_CORCHETE values R_CORCHETE
    (96) interface_assi -> . L_LLAVE atributos_assi R_LLAVE

    NOT             shift and go to state 60
    ENTERO          shift and go to state 66
    DECIMAL         shift and go to state 67
    CADENA          shift and go to state 68
    LITERAL         shift and go to state 69
    L_PAREN         shift and go to state 65
    L_CORCHETE      shift and go to state 73
    L_LLAVE         shift and go to state 74

    b                              shift and go to state 133
    c                              shift and go to state 59
    d                              shift and go to state 61
    e                              shift and go to state 62
    f                              shift and go to state 63
    g                              shift and go to state 64
    call_function_pro              shift and go to state 70
    array_pro                      shift and go to state 71
    interface_assi                 shift and go to state 72

state 95

    (66) b -> b AND . c
    (68) c -> . NOT d
    (69) c -> . d
    (70) d -> . d DISTINTO_QUE e
    (71) d -> . d MENOR_QUE e
    (72) d -> . d MENOR_IGUAL_QUE e
    (73) d -> . d MAYOR_QUE e
    (74) d -> . d MAYOR_IGUAL_QUE e
    (75) d -> . d TRIPLE_IGUAL e
    (76) d -> . e
    (77) e -> . e MAS f
    (78) e -> . e MENOS f
    (79) e -> . f
    (80) f -> . f TIMES g
    (81) f -> . f DIVIDE g
    (82) f -> . f MOD g
    (83) f -> . f POTENCIA g
    (84) f -> . g
    (85) f -> . g PUNTO nativeFun L_PAREN expresion R_PAREN
    (86) g -> . ENTERO
    (87) g -> . DECIMAL
    (88) g -> . CADENA
    (89) g -> . LITERAL
    (90) g -> . call_function_pro
    (91) g -> . array_pro
    (92) g -> . interface_assi
    (93) g -> . L_PAREN a R_PAREN
    (22) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (23) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (99) array_pro -> . L_CORCHETE values R_CORCHETE
    (96) interface_assi -> . L_LLAVE atributos_assi R_LLAVE

    NOT             shift and go to state 60
    ENTERO          shift and go to state 66
    DECIMAL         shift and go to state 67
    CADENA          shift and go to state 68
    LITERAL         shift and go to state 69
    L_PAREN         shift and go to state 65
    L_CORCHETE      shift and go to state 73
    L_LLAVE         shift and go to state 74

    c                              shift and go to state 134
    d                              shift and go to state 61
    e                              shift and go to state 62
    f                              shift and go to state 63
    g                              shift and go to state 64
    call_function_pro              shift and go to state 70
    array_pro                      shift and go to state 71
    interface_assi                 shift and go to state 72

state 96

    (68) c -> NOT d .
    (70) d -> d . DISTINTO_QUE e
    (71) d -> d . MENOR_QUE e
    (72) d -> d . MENOR_IGUAL_QUE e
    (73) d -> d . MAYOR_QUE e
    (74) d -> d . MAYOR_IGUAL_QUE e
    (75) d -> d . TRIPLE_IGUAL e

    AND             reduce using rule 68 (c -> NOT d .)
    OR              reduce using rule 68 (c -> NOT d .)
    SEMI_COLON      reduce using rule 68 (c -> NOT d .)
    CONSOLE         reduce using rule 68 (c -> NOT d .)
    LET             reduce using rule 68 (c -> NOT d .)
    LITERAL         reduce using rule 68 (c -> NOT d .)
    IF              reduce using rule 68 (c -> NOT d .)
    WHILE           reduce using rule 68 (c -> NOT d .)
    FOR             reduce using rule 68 (c -> NOT d .)
    INTERFACE       reduce using rule 68 (c -> NOT d .)
    CONTINUE        reduce using rule 68 (c -> NOT d .)
    BREAK           reduce using rule 68 (c -> NOT d .)
    RETURN          reduce using rule 68 (c -> NOT d .)
    FUNCTION        reduce using rule 68 (c -> NOT d .)
    $end            reduce using rule 68 (c -> NOT d .)
    R_LLAVE         reduce using rule 68 (c -> NOT d .)
    R_PAREN         reduce using rule 68 (c -> NOT d .)
    COMA            reduce using rule 68 (c -> NOT d .)
    R_CORCHETE      reduce using rule 68 (c -> NOT d .)
    DISTINTO_QUE    shift and go to state 97
    MENOR_QUE       shift and go to state 98
    MENOR_IGUAL_QUE shift and go to state 99
    MAYOR_QUE       shift and go to state 100
    MAYOR_IGUAL_QUE shift and go to state 101
    TRIPLE_IGUAL    shift and go to state 102


state 97

    (70) d -> d DISTINTO_QUE . e
    (77) e -> . e MAS f
    (78) e -> . e MENOS f
    (79) e -> . f
    (80) f -> . f TIMES g
    (81) f -> . f DIVIDE g
    (82) f -> . f MOD g
    (83) f -> . f POTENCIA g
    (84) f -> . g
    (85) f -> . g PUNTO nativeFun L_PAREN expresion R_PAREN
    (86) g -> . ENTERO
    (87) g -> . DECIMAL
    (88) g -> . CADENA
    (89) g -> . LITERAL
    (90) g -> . call_function_pro
    (91) g -> . array_pro
    (92) g -> . interface_assi
    (93) g -> . L_PAREN a R_PAREN
    (22) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (23) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (99) array_pro -> . L_CORCHETE values R_CORCHETE
    (96) interface_assi -> . L_LLAVE atributos_assi R_LLAVE

    ENTERO          shift and go to state 66
    DECIMAL         shift and go to state 67
    CADENA          shift and go to state 68
    LITERAL         shift and go to state 69
    L_PAREN         shift and go to state 65
    L_CORCHETE      shift and go to state 73
    L_LLAVE         shift and go to state 74

    e                              shift and go to state 135
    f                              shift and go to state 63
    g                              shift and go to state 64
    call_function_pro              shift and go to state 70
    array_pro                      shift and go to state 71
    interface_assi                 shift and go to state 72

state 98

    (71) d -> d MENOR_QUE . e
    (77) e -> . e MAS f
    (78) e -> . e MENOS f
    (79) e -> . f
    (80) f -> . f TIMES g
    (81) f -> . f DIVIDE g
    (82) f -> . f MOD g
    (83) f -> . f POTENCIA g
    (84) f -> . g
    (85) f -> . g PUNTO nativeFun L_PAREN expresion R_PAREN
    (86) g -> . ENTERO
    (87) g -> . DECIMAL
    (88) g -> . CADENA
    (89) g -> . LITERAL
    (90) g -> . call_function_pro
    (91) g -> . array_pro
    (92) g -> . interface_assi
    (93) g -> . L_PAREN a R_PAREN
    (22) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (23) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (99) array_pro -> . L_CORCHETE values R_CORCHETE
    (96) interface_assi -> . L_LLAVE atributos_assi R_LLAVE

    ENTERO          shift and go to state 66
    DECIMAL         shift and go to state 67
    CADENA          shift and go to state 68
    LITERAL         shift and go to state 69
    L_PAREN         shift and go to state 65
    L_CORCHETE      shift and go to state 73
    L_LLAVE         shift and go to state 74

    e                              shift and go to state 136
    f                              shift and go to state 63
    g                              shift and go to state 64
    call_function_pro              shift and go to state 70
    array_pro                      shift and go to state 71
    interface_assi                 shift and go to state 72

state 99

    (72) d -> d MENOR_IGUAL_QUE . e
    (77) e -> . e MAS f
    (78) e -> . e MENOS f
    (79) e -> . f
    (80) f -> . f TIMES g
    (81) f -> . f DIVIDE g
    (82) f -> . f MOD g
    (83) f -> . f POTENCIA g
    (84) f -> . g
    (85) f -> . g PUNTO nativeFun L_PAREN expresion R_PAREN
    (86) g -> . ENTERO
    (87) g -> . DECIMAL
    (88) g -> . CADENA
    (89) g -> . LITERAL
    (90) g -> . call_function_pro
    (91) g -> . array_pro
    (92) g -> . interface_assi
    (93) g -> . L_PAREN a R_PAREN
    (22) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (23) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (99) array_pro -> . L_CORCHETE values R_CORCHETE
    (96) interface_assi -> . L_LLAVE atributos_assi R_LLAVE

    ENTERO          shift and go to state 66
    DECIMAL         shift and go to state 67
    CADENA          shift and go to state 68
    LITERAL         shift and go to state 69
    L_PAREN         shift and go to state 65
    L_CORCHETE      shift and go to state 73
    L_LLAVE         shift and go to state 74

    e                              shift and go to state 137
    f                              shift and go to state 63
    g                              shift and go to state 64
    call_function_pro              shift and go to state 70
    array_pro                      shift and go to state 71
    interface_assi                 shift and go to state 72

state 100

    (73) d -> d MAYOR_QUE . e
    (77) e -> . e MAS f
    (78) e -> . e MENOS f
    (79) e -> . f
    (80) f -> . f TIMES g
    (81) f -> . f DIVIDE g
    (82) f -> . f MOD g
    (83) f -> . f POTENCIA g
    (84) f -> . g
    (85) f -> . g PUNTO nativeFun L_PAREN expresion R_PAREN
    (86) g -> . ENTERO
    (87) g -> . DECIMAL
    (88) g -> . CADENA
    (89) g -> . LITERAL
    (90) g -> . call_function_pro
    (91) g -> . array_pro
    (92) g -> . interface_assi
    (93) g -> . L_PAREN a R_PAREN
    (22) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (23) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (99) array_pro -> . L_CORCHETE values R_CORCHETE
    (96) interface_assi -> . L_LLAVE atributos_assi R_LLAVE

    ENTERO          shift and go to state 66
    DECIMAL         shift and go to state 67
    CADENA          shift and go to state 68
    LITERAL         shift and go to state 69
    L_PAREN         shift and go to state 65
    L_CORCHETE      shift and go to state 73
    L_LLAVE         shift and go to state 74

    e                              shift and go to state 138
    f                              shift and go to state 63
    g                              shift and go to state 64
    call_function_pro              shift and go to state 70
    array_pro                      shift and go to state 71
    interface_assi                 shift and go to state 72

state 101

    (74) d -> d MAYOR_IGUAL_QUE . e
    (77) e -> . e MAS f
    (78) e -> . e MENOS f
    (79) e -> . f
    (80) f -> . f TIMES g
    (81) f -> . f DIVIDE g
    (82) f -> . f MOD g
    (83) f -> . f POTENCIA g
    (84) f -> . g
    (85) f -> . g PUNTO nativeFun L_PAREN expresion R_PAREN
    (86) g -> . ENTERO
    (87) g -> . DECIMAL
    (88) g -> . CADENA
    (89) g -> . LITERAL
    (90) g -> . call_function_pro
    (91) g -> . array_pro
    (92) g -> . interface_assi
    (93) g -> . L_PAREN a R_PAREN
    (22) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (23) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (99) array_pro -> . L_CORCHETE values R_CORCHETE
    (96) interface_assi -> . L_LLAVE atributos_assi R_LLAVE

    ENTERO          shift and go to state 66
    DECIMAL         shift and go to state 67
    CADENA          shift and go to state 68
    LITERAL         shift and go to state 69
    L_PAREN         shift and go to state 65
    L_CORCHETE      shift and go to state 73
    L_LLAVE         shift and go to state 74

    e                              shift and go to state 139
    f                              shift and go to state 63
    g                              shift and go to state 64
    call_function_pro              shift and go to state 70
    array_pro                      shift and go to state 71
    interface_assi                 shift and go to state 72

state 102

    (75) d -> d TRIPLE_IGUAL . e
    (77) e -> . e MAS f
    (78) e -> . e MENOS f
    (79) e -> . f
    (80) f -> . f TIMES g
    (81) f -> . f DIVIDE g
    (82) f -> . f MOD g
    (83) f -> . f POTENCIA g
    (84) f -> . g
    (85) f -> . g PUNTO nativeFun L_PAREN expresion R_PAREN
    (86) g -> . ENTERO
    (87) g -> . DECIMAL
    (88) g -> . CADENA
    (89) g -> . LITERAL
    (90) g -> . call_function_pro
    (91) g -> . array_pro
    (92) g -> . interface_assi
    (93) g -> . L_PAREN a R_PAREN
    (22) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (23) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (99) array_pro -> . L_CORCHETE values R_CORCHETE
    (96) interface_assi -> . L_LLAVE atributos_assi R_LLAVE

    ENTERO          shift and go to state 66
    DECIMAL         shift and go to state 67
    CADENA          shift and go to state 68
    LITERAL         shift and go to state 69
    L_PAREN         shift and go to state 65
    L_CORCHETE      shift and go to state 73
    L_LLAVE         shift and go to state 74

    e                              shift and go to state 140
    f                              shift and go to state 63
    g                              shift and go to state 64
    call_function_pro              shift and go to state 70
    array_pro                      shift and go to state 71
    interface_assi                 shift and go to state 72

state 103

    (77) e -> e MAS . f
    (80) f -> . f TIMES g
    (81) f -> . f DIVIDE g
    (82) f -> . f MOD g
    (83) f -> . f POTENCIA g
    (84) f -> . g
    (85) f -> . g PUNTO nativeFun L_PAREN expresion R_PAREN
    (86) g -> . ENTERO
    (87) g -> . DECIMAL
    (88) g -> . CADENA
    (89) g -> . LITERAL
    (90) g -> . call_function_pro
    (91) g -> . array_pro
    (92) g -> . interface_assi
    (93) g -> . L_PAREN a R_PAREN
    (22) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (23) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (99) array_pro -> . L_CORCHETE values R_CORCHETE
    (96) interface_assi -> . L_LLAVE atributos_assi R_LLAVE

    ENTERO          shift and go to state 66
    DECIMAL         shift and go to state 67
    CADENA          shift and go to state 68
    LITERAL         shift and go to state 69
    L_PAREN         shift and go to state 65
    L_CORCHETE      shift and go to state 73
    L_LLAVE         shift and go to state 74

    f                              shift and go to state 141
    g                              shift and go to state 64
    call_function_pro              shift and go to state 70
    array_pro                      shift and go to state 71
    interface_assi                 shift and go to state 72

state 104

    (78) e -> e MENOS . f
    (80) f -> . f TIMES g
    (81) f -> . f DIVIDE g
    (82) f -> . f MOD g
    (83) f -> . f POTENCIA g
    (84) f -> . g
    (85) f -> . g PUNTO nativeFun L_PAREN expresion R_PAREN
    (86) g -> . ENTERO
    (87) g -> . DECIMAL
    (88) g -> . CADENA
    (89) g -> . LITERAL
    (90) g -> . call_function_pro
    (91) g -> . array_pro
    (92) g -> . interface_assi
    (93) g -> . L_PAREN a R_PAREN
    (22) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (23) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (99) array_pro -> . L_CORCHETE values R_CORCHETE
    (96) interface_assi -> . L_LLAVE atributos_assi R_LLAVE

    ENTERO          shift and go to state 66
    DECIMAL         shift and go to state 67
    CADENA          shift and go to state 68
    LITERAL         shift and go to state 69
    L_PAREN         shift and go to state 65
    L_CORCHETE      shift and go to state 73
    L_LLAVE         shift and go to state 74

    f                              shift and go to state 142
    g                              shift and go to state 64
    call_function_pro              shift and go to state 70
    array_pro                      shift and go to state 71
    interface_assi                 shift and go to state 72

state 105

    (80) f -> f TIMES . g
    (86) g -> . ENTERO
    (87) g -> . DECIMAL
    (88) g -> . CADENA
    (89) g -> . LITERAL
    (90) g -> . call_function_pro
    (91) g -> . array_pro
    (92) g -> . interface_assi
    (93) g -> . L_PAREN a R_PAREN
    (22) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (23) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (99) array_pro -> . L_CORCHETE values R_CORCHETE
    (96) interface_assi -> . L_LLAVE atributos_assi R_LLAVE

    ENTERO          shift and go to state 66
    DECIMAL         shift and go to state 67
    CADENA          shift and go to state 68
    LITERAL         shift and go to state 69
    L_PAREN         shift and go to state 65
    L_CORCHETE      shift and go to state 73
    L_LLAVE         shift and go to state 74

    g                              shift and go to state 143
    call_function_pro              shift and go to state 70
    array_pro                      shift and go to state 71
    interface_assi                 shift and go to state 72

state 106

    (81) f -> f DIVIDE . g
    (86) g -> . ENTERO
    (87) g -> . DECIMAL
    (88) g -> . CADENA
    (89) g -> . LITERAL
    (90) g -> . call_function_pro
    (91) g -> . array_pro
    (92) g -> . interface_assi
    (93) g -> . L_PAREN a R_PAREN
    (22) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (23) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (99) array_pro -> . L_CORCHETE values R_CORCHETE
    (96) interface_assi -> . L_LLAVE atributos_assi R_LLAVE

    ENTERO          shift and go to state 66
    DECIMAL         shift and go to state 67
    CADENA          shift and go to state 68
    LITERAL         shift and go to state 69
    L_PAREN         shift and go to state 65
    L_CORCHETE      shift and go to state 73
    L_LLAVE         shift and go to state 74

    g                              shift and go to state 144
    call_function_pro              shift and go to state 70
    array_pro                      shift and go to state 71
    interface_assi                 shift and go to state 72

state 107

    (82) f -> f MOD . g
    (86) g -> . ENTERO
    (87) g -> . DECIMAL
    (88) g -> . CADENA
    (89) g -> . LITERAL
    (90) g -> . call_function_pro
    (91) g -> . array_pro
    (92) g -> . interface_assi
    (93) g -> . L_PAREN a R_PAREN
    (22) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (23) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (99) array_pro -> . L_CORCHETE values R_CORCHETE
    (96) interface_assi -> . L_LLAVE atributos_assi R_LLAVE

    ENTERO          shift and go to state 66
    DECIMAL         shift and go to state 67
    CADENA          shift and go to state 68
    LITERAL         shift and go to state 69
    L_PAREN         shift and go to state 65
    L_CORCHETE      shift and go to state 73
    L_LLAVE         shift and go to state 74

    g                              shift and go to state 145
    call_function_pro              shift and go to state 70
    array_pro                      shift and go to state 71
    interface_assi                 shift and go to state 72

state 108

    (83) f -> f POTENCIA . g
    (86) g -> . ENTERO
    (87) g -> . DECIMAL
    (88) g -> . CADENA
    (89) g -> . LITERAL
    (90) g -> . call_function_pro
    (91) g -> . array_pro
    (92) g -> . interface_assi
    (93) g -> . L_PAREN a R_PAREN
    (22) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (23) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (99) array_pro -> . L_CORCHETE values R_CORCHETE
    (96) interface_assi -> . L_LLAVE atributos_assi R_LLAVE

    ENTERO          shift and go to state 66
    DECIMAL         shift and go to state 67
    CADENA          shift and go to state 68
    LITERAL         shift and go to state 69
    L_PAREN         shift and go to state 65
    L_CORCHETE      shift and go to state 73
    L_LLAVE         shift and go to state 74

    g                              shift and go to state 146
    call_function_pro              shift and go to state 70
    array_pro                      shift and go to state 71
    interface_assi                 shift and go to state 72

state 109

    (85) f -> g PUNTO . nativeFun L_PAREN expresion R_PAREN
    (100) nativeFun -> . TOSTRING
    (101) nativeFun -> . TOFIXED
    (102) nativeFun -> . TOEXPONENTIAL
    (103) nativeFun -> . TOLOWERCASE
    (104) nativeFun -> . TOUPPERCASE
    (105) nativeFun -> . SPLIT
    (106) nativeFun -> . CONCAT

    TOSTRING        shift and go to state 148
    TOFIXED         shift and go to state 149
    TOEXPONENTIAL   shift and go to state 150
    TOLOWERCASE     shift and go to state 151
    TOUPPERCASE     shift and go to state 152
    SPLIT           shift and go to state 153
    CONCAT          shift and go to state 154

    nativeFun                      shift and go to state 147

state 110

    (93) g -> L_PAREN a . R_PAREN
    (64) a -> a . OR b

    R_PAREN         shift and go to state 155
    OR              shift and go to state 94


state 111

    (99) array_pro -> L_CORCHETE values . R_CORCHETE
    (24) values -> values . COMA a

    R_CORCHETE      shift and go to state 156
    COMA            shift and go to state 125


state 112

    (96) interface_assi -> L_LLAVE atributos_assi . R_LLAVE
    (97) atributos_assi -> atributos_assi . COMA LITERAL COLON a

    R_LLAVE         shift and go to state 157
    COMA            shift and go to state 158


state 113

    (98) atributos_assi -> LITERAL . COLON a

    COLON           shift and go to state 159


state 114

    (20) function_pro -> FUNCTION LITERAL L_PAREN . parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (21) function_pro -> FUNCTION LITERAL L_PAREN . R_PAREN L_LLAVE instrucciones R_LLAVE
    (26) parameters_pro -> . parameters_pro COMA parameter_pro
    (27) parameters_pro -> . parameter_pro
    (28) parameter_pro -> . LITERAL COLON type
    (29) parameter_pro -> . LITERAL

    R_PAREN         shift and go to state 162
    LITERAL         shift and go to state 160

    parameters_pro                 shift and go to state 161
    parameter_pro                  shift and go to state 163

state 115

    (61) console_pro -> CONSOLE PUNTO LOG L_PAREN . expresion R_PAREN
    (62) expresion -> . expresion COMA a
    (63) expresion -> . a
    (64) a -> . a OR b
    (65) a -> . b
    (66) b -> . b AND c
    (67) b -> . c
    (68) c -> . NOT d
    (69) c -> . d
    (70) d -> . d DISTINTO_QUE e
    (71) d -> . d MENOR_QUE e
    (72) d -> . d MENOR_IGUAL_QUE e
    (73) d -> . d MAYOR_QUE e
    (74) d -> . d MAYOR_IGUAL_QUE e
    (75) d -> . d TRIPLE_IGUAL e
    (76) d -> . e
    (77) e -> . e MAS f
    (78) e -> . e MENOS f
    (79) e -> . f
    (80) f -> . f TIMES g
    (81) f -> . f DIVIDE g
    (82) f -> . f MOD g
    (83) f -> . f POTENCIA g
    (84) f -> . g
    (85) f -> . g PUNTO nativeFun L_PAREN expresion R_PAREN
    (86) g -> . ENTERO
    (87) g -> . DECIMAL
    (88) g -> . CADENA
    (89) g -> . LITERAL
    (90) g -> . call_function_pro
    (91) g -> . array_pro
    (92) g -> . interface_assi
    (93) g -> . L_PAREN a R_PAREN
    (22) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (23) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (99) array_pro -> . L_CORCHETE values R_CORCHETE
    (96) interface_assi -> . L_LLAVE atributos_assi R_LLAVE

    NOT             shift and go to state 60
    ENTERO          shift and go to state 66
    DECIMAL         shift and go to state 67
    CADENA          shift and go to state 68
    LITERAL         shift and go to state 69
    L_PAREN         shift and go to state 65
    L_CORCHETE      shift and go to state 73
    L_LLAVE         shift and go to state 74

    expresion                      shift and go to state 164
    a                              shift and go to state 165
    b                              shift and go to state 58
    c                              shift and go to state 59
    d                              shift and go to state 61
    e                              shift and go to state 62
    f                              shift and go to state 63
    g                              shift and go to state 64
    call_function_pro              shift and go to state 70
    array_pro                      shift and go to state 71
    interface_assi                 shift and go to state 72

state 116

    (40) declaracion_list -> declaracion_list COMA assignacion_instruction .

    COMA            reduce using rule 40 (declaracion_list -> declaracion_list COMA assignacion_instruction .)
    SEMI_COLON      reduce using rule 40 (declaracion_list -> declaracion_list COMA assignacion_instruction .)
    CONSOLE         reduce using rule 40 (declaracion_list -> declaracion_list COMA assignacion_instruction .)
    LET             reduce using rule 40 (declaracion_list -> declaracion_list COMA assignacion_instruction .)
    LITERAL         reduce using rule 40 (declaracion_list -> declaracion_list COMA assignacion_instruction .)
    IF              reduce using rule 40 (declaracion_list -> declaracion_list COMA assignacion_instruction .)
    WHILE           reduce using rule 40 (declaracion_list -> declaracion_list COMA assignacion_instruction .)
    FOR             reduce using rule 40 (declaracion_list -> declaracion_list COMA assignacion_instruction .)
    INTERFACE       reduce using rule 40 (declaracion_list -> declaracion_list COMA assignacion_instruction .)
    CONTINUE        reduce using rule 40 (declaracion_list -> declaracion_list COMA assignacion_instruction .)
    BREAK           reduce using rule 40 (declaracion_list -> declaracion_list COMA assignacion_instruction .)
    RETURN          reduce using rule 40 (declaracion_list -> declaracion_list COMA assignacion_instruction .)
    FUNCTION        reduce using rule 40 (declaracion_list -> declaracion_list COMA assignacion_instruction .)
    $end            reduce using rule 40 (declaracion_list -> declaracion_list COMA assignacion_instruction .)
    R_LLAVE         reduce using rule 40 (declaracion_list -> declaracion_list COMA assignacion_instruction .)


state 117

    (49) type -> LITERAL .

    IGUAL           reduce using rule 49 (type -> LITERAL .)
    COMA            reduce using rule 49 (type -> LITERAL .)
    SEMI_COLON      reduce using rule 49 (type -> LITERAL .)
    CONSOLE         reduce using rule 49 (type -> LITERAL .)
    LET             reduce using rule 49 (type -> LITERAL .)
    LITERAL         reduce using rule 49 (type -> LITERAL .)
    IF              reduce using rule 49 (type -> LITERAL .)
    WHILE           reduce using rule 49 (type -> LITERAL .)
    FOR             reduce using rule 49 (type -> LITERAL .)
    INTERFACE       reduce using rule 49 (type -> LITERAL .)
    CONTINUE        reduce using rule 49 (type -> LITERAL .)
    BREAK           reduce using rule 49 (type -> LITERAL .)
    RETURN          reduce using rule 49 (type -> LITERAL .)
    FUNCTION        reduce using rule 49 (type -> LITERAL .)
    $end            reduce using rule 49 (type -> LITERAL .)
    R_LLAVE         reduce using rule 49 (type -> LITERAL .)
    OF              reduce using rule 49 (type -> LITERAL .)
    R_PAREN         reduce using rule 49 (type -> LITERAL .)


state 118

    (42) assignacion_instruction -> LITERAL COLON type . IGUAL a
    (43) assignacion_instruction -> LITERAL COLON type .

    IGUAL           shift and go to state 166
    COMA            reduce using rule 43 (assignacion_instruction -> LITERAL COLON type .)
    SEMI_COLON      reduce using rule 43 (assignacion_instruction -> LITERAL COLON type .)
    CONSOLE         reduce using rule 43 (assignacion_instruction -> LITERAL COLON type .)
    LET             reduce using rule 43 (assignacion_instruction -> LITERAL COLON type .)
    LITERAL         reduce using rule 43 (assignacion_instruction -> LITERAL COLON type .)
    IF              reduce using rule 43 (assignacion_instruction -> LITERAL COLON type .)
    WHILE           reduce using rule 43 (assignacion_instruction -> LITERAL COLON type .)
    FOR             reduce using rule 43 (assignacion_instruction -> LITERAL COLON type .)
    INTERFACE       reduce using rule 43 (assignacion_instruction -> LITERAL COLON type .)
    CONTINUE        reduce using rule 43 (assignacion_instruction -> LITERAL COLON type .)
    BREAK           reduce using rule 43 (assignacion_instruction -> LITERAL COLON type .)
    RETURN          reduce using rule 43 (assignacion_instruction -> LITERAL COLON type .)
    FUNCTION        reduce using rule 43 (assignacion_instruction -> LITERAL COLON type .)
    $end            reduce using rule 43 (assignacion_instruction -> LITERAL COLON type .)
    R_LLAVE         reduce using rule 43 (assignacion_instruction -> LITERAL COLON type .)


state 119

    (45) type -> NUMBER .

    IGUAL           reduce using rule 45 (type -> NUMBER .)
    COMA            reduce using rule 45 (type -> NUMBER .)
    SEMI_COLON      reduce using rule 45 (type -> NUMBER .)
    CONSOLE         reduce using rule 45 (type -> NUMBER .)
    LET             reduce using rule 45 (type -> NUMBER .)
    LITERAL         reduce using rule 45 (type -> NUMBER .)
    IF              reduce using rule 45 (type -> NUMBER .)
    WHILE           reduce using rule 45 (type -> NUMBER .)
    FOR             reduce using rule 45 (type -> NUMBER .)
    INTERFACE       reduce using rule 45 (type -> NUMBER .)
    CONTINUE        reduce using rule 45 (type -> NUMBER .)
    BREAK           reduce using rule 45 (type -> NUMBER .)
    RETURN          reduce using rule 45 (type -> NUMBER .)
    FUNCTION        reduce using rule 45 (type -> NUMBER .)
    $end            reduce using rule 45 (type -> NUMBER .)
    R_LLAVE         reduce using rule 45 (type -> NUMBER .)
    OF              reduce using rule 45 (type -> NUMBER .)
    R_PAREN         reduce using rule 45 (type -> NUMBER .)


state 120

    (46) type -> STRING .

    IGUAL           reduce using rule 46 (type -> STRING .)
    COMA            reduce using rule 46 (type -> STRING .)
    SEMI_COLON      reduce using rule 46 (type -> STRING .)
    CONSOLE         reduce using rule 46 (type -> STRING .)
    LET             reduce using rule 46 (type -> STRING .)
    LITERAL         reduce using rule 46 (type -> STRING .)
    IF              reduce using rule 46 (type -> STRING .)
    WHILE           reduce using rule 46 (type -> STRING .)
    FOR             reduce using rule 46 (type -> STRING .)
    INTERFACE       reduce using rule 46 (type -> STRING .)
    CONTINUE        reduce using rule 46 (type -> STRING .)
    BREAK           reduce using rule 46 (type -> STRING .)
    RETURN          reduce using rule 46 (type -> STRING .)
    FUNCTION        reduce using rule 46 (type -> STRING .)
    $end            reduce using rule 46 (type -> STRING .)
    R_LLAVE         reduce using rule 46 (type -> STRING .)
    OF              reduce using rule 46 (type -> STRING .)
    R_PAREN         reduce using rule 46 (type -> STRING .)


state 121

    (47) type -> BOOLEAN .

    IGUAL           reduce using rule 47 (type -> BOOLEAN .)
    COMA            reduce using rule 47 (type -> BOOLEAN .)
    SEMI_COLON      reduce using rule 47 (type -> BOOLEAN .)
    CONSOLE         reduce using rule 47 (type -> BOOLEAN .)
    LET             reduce using rule 47 (type -> BOOLEAN .)
    LITERAL         reduce using rule 47 (type -> BOOLEAN .)
    IF              reduce using rule 47 (type -> BOOLEAN .)
    WHILE           reduce using rule 47 (type -> BOOLEAN .)
    FOR             reduce using rule 47 (type -> BOOLEAN .)
    INTERFACE       reduce using rule 47 (type -> BOOLEAN .)
    CONTINUE        reduce using rule 47 (type -> BOOLEAN .)
    BREAK           reduce using rule 47 (type -> BOOLEAN .)
    RETURN          reduce using rule 47 (type -> BOOLEAN .)
    FUNCTION        reduce using rule 47 (type -> BOOLEAN .)
    $end            reduce using rule 47 (type -> BOOLEAN .)
    R_LLAVE         reduce using rule 47 (type -> BOOLEAN .)
    OF              reduce using rule 47 (type -> BOOLEAN .)
    R_PAREN         reduce using rule 47 (type -> BOOLEAN .)


state 122

    (48) type -> ANY .

    IGUAL           reduce using rule 48 (type -> ANY .)
    COMA            reduce using rule 48 (type -> ANY .)
    SEMI_COLON      reduce using rule 48 (type -> ANY .)
    CONSOLE         reduce using rule 48 (type -> ANY .)
    LET             reduce using rule 48 (type -> ANY .)
    LITERAL         reduce using rule 48 (type -> ANY .)
    IF              reduce using rule 48 (type -> ANY .)
    WHILE           reduce using rule 48 (type -> ANY .)
    FOR             reduce using rule 48 (type -> ANY .)
    INTERFACE       reduce using rule 48 (type -> ANY .)
    CONTINUE        reduce using rule 48 (type -> ANY .)
    BREAK           reduce using rule 48 (type -> ANY .)
    RETURN          reduce using rule 48 (type -> ANY .)
    FUNCTION        reduce using rule 48 (type -> ANY .)
    $end            reduce using rule 48 (type -> ANY .)
    R_LLAVE         reduce using rule 48 (type -> ANY .)
    OF              reduce using rule 48 (type -> ANY .)
    R_PAREN         reduce using rule 48 (type -> ANY .)


state 123

    (44) assignacion_instruction -> LITERAL IGUAL a .
    (64) a -> a . OR b

    COMA            reduce using rule 44 (assignacion_instruction -> LITERAL IGUAL a .)
    SEMI_COLON      reduce using rule 44 (assignacion_instruction -> LITERAL IGUAL a .)
    CONSOLE         reduce using rule 44 (assignacion_instruction -> LITERAL IGUAL a .)
    LET             reduce using rule 44 (assignacion_instruction -> LITERAL IGUAL a .)
    LITERAL         reduce using rule 44 (assignacion_instruction -> LITERAL IGUAL a .)
    IF              reduce using rule 44 (assignacion_instruction -> LITERAL IGUAL a .)
    WHILE           reduce using rule 44 (assignacion_instruction -> LITERAL IGUAL a .)
    FOR             reduce using rule 44 (assignacion_instruction -> LITERAL IGUAL a .)
    INTERFACE       reduce using rule 44 (assignacion_instruction -> LITERAL IGUAL a .)
    CONTINUE        reduce using rule 44 (assignacion_instruction -> LITERAL IGUAL a .)
    BREAK           reduce using rule 44 (assignacion_instruction -> LITERAL IGUAL a .)
    RETURN          reduce using rule 44 (assignacion_instruction -> LITERAL IGUAL a .)
    FUNCTION        reduce using rule 44 (assignacion_instruction -> LITERAL IGUAL a .)
    $end            reduce using rule 44 (assignacion_instruction -> LITERAL IGUAL a .)
    R_LLAVE         reduce using rule 44 (assignacion_instruction -> LITERAL IGUAL a .)
    OR              shift and go to state 94


state 124

    (22) call_function_pro -> LITERAL L_PAREN values R_PAREN .

    SEMI_COLON      reduce using rule 22 (call_function_pro -> LITERAL L_PAREN values R_PAREN .)
    CONSOLE         reduce using rule 22 (call_function_pro -> LITERAL L_PAREN values R_PAREN .)
    LET             reduce using rule 22 (call_function_pro -> LITERAL L_PAREN values R_PAREN .)
    LITERAL         reduce using rule 22 (call_function_pro -> LITERAL L_PAREN values R_PAREN .)
    IF              reduce using rule 22 (call_function_pro -> LITERAL L_PAREN values R_PAREN .)
    WHILE           reduce using rule 22 (call_function_pro -> LITERAL L_PAREN values R_PAREN .)
    FOR             reduce using rule 22 (call_function_pro -> LITERAL L_PAREN values R_PAREN .)
    INTERFACE       reduce using rule 22 (call_function_pro -> LITERAL L_PAREN values R_PAREN .)
    CONTINUE        reduce using rule 22 (call_function_pro -> LITERAL L_PAREN values R_PAREN .)
    BREAK           reduce using rule 22 (call_function_pro -> LITERAL L_PAREN values R_PAREN .)
    RETURN          reduce using rule 22 (call_function_pro -> LITERAL L_PAREN values R_PAREN .)
    FUNCTION        reduce using rule 22 (call_function_pro -> LITERAL L_PAREN values R_PAREN .)
    $end            reduce using rule 22 (call_function_pro -> LITERAL L_PAREN values R_PAREN .)
    PUNTO           reduce using rule 22 (call_function_pro -> LITERAL L_PAREN values R_PAREN .)
    TIMES           reduce using rule 22 (call_function_pro -> LITERAL L_PAREN values R_PAREN .)
    DIVIDE          reduce using rule 22 (call_function_pro -> LITERAL L_PAREN values R_PAREN .)
    MOD             reduce using rule 22 (call_function_pro -> LITERAL L_PAREN values R_PAREN .)
    POTENCIA        reduce using rule 22 (call_function_pro -> LITERAL L_PAREN values R_PAREN .)
    MAS             reduce using rule 22 (call_function_pro -> LITERAL L_PAREN values R_PAREN .)
    MENOS           reduce using rule 22 (call_function_pro -> LITERAL L_PAREN values R_PAREN .)
    DISTINTO_QUE    reduce using rule 22 (call_function_pro -> LITERAL L_PAREN values R_PAREN .)
    MENOR_QUE       reduce using rule 22 (call_function_pro -> LITERAL L_PAREN values R_PAREN .)
    MENOR_IGUAL_QUE reduce using rule 22 (call_function_pro -> LITERAL L_PAREN values R_PAREN .)
    MAYOR_QUE       reduce using rule 22 (call_function_pro -> LITERAL L_PAREN values R_PAREN .)
    MAYOR_IGUAL_QUE reduce using rule 22 (call_function_pro -> LITERAL L_PAREN values R_PAREN .)
    TRIPLE_IGUAL    reduce using rule 22 (call_function_pro -> LITERAL L_PAREN values R_PAREN .)
    AND             reduce using rule 22 (call_function_pro -> LITERAL L_PAREN values R_PAREN .)
    OR              reduce using rule 22 (call_function_pro -> LITERAL L_PAREN values R_PAREN .)
    R_LLAVE         reduce using rule 22 (call_function_pro -> LITERAL L_PAREN values R_PAREN .)
    R_PAREN         reduce using rule 22 (call_function_pro -> LITERAL L_PAREN values R_PAREN .)
    COMA            reduce using rule 22 (call_function_pro -> LITERAL L_PAREN values R_PAREN .)
    R_CORCHETE      reduce using rule 22 (call_function_pro -> LITERAL L_PAREN values R_PAREN .)


state 125

    (24) values -> values COMA . a
    (64) a -> . a OR b
    (65) a -> . b
    (66) b -> . b AND c
    (67) b -> . c
    (68) c -> . NOT d
    (69) c -> . d
    (70) d -> . d DISTINTO_QUE e
    (71) d -> . d MENOR_QUE e
    (72) d -> . d MENOR_IGUAL_QUE e
    (73) d -> . d MAYOR_QUE e
    (74) d -> . d MAYOR_IGUAL_QUE e
    (75) d -> . d TRIPLE_IGUAL e
    (76) d -> . e
    (77) e -> . e MAS f
    (78) e -> . e MENOS f
    (79) e -> . f
    (80) f -> . f TIMES g
    (81) f -> . f DIVIDE g
    (82) f -> . f MOD g
    (83) f -> . f POTENCIA g
    (84) f -> . g
    (85) f -> . g PUNTO nativeFun L_PAREN expresion R_PAREN
    (86) g -> . ENTERO
    (87) g -> . DECIMAL
    (88) g -> . CADENA
    (89) g -> . LITERAL
    (90) g -> . call_function_pro
    (91) g -> . array_pro
    (92) g -> . interface_assi
    (93) g -> . L_PAREN a R_PAREN
    (22) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (23) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (99) array_pro -> . L_CORCHETE values R_CORCHETE
    (96) interface_assi -> . L_LLAVE atributos_assi R_LLAVE

    NOT             shift and go to state 60
    ENTERO          shift and go to state 66
    DECIMAL         shift and go to state 67
    CADENA          shift and go to state 68
    LITERAL         shift and go to state 69
    L_PAREN         shift and go to state 65
    L_CORCHETE      shift and go to state 73
    L_LLAVE         shift and go to state 74

    a                              shift and go to state 167
    b                              shift and go to state 58
    c                              shift and go to state 59
    d                              shift and go to state 61
    e                              shift and go to state 62
    f                              shift and go to state 63
    g                              shift and go to state 64
    call_function_pro              shift and go to state 70
    array_pro                      shift and go to state 71
    interface_assi                 shift and go to state 72

state 126

    (51) if_pro -> IF L_PAREN a R_PAREN . L_LLAVE instrucciones R_LLAVE else_pro

    L_LLAVE         shift and go to state 168


state 127

    (55) while_pro -> WHILE L_PAREN a R_PAREN . L_LLAVE instrucciones R_LLAVE

    L_LLAVE         shift and go to state 169


state 128

    (56) for_pro -> FOR L_PAREN declaration_instruction SEMI_COLON . a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (64) a -> . a OR b
    (65) a -> . b
    (66) b -> . b AND c
    (67) b -> . c
    (68) c -> . NOT d
    (69) c -> . d
    (70) d -> . d DISTINTO_QUE e
    (71) d -> . d MENOR_QUE e
    (72) d -> . d MENOR_IGUAL_QUE e
    (73) d -> . d MAYOR_QUE e
    (74) d -> . d MAYOR_IGUAL_QUE e
    (75) d -> . d TRIPLE_IGUAL e
    (76) d -> . e
    (77) e -> . e MAS f
    (78) e -> . e MENOS f
    (79) e -> . f
    (80) f -> . f TIMES g
    (81) f -> . f DIVIDE g
    (82) f -> . f MOD g
    (83) f -> . f POTENCIA g
    (84) f -> . g
    (85) f -> . g PUNTO nativeFun L_PAREN expresion R_PAREN
    (86) g -> . ENTERO
    (87) g -> . DECIMAL
    (88) g -> . CADENA
    (89) g -> . LITERAL
    (90) g -> . call_function_pro
    (91) g -> . array_pro
    (92) g -> . interface_assi
    (93) g -> . L_PAREN a R_PAREN
    (22) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (23) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (99) array_pro -> . L_CORCHETE values R_CORCHETE
    (96) interface_assi -> . L_LLAVE atributos_assi R_LLAVE

    NOT             shift and go to state 60
    ENTERO          shift and go to state 66
    DECIMAL         shift and go to state 67
    CADENA          shift and go to state 68
    LITERAL         shift and go to state 69
    L_PAREN         shift and go to state 65
    L_CORCHETE      shift and go to state 73
    L_LLAVE         shift and go to state 74

    a                              shift and go to state 170
    b                              shift and go to state 58
    c                              shift and go to state 59
    d                              shift and go to state 61
    e                              shift and go to state 62
    f                              shift and go to state 63
    g                              shift and go to state 64
    call_function_pro              shift and go to state 70
    array_pro                      shift and go to state 71
    interface_assi                 shift and go to state 72

state 129

    (57) for_pro -> FOR L_PAREN assig_pro SEMI_COLON . a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (64) a -> . a OR b
    (65) a -> . b
    (66) b -> . b AND c
    (67) b -> . c
    (68) c -> . NOT d
    (69) c -> . d
    (70) d -> . d DISTINTO_QUE e
    (71) d -> . d MENOR_QUE e
    (72) d -> . d MENOR_IGUAL_QUE e
    (73) d -> . d MAYOR_QUE e
    (74) d -> . d MAYOR_IGUAL_QUE e
    (75) d -> . d TRIPLE_IGUAL e
    (76) d -> . e
    (77) e -> . e MAS f
    (78) e -> . e MENOS f
    (79) e -> . f
    (80) f -> . f TIMES g
    (81) f -> . f DIVIDE g
    (82) f -> . f MOD g
    (83) f -> . f POTENCIA g
    (84) f -> . g
    (85) f -> . g PUNTO nativeFun L_PAREN expresion R_PAREN
    (86) g -> . ENTERO
    (87) g -> . DECIMAL
    (88) g -> . CADENA
    (89) g -> . LITERAL
    (90) g -> . call_function_pro
    (91) g -> . array_pro
    (92) g -> . interface_assi
    (93) g -> . L_PAREN a R_PAREN
    (22) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (23) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (99) array_pro -> . L_CORCHETE values R_CORCHETE
    (96) interface_assi -> . L_LLAVE atributos_assi R_LLAVE

    NOT             shift and go to state 60
    ENTERO          shift and go to state 66
    DECIMAL         shift and go to state 67
    CADENA          shift and go to state 68
    LITERAL         shift and go to state 69
    L_PAREN         shift and go to state 65
    L_CORCHETE      shift and go to state 73
    L_LLAVE         shift and go to state 74

    a                              shift and go to state 171
    b                              shift and go to state 58
    c                              shift and go to state 59
    d                              shift and go to state 61
    e                              shift and go to state 62
    f                              shift and go to state 63
    g                              shift and go to state 64
    call_function_pro              shift and go to state 70
    array_pro                      shift and go to state 71
    interface_assi                 shift and go to state 72

state 130

    (58) for_each_pro -> FOR L_PAREN for_each_dec R_PAREN . L_LLAVE instrucciones R_LLAVE

    L_LLAVE         shift and go to state 172


state 131

    (59) for_each_dec -> LET LITERAL . OF a
    (60) for_each_dec -> LET LITERAL . COLON type OF a
    (42) assignacion_instruction -> LITERAL . COLON type IGUAL a
    (43) assignacion_instruction -> LITERAL . COLON type
    (44) assignacion_instruction -> LITERAL . IGUAL a

    OF              shift and go to state 173
    COLON           shift and go to state 174
    IGUAL           shift and go to state 79


state 132

    (34) interface_pro -> INTERFACE LITERAL L_LLAVE interface_atributos . R_LLAVE
    (35) interface_atributos -> interface_atributos . interface_atributo sc
    (37) interface_atributo -> . LITERAL COLON type
    (38) interface_atributo -> . LITERAL

    R_LLAVE         shift and go to state 176
    LITERAL         shift and go to state 175

    interface_atributo             shift and go to state 177

state 133

    (64) a -> a OR b .
    (66) b -> b . AND c

    OR              reduce using rule 64 (a -> a OR b .)
    SEMI_COLON      reduce using rule 64 (a -> a OR b .)
    CONSOLE         reduce using rule 64 (a -> a OR b .)
    LET             reduce using rule 64 (a -> a OR b .)
    LITERAL         reduce using rule 64 (a -> a OR b .)
    IF              reduce using rule 64 (a -> a OR b .)
    WHILE           reduce using rule 64 (a -> a OR b .)
    FOR             reduce using rule 64 (a -> a OR b .)
    INTERFACE       reduce using rule 64 (a -> a OR b .)
    CONTINUE        reduce using rule 64 (a -> a OR b .)
    BREAK           reduce using rule 64 (a -> a OR b .)
    RETURN          reduce using rule 64 (a -> a OR b .)
    FUNCTION        reduce using rule 64 (a -> a OR b .)
    $end            reduce using rule 64 (a -> a OR b .)
    R_LLAVE         reduce using rule 64 (a -> a OR b .)
    R_PAREN         reduce using rule 64 (a -> a OR b .)
    COMA            reduce using rule 64 (a -> a OR b .)
    R_CORCHETE      reduce using rule 64 (a -> a OR b .)
    AND             shift and go to state 95


state 134

    (66) b -> b AND c .

    AND             reduce using rule 66 (b -> b AND c .)
    OR              reduce using rule 66 (b -> b AND c .)
    SEMI_COLON      reduce using rule 66 (b -> b AND c .)
    CONSOLE         reduce using rule 66 (b -> b AND c .)
    LET             reduce using rule 66 (b -> b AND c .)
    LITERAL         reduce using rule 66 (b -> b AND c .)
    IF              reduce using rule 66 (b -> b AND c .)
    WHILE           reduce using rule 66 (b -> b AND c .)
    FOR             reduce using rule 66 (b -> b AND c .)
    INTERFACE       reduce using rule 66 (b -> b AND c .)
    CONTINUE        reduce using rule 66 (b -> b AND c .)
    BREAK           reduce using rule 66 (b -> b AND c .)
    RETURN          reduce using rule 66 (b -> b AND c .)
    FUNCTION        reduce using rule 66 (b -> b AND c .)
    $end            reduce using rule 66 (b -> b AND c .)
    R_LLAVE         reduce using rule 66 (b -> b AND c .)
    R_PAREN         reduce using rule 66 (b -> b AND c .)
    COMA            reduce using rule 66 (b -> b AND c .)
    R_CORCHETE      reduce using rule 66 (b -> b AND c .)


state 135

    (70) d -> d DISTINTO_QUE e .
    (77) e -> e . MAS f
    (78) e -> e . MENOS f

    DISTINTO_QUE    reduce using rule 70 (d -> d DISTINTO_QUE e .)
    MENOR_QUE       reduce using rule 70 (d -> d DISTINTO_QUE e .)
    MENOR_IGUAL_QUE reduce using rule 70 (d -> d DISTINTO_QUE e .)
    MAYOR_QUE       reduce using rule 70 (d -> d DISTINTO_QUE e .)
    MAYOR_IGUAL_QUE reduce using rule 70 (d -> d DISTINTO_QUE e .)
    TRIPLE_IGUAL    reduce using rule 70 (d -> d DISTINTO_QUE e .)
    AND             reduce using rule 70 (d -> d DISTINTO_QUE e .)
    OR              reduce using rule 70 (d -> d DISTINTO_QUE e .)
    SEMI_COLON      reduce using rule 70 (d -> d DISTINTO_QUE e .)
    CONSOLE         reduce using rule 70 (d -> d DISTINTO_QUE e .)
    LET             reduce using rule 70 (d -> d DISTINTO_QUE e .)
    LITERAL         reduce using rule 70 (d -> d DISTINTO_QUE e .)
    IF              reduce using rule 70 (d -> d DISTINTO_QUE e .)
    WHILE           reduce using rule 70 (d -> d DISTINTO_QUE e .)
    FOR             reduce using rule 70 (d -> d DISTINTO_QUE e .)
    INTERFACE       reduce using rule 70 (d -> d DISTINTO_QUE e .)
    CONTINUE        reduce using rule 70 (d -> d DISTINTO_QUE e .)
    BREAK           reduce using rule 70 (d -> d DISTINTO_QUE e .)
    RETURN          reduce using rule 70 (d -> d DISTINTO_QUE e .)
    FUNCTION        reduce using rule 70 (d -> d DISTINTO_QUE e .)
    $end            reduce using rule 70 (d -> d DISTINTO_QUE e .)
    R_LLAVE         reduce using rule 70 (d -> d DISTINTO_QUE e .)
    R_PAREN         reduce using rule 70 (d -> d DISTINTO_QUE e .)
    COMA            reduce using rule 70 (d -> d DISTINTO_QUE e .)
    R_CORCHETE      reduce using rule 70 (d -> d DISTINTO_QUE e .)
    MAS             shift and go to state 103
    MENOS           shift and go to state 104


state 136

    (71) d -> d MENOR_QUE e .
    (77) e -> e . MAS f
    (78) e -> e . MENOS f

    DISTINTO_QUE    reduce using rule 71 (d -> d MENOR_QUE e .)
    MENOR_QUE       reduce using rule 71 (d -> d MENOR_QUE e .)
    MENOR_IGUAL_QUE reduce using rule 71 (d -> d MENOR_QUE e .)
    MAYOR_QUE       reduce using rule 71 (d -> d MENOR_QUE e .)
    MAYOR_IGUAL_QUE reduce using rule 71 (d -> d MENOR_QUE e .)
    TRIPLE_IGUAL    reduce using rule 71 (d -> d MENOR_QUE e .)
    AND             reduce using rule 71 (d -> d MENOR_QUE e .)
    OR              reduce using rule 71 (d -> d MENOR_QUE e .)
    SEMI_COLON      reduce using rule 71 (d -> d MENOR_QUE e .)
    CONSOLE         reduce using rule 71 (d -> d MENOR_QUE e .)
    LET             reduce using rule 71 (d -> d MENOR_QUE e .)
    LITERAL         reduce using rule 71 (d -> d MENOR_QUE e .)
    IF              reduce using rule 71 (d -> d MENOR_QUE e .)
    WHILE           reduce using rule 71 (d -> d MENOR_QUE e .)
    FOR             reduce using rule 71 (d -> d MENOR_QUE e .)
    INTERFACE       reduce using rule 71 (d -> d MENOR_QUE e .)
    CONTINUE        reduce using rule 71 (d -> d MENOR_QUE e .)
    BREAK           reduce using rule 71 (d -> d MENOR_QUE e .)
    RETURN          reduce using rule 71 (d -> d MENOR_QUE e .)
    FUNCTION        reduce using rule 71 (d -> d MENOR_QUE e .)
    $end            reduce using rule 71 (d -> d MENOR_QUE e .)
    R_LLAVE         reduce using rule 71 (d -> d MENOR_QUE e .)
    R_PAREN         reduce using rule 71 (d -> d MENOR_QUE e .)
    COMA            reduce using rule 71 (d -> d MENOR_QUE e .)
    R_CORCHETE      reduce using rule 71 (d -> d MENOR_QUE e .)
    MAS             shift and go to state 103
    MENOS           shift and go to state 104


state 137

    (72) d -> d MENOR_IGUAL_QUE e .
    (77) e -> e . MAS f
    (78) e -> e . MENOS f

    DISTINTO_QUE    reduce using rule 72 (d -> d MENOR_IGUAL_QUE e .)
    MENOR_QUE       reduce using rule 72 (d -> d MENOR_IGUAL_QUE e .)
    MENOR_IGUAL_QUE reduce using rule 72 (d -> d MENOR_IGUAL_QUE e .)
    MAYOR_QUE       reduce using rule 72 (d -> d MENOR_IGUAL_QUE e .)
    MAYOR_IGUAL_QUE reduce using rule 72 (d -> d MENOR_IGUAL_QUE e .)
    TRIPLE_IGUAL    reduce using rule 72 (d -> d MENOR_IGUAL_QUE e .)
    AND             reduce using rule 72 (d -> d MENOR_IGUAL_QUE e .)
    OR              reduce using rule 72 (d -> d MENOR_IGUAL_QUE e .)
    SEMI_COLON      reduce using rule 72 (d -> d MENOR_IGUAL_QUE e .)
    CONSOLE         reduce using rule 72 (d -> d MENOR_IGUAL_QUE e .)
    LET             reduce using rule 72 (d -> d MENOR_IGUAL_QUE e .)
    LITERAL         reduce using rule 72 (d -> d MENOR_IGUAL_QUE e .)
    IF              reduce using rule 72 (d -> d MENOR_IGUAL_QUE e .)
    WHILE           reduce using rule 72 (d -> d MENOR_IGUAL_QUE e .)
    FOR             reduce using rule 72 (d -> d MENOR_IGUAL_QUE e .)
    INTERFACE       reduce using rule 72 (d -> d MENOR_IGUAL_QUE e .)
    CONTINUE        reduce using rule 72 (d -> d MENOR_IGUAL_QUE e .)
    BREAK           reduce using rule 72 (d -> d MENOR_IGUAL_QUE e .)
    RETURN          reduce using rule 72 (d -> d MENOR_IGUAL_QUE e .)
    FUNCTION        reduce using rule 72 (d -> d MENOR_IGUAL_QUE e .)
    $end            reduce using rule 72 (d -> d MENOR_IGUAL_QUE e .)
    R_LLAVE         reduce using rule 72 (d -> d MENOR_IGUAL_QUE e .)
    R_PAREN         reduce using rule 72 (d -> d MENOR_IGUAL_QUE e .)
    COMA            reduce using rule 72 (d -> d MENOR_IGUAL_QUE e .)
    R_CORCHETE      reduce using rule 72 (d -> d MENOR_IGUAL_QUE e .)
    MAS             shift and go to state 103
    MENOS           shift and go to state 104


state 138

    (73) d -> d MAYOR_QUE e .
    (77) e -> e . MAS f
    (78) e -> e . MENOS f

    DISTINTO_QUE    reduce using rule 73 (d -> d MAYOR_QUE e .)
    MENOR_QUE       reduce using rule 73 (d -> d MAYOR_QUE e .)
    MENOR_IGUAL_QUE reduce using rule 73 (d -> d MAYOR_QUE e .)
    MAYOR_QUE       reduce using rule 73 (d -> d MAYOR_QUE e .)
    MAYOR_IGUAL_QUE reduce using rule 73 (d -> d MAYOR_QUE e .)
    TRIPLE_IGUAL    reduce using rule 73 (d -> d MAYOR_QUE e .)
    AND             reduce using rule 73 (d -> d MAYOR_QUE e .)
    OR              reduce using rule 73 (d -> d MAYOR_QUE e .)
    SEMI_COLON      reduce using rule 73 (d -> d MAYOR_QUE e .)
    CONSOLE         reduce using rule 73 (d -> d MAYOR_QUE e .)
    LET             reduce using rule 73 (d -> d MAYOR_QUE e .)
    LITERAL         reduce using rule 73 (d -> d MAYOR_QUE e .)
    IF              reduce using rule 73 (d -> d MAYOR_QUE e .)
    WHILE           reduce using rule 73 (d -> d MAYOR_QUE e .)
    FOR             reduce using rule 73 (d -> d MAYOR_QUE e .)
    INTERFACE       reduce using rule 73 (d -> d MAYOR_QUE e .)
    CONTINUE        reduce using rule 73 (d -> d MAYOR_QUE e .)
    BREAK           reduce using rule 73 (d -> d MAYOR_QUE e .)
    RETURN          reduce using rule 73 (d -> d MAYOR_QUE e .)
    FUNCTION        reduce using rule 73 (d -> d MAYOR_QUE e .)
    $end            reduce using rule 73 (d -> d MAYOR_QUE e .)
    R_LLAVE         reduce using rule 73 (d -> d MAYOR_QUE e .)
    R_PAREN         reduce using rule 73 (d -> d MAYOR_QUE e .)
    COMA            reduce using rule 73 (d -> d MAYOR_QUE e .)
    R_CORCHETE      reduce using rule 73 (d -> d MAYOR_QUE e .)
    MAS             shift and go to state 103
    MENOS           shift and go to state 104


state 139

    (74) d -> d MAYOR_IGUAL_QUE e .
    (77) e -> e . MAS f
    (78) e -> e . MENOS f

    DISTINTO_QUE    reduce using rule 74 (d -> d MAYOR_IGUAL_QUE e .)
    MENOR_QUE       reduce using rule 74 (d -> d MAYOR_IGUAL_QUE e .)
    MENOR_IGUAL_QUE reduce using rule 74 (d -> d MAYOR_IGUAL_QUE e .)
    MAYOR_QUE       reduce using rule 74 (d -> d MAYOR_IGUAL_QUE e .)
    MAYOR_IGUAL_QUE reduce using rule 74 (d -> d MAYOR_IGUAL_QUE e .)
    TRIPLE_IGUAL    reduce using rule 74 (d -> d MAYOR_IGUAL_QUE e .)
    AND             reduce using rule 74 (d -> d MAYOR_IGUAL_QUE e .)
    OR              reduce using rule 74 (d -> d MAYOR_IGUAL_QUE e .)
    SEMI_COLON      reduce using rule 74 (d -> d MAYOR_IGUAL_QUE e .)
    CONSOLE         reduce using rule 74 (d -> d MAYOR_IGUAL_QUE e .)
    LET             reduce using rule 74 (d -> d MAYOR_IGUAL_QUE e .)
    LITERAL         reduce using rule 74 (d -> d MAYOR_IGUAL_QUE e .)
    IF              reduce using rule 74 (d -> d MAYOR_IGUAL_QUE e .)
    WHILE           reduce using rule 74 (d -> d MAYOR_IGUAL_QUE e .)
    FOR             reduce using rule 74 (d -> d MAYOR_IGUAL_QUE e .)
    INTERFACE       reduce using rule 74 (d -> d MAYOR_IGUAL_QUE e .)
    CONTINUE        reduce using rule 74 (d -> d MAYOR_IGUAL_QUE e .)
    BREAK           reduce using rule 74 (d -> d MAYOR_IGUAL_QUE e .)
    RETURN          reduce using rule 74 (d -> d MAYOR_IGUAL_QUE e .)
    FUNCTION        reduce using rule 74 (d -> d MAYOR_IGUAL_QUE e .)
    $end            reduce using rule 74 (d -> d MAYOR_IGUAL_QUE e .)
    R_LLAVE         reduce using rule 74 (d -> d MAYOR_IGUAL_QUE e .)
    R_PAREN         reduce using rule 74 (d -> d MAYOR_IGUAL_QUE e .)
    COMA            reduce using rule 74 (d -> d MAYOR_IGUAL_QUE e .)
    R_CORCHETE      reduce using rule 74 (d -> d MAYOR_IGUAL_QUE e .)
    MAS             shift and go to state 103
    MENOS           shift and go to state 104


state 140

    (75) d -> d TRIPLE_IGUAL e .
    (77) e -> e . MAS f
    (78) e -> e . MENOS f

    DISTINTO_QUE    reduce using rule 75 (d -> d TRIPLE_IGUAL e .)
    MENOR_QUE       reduce using rule 75 (d -> d TRIPLE_IGUAL e .)
    MENOR_IGUAL_QUE reduce using rule 75 (d -> d TRIPLE_IGUAL e .)
    MAYOR_QUE       reduce using rule 75 (d -> d TRIPLE_IGUAL e .)
    MAYOR_IGUAL_QUE reduce using rule 75 (d -> d TRIPLE_IGUAL e .)
    TRIPLE_IGUAL    reduce using rule 75 (d -> d TRIPLE_IGUAL e .)
    AND             reduce using rule 75 (d -> d TRIPLE_IGUAL e .)
    OR              reduce using rule 75 (d -> d TRIPLE_IGUAL e .)
    SEMI_COLON      reduce using rule 75 (d -> d TRIPLE_IGUAL e .)
    CONSOLE         reduce using rule 75 (d -> d TRIPLE_IGUAL e .)
    LET             reduce using rule 75 (d -> d TRIPLE_IGUAL e .)
    LITERAL         reduce using rule 75 (d -> d TRIPLE_IGUAL e .)
    IF              reduce using rule 75 (d -> d TRIPLE_IGUAL e .)
    WHILE           reduce using rule 75 (d -> d TRIPLE_IGUAL e .)
    FOR             reduce using rule 75 (d -> d TRIPLE_IGUAL e .)
    INTERFACE       reduce using rule 75 (d -> d TRIPLE_IGUAL e .)
    CONTINUE        reduce using rule 75 (d -> d TRIPLE_IGUAL e .)
    BREAK           reduce using rule 75 (d -> d TRIPLE_IGUAL e .)
    RETURN          reduce using rule 75 (d -> d TRIPLE_IGUAL e .)
    FUNCTION        reduce using rule 75 (d -> d TRIPLE_IGUAL e .)
    $end            reduce using rule 75 (d -> d TRIPLE_IGUAL e .)
    R_LLAVE         reduce using rule 75 (d -> d TRIPLE_IGUAL e .)
    R_PAREN         reduce using rule 75 (d -> d TRIPLE_IGUAL e .)
    COMA            reduce using rule 75 (d -> d TRIPLE_IGUAL e .)
    R_CORCHETE      reduce using rule 75 (d -> d TRIPLE_IGUAL e .)
    MAS             shift and go to state 103
    MENOS           shift and go to state 104


state 141

    (77) e -> e MAS f .
    (80) f -> f . TIMES g
    (81) f -> f . DIVIDE g
    (82) f -> f . MOD g
    (83) f -> f . POTENCIA g

    MAS             reduce using rule 77 (e -> e MAS f .)
    MENOS           reduce using rule 77 (e -> e MAS f .)
    DISTINTO_QUE    reduce using rule 77 (e -> e MAS f .)
    MENOR_QUE       reduce using rule 77 (e -> e MAS f .)
    MENOR_IGUAL_QUE reduce using rule 77 (e -> e MAS f .)
    MAYOR_QUE       reduce using rule 77 (e -> e MAS f .)
    MAYOR_IGUAL_QUE reduce using rule 77 (e -> e MAS f .)
    TRIPLE_IGUAL    reduce using rule 77 (e -> e MAS f .)
    AND             reduce using rule 77 (e -> e MAS f .)
    OR              reduce using rule 77 (e -> e MAS f .)
    SEMI_COLON      reduce using rule 77 (e -> e MAS f .)
    CONSOLE         reduce using rule 77 (e -> e MAS f .)
    LET             reduce using rule 77 (e -> e MAS f .)
    LITERAL         reduce using rule 77 (e -> e MAS f .)
    IF              reduce using rule 77 (e -> e MAS f .)
    WHILE           reduce using rule 77 (e -> e MAS f .)
    FOR             reduce using rule 77 (e -> e MAS f .)
    INTERFACE       reduce using rule 77 (e -> e MAS f .)
    CONTINUE        reduce using rule 77 (e -> e MAS f .)
    BREAK           reduce using rule 77 (e -> e MAS f .)
    RETURN          reduce using rule 77 (e -> e MAS f .)
    FUNCTION        reduce using rule 77 (e -> e MAS f .)
    $end            reduce using rule 77 (e -> e MAS f .)
    R_LLAVE         reduce using rule 77 (e -> e MAS f .)
    R_PAREN         reduce using rule 77 (e -> e MAS f .)
    COMA            reduce using rule 77 (e -> e MAS f .)
    R_CORCHETE      reduce using rule 77 (e -> e MAS f .)
    TIMES           shift and go to state 105
    DIVIDE          shift and go to state 106
    MOD             shift and go to state 107
    POTENCIA        shift and go to state 108


state 142

    (78) e -> e MENOS f .
    (80) f -> f . TIMES g
    (81) f -> f . DIVIDE g
    (82) f -> f . MOD g
    (83) f -> f . POTENCIA g

    MAS             reduce using rule 78 (e -> e MENOS f .)
    MENOS           reduce using rule 78 (e -> e MENOS f .)
    DISTINTO_QUE    reduce using rule 78 (e -> e MENOS f .)
    MENOR_QUE       reduce using rule 78 (e -> e MENOS f .)
    MENOR_IGUAL_QUE reduce using rule 78 (e -> e MENOS f .)
    MAYOR_QUE       reduce using rule 78 (e -> e MENOS f .)
    MAYOR_IGUAL_QUE reduce using rule 78 (e -> e MENOS f .)
    TRIPLE_IGUAL    reduce using rule 78 (e -> e MENOS f .)
    AND             reduce using rule 78 (e -> e MENOS f .)
    OR              reduce using rule 78 (e -> e MENOS f .)
    SEMI_COLON      reduce using rule 78 (e -> e MENOS f .)
    CONSOLE         reduce using rule 78 (e -> e MENOS f .)
    LET             reduce using rule 78 (e -> e MENOS f .)
    LITERAL         reduce using rule 78 (e -> e MENOS f .)
    IF              reduce using rule 78 (e -> e MENOS f .)
    WHILE           reduce using rule 78 (e -> e MENOS f .)
    FOR             reduce using rule 78 (e -> e MENOS f .)
    INTERFACE       reduce using rule 78 (e -> e MENOS f .)
    CONTINUE        reduce using rule 78 (e -> e MENOS f .)
    BREAK           reduce using rule 78 (e -> e MENOS f .)
    RETURN          reduce using rule 78 (e -> e MENOS f .)
    FUNCTION        reduce using rule 78 (e -> e MENOS f .)
    $end            reduce using rule 78 (e -> e MENOS f .)
    R_LLAVE         reduce using rule 78 (e -> e MENOS f .)
    R_PAREN         reduce using rule 78 (e -> e MENOS f .)
    COMA            reduce using rule 78 (e -> e MENOS f .)
    R_CORCHETE      reduce using rule 78 (e -> e MENOS f .)
    TIMES           shift and go to state 105
    DIVIDE          shift and go to state 106
    MOD             shift and go to state 107
    POTENCIA        shift and go to state 108


state 143

    (80) f -> f TIMES g .

    TIMES           reduce using rule 80 (f -> f TIMES g .)
    DIVIDE          reduce using rule 80 (f -> f TIMES g .)
    MOD             reduce using rule 80 (f -> f TIMES g .)
    POTENCIA        reduce using rule 80 (f -> f TIMES g .)
    MAS             reduce using rule 80 (f -> f TIMES g .)
    MENOS           reduce using rule 80 (f -> f TIMES g .)
    DISTINTO_QUE    reduce using rule 80 (f -> f TIMES g .)
    MENOR_QUE       reduce using rule 80 (f -> f TIMES g .)
    MENOR_IGUAL_QUE reduce using rule 80 (f -> f TIMES g .)
    MAYOR_QUE       reduce using rule 80 (f -> f TIMES g .)
    MAYOR_IGUAL_QUE reduce using rule 80 (f -> f TIMES g .)
    TRIPLE_IGUAL    reduce using rule 80 (f -> f TIMES g .)
    AND             reduce using rule 80 (f -> f TIMES g .)
    OR              reduce using rule 80 (f -> f TIMES g .)
    SEMI_COLON      reduce using rule 80 (f -> f TIMES g .)
    CONSOLE         reduce using rule 80 (f -> f TIMES g .)
    LET             reduce using rule 80 (f -> f TIMES g .)
    LITERAL         reduce using rule 80 (f -> f TIMES g .)
    IF              reduce using rule 80 (f -> f TIMES g .)
    WHILE           reduce using rule 80 (f -> f TIMES g .)
    FOR             reduce using rule 80 (f -> f TIMES g .)
    INTERFACE       reduce using rule 80 (f -> f TIMES g .)
    CONTINUE        reduce using rule 80 (f -> f TIMES g .)
    BREAK           reduce using rule 80 (f -> f TIMES g .)
    RETURN          reduce using rule 80 (f -> f TIMES g .)
    FUNCTION        reduce using rule 80 (f -> f TIMES g .)
    $end            reduce using rule 80 (f -> f TIMES g .)
    R_LLAVE         reduce using rule 80 (f -> f TIMES g .)
    R_PAREN         reduce using rule 80 (f -> f TIMES g .)
    COMA            reduce using rule 80 (f -> f TIMES g .)
    R_CORCHETE      reduce using rule 80 (f -> f TIMES g .)


state 144

    (81) f -> f DIVIDE g .

    TIMES           reduce using rule 81 (f -> f DIVIDE g .)
    DIVIDE          reduce using rule 81 (f -> f DIVIDE g .)
    MOD             reduce using rule 81 (f -> f DIVIDE g .)
    POTENCIA        reduce using rule 81 (f -> f DIVIDE g .)
    MAS             reduce using rule 81 (f -> f DIVIDE g .)
    MENOS           reduce using rule 81 (f -> f DIVIDE g .)
    DISTINTO_QUE    reduce using rule 81 (f -> f DIVIDE g .)
    MENOR_QUE       reduce using rule 81 (f -> f DIVIDE g .)
    MENOR_IGUAL_QUE reduce using rule 81 (f -> f DIVIDE g .)
    MAYOR_QUE       reduce using rule 81 (f -> f DIVIDE g .)
    MAYOR_IGUAL_QUE reduce using rule 81 (f -> f DIVIDE g .)
    TRIPLE_IGUAL    reduce using rule 81 (f -> f DIVIDE g .)
    AND             reduce using rule 81 (f -> f DIVIDE g .)
    OR              reduce using rule 81 (f -> f DIVIDE g .)
    SEMI_COLON      reduce using rule 81 (f -> f DIVIDE g .)
    CONSOLE         reduce using rule 81 (f -> f DIVIDE g .)
    LET             reduce using rule 81 (f -> f DIVIDE g .)
    LITERAL         reduce using rule 81 (f -> f DIVIDE g .)
    IF              reduce using rule 81 (f -> f DIVIDE g .)
    WHILE           reduce using rule 81 (f -> f DIVIDE g .)
    FOR             reduce using rule 81 (f -> f DIVIDE g .)
    INTERFACE       reduce using rule 81 (f -> f DIVIDE g .)
    CONTINUE        reduce using rule 81 (f -> f DIVIDE g .)
    BREAK           reduce using rule 81 (f -> f DIVIDE g .)
    RETURN          reduce using rule 81 (f -> f DIVIDE g .)
    FUNCTION        reduce using rule 81 (f -> f DIVIDE g .)
    $end            reduce using rule 81 (f -> f DIVIDE g .)
    R_LLAVE         reduce using rule 81 (f -> f DIVIDE g .)
    R_PAREN         reduce using rule 81 (f -> f DIVIDE g .)
    COMA            reduce using rule 81 (f -> f DIVIDE g .)
    R_CORCHETE      reduce using rule 81 (f -> f DIVIDE g .)


state 145

    (82) f -> f MOD g .

    TIMES           reduce using rule 82 (f -> f MOD g .)
    DIVIDE          reduce using rule 82 (f -> f MOD g .)
    MOD             reduce using rule 82 (f -> f MOD g .)
    POTENCIA        reduce using rule 82 (f -> f MOD g .)
    MAS             reduce using rule 82 (f -> f MOD g .)
    MENOS           reduce using rule 82 (f -> f MOD g .)
    DISTINTO_QUE    reduce using rule 82 (f -> f MOD g .)
    MENOR_QUE       reduce using rule 82 (f -> f MOD g .)
    MENOR_IGUAL_QUE reduce using rule 82 (f -> f MOD g .)
    MAYOR_QUE       reduce using rule 82 (f -> f MOD g .)
    MAYOR_IGUAL_QUE reduce using rule 82 (f -> f MOD g .)
    TRIPLE_IGUAL    reduce using rule 82 (f -> f MOD g .)
    AND             reduce using rule 82 (f -> f MOD g .)
    OR              reduce using rule 82 (f -> f MOD g .)
    SEMI_COLON      reduce using rule 82 (f -> f MOD g .)
    CONSOLE         reduce using rule 82 (f -> f MOD g .)
    LET             reduce using rule 82 (f -> f MOD g .)
    LITERAL         reduce using rule 82 (f -> f MOD g .)
    IF              reduce using rule 82 (f -> f MOD g .)
    WHILE           reduce using rule 82 (f -> f MOD g .)
    FOR             reduce using rule 82 (f -> f MOD g .)
    INTERFACE       reduce using rule 82 (f -> f MOD g .)
    CONTINUE        reduce using rule 82 (f -> f MOD g .)
    BREAK           reduce using rule 82 (f -> f MOD g .)
    RETURN          reduce using rule 82 (f -> f MOD g .)
    FUNCTION        reduce using rule 82 (f -> f MOD g .)
    $end            reduce using rule 82 (f -> f MOD g .)
    R_LLAVE         reduce using rule 82 (f -> f MOD g .)
    R_PAREN         reduce using rule 82 (f -> f MOD g .)
    COMA            reduce using rule 82 (f -> f MOD g .)
    R_CORCHETE      reduce using rule 82 (f -> f MOD g .)


state 146

    (83) f -> f POTENCIA g .

    TIMES           reduce using rule 83 (f -> f POTENCIA g .)
    DIVIDE          reduce using rule 83 (f -> f POTENCIA g .)
    MOD             reduce using rule 83 (f -> f POTENCIA g .)
    POTENCIA        reduce using rule 83 (f -> f POTENCIA g .)
    MAS             reduce using rule 83 (f -> f POTENCIA g .)
    MENOS           reduce using rule 83 (f -> f POTENCIA g .)
    DISTINTO_QUE    reduce using rule 83 (f -> f POTENCIA g .)
    MENOR_QUE       reduce using rule 83 (f -> f POTENCIA g .)
    MENOR_IGUAL_QUE reduce using rule 83 (f -> f POTENCIA g .)
    MAYOR_QUE       reduce using rule 83 (f -> f POTENCIA g .)
    MAYOR_IGUAL_QUE reduce using rule 83 (f -> f POTENCIA g .)
    TRIPLE_IGUAL    reduce using rule 83 (f -> f POTENCIA g .)
    AND             reduce using rule 83 (f -> f POTENCIA g .)
    OR              reduce using rule 83 (f -> f POTENCIA g .)
    SEMI_COLON      reduce using rule 83 (f -> f POTENCIA g .)
    CONSOLE         reduce using rule 83 (f -> f POTENCIA g .)
    LET             reduce using rule 83 (f -> f POTENCIA g .)
    LITERAL         reduce using rule 83 (f -> f POTENCIA g .)
    IF              reduce using rule 83 (f -> f POTENCIA g .)
    WHILE           reduce using rule 83 (f -> f POTENCIA g .)
    FOR             reduce using rule 83 (f -> f POTENCIA g .)
    INTERFACE       reduce using rule 83 (f -> f POTENCIA g .)
    CONTINUE        reduce using rule 83 (f -> f POTENCIA g .)
    BREAK           reduce using rule 83 (f -> f POTENCIA g .)
    RETURN          reduce using rule 83 (f -> f POTENCIA g .)
    FUNCTION        reduce using rule 83 (f -> f POTENCIA g .)
    $end            reduce using rule 83 (f -> f POTENCIA g .)
    R_LLAVE         reduce using rule 83 (f -> f POTENCIA g .)
    R_PAREN         reduce using rule 83 (f -> f POTENCIA g .)
    COMA            reduce using rule 83 (f -> f POTENCIA g .)
    R_CORCHETE      reduce using rule 83 (f -> f POTENCIA g .)


state 147

    (85) f -> g PUNTO nativeFun . L_PAREN expresion R_PAREN

    L_PAREN         shift and go to state 178


state 148

    (100) nativeFun -> TOSTRING .

    L_PAREN         reduce using rule 100 (nativeFun -> TOSTRING .)


state 149

    (101) nativeFun -> TOFIXED .

    L_PAREN         reduce using rule 101 (nativeFun -> TOFIXED .)


state 150

    (102) nativeFun -> TOEXPONENTIAL .

    L_PAREN         reduce using rule 102 (nativeFun -> TOEXPONENTIAL .)


state 151

    (103) nativeFun -> TOLOWERCASE .

    L_PAREN         reduce using rule 103 (nativeFun -> TOLOWERCASE .)


state 152

    (104) nativeFun -> TOUPPERCASE .

    L_PAREN         reduce using rule 104 (nativeFun -> TOUPPERCASE .)


state 153

    (105) nativeFun -> SPLIT .

    L_PAREN         reduce using rule 105 (nativeFun -> SPLIT .)


state 154

    (106) nativeFun -> CONCAT .

    L_PAREN         reduce using rule 106 (nativeFun -> CONCAT .)


state 155

    (93) g -> L_PAREN a R_PAREN .

    PUNTO           reduce using rule 93 (g -> L_PAREN a R_PAREN .)
    TIMES           reduce using rule 93 (g -> L_PAREN a R_PAREN .)
    DIVIDE          reduce using rule 93 (g -> L_PAREN a R_PAREN .)
    MOD             reduce using rule 93 (g -> L_PAREN a R_PAREN .)
    POTENCIA        reduce using rule 93 (g -> L_PAREN a R_PAREN .)
    MAS             reduce using rule 93 (g -> L_PAREN a R_PAREN .)
    MENOS           reduce using rule 93 (g -> L_PAREN a R_PAREN .)
    DISTINTO_QUE    reduce using rule 93 (g -> L_PAREN a R_PAREN .)
    MENOR_QUE       reduce using rule 93 (g -> L_PAREN a R_PAREN .)
    MENOR_IGUAL_QUE reduce using rule 93 (g -> L_PAREN a R_PAREN .)
    MAYOR_QUE       reduce using rule 93 (g -> L_PAREN a R_PAREN .)
    MAYOR_IGUAL_QUE reduce using rule 93 (g -> L_PAREN a R_PAREN .)
    TRIPLE_IGUAL    reduce using rule 93 (g -> L_PAREN a R_PAREN .)
    AND             reduce using rule 93 (g -> L_PAREN a R_PAREN .)
    OR              reduce using rule 93 (g -> L_PAREN a R_PAREN .)
    SEMI_COLON      reduce using rule 93 (g -> L_PAREN a R_PAREN .)
    CONSOLE         reduce using rule 93 (g -> L_PAREN a R_PAREN .)
    LET             reduce using rule 93 (g -> L_PAREN a R_PAREN .)
    LITERAL         reduce using rule 93 (g -> L_PAREN a R_PAREN .)
    IF              reduce using rule 93 (g -> L_PAREN a R_PAREN .)
    WHILE           reduce using rule 93 (g -> L_PAREN a R_PAREN .)
    FOR             reduce using rule 93 (g -> L_PAREN a R_PAREN .)
    INTERFACE       reduce using rule 93 (g -> L_PAREN a R_PAREN .)
    CONTINUE        reduce using rule 93 (g -> L_PAREN a R_PAREN .)
    BREAK           reduce using rule 93 (g -> L_PAREN a R_PAREN .)
    RETURN          reduce using rule 93 (g -> L_PAREN a R_PAREN .)
    FUNCTION        reduce using rule 93 (g -> L_PAREN a R_PAREN .)
    $end            reduce using rule 93 (g -> L_PAREN a R_PAREN .)
    R_LLAVE         reduce using rule 93 (g -> L_PAREN a R_PAREN .)
    R_PAREN         reduce using rule 93 (g -> L_PAREN a R_PAREN .)
    COMA            reduce using rule 93 (g -> L_PAREN a R_PAREN .)
    R_CORCHETE      reduce using rule 93 (g -> L_PAREN a R_PAREN .)


state 156

    (99) array_pro -> L_CORCHETE values R_CORCHETE .

    PUNTO           reduce using rule 99 (array_pro -> L_CORCHETE values R_CORCHETE .)
    TIMES           reduce using rule 99 (array_pro -> L_CORCHETE values R_CORCHETE .)
    DIVIDE          reduce using rule 99 (array_pro -> L_CORCHETE values R_CORCHETE .)
    MOD             reduce using rule 99 (array_pro -> L_CORCHETE values R_CORCHETE .)
    POTENCIA        reduce using rule 99 (array_pro -> L_CORCHETE values R_CORCHETE .)
    MAS             reduce using rule 99 (array_pro -> L_CORCHETE values R_CORCHETE .)
    MENOS           reduce using rule 99 (array_pro -> L_CORCHETE values R_CORCHETE .)
    DISTINTO_QUE    reduce using rule 99 (array_pro -> L_CORCHETE values R_CORCHETE .)
    MENOR_QUE       reduce using rule 99 (array_pro -> L_CORCHETE values R_CORCHETE .)
    MENOR_IGUAL_QUE reduce using rule 99 (array_pro -> L_CORCHETE values R_CORCHETE .)
    MAYOR_QUE       reduce using rule 99 (array_pro -> L_CORCHETE values R_CORCHETE .)
    MAYOR_IGUAL_QUE reduce using rule 99 (array_pro -> L_CORCHETE values R_CORCHETE .)
    TRIPLE_IGUAL    reduce using rule 99 (array_pro -> L_CORCHETE values R_CORCHETE .)
    AND             reduce using rule 99 (array_pro -> L_CORCHETE values R_CORCHETE .)
    OR              reduce using rule 99 (array_pro -> L_CORCHETE values R_CORCHETE .)
    SEMI_COLON      reduce using rule 99 (array_pro -> L_CORCHETE values R_CORCHETE .)
    CONSOLE         reduce using rule 99 (array_pro -> L_CORCHETE values R_CORCHETE .)
    LET             reduce using rule 99 (array_pro -> L_CORCHETE values R_CORCHETE .)
    LITERAL         reduce using rule 99 (array_pro -> L_CORCHETE values R_CORCHETE .)
    IF              reduce using rule 99 (array_pro -> L_CORCHETE values R_CORCHETE .)
    WHILE           reduce using rule 99 (array_pro -> L_CORCHETE values R_CORCHETE .)
    FOR             reduce using rule 99 (array_pro -> L_CORCHETE values R_CORCHETE .)
    INTERFACE       reduce using rule 99 (array_pro -> L_CORCHETE values R_CORCHETE .)
    CONTINUE        reduce using rule 99 (array_pro -> L_CORCHETE values R_CORCHETE .)
    BREAK           reduce using rule 99 (array_pro -> L_CORCHETE values R_CORCHETE .)
    RETURN          reduce using rule 99 (array_pro -> L_CORCHETE values R_CORCHETE .)
    FUNCTION        reduce using rule 99 (array_pro -> L_CORCHETE values R_CORCHETE .)
    $end            reduce using rule 99 (array_pro -> L_CORCHETE values R_CORCHETE .)
    R_LLAVE         reduce using rule 99 (array_pro -> L_CORCHETE values R_CORCHETE .)
    R_PAREN         reduce using rule 99 (array_pro -> L_CORCHETE values R_CORCHETE .)
    COMA            reduce using rule 99 (array_pro -> L_CORCHETE values R_CORCHETE .)
    R_CORCHETE      reduce using rule 99 (array_pro -> L_CORCHETE values R_CORCHETE .)


state 157

    (96) interface_assi -> L_LLAVE atributos_assi R_LLAVE .

    PUNTO           reduce using rule 96 (interface_assi -> L_LLAVE atributos_assi R_LLAVE .)
    TIMES           reduce using rule 96 (interface_assi -> L_LLAVE atributos_assi R_LLAVE .)
    DIVIDE          reduce using rule 96 (interface_assi -> L_LLAVE atributos_assi R_LLAVE .)
    MOD             reduce using rule 96 (interface_assi -> L_LLAVE atributos_assi R_LLAVE .)
    POTENCIA        reduce using rule 96 (interface_assi -> L_LLAVE atributos_assi R_LLAVE .)
    MAS             reduce using rule 96 (interface_assi -> L_LLAVE atributos_assi R_LLAVE .)
    MENOS           reduce using rule 96 (interface_assi -> L_LLAVE atributos_assi R_LLAVE .)
    DISTINTO_QUE    reduce using rule 96 (interface_assi -> L_LLAVE atributos_assi R_LLAVE .)
    MENOR_QUE       reduce using rule 96 (interface_assi -> L_LLAVE atributos_assi R_LLAVE .)
    MENOR_IGUAL_QUE reduce using rule 96 (interface_assi -> L_LLAVE atributos_assi R_LLAVE .)
    MAYOR_QUE       reduce using rule 96 (interface_assi -> L_LLAVE atributos_assi R_LLAVE .)
    MAYOR_IGUAL_QUE reduce using rule 96 (interface_assi -> L_LLAVE atributos_assi R_LLAVE .)
    TRIPLE_IGUAL    reduce using rule 96 (interface_assi -> L_LLAVE atributos_assi R_LLAVE .)
    AND             reduce using rule 96 (interface_assi -> L_LLAVE atributos_assi R_LLAVE .)
    OR              reduce using rule 96 (interface_assi -> L_LLAVE atributos_assi R_LLAVE .)
    SEMI_COLON      reduce using rule 96 (interface_assi -> L_LLAVE atributos_assi R_LLAVE .)
    CONSOLE         reduce using rule 96 (interface_assi -> L_LLAVE atributos_assi R_LLAVE .)
    LET             reduce using rule 96 (interface_assi -> L_LLAVE atributos_assi R_LLAVE .)
    LITERAL         reduce using rule 96 (interface_assi -> L_LLAVE atributos_assi R_LLAVE .)
    IF              reduce using rule 96 (interface_assi -> L_LLAVE atributos_assi R_LLAVE .)
    WHILE           reduce using rule 96 (interface_assi -> L_LLAVE atributos_assi R_LLAVE .)
    FOR             reduce using rule 96 (interface_assi -> L_LLAVE atributos_assi R_LLAVE .)
    INTERFACE       reduce using rule 96 (interface_assi -> L_LLAVE atributos_assi R_LLAVE .)
    CONTINUE        reduce using rule 96 (interface_assi -> L_LLAVE atributos_assi R_LLAVE .)
    BREAK           reduce using rule 96 (interface_assi -> L_LLAVE atributos_assi R_LLAVE .)
    RETURN          reduce using rule 96 (interface_assi -> L_LLAVE atributos_assi R_LLAVE .)
    FUNCTION        reduce using rule 96 (interface_assi -> L_LLAVE atributos_assi R_LLAVE .)
    $end            reduce using rule 96 (interface_assi -> L_LLAVE atributos_assi R_LLAVE .)
    R_LLAVE         reduce using rule 96 (interface_assi -> L_LLAVE atributos_assi R_LLAVE .)
    R_PAREN         reduce using rule 96 (interface_assi -> L_LLAVE atributos_assi R_LLAVE .)
    COMA            reduce using rule 96 (interface_assi -> L_LLAVE atributos_assi R_LLAVE .)
    R_CORCHETE      reduce using rule 96 (interface_assi -> L_LLAVE atributos_assi R_LLAVE .)


state 158

    (97) atributos_assi -> atributos_assi COMA . LITERAL COLON a

    LITERAL         shift and go to state 179


state 159

    (98) atributos_assi -> LITERAL COLON . a
    (64) a -> . a OR b
    (65) a -> . b
    (66) b -> . b AND c
    (67) b -> . c
    (68) c -> . NOT d
    (69) c -> . d
    (70) d -> . d DISTINTO_QUE e
    (71) d -> . d MENOR_QUE e
    (72) d -> . d MENOR_IGUAL_QUE e
    (73) d -> . d MAYOR_QUE e
    (74) d -> . d MAYOR_IGUAL_QUE e
    (75) d -> . d TRIPLE_IGUAL e
    (76) d -> . e
    (77) e -> . e MAS f
    (78) e -> . e MENOS f
    (79) e -> . f
    (80) f -> . f TIMES g
    (81) f -> . f DIVIDE g
    (82) f -> . f MOD g
    (83) f -> . f POTENCIA g
    (84) f -> . g
    (85) f -> . g PUNTO nativeFun L_PAREN expresion R_PAREN
    (86) g -> . ENTERO
    (87) g -> . DECIMAL
    (88) g -> . CADENA
    (89) g -> . LITERAL
    (90) g -> . call_function_pro
    (91) g -> . array_pro
    (92) g -> . interface_assi
    (93) g -> . L_PAREN a R_PAREN
    (22) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (23) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (99) array_pro -> . L_CORCHETE values R_CORCHETE
    (96) interface_assi -> . L_LLAVE atributos_assi R_LLAVE

    NOT             shift and go to state 60
    ENTERO          shift and go to state 66
    DECIMAL         shift and go to state 67
    CADENA          shift and go to state 68
    LITERAL         shift and go to state 69
    L_PAREN         shift and go to state 65
    L_CORCHETE      shift and go to state 73
    L_LLAVE         shift and go to state 74

    a                              shift and go to state 180
    b                              shift and go to state 58
    c                              shift and go to state 59
    d                              shift and go to state 61
    e                              shift and go to state 62
    f                              shift and go to state 63
    g                              shift and go to state 64
    call_function_pro              shift and go to state 70
    array_pro                      shift and go to state 71
    interface_assi                 shift and go to state 72

state 160

    (28) parameter_pro -> LITERAL . COLON type
    (29) parameter_pro -> LITERAL .

    COLON           shift and go to state 181
    R_PAREN         reduce using rule 29 (parameter_pro -> LITERAL .)
    COMA            reduce using rule 29 (parameter_pro -> LITERAL .)


state 161

    (20) function_pro -> FUNCTION LITERAL L_PAREN parameters_pro . R_PAREN L_LLAVE instrucciones R_LLAVE
    (26) parameters_pro -> parameters_pro . COMA parameter_pro

    R_PAREN         shift and go to state 182
    COMA            shift and go to state 183


state 162

    (21) function_pro -> FUNCTION LITERAL L_PAREN R_PAREN . L_LLAVE instrucciones R_LLAVE

    L_LLAVE         shift and go to state 184


state 163

    (27) parameters_pro -> parameter_pro .

    R_PAREN         reduce using rule 27 (parameters_pro -> parameter_pro .)
    COMA            reduce using rule 27 (parameters_pro -> parameter_pro .)


state 164

    (61) console_pro -> CONSOLE PUNTO LOG L_PAREN expresion . R_PAREN
    (62) expresion -> expresion . COMA a

    R_PAREN         shift and go to state 185
    COMA            shift and go to state 186


state 165

    (63) expresion -> a .
    (64) a -> a . OR b

    R_PAREN         reduce using rule 63 (expresion -> a .)
    COMA            reduce using rule 63 (expresion -> a .)
    OR              shift and go to state 94


state 166

    (42) assignacion_instruction -> LITERAL COLON type IGUAL . a
    (64) a -> . a OR b
    (65) a -> . b
    (66) b -> . b AND c
    (67) b -> . c
    (68) c -> . NOT d
    (69) c -> . d
    (70) d -> . d DISTINTO_QUE e
    (71) d -> . d MENOR_QUE e
    (72) d -> . d MENOR_IGUAL_QUE e
    (73) d -> . d MAYOR_QUE e
    (74) d -> . d MAYOR_IGUAL_QUE e
    (75) d -> . d TRIPLE_IGUAL e
    (76) d -> . e
    (77) e -> . e MAS f
    (78) e -> . e MENOS f
    (79) e -> . f
    (80) f -> . f TIMES g
    (81) f -> . f DIVIDE g
    (82) f -> . f MOD g
    (83) f -> . f POTENCIA g
    (84) f -> . g
    (85) f -> . g PUNTO nativeFun L_PAREN expresion R_PAREN
    (86) g -> . ENTERO
    (87) g -> . DECIMAL
    (88) g -> . CADENA
    (89) g -> . LITERAL
    (90) g -> . call_function_pro
    (91) g -> . array_pro
    (92) g -> . interface_assi
    (93) g -> . L_PAREN a R_PAREN
    (22) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (23) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (99) array_pro -> . L_CORCHETE values R_CORCHETE
    (96) interface_assi -> . L_LLAVE atributos_assi R_LLAVE

    NOT             shift and go to state 60
    ENTERO          shift and go to state 66
    DECIMAL         shift and go to state 67
    CADENA          shift and go to state 68
    LITERAL         shift and go to state 69
    L_PAREN         shift and go to state 65
    L_CORCHETE      shift and go to state 73
    L_LLAVE         shift and go to state 74

    a                              shift and go to state 187
    b                              shift and go to state 58
    c                              shift and go to state 59
    d                              shift and go to state 61
    e                              shift and go to state 62
    f                              shift and go to state 63
    g                              shift and go to state 64
    call_function_pro              shift and go to state 70
    array_pro                      shift and go to state 71
    interface_assi                 shift and go to state 72

state 167

    (24) values -> values COMA a .
    (64) a -> a . OR b

    R_PAREN         reduce using rule 24 (values -> values COMA a .)
    COMA            reduce using rule 24 (values -> values COMA a .)
    R_CORCHETE      reduce using rule 24 (values -> values COMA a .)
    OR              shift and go to state 94


state 168

    (51) if_pro -> IF L_PAREN a R_PAREN L_LLAVE . instrucciones R_LLAVE else_pro
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . console_pro sc
    (5) instruccion -> . declaration_instruction sc
    (6) instruccion -> . assig_pro sc
    (7) instruccion -> . if_pro sc
    (8) instruccion -> . while_pro sc
    (9) instruccion -> . for_pro sc
    (10) instruccion -> . for_each_pro sc
    (11) instruccion -> . interface_pro sc
    (12) instruccion -> . continue_pro sc
    (13) instruccion -> . break_pro sc
    (14) instruccion -> . return_pro sc
    (15) instruccion -> . function_pro sc
    (16) instruccion -> . call_function_pro sc
    (17) instruccion -> . sumadores sc
    (61) console_pro -> . CONSOLE PUNTO LOG L_PAREN expresion R_PAREN
    (39) declaration_instruction -> . LET declaracion_list
    (50) assig_pro -> . LITERAL IGUAL a
    (51) if_pro -> . IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro
    (55) while_pro -> . WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE
    (56) for_pro -> . FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (57) for_pro -> . FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (58) for_each_pro -> . FOR L_PAREN for_each_dec R_PAREN L_LLAVE instrucciones R_LLAVE
    (34) interface_pro -> . INTERFACE LITERAL L_LLAVE interface_atributos R_LLAVE
    (30) continue_pro -> . CONTINUE
    (31) break_pro -> . BREAK
    (32) return_pro -> . RETURN
    (33) return_pro -> . RETURN a
    (20) function_pro -> . FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (21) function_pro -> . FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE
    (22) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (23) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (94) sumadores -> . LITERAL MAS MAS
    (95) sumadores -> . LITERAL MENOS MENOS

    CONSOLE         shift and go to state 18
    LET             shift and go to state 19
    LITERAL         shift and go to state 20
    IF              shift and go to state 21
    WHILE           shift and go to state 22
    FOR             shift and go to state 23
    INTERFACE       shift and go to state 24
    CONTINUE        shift and go to state 25
    BREAK           shift and go to state 26
    RETURN          shift and go to state 27
    FUNCTION        shift and go to state 28

    instrucciones                  shift and go to state 188
    instruccion                    shift and go to state 3
    console_pro                    shift and go to state 4
    declaration_instruction        shift and go to state 5
    assig_pro                      shift and go to state 6
    if_pro                         shift and go to state 7
    while_pro                      shift and go to state 8
    for_pro                        shift and go to state 9
    for_each_pro                   shift and go to state 10
    interface_pro                  shift and go to state 11
    continue_pro                   shift and go to state 12
    break_pro                      shift and go to state 13
    return_pro                     shift and go to state 14
    function_pro                   shift and go to state 15
    call_function_pro              shift and go to state 16
    sumadores                      shift and go to state 17

state 169

    (55) while_pro -> WHILE L_PAREN a R_PAREN L_LLAVE . instrucciones R_LLAVE
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . console_pro sc
    (5) instruccion -> . declaration_instruction sc
    (6) instruccion -> . assig_pro sc
    (7) instruccion -> . if_pro sc
    (8) instruccion -> . while_pro sc
    (9) instruccion -> . for_pro sc
    (10) instruccion -> . for_each_pro sc
    (11) instruccion -> . interface_pro sc
    (12) instruccion -> . continue_pro sc
    (13) instruccion -> . break_pro sc
    (14) instruccion -> . return_pro sc
    (15) instruccion -> . function_pro sc
    (16) instruccion -> . call_function_pro sc
    (17) instruccion -> . sumadores sc
    (61) console_pro -> . CONSOLE PUNTO LOG L_PAREN expresion R_PAREN
    (39) declaration_instruction -> . LET declaracion_list
    (50) assig_pro -> . LITERAL IGUAL a
    (51) if_pro -> . IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro
    (55) while_pro -> . WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE
    (56) for_pro -> . FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (57) for_pro -> . FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (58) for_each_pro -> . FOR L_PAREN for_each_dec R_PAREN L_LLAVE instrucciones R_LLAVE
    (34) interface_pro -> . INTERFACE LITERAL L_LLAVE interface_atributos R_LLAVE
    (30) continue_pro -> . CONTINUE
    (31) break_pro -> . BREAK
    (32) return_pro -> . RETURN
    (33) return_pro -> . RETURN a
    (20) function_pro -> . FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (21) function_pro -> . FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE
    (22) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (23) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (94) sumadores -> . LITERAL MAS MAS
    (95) sumadores -> . LITERAL MENOS MENOS

    CONSOLE         shift and go to state 18
    LET             shift and go to state 19
    LITERAL         shift and go to state 20
    IF              shift and go to state 21
    WHILE           shift and go to state 22
    FOR             shift and go to state 23
    INTERFACE       shift and go to state 24
    CONTINUE        shift and go to state 25
    BREAK           shift and go to state 26
    RETURN          shift and go to state 27
    FUNCTION        shift and go to state 28

    instrucciones                  shift and go to state 189
    instruccion                    shift and go to state 3
    console_pro                    shift and go to state 4
    declaration_instruction        shift and go to state 5
    assig_pro                      shift and go to state 6
    if_pro                         shift and go to state 7
    while_pro                      shift and go to state 8
    for_pro                        shift and go to state 9
    for_each_pro                   shift and go to state 10
    interface_pro                  shift and go to state 11
    continue_pro                   shift and go to state 12
    break_pro                      shift and go to state 13
    return_pro                     shift and go to state 14
    function_pro                   shift and go to state 15
    call_function_pro              shift and go to state 16
    sumadores                      shift and go to state 17

state 170

    (56) for_pro -> FOR L_PAREN declaration_instruction SEMI_COLON a . SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (64) a -> a . OR b

    SEMI_COLON      shift and go to state 190
    OR              shift and go to state 94


state 171

    (57) for_pro -> FOR L_PAREN assig_pro SEMI_COLON a . SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (64) a -> a . OR b

    SEMI_COLON      shift and go to state 191
    OR              shift and go to state 94


state 172

    (58) for_each_pro -> FOR L_PAREN for_each_dec R_PAREN L_LLAVE . instrucciones R_LLAVE
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . console_pro sc
    (5) instruccion -> . declaration_instruction sc
    (6) instruccion -> . assig_pro sc
    (7) instruccion -> . if_pro sc
    (8) instruccion -> . while_pro sc
    (9) instruccion -> . for_pro sc
    (10) instruccion -> . for_each_pro sc
    (11) instruccion -> . interface_pro sc
    (12) instruccion -> . continue_pro sc
    (13) instruccion -> . break_pro sc
    (14) instruccion -> . return_pro sc
    (15) instruccion -> . function_pro sc
    (16) instruccion -> . call_function_pro sc
    (17) instruccion -> . sumadores sc
    (61) console_pro -> . CONSOLE PUNTO LOG L_PAREN expresion R_PAREN
    (39) declaration_instruction -> . LET declaracion_list
    (50) assig_pro -> . LITERAL IGUAL a
    (51) if_pro -> . IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro
    (55) while_pro -> . WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE
    (56) for_pro -> . FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (57) for_pro -> . FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (58) for_each_pro -> . FOR L_PAREN for_each_dec R_PAREN L_LLAVE instrucciones R_LLAVE
    (34) interface_pro -> . INTERFACE LITERAL L_LLAVE interface_atributos R_LLAVE
    (30) continue_pro -> . CONTINUE
    (31) break_pro -> . BREAK
    (32) return_pro -> . RETURN
    (33) return_pro -> . RETURN a
    (20) function_pro -> . FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (21) function_pro -> . FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE
    (22) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (23) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (94) sumadores -> . LITERAL MAS MAS
    (95) sumadores -> . LITERAL MENOS MENOS

    CONSOLE         shift and go to state 18
    LET             shift and go to state 19
    LITERAL         shift and go to state 20
    IF              shift and go to state 21
    WHILE           shift and go to state 22
    FOR             shift and go to state 23
    INTERFACE       shift and go to state 24
    CONTINUE        shift and go to state 25
    BREAK           shift and go to state 26
    RETURN          shift and go to state 27
    FUNCTION        shift and go to state 28

    instrucciones                  shift and go to state 192
    instruccion                    shift and go to state 3
    console_pro                    shift and go to state 4
    declaration_instruction        shift and go to state 5
    assig_pro                      shift and go to state 6
    if_pro                         shift and go to state 7
    while_pro                      shift and go to state 8
    for_pro                        shift and go to state 9
    for_each_pro                   shift and go to state 10
    interface_pro                  shift and go to state 11
    continue_pro                   shift and go to state 12
    break_pro                      shift and go to state 13
    return_pro                     shift and go to state 14
    function_pro                   shift and go to state 15
    call_function_pro              shift and go to state 16
    sumadores                      shift and go to state 17

state 173

    (59) for_each_dec -> LET LITERAL OF . a
    (64) a -> . a OR b
    (65) a -> . b
    (66) b -> . b AND c
    (67) b -> . c
    (68) c -> . NOT d
    (69) c -> . d
    (70) d -> . d DISTINTO_QUE e
    (71) d -> . d MENOR_QUE e
    (72) d -> . d MENOR_IGUAL_QUE e
    (73) d -> . d MAYOR_QUE e
    (74) d -> . d MAYOR_IGUAL_QUE e
    (75) d -> . d TRIPLE_IGUAL e
    (76) d -> . e
    (77) e -> . e MAS f
    (78) e -> . e MENOS f
    (79) e -> . f
    (80) f -> . f TIMES g
    (81) f -> . f DIVIDE g
    (82) f -> . f MOD g
    (83) f -> . f POTENCIA g
    (84) f -> . g
    (85) f -> . g PUNTO nativeFun L_PAREN expresion R_PAREN
    (86) g -> . ENTERO
    (87) g -> . DECIMAL
    (88) g -> . CADENA
    (89) g -> . LITERAL
    (90) g -> . call_function_pro
    (91) g -> . array_pro
    (92) g -> . interface_assi
    (93) g -> . L_PAREN a R_PAREN
    (22) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (23) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (99) array_pro -> . L_CORCHETE values R_CORCHETE
    (96) interface_assi -> . L_LLAVE atributos_assi R_LLAVE

    NOT             shift and go to state 60
    ENTERO          shift and go to state 66
    DECIMAL         shift and go to state 67
    CADENA          shift and go to state 68
    LITERAL         shift and go to state 69
    L_PAREN         shift and go to state 65
    L_CORCHETE      shift and go to state 73
    L_LLAVE         shift and go to state 74

    a                              shift and go to state 193
    b                              shift and go to state 58
    c                              shift and go to state 59
    d                              shift and go to state 61
    e                              shift and go to state 62
    f                              shift and go to state 63
    g                              shift and go to state 64
    call_function_pro              shift and go to state 70
    array_pro                      shift and go to state 71
    interface_assi                 shift and go to state 72

state 174

    (60) for_each_dec -> LET LITERAL COLON . type OF a
    (42) assignacion_instruction -> LITERAL COLON . type IGUAL a
    (43) assignacion_instruction -> LITERAL COLON . type
    (45) type -> . NUMBER
    (46) type -> . STRING
    (47) type -> . BOOLEAN
    (48) type -> . ANY
    (49) type -> . LITERAL

    NUMBER          shift and go to state 119
    STRING          shift and go to state 120
    BOOLEAN         shift and go to state 121
    ANY             shift and go to state 122
    LITERAL         shift and go to state 117

    type                           shift and go to state 194

state 175

    (37) interface_atributo -> LITERAL . COLON type
    (38) interface_atributo -> LITERAL .

    COLON           shift and go to state 195
    SEMI_COLON      reduce using rule 38 (interface_atributo -> LITERAL .)
    R_LLAVE         reduce using rule 38 (interface_atributo -> LITERAL .)
    LITERAL         reduce using rule 38 (interface_atributo -> LITERAL .)


state 176

    (34) interface_pro -> INTERFACE LITERAL L_LLAVE interface_atributos R_LLAVE .

    SEMI_COLON      reduce using rule 34 (interface_pro -> INTERFACE LITERAL L_LLAVE interface_atributos R_LLAVE .)
    CONSOLE         reduce using rule 34 (interface_pro -> INTERFACE LITERAL L_LLAVE interface_atributos R_LLAVE .)
    LET             reduce using rule 34 (interface_pro -> INTERFACE LITERAL L_LLAVE interface_atributos R_LLAVE .)
    LITERAL         reduce using rule 34 (interface_pro -> INTERFACE LITERAL L_LLAVE interface_atributos R_LLAVE .)
    IF              reduce using rule 34 (interface_pro -> INTERFACE LITERAL L_LLAVE interface_atributos R_LLAVE .)
    WHILE           reduce using rule 34 (interface_pro -> INTERFACE LITERAL L_LLAVE interface_atributos R_LLAVE .)
    FOR             reduce using rule 34 (interface_pro -> INTERFACE LITERAL L_LLAVE interface_atributos R_LLAVE .)
    INTERFACE       reduce using rule 34 (interface_pro -> INTERFACE LITERAL L_LLAVE interface_atributos R_LLAVE .)
    CONTINUE        reduce using rule 34 (interface_pro -> INTERFACE LITERAL L_LLAVE interface_atributos R_LLAVE .)
    BREAK           reduce using rule 34 (interface_pro -> INTERFACE LITERAL L_LLAVE interface_atributos R_LLAVE .)
    RETURN          reduce using rule 34 (interface_pro -> INTERFACE LITERAL L_LLAVE interface_atributos R_LLAVE .)
    FUNCTION        reduce using rule 34 (interface_pro -> INTERFACE LITERAL L_LLAVE interface_atributos R_LLAVE .)
    $end            reduce using rule 34 (interface_pro -> INTERFACE LITERAL L_LLAVE interface_atributos R_LLAVE .)
    R_LLAVE         reduce using rule 34 (interface_pro -> INTERFACE LITERAL L_LLAVE interface_atributos R_LLAVE .)


state 177

    (35) interface_atributos -> interface_atributos interface_atributo . sc
    (18) sc -> . SEMI_COLON
    (19) sc -> .

    SEMI_COLON      shift and go to state 31
    R_LLAVE         reduce using rule 19 (sc -> .)
    LITERAL         reduce using rule 19 (sc -> .)

    sc                             shift and go to state 196

state 178

    (85) f -> g PUNTO nativeFun L_PAREN . expresion R_PAREN
    (62) expresion -> . expresion COMA a
    (63) expresion -> . a
    (64) a -> . a OR b
    (65) a -> . b
    (66) b -> . b AND c
    (67) b -> . c
    (68) c -> . NOT d
    (69) c -> . d
    (70) d -> . d DISTINTO_QUE e
    (71) d -> . d MENOR_QUE e
    (72) d -> . d MENOR_IGUAL_QUE e
    (73) d -> . d MAYOR_QUE e
    (74) d -> . d MAYOR_IGUAL_QUE e
    (75) d -> . d TRIPLE_IGUAL e
    (76) d -> . e
    (77) e -> . e MAS f
    (78) e -> . e MENOS f
    (79) e -> . f
    (80) f -> . f TIMES g
    (81) f -> . f DIVIDE g
    (82) f -> . f MOD g
    (83) f -> . f POTENCIA g
    (84) f -> . g
    (85) f -> . g PUNTO nativeFun L_PAREN expresion R_PAREN
    (86) g -> . ENTERO
    (87) g -> . DECIMAL
    (88) g -> . CADENA
    (89) g -> . LITERAL
    (90) g -> . call_function_pro
    (91) g -> . array_pro
    (92) g -> . interface_assi
    (93) g -> . L_PAREN a R_PAREN
    (22) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (23) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (99) array_pro -> . L_CORCHETE values R_CORCHETE
    (96) interface_assi -> . L_LLAVE atributos_assi R_LLAVE

    NOT             shift and go to state 60
    ENTERO          shift and go to state 66
    DECIMAL         shift and go to state 67
    CADENA          shift and go to state 68
    LITERAL         shift and go to state 69
    L_PAREN         shift and go to state 65
    L_CORCHETE      shift and go to state 73
    L_LLAVE         shift and go to state 74

    g                              shift and go to state 64
    expresion                      shift and go to state 197
    a                              shift and go to state 165
    b                              shift and go to state 58
    c                              shift and go to state 59
    d                              shift and go to state 61
    e                              shift and go to state 62
    f                              shift and go to state 63
    call_function_pro              shift and go to state 70
    array_pro                      shift and go to state 71
    interface_assi                 shift and go to state 72

state 179

    (97) atributos_assi -> atributos_assi COMA LITERAL . COLON a

    COLON           shift and go to state 198


state 180

    (98) atributos_assi -> LITERAL COLON a .
    (64) a -> a . OR b

    R_LLAVE         reduce using rule 98 (atributos_assi -> LITERAL COLON a .)
    COMA            reduce using rule 98 (atributos_assi -> LITERAL COLON a .)
    OR              shift and go to state 94


state 181

    (28) parameter_pro -> LITERAL COLON . type
    (45) type -> . NUMBER
    (46) type -> . STRING
    (47) type -> . BOOLEAN
    (48) type -> . ANY
    (49) type -> . LITERAL

    NUMBER          shift and go to state 119
    STRING          shift and go to state 120
    BOOLEAN         shift and go to state 121
    ANY             shift and go to state 122
    LITERAL         shift and go to state 117

    type                           shift and go to state 199

state 182

    (20) function_pro -> FUNCTION LITERAL L_PAREN parameters_pro R_PAREN . L_LLAVE instrucciones R_LLAVE

    L_LLAVE         shift and go to state 200


state 183

    (26) parameters_pro -> parameters_pro COMA . parameter_pro
    (28) parameter_pro -> . LITERAL COLON type
    (29) parameter_pro -> . LITERAL

    LITERAL         shift and go to state 160

    parameter_pro                  shift and go to state 201

state 184

    (21) function_pro -> FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE . instrucciones R_LLAVE
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . console_pro sc
    (5) instruccion -> . declaration_instruction sc
    (6) instruccion -> . assig_pro sc
    (7) instruccion -> . if_pro sc
    (8) instruccion -> . while_pro sc
    (9) instruccion -> . for_pro sc
    (10) instruccion -> . for_each_pro sc
    (11) instruccion -> . interface_pro sc
    (12) instruccion -> . continue_pro sc
    (13) instruccion -> . break_pro sc
    (14) instruccion -> . return_pro sc
    (15) instruccion -> . function_pro sc
    (16) instruccion -> . call_function_pro sc
    (17) instruccion -> . sumadores sc
    (61) console_pro -> . CONSOLE PUNTO LOG L_PAREN expresion R_PAREN
    (39) declaration_instruction -> . LET declaracion_list
    (50) assig_pro -> . LITERAL IGUAL a
    (51) if_pro -> . IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro
    (55) while_pro -> . WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE
    (56) for_pro -> . FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (57) for_pro -> . FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (58) for_each_pro -> . FOR L_PAREN for_each_dec R_PAREN L_LLAVE instrucciones R_LLAVE
    (34) interface_pro -> . INTERFACE LITERAL L_LLAVE interface_atributos R_LLAVE
    (30) continue_pro -> . CONTINUE
    (31) break_pro -> . BREAK
    (32) return_pro -> . RETURN
    (33) return_pro -> . RETURN a
    (20) function_pro -> . FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (21) function_pro -> . FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE
    (22) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (23) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (94) sumadores -> . LITERAL MAS MAS
    (95) sumadores -> . LITERAL MENOS MENOS

    CONSOLE         shift and go to state 18
    LET             shift and go to state 19
    LITERAL         shift and go to state 20
    IF              shift and go to state 21
    WHILE           shift and go to state 22
    FOR             shift and go to state 23
    INTERFACE       shift and go to state 24
    CONTINUE        shift and go to state 25
    BREAK           shift and go to state 26
    RETURN          shift and go to state 27
    FUNCTION        shift and go to state 28

    instrucciones                  shift and go to state 202
    instruccion                    shift and go to state 3
    console_pro                    shift and go to state 4
    declaration_instruction        shift and go to state 5
    assig_pro                      shift and go to state 6
    if_pro                         shift and go to state 7
    while_pro                      shift and go to state 8
    for_pro                        shift and go to state 9
    for_each_pro                   shift and go to state 10
    interface_pro                  shift and go to state 11
    continue_pro                   shift and go to state 12
    break_pro                      shift and go to state 13
    return_pro                     shift and go to state 14
    function_pro                   shift and go to state 15
    call_function_pro              shift and go to state 16
    sumadores                      shift and go to state 17

state 185

    (61) console_pro -> CONSOLE PUNTO LOG L_PAREN expresion R_PAREN .

    SEMI_COLON      reduce using rule 61 (console_pro -> CONSOLE PUNTO LOG L_PAREN expresion R_PAREN .)
    CONSOLE         reduce using rule 61 (console_pro -> CONSOLE PUNTO LOG L_PAREN expresion R_PAREN .)
    LET             reduce using rule 61 (console_pro -> CONSOLE PUNTO LOG L_PAREN expresion R_PAREN .)
    LITERAL         reduce using rule 61 (console_pro -> CONSOLE PUNTO LOG L_PAREN expresion R_PAREN .)
    IF              reduce using rule 61 (console_pro -> CONSOLE PUNTO LOG L_PAREN expresion R_PAREN .)
    WHILE           reduce using rule 61 (console_pro -> CONSOLE PUNTO LOG L_PAREN expresion R_PAREN .)
    FOR             reduce using rule 61 (console_pro -> CONSOLE PUNTO LOG L_PAREN expresion R_PAREN .)
    INTERFACE       reduce using rule 61 (console_pro -> CONSOLE PUNTO LOG L_PAREN expresion R_PAREN .)
    CONTINUE        reduce using rule 61 (console_pro -> CONSOLE PUNTO LOG L_PAREN expresion R_PAREN .)
    BREAK           reduce using rule 61 (console_pro -> CONSOLE PUNTO LOG L_PAREN expresion R_PAREN .)
    RETURN          reduce using rule 61 (console_pro -> CONSOLE PUNTO LOG L_PAREN expresion R_PAREN .)
    FUNCTION        reduce using rule 61 (console_pro -> CONSOLE PUNTO LOG L_PAREN expresion R_PAREN .)
    $end            reduce using rule 61 (console_pro -> CONSOLE PUNTO LOG L_PAREN expresion R_PAREN .)
    R_LLAVE         reduce using rule 61 (console_pro -> CONSOLE PUNTO LOG L_PAREN expresion R_PAREN .)


state 186

    (62) expresion -> expresion COMA . a
    (64) a -> . a OR b
    (65) a -> . b
    (66) b -> . b AND c
    (67) b -> . c
    (68) c -> . NOT d
    (69) c -> . d
    (70) d -> . d DISTINTO_QUE e
    (71) d -> . d MENOR_QUE e
    (72) d -> . d MENOR_IGUAL_QUE e
    (73) d -> . d MAYOR_QUE e
    (74) d -> . d MAYOR_IGUAL_QUE e
    (75) d -> . d TRIPLE_IGUAL e
    (76) d -> . e
    (77) e -> . e MAS f
    (78) e -> . e MENOS f
    (79) e -> . f
    (80) f -> . f TIMES g
    (81) f -> . f DIVIDE g
    (82) f -> . f MOD g
    (83) f -> . f POTENCIA g
    (84) f -> . g
    (85) f -> . g PUNTO nativeFun L_PAREN expresion R_PAREN
    (86) g -> . ENTERO
    (87) g -> . DECIMAL
    (88) g -> . CADENA
    (89) g -> . LITERAL
    (90) g -> . call_function_pro
    (91) g -> . array_pro
    (92) g -> . interface_assi
    (93) g -> . L_PAREN a R_PAREN
    (22) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (23) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (99) array_pro -> . L_CORCHETE values R_CORCHETE
    (96) interface_assi -> . L_LLAVE atributos_assi R_LLAVE

    NOT             shift and go to state 60
    ENTERO          shift and go to state 66
    DECIMAL         shift and go to state 67
    CADENA          shift and go to state 68
    LITERAL         shift and go to state 69
    L_PAREN         shift and go to state 65
    L_CORCHETE      shift and go to state 73
    L_LLAVE         shift and go to state 74

    a                              shift and go to state 203
    b                              shift and go to state 58
    c                              shift and go to state 59
    d                              shift and go to state 61
    e                              shift and go to state 62
    f                              shift and go to state 63
    g                              shift and go to state 64
    call_function_pro              shift and go to state 70
    array_pro                      shift and go to state 71
    interface_assi                 shift and go to state 72

state 187

    (42) assignacion_instruction -> LITERAL COLON type IGUAL a .
    (64) a -> a . OR b

    COMA            reduce using rule 42 (assignacion_instruction -> LITERAL COLON type IGUAL a .)
    SEMI_COLON      reduce using rule 42 (assignacion_instruction -> LITERAL COLON type IGUAL a .)
    CONSOLE         reduce using rule 42 (assignacion_instruction -> LITERAL COLON type IGUAL a .)
    LET             reduce using rule 42 (assignacion_instruction -> LITERAL COLON type IGUAL a .)
    LITERAL         reduce using rule 42 (assignacion_instruction -> LITERAL COLON type IGUAL a .)
    IF              reduce using rule 42 (assignacion_instruction -> LITERAL COLON type IGUAL a .)
    WHILE           reduce using rule 42 (assignacion_instruction -> LITERAL COLON type IGUAL a .)
    FOR             reduce using rule 42 (assignacion_instruction -> LITERAL COLON type IGUAL a .)
    INTERFACE       reduce using rule 42 (assignacion_instruction -> LITERAL COLON type IGUAL a .)
    CONTINUE        reduce using rule 42 (assignacion_instruction -> LITERAL COLON type IGUAL a .)
    BREAK           reduce using rule 42 (assignacion_instruction -> LITERAL COLON type IGUAL a .)
    RETURN          reduce using rule 42 (assignacion_instruction -> LITERAL COLON type IGUAL a .)
    FUNCTION        reduce using rule 42 (assignacion_instruction -> LITERAL COLON type IGUAL a .)
    $end            reduce using rule 42 (assignacion_instruction -> LITERAL COLON type IGUAL a .)
    R_LLAVE         reduce using rule 42 (assignacion_instruction -> LITERAL COLON type IGUAL a .)
    OR              shift and go to state 94


state 188

    (51) if_pro -> IF L_PAREN a R_PAREN L_LLAVE instrucciones . R_LLAVE else_pro
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . console_pro sc
    (5) instruccion -> . declaration_instruction sc
    (6) instruccion -> . assig_pro sc
    (7) instruccion -> . if_pro sc
    (8) instruccion -> . while_pro sc
    (9) instruccion -> . for_pro sc
    (10) instruccion -> . for_each_pro sc
    (11) instruccion -> . interface_pro sc
    (12) instruccion -> . continue_pro sc
    (13) instruccion -> . break_pro sc
    (14) instruccion -> . return_pro sc
    (15) instruccion -> . function_pro sc
    (16) instruccion -> . call_function_pro sc
    (17) instruccion -> . sumadores sc
    (61) console_pro -> . CONSOLE PUNTO LOG L_PAREN expresion R_PAREN
    (39) declaration_instruction -> . LET declaracion_list
    (50) assig_pro -> . LITERAL IGUAL a
    (51) if_pro -> . IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro
    (55) while_pro -> . WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE
    (56) for_pro -> . FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (57) for_pro -> . FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (58) for_each_pro -> . FOR L_PAREN for_each_dec R_PAREN L_LLAVE instrucciones R_LLAVE
    (34) interface_pro -> . INTERFACE LITERAL L_LLAVE interface_atributos R_LLAVE
    (30) continue_pro -> . CONTINUE
    (31) break_pro -> . BREAK
    (32) return_pro -> . RETURN
    (33) return_pro -> . RETURN a
    (20) function_pro -> . FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (21) function_pro -> . FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE
    (22) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (23) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (94) sumadores -> . LITERAL MAS MAS
    (95) sumadores -> . LITERAL MENOS MENOS

    R_LLAVE         shift and go to state 204
    CONSOLE         shift and go to state 18
    LET             shift and go to state 19
    LITERAL         shift and go to state 20
    IF              shift and go to state 21
    WHILE           shift and go to state 22
    FOR             shift and go to state 23
    INTERFACE       shift and go to state 24
    CONTINUE        shift and go to state 25
    BREAK           shift and go to state 26
    RETURN          shift and go to state 27
    FUNCTION        shift and go to state 28

    instruccion                    shift and go to state 29
    console_pro                    shift and go to state 4
    declaration_instruction        shift and go to state 5
    assig_pro                      shift and go to state 6
    if_pro                         shift and go to state 7
    while_pro                      shift and go to state 8
    for_pro                        shift and go to state 9
    for_each_pro                   shift and go to state 10
    interface_pro                  shift and go to state 11
    continue_pro                   shift and go to state 12
    break_pro                      shift and go to state 13
    return_pro                     shift and go to state 14
    function_pro                   shift and go to state 15
    call_function_pro              shift and go to state 16
    sumadores                      shift and go to state 17

state 189

    (55) while_pro -> WHILE L_PAREN a R_PAREN L_LLAVE instrucciones . R_LLAVE
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . console_pro sc
    (5) instruccion -> . declaration_instruction sc
    (6) instruccion -> . assig_pro sc
    (7) instruccion -> . if_pro sc
    (8) instruccion -> . while_pro sc
    (9) instruccion -> . for_pro sc
    (10) instruccion -> . for_each_pro sc
    (11) instruccion -> . interface_pro sc
    (12) instruccion -> . continue_pro sc
    (13) instruccion -> . break_pro sc
    (14) instruccion -> . return_pro sc
    (15) instruccion -> . function_pro sc
    (16) instruccion -> . call_function_pro sc
    (17) instruccion -> . sumadores sc
    (61) console_pro -> . CONSOLE PUNTO LOG L_PAREN expresion R_PAREN
    (39) declaration_instruction -> . LET declaracion_list
    (50) assig_pro -> . LITERAL IGUAL a
    (51) if_pro -> . IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro
    (55) while_pro -> . WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE
    (56) for_pro -> . FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (57) for_pro -> . FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (58) for_each_pro -> . FOR L_PAREN for_each_dec R_PAREN L_LLAVE instrucciones R_LLAVE
    (34) interface_pro -> . INTERFACE LITERAL L_LLAVE interface_atributos R_LLAVE
    (30) continue_pro -> . CONTINUE
    (31) break_pro -> . BREAK
    (32) return_pro -> . RETURN
    (33) return_pro -> . RETURN a
    (20) function_pro -> . FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (21) function_pro -> . FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE
    (22) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (23) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (94) sumadores -> . LITERAL MAS MAS
    (95) sumadores -> . LITERAL MENOS MENOS

    R_LLAVE         shift and go to state 205
    CONSOLE         shift and go to state 18
    LET             shift and go to state 19
    LITERAL         shift and go to state 20
    IF              shift and go to state 21
    WHILE           shift and go to state 22
    FOR             shift and go to state 23
    INTERFACE       shift and go to state 24
    CONTINUE        shift and go to state 25
    BREAK           shift and go to state 26
    RETURN          shift and go to state 27
    FUNCTION        shift and go to state 28

    instruccion                    shift and go to state 29
    console_pro                    shift and go to state 4
    declaration_instruction        shift and go to state 5
    assig_pro                      shift and go to state 6
    if_pro                         shift and go to state 7
    while_pro                      shift and go to state 8
    for_pro                        shift and go to state 9
    for_each_pro                   shift and go to state 10
    interface_pro                  shift and go to state 11
    continue_pro                   shift and go to state 12
    break_pro                      shift and go to state 13
    return_pro                     shift and go to state 14
    function_pro                   shift and go to state 15
    call_function_pro              shift and go to state 16
    sumadores                      shift and go to state 17

state 190

    (56) for_pro -> FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON . assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (50) assig_pro -> . LITERAL IGUAL a

    LITERAL         shift and go to state 92

    assig_pro                      shift and go to state 206

state 191

    (57) for_pro -> FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON . assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (50) assig_pro -> . LITERAL IGUAL a

    LITERAL         shift and go to state 92

    assig_pro                      shift and go to state 207

state 192

    (58) for_each_pro -> FOR L_PAREN for_each_dec R_PAREN L_LLAVE instrucciones . R_LLAVE
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . console_pro sc
    (5) instruccion -> . declaration_instruction sc
    (6) instruccion -> . assig_pro sc
    (7) instruccion -> . if_pro sc
    (8) instruccion -> . while_pro sc
    (9) instruccion -> . for_pro sc
    (10) instruccion -> . for_each_pro sc
    (11) instruccion -> . interface_pro sc
    (12) instruccion -> . continue_pro sc
    (13) instruccion -> . break_pro sc
    (14) instruccion -> . return_pro sc
    (15) instruccion -> . function_pro sc
    (16) instruccion -> . call_function_pro sc
    (17) instruccion -> . sumadores sc
    (61) console_pro -> . CONSOLE PUNTO LOG L_PAREN expresion R_PAREN
    (39) declaration_instruction -> . LET declaracion_list
    (50) assig_pro -> . LITERAL IGUAL a
    (51) if_pro -> . IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro
    (55) while_pro -> . WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE
    (56) for_pro -> . FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (57) for_pro -> . FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (58) for_each_pro -> . FOR L_PAREN for_each_dec R_PAREN L_LLAVE instrucciones R_LLAVE
    (34) interface_pro -> . INTERFACE LITERAL L_LLAVE interface_atributos R_LLAVE
    (30) continue_pro -> . CONTINUE
    (31) break_pro -> . BREAK
    (32) return_pro -> . RETURN
    (33) return_pro -> . RETURN a
    (20) function_pro -> . FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (21) function_pro -> . FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE
    (22) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (23) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (94) sumadores -> . LITERAL MAS MAS
    (95) sumadores -> . LITERAL MENOS MENOS

    R_LLAVE         shift and go to state 208
    CONSOLE         shift and go to state 18
    LET             shift and go to state 19
    LITERAL         shift and go to state 20
    IF              shift and go to state 21
    WHILE           shift and go to state 22
    FOR             shift and go to state 23
    INTERFACE       shift and go to state 24
    CONTINUE        shift and go to state 25
    BREAK           shift and go to state 26
    RETURN          shift and go to state 27
    FUNCTION        shift and go to state 28

    instruccion                    shift and go to state 29
    console_pro                    shift and go to state 4
    declaration_instruction        shift and go to state 5
    assig_pro                      shift and go to state 6
    if_pro                         shift and go to state 7
    while_pro                      shift and go to state 8
    for_pro                        shift and go to state 9
    for_each_pro                   shift and go to state 10
    interface_pro                  shift and go to state 11
    continue_pro                   shift and go to state 12
    break_pro                      shift and go to state 13
    return_pro                     shift and go to state 14
    function_pro                   shift and go to state 15
    call_function_pro              shift and go to state 16
    sumadores                      shift and go to state 17

state 193

    (59) for_each_dec -> LET LITERAL OF a .
    (64) a -> a . OR b

    R_PAREN         reduce using rule 59 (for_each_dec -> LET LITERAL OF a .)
    OR              shift and go to state 94


state 194

    (60) for_each_dec -> LET LITERAL COLON type . OF a
    (42) assignacion_instruction -> LITERAL COLON type . IGUAL a
    (43) assignacion_instruction -> LITERAL COLON type .

    OF              shift and go to state 209
    IGUAL           shift and go to state 166
    COMA            reduce using rule 43 (assignacion_instruction -> LITERAL COLON type .)
    SEMI_COLON      reduce using rule 43 (assignacion_instruction -> LITERAL COLON type .)


state 195

    (37) interface_atributo -> LITERAL COLON . type
    (45) type -> . NUMBER
    (46) type -> . STRING
    (47) type -> . BOOLEAN
    (48) type -> . ANY
    (49) type -> . LITERAL

    NUMBER          shift and go to state 119
    STRING          shift and go to state 120
    BOOLEAN         shift and go to state 121
    ANY             shift and go to state 122
    LITERAL         shift and go to state 117

    type                           shift and go to state 210

state 196

    (35) interface_atributos -> interface_atributos interface_atributo sc .

    R_LLAVE         reduce using rule 35 (interface_atributos -> interface_atributos interface_atributo sc .)
    LITERAL         reduce using rule 35 (interface_atributos -> interface_atributos interface_atributo sc .)


state 197

    (85) f -> g PUNTO nativeFun L_PAREN expresion . R_PAREN
    (62) expresion -> expresion . COMA a

    R_PAREN         shift and go to state 211
    COMA            shift and go to state 186


state 198

    (97) atributos_assi -> atributos_assi COMA LITERAL COLON . a
    (64) a -> . a OR b
    (65) a -> . b
    (66) b -> . b AND c
    (67) b -> . c
    (68) c -> . NOT d
    (69) c -> . d
    (70) d -> . d DISTINTO_QUE e
    (71) d -> . d MENOR_QUE e
    (72) d -> . d MENOR_IGUAL_QUE e
    (73) d -> . d MAYOR_QUE e
    (74) d -> . d MAYOR_IGUAL_QUE e
    (75) d -> . d TRIPLE_IGUAL e
    (76) d -> . e
    (77) e -> . e MAS f
    (78) e -> . e MENOS f
    (79) e -> . f
    (80) f -> . f TIMES g
    (81) f -> . f DIVIDE g
    (82) f -> . f MOD g
    (83) f -> . f POTENCIA g
    (84) f -> . g
    (85) f -> . g PUNTO nativeFun L_PAREN expresion R_PAREN
    (86) g -> . ENTERO
    (87) g -> . DECIMAL
    (88) g -> . CADENA
    (89) g -> . LITERAL
    (90) g -> . call_function_pro
    (91) g -> . array_pro
    (92) g -> . interface_assi
    (93) g -> . L_PAREN a R_PAREN
    (22) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (23) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (99) array_pro -> . L_CORCHETE values R_CORCHETE
    (96) interface_assi -> . L_LLAVE atributos_assi R_LLAVE

    NOT             shift and go to state 60
    ENTERO          shift and go to state 66
    DECIMAL         shift and go to state 67
    CADENA          shift and go to state 68
    LITERAL         shift and go to state 69
    L_PAREN         shift and go to state 65
    L_CORCHETE      shift and go to state 73
    L_LLAVE         shift and go to state 74

    a                              shift and go to state 212
    b                              shift and go to state 58
    c                              shift and go to state 59
    d                              shift and go to state 61
    e                              shift and go to state 62
    f                              shift and go to state 63
    g                              shift and go to state 64
    call_function_pro              shift and go to state 70
    array_pro                      shift and go to state 71
    interface_assi                 shift and go to state 72

state 199

    (28) parameter_pro -> LITERAL COLON type .

    R_PAREN         reduce using rule 28 (parameter_pro -> LITERAL COLON type .)
    COMA            reduce using rule 28 (parameter_pro -> LITERAL COLON type .)


state 200

    (20) function_pro -> FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE . instrucciones R_LLAVE
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . console_pro sc
    (5) instruccion -> . declaration_instruction sc
    (6) instruccion -> . assig_pro sc
    (7) instruccion -> . if_pro sc
    (8) instruccion -> . while_pro sc
    (9) instruccion -> . for_pro sc
    (10) instruccion -> . for_each_pro sc
    (11) instruccion -> . interface_pro sc
    (12) instruccion -> . continue_pro sc
    (13) instruccion -> . break_pro sc
    (14) instruccion -> . return_pro sc
    (15) instruccion -> . function_pro sc
    (16) instruccion -> . call_function_pro sc
    (17) instruccion -> . sumadores sc
    (61) console_pro -> . CONSOLE PUNTO LOG L_PAREN expresion R_PAREN
    (39) declaration_instruction -> . LET declaracion_list
    (50) assig_pro -> . LITERAL IGUAL a
    (51) if_pro -> . IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro
    (55) while_pro -> . WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE
    (56) for_pro -> . FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (57) for_pro -> . FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (58) for_each_pro -> . FOR L_PAREN for_each_dec R_PAREN L_LLAVE instrucciones R_LLAVE
    (34) interface_pro -> . INTERFACE LITERAL L_LLAVE interface_atributos R_LLAVE
    (30) continue_pro -> . CONTINUE
    (31) break_pro -> . BREAK
    (32) return_pro -> . RETURN
    (33) return_pro -> . RETURN a
    (20) function_pro -> . FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (21) function_pro -> . FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE
    (22) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (23) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (94) sumadores -> . LITERAL MAS MAS
    (95) sumadores -> . LITERAL MENOS MENOS

    CONSOLE         shift and go to state 18
    LET             shift and go to state 19
    LITERAL         shift and go to state 20
    IF              shift and go to state 21
    WHILE           shift and go to state 22
    FOR             shift and go to state 23
    INTERFACE       shift and go to state 24
    CONTINUE        shift and go to state 25
    BREAK           shift and go to state 26
    RETURN          shift and go to state 27
    FUNCTION        shift and go to state 28

    instrucciones                  shift and go to state 213
    instruccion                    shift and go to state 3
    console_pro                    shift and go to state 4
    declaration_instruction        shift and go to state 5
    assig_pro                      shift and go to state 6
    if_pro                         shift and go to state 7
    while_pro                      shift and go to state 8
    for_pro                        shift and go to state 9
    for_each_pro                   shift and go to state 10
    interface_pro                  shift and go to state 11
    continue_pro                   shift and go to state 12
    break_pro                      shift and go to state 13
    return_pro                     shift and go to state 14
    function_pro                   shift and go to state 15
    call_function_pro              shift and go to state 16
    sumadores                      shift and go to state 17

state 201

    (26) parameters_pro -> parameters_pro COMA parameter_pro .

    R_PAREN         reduce using rule 26 (parameters_pro -> parameters_pro COMA parameter_pro .)
    COMA            reduce using rule 26 (parameters_pro -> parameters_pro COMA parameter_pro .)


state 202

    (21) function_pro -> FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE instrucciones . R_LLAVE
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . console_pro sc
    (5) instruccion -> . declaration_instruction sc
    (6) instruccion -> . assig_pro sc
    (7) instruccion -> . if_pro sc
    (8) instruccion -> . while_pro sc
    (9) instruccion -> . for_pro sc
    (10) instruccion -> . for_each_pro sc
    (11) instruccion -> . interface_pro sc
    (12) instruccion -> . continue_pro sc
    (13) instruccion -> . break_pro sc
    (14) instruccion -> . return_pro sc
    (15) instruccion -> . function_pro sc
    (16) instruccion -> . call_function_pro sc
    (17) instruccion -> . sumadores sc
    (61) console_pro -> . CONSOLE PUNTO LOG L_PAREN expresion R_PAREN
    (39) declaration_instruction -> . LET declaracion_list
    (50) assig_pro -> . LITERAL IGUAL a
    (51) if_pro -> . IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro
    (55) while_pro -> . WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE
    (56) for_pro -> . FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (57) for_pro -> . FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (58) for_each_pro -> . FOR L_PAREN for_each_dec R_PAREN L_LLAVE instrucciones R_LLAVE
    (34) interface_pro -> . INTERFACE LITERAL L_LLAVE interface_atributos R_LLAVE
    (30) continue_pro -> . CONTINUE
    (31) break_pro -> . BREAK
    (32) return_pro -> . RETURN
    (33) return_pro -> . RETURN a
    (20) function_pro -> . FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (21) function_pro -> . FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE
    (22) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (23) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (94) sumadores -> . LITERAL MAS MAS
    (95) sumadores -> . LITERAL MENOS MENOS

    R_LLAVE         shift and go to state 214
    CONSOLE         shift and go to state 18
    LET             shift and go to state 19
    LITERAL         shift and go to state 20
    IF              shift and go to state 21
    WHILE           shift and go to state 22
    FOR             shift and go to state 23
    INTERFACE       shift and go to state 24
    CONTINUE        shift and go to state 25
    BREAK           shift and go to state 26
    RETURN          shift and go to state 27
    FUNCTION        shift and go to state 28

    instruccion                    shift and go to state 29
    console_pro                    shift and go to state 4
    declaration_instruction        shift and go to state 5
    assig_pro                      shift and go to state 6
    if_pro                         shift and go to state 7
    while_pro                      shift and go to state 8
    for_pro                        shift and go to state 9
    for_each_pro                   shift and go to state 10
    interface_pro                  shift and go to state 11
    continue_pro                   shift and go to state 12
    break_pro                      shift and go to state 13
    return_pro                     shift and go to state 14
    function_pro                   shift and go to state 15
    call_function_pro              shift and go to state 16
    sumadores                      shift and go to state 17

state 203

    (62) expresion -> expresion COMA a .
    (64) a -> a . OR b

    R_PAREN         reduce using rule 62 (expresion -> expresion COMA a .)
    COMA            reduce using rule 62 (expresion -> expresion COMA a .)
    OR              shift and go to state 94


state 204

    (51) if_pro -> IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE . else_pro
    (52) else_pro -> . ELSE IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro
    (53) else_pro -> . ELSE L_LLAVE instrucciones R_LLAVE
    (54) else_pro -> .

    ELSE            shift and go to state 216
    SEMI_COLON      reduce using rule 54 (else_pro -> .)
    CONSOLE         reduce using rule 54 (else_pro -> .)
    LET             reduce using rule 54 (else_pro -> .)
    LITERAL         reduce using rule 54 (else_pro -> .)
    IF              reduce using rule 54 (else_pro -> .)
    WHILE           reduce using rule 54 (else_pro -> .)
    FOR             reduce using rule 54 (else_pro -> .)
    INTERFACE       reduce using rule 54 (else_pro -> .)
    CONTINUE        reduce using rule 54 (else_pro -> .)
    BREAK           reduce using rule 54 (else_pro -> .)
    RETURN          reduce using rule 54 (else_pro -> .)
    FUNCTION        reduce using rule 54 (else_pro -> .)
    $end            reduce using rule 54 (else_pro -> .)
    R_LLAVE         reduce using rule 54 (else_pro -> .)

    else_pro                       shift and go to state 215

state 205

    (55) while_pro -> WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE .

    SEMI_COLON      reduce using rule 55 (while_pro -> WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE .)
    CONSOLE         reduce using rule 55 (while_pro -> WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE .)
    LET             reduce using rule 55 (while_pro -> WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE .)
    LITERAL         reduce using rule 55 (while_pro -> WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE .)
    IF              reduce using rule 55 (while_pro -> WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE .)
    WHILE           reduce using rule 55 (while_pro -> WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE .)
    FOR             reduce using rule 55 (while_pro -> WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE .)
    INTERFACE       reduce using rule 55 (while_pro -> WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE .)
    CONTINUE        reduce using rule 55 (while_pro -> WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE .)
    BREAK           reduce using rule 55 (while_pro -> WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE .)
    RETURN          reduce using rule 55 (while_pro -> WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE .)
    FUNCTION        reduce using rule 55 (while_pro -> WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE .)
    $end            reduce using rule 55 (while_pro -> WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE .)
    R_LLAVE         reduce using rule 55 (while_pro -> WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE .)


state 206

    (56) for_pro -> FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON assig_pro . R_PAREN L_LLAVE instrucciones R_LLAVE

    R_PAREN         shift and go to state 217


state 207

    (57) for_pro -> FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON assig_pro . R_PAREN L_LLAVE instrucciones R_LLAVE

    R_PAREN         shift and go to state 218


state 208

    (58) for_each_pro -> FOR L_PAREN for_each_dec R_PAREN L_LLAVE instrucciones R_LLAVE .

    SEMI_COLON      reduce using rule 58 (for_each_pro -> FOR L_PAREN for_each_dec R_PAREN L_LLAVE instrucciones R_LLAVE .)
    CONSOLE         reduce using rule 58 (for_each_pro -> FOR L_PAREN for_each_dec R_PAREN L_LLAVE instrucciones R_LLAVE .)
    LET             reduce using rule 58 (for_each_pro -> FOR L_PAREN for_each_dec R_PAREN L_LLAVE instrucciones R_LLAVE .)
    LITERAL         reduce using rule 58 (for_each_pro -> FOR L_PAREN for_each_dec R_PAREN L_LLAVE instrucciones R_LLAVE .)
    IF              reduce using rule 58 (for_each_pro -> FOR L_PAREN for_each_dec R_PAREN L_LLAVE instrucciones R_LLAVE .)
    WHILE           reduce using rule 58 (for_each_pro -> FOR L_PAREN for_each_dec R_PAREN L_LLAVE instrucciones R_LLAVE .)
    FOR             reduce using rule 58 (for_each_pro -> FOR L_PAREN for_each_dec R_PAREN L_LLAVE instrucciones R_LLAVE .)
    INTERFACE       reduce using rule 58 (for_each_pro -> FOR L_PAREN for_each_dec R_PAREN L_LLAVE instrucciones R_LLAVE .)
    CONTINUE        reduce using rule 58 (for_each_pro -> FOR L_PAREN for_each_dec R_PAREN L_LLAVE instrucciones R_LLAVE .)
    BREAK           reduce using rule 58 (for_each_pro -> FOR L_PAREN for_each_dec R_PAREN L_LLAVE instrucciones R_LLAVE .)
    RETURN          reduce using rule 58 (for_each_pro -> FOR L_PAREN for_each_dec R_PAREN L_LLAVE instrucciones R_LLAVE .)
    FUNCTION        reduce using rule 58 (for_each_pro -> FOR L_PAREN for_each_dec R_PAREN L_LLAVE instrucciones R_LLAVE .)
    $end            reduce using rule 58 (for_each_pro -> FOR L_PAREN for_each_dec R_PAREN L_LLAVE instrucciones R_LLAVE .)
    R_LLAVE         reduce using rule 58 (for_each_pro -> FOR L_PAREN for_each_dec R_PAREN L_LLAVE instrucciones R_LLAVE .)


state 209

    (60) for_each_dec -> LET LITERAL COLON type OF . a
    (64) a -> . a OR b
    (65) a -> . b
    (66) b -> . b AND c
    (67) b -> . c
    (68) c -> . NOT d
    (69) c -> . d
    (70) d -> . d DISTINTO_QUE e
    (71) d -> . d MENOR_QUE e
    (72) d -> . d MENOR_IGUAL_QUE e
    (73) d -> . d MAYOR_QUE e
    (74) d -> . d MAYOR_IGUAL_QUE e
    (75) d -> . d TRIPLE_IGUAL e
    (76) d -> . e
    (77) e -> . e MAS f
    (78) e -> . e MENOS f
    (79) e -> . f
    (80) f -> . f TIMES g
    (81) f -> . f DIVIDE g
    (82) f -> . f MOD g
    (83) f -> . f POTENCIA g
    (84) f -> . g
    (85) f -> . g PUNTO nativeFun L_PAREN expresion R_PAREN
    (86) g -> . ENTERO
    (87) g -> . DECIMAL
    (88) g -> . CADENA
    (89) g -> . LITERAL
    (90) g -> . call_function_pro
    (91) g -> . array_pro
    (92) g -> . interface_assi
    (93) g -> . L_PAREN a R_PAREN
    (22) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (23) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (99) array_pro -> . L_CORCHETE values R_CORCHETE
    (96) interface_assi -> . L_LLAVE atributos_assi R_LLAVE

    NOT             shift and go to state 60
    ENTERO          shift and go to state 66
    DECIMAL         shift and go to state 67
    CADENA          shift and go to state 68
    LITERAL         shift and go to state 69
    L_PAREN         shift and go to state 65
    L_CORCHETE      shift and go to state 73
    L_LLAVE         shift and go to state 74

    a                              shift and go to state 219
    b                              shift and go to state 58
    c                              shift and go to state 59
    d                              shift and go to state 61
    e                              shift and go to state 62
    f                              shift and go to state 63
    g                              shift and go to state 64
    call_function_pro              shift and go to state 70
    array_pro                      shift and go to state 71
    interface_assi                 shift and go to state 72

state 210

    (37) interface_atributo -> LITERAL COLON type .

    SEMI_COLON      reduce using rule 37 (interface_atributo -> LITERAL COLON type .)
    R_LLAVE         reduce using rule 37 (interface_atributo -> LITERAL COLON type .)
    LITERAL         reduce using rule 37 (interface_atributo -> LITERAL COLON type .)


state 211

    (85) f -> g PUNTO nativeFun L_PAREN expresion R_PAREN .

    TIMES           reduce using rule 85 (f -> g PUNTO nativeFun L_PAREN expresion R_PAREN .)
    DIVIDE          reduce using rule 85 (f -> g PUNTO nativeFun L_PAREN expresion R_PAREN .)
    MOD             reduce using rule 85 (f -> g PUNTO nativeFun L_PAREN expresion R_PAREN .)
    POTENCIA        reduce using rule 85 (f -> g PUNTO nativeFun L_PAREN expresion R_PAREN .)
    MAS             reduce using rule 85 (f -> g PUNTO nativeFun L_PAREN expresion R_PAREN .)
    MENOS           reduce using rule 85 (f -> g PUNTO nativeFun L_PAREN expresion R_PAREN .)
    DISTINTO_QUE    reduce using rule 85 (f -> g PUNTO nativeFun L_PAREN expresion R_PAREN .)
    MENOR_QUE       reduce using rule 85 (f -> g PUNTO nativeFun L_PAREN expresion R_PAREN .)
    MENOR_IGUAL_QUE reduce using rule 85 (f -> g PUNTO nativeFun L_PAREN expresion R_PAREN .)
    MAYOR_QUE       reduce using rule 85 (f -> g PUNTO nativeFun L_PAREN expresion R_PAREN .)
    MAYOR_IGUAL_QUE reduce using rule 85 (f -> g PUNTO nativeFun L_PAREN expresion R_PAREN .)
    TRIPLE_IGUAL    reduce using rule 85 (f -> g PUNTO nativeFun L_PAREN expresion R_PAREN .)
    AND             reduce using rule 85 (f -> g PUNTO nativeFun L_PAREN expresion R_PAREN .)
    OR              reduce using rule 85 (f -> g PUNTO nativeFun L_PAREN expresion R_PAREN .)
    SEMI_COLON      reduce using rule 85 (f -> g PUNTO nativeFun L_PAREN expresion R_PAREN .)
    CONSOLE         reduce using rule 85 (f -> g PUNTO nativeFun L_PAREN expresion R_PAREN .)
    LET             reduce using rule 85 (f -> g PUNTO nativeFun L_PAREN expresion R_PAREN .)
    LITERAL         reduce using rule 85 (f -> g PUNTO nativeFun L_PAREN expresion R_PAREN .)
    IF              reduce using rule 85 (f -> g PUNTO nativeFun L_PAREN expresion R_PAREN .)
    WHILE           reduce using rule 85 (f -> g PUNTO nativeFun L_PAREN expresion R_PAREN .)
    FOR             reduce using rule 85 (f -> g PUNTO nativeFun L_PAREN expresion R_PAREN .)
    INTERFACE       reduce using rule 85 (f -> g PUNTO nativeFun L_PAREN expresion R_PAREN .)
    CONTINUE        reduce using rule 85 (f -> g PUNTO nativeFun L_PAREN expresion R_PAREN .)
    BREAK           reduce using rule 85 (f -> g PUNTO nativeFun L_PAREN expresion R_PAREN .)
    RETURN          reduce using rule 85 (f -> g PUNTO nativeFun L_PAREN expresion R_PAREN .)
    FUNCTION        reduce using rule 85 (f -> g PUNTO nativeFun L_PAREN expresion R_PAREN .)
    $end            reduce using rule 85 (f -> g PUNTO nativeFun L_PAREN expresion R_PAREN .)
    R_LLAVE         reduce using rule 85 (f -> g PUNTO nativeFun L_PAREN expresion R_PAREN .)
    R_PAREN         reduce using rule 85 (f -> g PUNTO nativeFun L_PAREN expresion R_PAREN .)
    COMA            reduce using rule 85 (f -> g PUNTO nativeFun L_PAREN expresion R_PAREN .)
    R_CORCHETE      reduce using rule 85 (f -> g PUNTO nativeFun L_PAREN expresion R_PAREN .)


state 212

    (97) atributos_assi -> atributos_assi COMA LITERAL COLON a .
    (64) a -> a . OR b

    R_LLAVE         reduce using rule 97 (atributos_assi -> atributos_assi COMA LITERAL COLON a .)
    COMA            reduce using rule 97 (atributos_assi -> atributos_assi COMA LITERAL COLON a .)
    OR              shift and go to state 94


state 213

    (20) function_pro -> FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones . R_LLAVE
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . console_pro sc
    (5) instruccion -> . declaration_instruction sc
    (6) instruccion -> . assig_pro sc
    (7) instruccion -> . if_pro sc
    (8) instruccion -> . while_pro sc
    (9) instruccion -> . for_pro sc
    (10) instruccion -> . for_each_pro sc
    (11) instruccion -> . interface_pro sc
    (12) instruccion -> . continue_pro sc
    (13) instruccion -> . break_pro sc
    (14) instruccion -> . return_pro sc
    (15) instruccion -> . function_pro sc
    (16) instruccion -> . call_function_pro sc
    (17) instruccion -> . sumadores sc
    (61) console_pro -> . CONSOLE PUNTO LOG L_PAREN expresion R_PAREN
    (39) declaration_instruction -> . LET declaracion_list
    (50) assig_pro -> . LITERAL IGUAL a
    (51) if_pro -> . IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro
    (55) while_pro -> . WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE
    (56) for_pro -> . FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (57) for_pro -> . FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (58) for_each_pro -> . FOR L_PAREN for_each_dec R_PAREN L_LLAVE instrucciones R_LLAVE
    (34) interface_pro -> . INTERFACE LITERAL L_LLAVE interface_atributos R_LLAVE
    (30) continue_pro -> . CONTINUE
    (31) break_pro -> . BREAK
    (32) return_pro -> . RETURN
    (33) return_pro -> . RETURN a
    (20) function_pro -> . FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (21) function_pro -> . FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE
    (22) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (23) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (94) sumadores -> . LITERAL MAS MAS
    (95) sumadores -> . LITERAL MENOS MENOS

    R_LLAVE         shift and go to state 220
    CONSOLE         shift and go to state 18
    LET             shift and go to state 19
    LITERAL         shift and go to state 20
    IF              shift and go to state 21
    WHILE           shift and go to state 22
    FOR             shift and go to state 23
    INTERFACE       shift and go to state 24
    CONTINUE        shift and go to state 25
    BREAK           shift and go to state 26
    RETURN          shift and go to state 27
    FUNCTION        shift and go to state 28

    instruccion                    shift and go to state 29
    console_pro                    shift and go to state 4
    declaration_instruction        shift and go to state 5
    assig_pro                      shift and go to state 6
    if_pro                         shift and go to state 7
    while_pro                      shift and go to state 8
    for_pro                        shift and go to state 9
    for_each_pro                   shift and go to state 10
    interface_pro                  shift and go to state 11
    continue_pro                   shift and go to state 12
    break_pro                      shift and go to state 13
    return_pro                     shift and go to state 14
    function_pro                   shift and go to state 15
    call_function_pro              shift and go to state 16
    sumadores                      shift and go to state 17

state 214

    (21) function_pro -> FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE .

    SEMI_COLON      reduce using rule 21 (function_pro -> FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE .)
    CONSOLE         reduce using rule 21 (function_pro -> FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE .)
    LET             reduce using rule 21 (function_pro -> FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE .)
    LITERAL         reduce using rule 21 (function_pro -> FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE .)
    IF              reduce using rule 21 (function_pro -> FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE .)
    WHILE           reduce using rule 21 (function_pro -> FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE .)
    FOR             reduce using rule 21 (function_pro -> FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE .)
    INTERFACE       reduce using rule 21 (function_pro -> FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE .)
    CONTINUE        reduce using rule 21 (function_pro -> FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE .)
    BREAK           reduce using rule 21 (function_pro -> FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE .)
    RETURN          reduce using rule 21 (function_pro -> FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE .)
    FUNCTION        reduce using rule 21 (function_pro -> FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE .)
    $end            reduce using rule 21 (function_pro -> FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE .)
    R_LLAVE         reduce using rule 21 (function_pro -> FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE .)


state 215

    (51) if_pro -> IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .

    SEMI_COLON      reduce using rule 51 (if_pro -> IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    CONSOLE         reduce using rule 51 (if_pro -> IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    LET             reduce using rule 51 (if_pro -> IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    LITERAL         reduce using rule 51 (if_pro -> IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    IF              reduce using rule 51 (if_pro -> IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    WHILE           reduce using rule 51 (if_pro -> IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    FOR             reduce using rule 51 (if_pro -> IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    INTERFACE       reduce using rule 51 (if_pro -> IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    CONTINUE        reduce using rule 51 (if_pro -> IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    BREAK           reduce using rule 51 (if_pro -> IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    RETURN          reduce using rule 51 (if_pro -> IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    FUNCTION        reduce using rule 51 (if_pro -> IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    $end            reduce using rule 51 (if_pro -> IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    R_LLAVE         reduce using rule 51 (if_pro -> IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)


state 216

    (52) else_pro -> ELSE . IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro
    (53) else_pro -> ELSE . L_LLAVE instrucciones R_LLAVE

    IF              shift and go to state 221
    L_LLAVE         shift and go to state 222


state 217

    (56) for_pro -> FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON assig_pro R_PAREN . L_LLAVE instrucciones R_LLAVE

    L_LLAVE         shift and go to state 223


state 218

    (57) for_pro -> FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON assig_pro R_PAREN . L_LLAVE instrucciones R_LLAVE

    L_LLAVE         shift and go to state 224


state 219

    (60) for_each_dec -> LET LITERAL COLON type OF a .
    (64) a -> a . OR b

    R_PAREN         reduce using rule 60 (for_each_dec -> LET LITERAL COLON type OF a .)
    OR              shift and go to state 94


state 220

    (20) function_pro -> FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE .

    SEMI_COLON      reduce using rule 20 (function_pro -> FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    CONSOLE         reduce using rule 20 (function_pro -> FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    LET             reduce using rule 20 (function_pro -> FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    LITERAL         reduce using rule 20 (function_pro -> FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    IF              reduce using rule 20 (function_pro -> FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    WHILE           reduce using rule 20 (function_pro -> FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    FOR             reduce using rule 20 (function_pro -> FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    INTERFACE       reduce using rule 20 (function_pro -> FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    CONTINUE        reduce using rule 20 (function_pro -> FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    BREAK           reduce using rule 20 (function_pro -> FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    RETURN          reduce using rule 20 (function_pro -> FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    FUNCTION        reduce using rule 20 (function_pro -> FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    $end            reduce using rule 20 (function_pro -> FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    R_LLAVE         reduce using rule 20 (function_pro -> FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)


state 221

    (52) else_pro -> ELSE IF . L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro

    L_PAREN         shift and go to state 225


state 222

    (53) else_pro -> ELSE L_LLAVE . instrucciones R_LLAVE
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . console_pro sc
    (5) instruccion -> . declaration_instruction sc
    (6) instruccion -> . assig_pro sc
    (7) instruccion -> . if_pro sc
    (8) instruccion -> . while_pro sc
    (9) instruccion -> . for_pro sc
    (10) instruccion -> . for_each_pro sc
    (11) instruccion -> . interface_pro sc
    (12) instruccion -> . continue_pro sc
    (13) instruccion -> . break_pro sc
    (14) instruccion -> . return_pro sc
    (15) instruccion -> . function_pro sc
    (16) instruccion -> . call_function_pro sc
    (17) instruccion -> . sumadores sc
    (61) console_pro -> . CONSOLE PUNTO LOG L_PAREN expresion R_PAREN
    (39) declaration_instruction -> . LET declaracion_list
    (50) assig_pro -> . LITERAL IGUAL a
    (51) if_pro -> . IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro
    (55) while_pro -> . WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE
    (56) for_pro -> . FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (57) for_pro -> . FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (58) for_each_pro -> . FOR L_PAREN for_each_dec R_PAREN L_LLAVE instrucciones R_LLAVE
    (34) interface_pro -> . INTERFACE LITERAL L_LLAVE interface_atributos R_LLAVE
    (30) continue_pro -> . CONTINUE
    (31) break_pro -> . BREAK
    (32) return_pro -> . RETURN
    (33) return_pro -> . RETURN a
    (20) function_pro -> . FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (21) function_pro -> . FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE
    (22) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (23) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (94) sumadores -> . LITERAL MAS MAS
    (95) sumadores -> . LITERAL MENOS MENOS

    CONSOLE         shift and go to state 18
    LET             shift and go to state 19
    LITERAL         shift and go to state 20
    IF              shift and go to state 21
    WHILE           shift and go to state 22
    FOR             shift and go to state 23
    INTERFACE       shift and go to state 24
    CONTINUE        shift and go to state 25
    BREAK           shift and go to state 26
    RETURN          shift and go to state 27
    FUNCTION        shift and go to state 28

    instrucciones                  shift and go to state 226
    instruccion                    shift and go to state 3
    console_pro                    shift and go to state 4
    declaration_instruction        shift and go to state 5
    assig_pro                      shift and go to state 6
    if_pro                         shift and go to state 7
    while_pro                      shift and go to state 8
    for_pro                        shift and go to state 9
    for_each_pro                   shift and go to state 10
    interface_pro                  shift and go to state 11
    continue_pro                   shift and go to state 12
    break_pro                      shift and go to state 13
    return_pro                     shift and go to state 14
    function_pro                   shift and go to state 15
    call_function_pro              shift and go to state 16
    sumadores                      shift and go to state 17

state 223

    (56) for_pro -> FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE . instrucciones R_LLAVE
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . console_pro sc
    (5) instruccion -> . declaration_instruction sc
    (6) instruccion -> . assig_pro sc
    (7) instruccion -> . if_pro sc
    (8) instruccion -> . while_pro sc
    (9) instruccion -> . for_pro sc
    (10) instruccion -> . for_each_pro sc
    (11) instruccion -> . interface_pro sc
    (12) instruccion -> . continue_pro sc
    (13) instruccion -> . break_pro sc
    (14) instruccion -> . return_pro sc
    (15) instruccion -> . function_pro sc
    (16) instruccion -> . call_function_pro sc
    (17) instruccion -> . sumadores sc
    (61) console_pro -> . CONSOLE PUNTO LOG L_PAREN expresion R_PAREN
    (39) declaration_instruction -> . LET declaracion_list
    (50) assig_pro -> . LITERAL IGUAL a
    (51) if_pro -> . IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro
    (55) while_pro -> . WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE
    (56) for_pro -> . FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (57) for_pro -> . FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (58) for_each_pro -> . FOR L_PAREN for_each_dec R_PAREN L_LLAVE instrucciones R_LLAVE
    (34) interface_pro -> . INTERFACE LITERAL L_LLAVE interface_atributos R_LLAVE
    (30) continue_pro -> . CONTINUE
    (31) break_pro -> . BREAK
    (32) return_pro -> . RETURN
    (33) return_pro -> . RETURN a
    (20) function_pro -> . FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (21) function_pro -> . FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE
    (22) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (23) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (94) sumadores -> . LITERAL MAS MAS
    (95) sumadores -> . LITERAL MENOS MENOS

    CONSOLE         shift and go to state 18
    LET             shift and go to state 19
    LITERAL         shift and go to state 20
    IF              shift and go to state 21
    WHILE           shift and go to state 22
    FOR             shift and go to state 23
    INTERFACE       shift and go to state 24
    CONTINUE        shift and go to state 25
    BREAK           shift and go to state 26
    RETURN          shift and go to state 27
    FUNCTION        shift and go to state 28

    declaration_instruction        shift and go to state 5
    assig_pro                      shift and go to state 6
    instrucciones                  shift and go to state 227
    instruccion                    shift and go to state 3
    console_pro                    shift and go to state 4
    if_pro                         shift and go to state 7
    while_pro                      shift and go to state 8
    for_pro                        shift and go to state 9
    for_each_pro                   shift and go to state 10
    interface_pro                  shift and go to state 11
    continue_pro                   shift and go to state 12
    break_pro                      shift and go to state 13
    return_pro                     shift and go to state 14
    function_pro                   shift and go to state 15
    call_function_pro              shift and go to state 16
    sumadores                      shift and go to state 17

state 224

    (57) for_pro -> FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE . instrucciones R_LLAVE
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . console_pro sc
    (5) instruccion -> . declaration_instruction sc
    (6) instruccion -> . assig_pro sc
    (7) instruccion -> . if_pro sc
    (8) instruccion -> . while_pro sc
    (9) instruccion -> . for_pro sc
    (10) instruccion -> . for_each_pro sc
    (11) instruccion -> . interface_pro sc
    (12) instruccion -> . continue_pro sc
    (13) instruccion -> . break_pro sc
    (14) instruccion -> . return_pro sc
    (15) instruccion -> . function_pro sc
    (16) instruccion -> . call_function_pro sc
    (17) instruccion -> . sumadores sc
    (61) console_pro -> . CONSOLE PUNTO LOG L_PAREN expresion R_PAREN
    (39) declaration_instruction -> . LET declaracion_list
    (50) assig_pro -> . LITERAL IGUAL a
    (51) if_pro -> . IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro
    (55) while_pro -> . WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE
    (56) for_pro -> . FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (57) for_pro -> . FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (58) for_each_pro -> . FOR L_PAREN for_each_dec R_PAREN L_LLAVE instrucciones R_LLAVE
    (34) interface_pro -> . INTERFACE LITERAL L_LLAVE interface_atributos R_LLAVE
    (30) continue_pro -> . CONTINUE
    (31) break_pro -> . BREAK
    (32) return_pro -> . RETURN
    (33) return_pro -> . RETURN a
    (20) function_pro -> . FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (21) function_pro -> . FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE
    (22) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (23) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (94) sumadores -> . LITERAL MAS MAS
    (95) sumadores -> . LITERAL MENOS MENOS

    CONSOLE         shift and go to state 18
    LET             shift and go to state 19
    LITERAL         shift and go to state 20
    IF              shift and go to state 21
    WHILE           shift and go to state 22
    FOR             shift and go to state 23
    INTERFACE       shift and go to state 24
    CONTINUE        shift and go to state 25
    BREAK           shift and go to state 26
    RETURN          shift and go to state 27
    FUNCTION        shift and go to state 28

    assig_pro                      shift and go to state 6
    instrucciones                  shift and go to state 228
    instruccion                    shift and go to state 3
    console_pro                    shift and go to state 4
    declaration_instruction        shift and go to state 5
    if_pro                         shift and go to state 7
    while_pro                      shift and go to state 8
    for_pro                        shift and go to state 9
    for_each_pro                   shift and go to state 10
    interface_pro                  shift and go to state 11
    continue_pro                   shift and go to state 12
    break_pro                      shift and go to state 13
    return_pro                     shift and go to state 14
    function_pro                   shift and go to state 15
    call_function_pro              shift and go to state 16
    sumadores                      shift and go to state 17

state 225

    (52) else_pro -> ELSE IF L_PAREN . a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro
    (64) a -> . a OR b
    (65) a -> . b
    (66) b -> . b AND c
    (67) b -> . c
    (68) c -> . NOT d
    (69) c -> . d
    (70) d -> . d DISTINTO_QUE e
    (71) d -> . d MENOR_QUE e
    (72) d -> . d MENOR_IGUAL_QUE e
    (73) d -> . d MAYOR_QUE e
    (74) d -> . d MAYOR_IGUAL_QUE e
    (75) d -> . d TRIPLE_IGUAL e
    (76) d -> . e
    (77) e -> . e MAS f
    (78) e -> . e MENOS f
    (79) e -> . f
    (80) f -> . f TIMES g
    (81) f -> . f DIVIDE g
    (82) f -> . f MOD g
    (83) f -> . f POTENCIA g
    (84) f -> . g
    (85) f -> . g PUNTO nativeFun L_PAREN expresion R_PAREN
    (86) g -> . ENTERO
    (87) g -> . DECIMAL
    (88) g -> . CADENA
    (89) g -> . LITERAL
    (90) g -> . call_function_pro
    (91) g -> . array_pro
    (92) g -> . interface_assi
    (93) g -> . L_PAREN a R_PAREN
    (22) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (23) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (99) array_pro -> . L_CORCHETE values R_CORCHETE
    (96) interface_assi -> . L_LLAVE atributos_assi R_LLAVE

    NOT             shift and go to state 60
    ENTERO          shift and go to state 66
    DECIMAL         shift and go to state 67
    CADENA          shift and go to state 68
    LITERAL         shift and go to state 69
    L_PAREN         shift and go to state 65
    L_CORCHETE      shift and go to state 73
    L_LLAVE         shift and go to state 74

    a                              shift and go to state 229
    b                              shift and go to state 58
    c                              shift and go to state 59
    d                              shift and go to state 61
    e                              shift and go to state 62
    f                              shift and go to state 63
    g                              shift and go to state 64
    call_function_pro              shift and go to state 70
    array_pro                      shift and go to state 71
    interface_assi                 shift and go to state 72

state 226

    (53) else_pro -> ELSE L_LLAVE instrucciones . R_LLAVE
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . console_pro sc
    (5) instruccion -> . declaration_instruction sc
    (6) instruccion -> . assig_pro sc
    (7) instruccion -> . if_pro sc
    (8) instruccion -> . while_pro sc
    (9) instruccion -> . for_pro sc
    (10) instruccion -> . for_each_pro sc
    (11) instruccion -> . interface_pro sc
    (12) instruccion -> . continue_pro sc
    (13) instruccion -> . break_pro sc
    (14) instruccion -> . return_pro sc
    (15) instruccion -> . function_pro sc
    (16) instruccion -> . call_function_pro sc
    (17) instruccion -> . sumadores sc
    (61) console_pro -> . CONSOLE PUNTO LOG L_PAREN expresion R_PAREN
    (39) declaration_instruction -> . LET declaracion_list
    (50) assig_pro -> . LITERAL IGUAL a
    (51) if_pro -> . IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro
    (55) while_pro -> . WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE
    (56) for_pro -> . FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (57) for_pro -> . FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (58) for_each_pro -> . FOR L_PAREN for_each_dec R_PAREN L_LLAVE instrucciones R_LLAVE
    (34) interface_pro -> . INTERFACE LITERAL L_LLAVE interface_atributos R_LLAVE
    (30) continue_pro -> . CONTINUE
    (31) break_pro -> . BREAK
    (32) return_pro -> . RETURN
    (33) return_pro -> . RETURN a
    (20) function_pro -> . FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (21) function_pro -> . FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE
    (22) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (23) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (94) sumadores -> . LITERAL MAS MAS
    (95) sumadores -> . LITERAL MENOS MENOS

    R_LLAVE         shift and go to state 230
    CONSOLE         shift and go to state 18
    LET             shift and go to state 19
    LITERAL         shift and go to state 20
    IF              shift and go to state 21
    WHILE           shift and go to state 22
    FOR             shift and go to state 23
    INTERFACE       shift and go to state 24
    CONTINUE        shift and go to state 25
    BREAK           shift and go to state 26
    RETURN          shift and go to state 27
    FUNCTION        shift and go to state 28

    instruccion                    shift and go to state 29
    console_pro                    shift and go to state 4
    declaration_instruction        shift and go to state 5
    assig_pro                      shift and go to state 6
    if_pro                         shift and go to state 7
    while_pro                      shift and go to state 8
    for_pro                        shift and go to state 9
    for_each_pro                   shift and go to state 10
    interface_pro                  shift and go to state 11
    continue_pro                   shift and go to state 12
    break_pro                      shift and go to state 13
    return_pro                     shift and go to state 14
    function_pro                   shift and go to state 15
    call_function_pro              shift and go to state 16
    sumadores                      shift and go to state 17

state 227

    (56) for_pro -> FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones . R_LLAVE
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . console_pro sc
    (5) instruccion -> . declaration_instruction sc
    (6) instruccion -> . assig_pro sc
    (7) instruccion -> . if_pro sc
    (8) instruccion -> . while_pro sc
    (9) instruccion -> . for_pro sc
    (10) instruccion -> . for_each_pro sc
    (11) instruccion -> . interface_pro sc
    (12) instruccion -> . continue_pro sc
    (13) instruccion -> . break_pro sc
    (14) instruccion -> . return_pro sc
    (15) instruccion -> . function_pro sc
    (16) instruccion -> . call_function_pro sc
    (17) instruccion -> . sumadores sc
    (61) console_pro -> . CONSOLE PUNTO LOG L_PAREN expresion R_PAREN
    (39) declaration_instruction -> . LET declaracion_list
    (50) assig_pro -> . LITERAL IGUAL a
    (51) if_pro -> . IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro
    (55) while_pro -> . WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE
    (56) for_pro -> . FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (57) for_pro -> . FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (58) for_each_pro -> . FOR L_PAREN for_each_dec R_PAREN L_LLAVE instrucciones R_LLAVE
    (34) interface_pro -> . INTERFACE LITERAL L_LLAVE interface_atributos R_LLAVE
    (30) continue_pro -> . CONTINUE
    (31) break_pro -> . BREAK
    (32) return_pro -> . RETURN
    (33) return_pro -> . RETURN a
    (20) function_pro -> . FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (21) function_pro -> . FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE
    (22) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (23) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (94) sumadores -> . LITERAL MAS MAS
    (95) sumadores -> . LITERAL MENOS MENOS

    R_LLAVE         shift and go to state 231
    CONSOLE         shift and go to state 18
    LET             shift and go to state 19
    LITERAL         shift and go to state 20
    IF              shift and go to state 21
    WHILE           shift and go to state 22
    FOR             shift and go to state 23
    INTERFACE       shift and go to state 24
    CONTINUE        shift and go to state 25
    BREAK           shift and go to state 26
    RETURN          shift and go to state 27
    FUNCTION        shift and go to state 28

    declaration_instruction        shift and go to state 5
    assig_pro                      shift and go to state 6
    instruccion                    shift and go to state 29
    console_pro                    shift and go to state 4
    if_pro                         shift and go to state 7
    while_pro                      shift and go to state 8
    for_pro                        shift and go to state 9
    for_each_pro                   shift and go to state 10
    interface_pro                  shift and go to state 11
    continue_pro                   shift and go to state 12
    break_pro                      shift and go to state 13
    return_pro                     shift and go to state 14
    function_pro                   shift and go to state 15
    call_function_pro              shift and go to state 16
    sumadores                      shift and go to state 17

state 228

    (57) for_pro -> FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones . R_LLAVE
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . console_pro sc
    (5) instruccion -> . declaration_instruction sc
    (6) instruccion -> . assig_pro sc
    (7) instruccion -> . if_pro sc
    (8) instruccion -> . while_pro sc
    (9) instruccion -> . for_pro sc
    (10) instruccion -> . for_each_pro sc
    (11) instruccion -> . interface_pro sc
    (12) instruccion -> . continue_pro sc
    (13) instruccion -> . break_pro sc
    (14) instruccion -> . return_pro sc
    (15) instruccion -> . function_pro sc
    (16) instruccion -> . call_function_pro sc
    (17) instruccion -> . sumadores sc
    (61) console_pro -> . CONSOLE PUNTO LOG L_PAREN expresion R_PAREN
    (39) declaration_instruction -> . LET declaracion_list
    (50) assig_pro -> . LITERAL IGUAL a
    (51) if_pro -> . IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro
    (55) while_pro -> . WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE
    (56) for_pro -> . FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (57) for_pro -> . FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (58) for_each_pro -> . FOR L_PAREN for_each_dec R_PAREN L_LLAVE instrucciones R_LLAVE
    (34) interface_pro -> . INTERFACE LITERAL L_LLAVE interface_atributos R_LLAVE
    (30) continue_pro -> . CONTINUE
    (31) break_pro -> . BREAK
    (32) return_pro -> . RETURN
    (33) return_pro -> . RETURN a
    (20) function_pro -> . FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (21) function_pro -> . FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE
    (22) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (23) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (94) sumadores -> . LITERAL MAS MAS
    (95) sumadores -> . LITERAL MENOS MENOS

    R_LLAVE         shift and go to state 232
    CONSOLE         shift and go to state 18
    LET             shift and go to state 19
    LITERAL         shift and go to state 20
    IF              shift and go to state 21
    WHILE           shift and go to state 22
    FOR             shift and go to state 23
    INTERFACE       shift and go to state 24
    CONTINUE        shift and go to state 25
    BREAK           shift and go to state 26
    RETURN          shift and go to state 27
    FUNCTION        shift and go to state 28

    assig_pro                      shift and go to state 6
    instruccion                    shift and go to state 29
    console_pro                    shift and go to state 4
    declaration_instruction        shift and go to state 5
    if_pro                         shift and go to state 7
    while_pro                      shift and go to state 8
    for_pro                        shift and go to state 9
    for_each_pro                   shift and go to state 10
    interface_pro                  shift and go to state 11
    continue_pro                   shift and go to state 12
    break_pro                      shift and go to state 13
    return_pro                     shift and go to state 14
    function_pro                   shift and go to state 15
    call_function_pro              shift and go to state 16
    sumadores                      shift and go to state 17

state 229

    (52) else_pro -> ELSE IF L_PAREN a . R_PAREN L_LLAVE instrucciones R_LLAVE else_pro
    (64) a -> a . OR b

    R_PAREN         shift and go to state 233
    OR              shift and go to state 94


state 230

    (53) else_pro -> ELSE L_LLAVE instrucciones R_LLAVE .

    SEMI_COLON      reduce using rule 53 (else_pro -> ELSE L_LLAVE instrucciones R_LLAVE .)
    CONSOLE         reduce using rule 53 (else_pro -> ELSE L_LLAVE instrucciones R_LLAVE .)
    LET             reduce using rule 53 (else_pro -> ELSE L_LLAVE instrucciones R_LLAVE .)
    LITERAL         reduce using rule 53 (else_pro -> ELSE L_LLAVE instrucciones R_LLAVE .)
    IF              reduce using rule 53 (else_pro -> ELSE L_LLAVE instrucciones R_LLAVE .)
    WHILE           reduce using rule 53 (else_pro -> ELSE L_LLAVE instrucciones R_LLAVE .)
    FOR             reduce using rule 53 (else_pro -> ELSE L_LLAVE instrucciones R_LLAVE .)
    INTERFACE       reduce using rule 53 (else_pro -> ELSE L_LLAVE instrucciones R_LLAVE .)
    CONTINUE        reduce using rule 53 (else_pro -> ELSE L_LLAVE instrucciones R_LLAVE .)
    BREAK           reduce using rule 53 (else_pro -> ELSE L_LLAVE instrucciones R_LLAVE .)
    RETURN          reduce using rule 53 (else_pro -> ELSE L_LLAVE instrucciones R_LLAVE .)
    FUNCTION        reduce using rule 53 (else_pro -> ELSE L_LLAVE instrucciones R_LLAVE .)
    $end            reduce using rule 53 (else_pro -> ELSE L_LLAVE instrucciones R_LLAVE .)
    R_LLAVE         reduce using rule 53 (else_pro -> ELSE L_LLAVE instrucciones R_LLAVE .)


state 231

    (56) for_pro -> FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE .

    SEMI_COLON      reduce using rule 56 (for_pro -> FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    CONSOLE         reduce using rule 56 (for_pro -> FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    LET             reduce using rule 56 (for_pro -> FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    LITERAL         reduce using rule 56 (for_pro -> FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    IF              reduce using rule 56 (for_pro -> FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    WHILE           reduce using rule 56 (for_pro -> FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    FOR             reduce using rule 56 (for_pro -> FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    INTERFACE       reduce using rule 56 (for_pro -> FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    CONTINUE        reduce using rule 56 (for_pro -> FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    BREAK           reduce using rule 56 (for_pro -> FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    RETURN          reduce using rule 56 (for_pro -> FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    FUNCTION        reduce using rule 56 (for_pro -> FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    $end            reduce using rule 56 (for_pro -> FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    R_LLAVE         reduce using rule 56 (for_pro -> FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)


state 232

    (57) for_pro -> FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE .

    SEMI_COLON      reduce using rule 57 (for_pro -> FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    CONSOLE         reduce using rule 57 (for_pro -> FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    LET             reduce using rule 57 (for_pro -> FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    LITERAL         reduce using rule 57 (for_pro -> FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    IF              reduce using rule 57 (for_pro -> FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    WHILE           reduce using rule 57 (for_pro -> FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    FOR             reduce using rule 57 (for_pro -> FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    INTERFACE       reduce using rule 57 (for_pro -> FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    CONTINUE        reduce using rule 57 (for_pro -> FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    BREAK           reduce using rule 57 (for_pro -> FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    RETURN          reduce using rule 57 (for_pro -> FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    FUNCTION        reduce using rule 57 (for_pro -> FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    $end            reduce using rule 57 (for_pro -> FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    R_LLAVE         reduce using rule 57 (for_pro -> FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)


state 233

    (52) else_pro -> ELSE IF L_PAREN a R_PAREN . L_LLAVE instrucciones R_LLAVE else_pro

    L_LLAVE         shift and go to state 234


state 234

    (52) else_pro -> ELSE IF L_PAREN a R_PAREN L_LLAVE . instrucciones R_LLAVE else_pro
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . console_pro sc
    (5) instruccion -> . declaration_instruction sc
    (6) instruccion -> . assig_pro sc
    (7) instruccion -> . if_pro sc
    (8) instruccion -> . while_pro sc
    (9) instruccion -> . for_pro sc
    (10) instruccion -> . for_each_pro sc
    (11) instruccion -> . interface_pro sc
    (12) instruccion -> . continue_pro sc
    (13) instruccion -> . break_pro sc
    (14) instruccion -> . return_pro sc
    (15) instruccion -> . function_pro sc
    (16) instruccion -> . call_function_pro sc
    (17) instruccion -> . sumadores sc
    (61) console_pro -> . CONSOLE PUNTO LOG L_PAREN expresion R_PAREN
    (39) declaration_instruction -> . LET declaracion_list
    (50) assig_pro -> . LITERAL IGUAL a
    (51) if_pro -> . IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro
    (55) while_pro -> . WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE
    (56) for_pro -> . FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (57) for_pro -> . FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (58) for_each_pro -> . FOR L_PAREN for_each_dec R_PAREN L_LLAVE instrucciones R_LLAVE
    (34) interface_pro -> . INTERFACE LITERAL L_LLAVE interface_atributos R_LLAVE
    (30) continue_pro -> . CONTINUE
    (31) break_pro -> . BREAK
    (32) return_pro -> . RETURN
    (33) return_pro -> . RETURN a
    (20) function_pro -> . FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (21) function_pro -> . FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE
    (22) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (23) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (94) sumadores -> . LITERAL MAS MAS
    (95) sumadores -> . LITERAL MENOS MENOS

    CONSOLE         shift and go to state 18
    LET             shift and go to state 19
    LITERAL         shift and go to state 20
    IF              shift and go to state 21
    WHILE           shift and go to state 22
    FOR             shift and go to state 23
    INTERFACE       shift and go to state 24
    CONTINUE        shift and go to state 25
    BREAK           shift and go to state 26
    RETURN          shift and go to state 27
    FUNCTION        shift and go to state 28

    instrucciones                  shift and go to state 235
    instruccion                    shift and go to state 3
    console_pro                    shift and go to state 4
    declaration_instruction        shift and go to state 5
    assig_pro                      shift and go to state 6
    if_pro                         shift and go to state 7
    while_pro                      shift and go to state 8
    for_pro                        shift and go to state 9
    for_each_pro                   shift and go to state 10
    interface_pro                  shift and go to state 11
    continue_pro                   shift and go to state 12
    break_pro                      shift and go to state 13
    return_pro                     shift and go to state 14
    function_pro                   shift and go to state 15
    call_function_pro              shift and go to state 16
    sumadores                      shift and go to state 17

state 235

    (52) else_pro -> ELSE IF L_PAREN a R_PAREN L_LLAVE instrucciones . R_LLAVE else_pro
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . console_pro sc
    (5) instruccion -> . declaration_instruction sc
    (6) instruccion -> . assig_pro sc
    (7) instruccion -> . if_pro sc
    (8) instruccion -> . while_pro sc
    (9) instruccion -> . for_pro sc
    (10) instruccion -> . for_each_pro sc
    (11) instruccion -> . interface_pro sc
    (12) instruccion -> . continue_pro sc
    (13) instruccion -> . break_pro sc
    (14) instruccion -> . return_pro sc
    (15) instruccion -> . function_pro sc
    (16) instruccion -> . call_function_pro sc
    (17) instruccion -> . sumadores sc
    (61) console_pro -> . CONSOLE PUNTO LOG L_PAREN expresion R_PAREN
    (39) declaration_instruction -> . LET declaracion_list
    (50) assig_pro -> . LITERAL IGUAL a
    (51) if_pro -> . IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro
    (55) while_pro -> . WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE
    (56) for_pro -> . FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (57) for_pro -> . FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (58) for_each_pro -> . FOR L_PAREN for_each_dec R_PAREN L_LLAVE instrucciones R_LLAVE
    (34) interface_pro -> . INTERFACE LITERAL L_LLAVE interface_atributos R_LLAVE
    (30) continue_pro -> . CONTINUE
    (31) break_pro -> . BREAK
    (32) return_pro -> . RETURN
    (33) return_pro -> . RETURN a
    (20) function_pro -> . FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (21) function_pro -> . FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE
    (22) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (23) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (94) sumadores -> . LITERAL MAS MAS
    (95) sumadores -> . LITERAL MENOS MENOS

    R_LLAVE         shift and go to state 236
    CONSOLE         shift and go to state 18
    LET             shift and go to state 19
    LITERAL         shift and go to state 20
    IF              shift and go to state 21
    WHILE           shift and go to state 22
    FOR             shift and go to state 23
    INTERFACE       shift and go to state 24
    CONTINUE        shift and go to state 25
    BREAK           shift and go to state 26
    RETURN          shift and go to state 27
    FUNCTION        shift and go to state 28

    instruccion                    shift and go to state 29
    console_pro                    shift and go to state 4
    declaration_instruction        shift and go to state 5
    assig_pro                      shift and go to state 6
    if_pro                         shift and go to state 7
    while_pro                      shift and go to state 8
    for_pro                        shift and go to state 9
    for_each_pro                   shift and go to state 10
    interface_pro                  shift and go to state 11
    continue_pro                   shift and go to state 12
    break_pro                      shift and go to state 13
    return_pro                     shift and go to state 14
    function_pro                   shift and go to state 15
    call_function_pro              shift and go to state 16
    sumadores                      shift and go to state 17

state 236

    (52) else_pro -> ELSE IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE . else_pro
    (52) else_pro -> . ELSE IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro
    (53) else_pro -> . ELSE L_LLAVE instrucciones R_LLAVE
    (54) else_pro -> .

    ELSE            shift and go to state 216
    SEMI_COLON      reduce using rule 54 (else_pro -> .)
    CONSOLE         reduce using rule 54 (else_pro -> .)
    LET             reduce using rule 54 (else_pro -> .)
    LITERAL         reduce using rule 54 (else_pro -> .)
    IF              reduce using rule 54 (else_pro -> .)
    WHILE           reduce using rule 54 (else_pro -> .)
    FOR             reduce using rule 54 (else_pro -> .)
    INTERFACE       reduce using rule 54 (else_pro -> .)
    CONTINUE        reduce using rule 54 (else_pro -> .)
    BREAK           reduce using rule 54 (else_pro -> .)
    RETURN          reduce using rule 54 (else_pro -> .)
    FUNCTION        reduce using rule 54 (else_pro -> .)
    $end            reduce using rule 54 (else_pro -> .)
    R_LLAVE         reduce using rule 54 (else_pro -> .)

    else_pro                       shift and go to state 237

state 237

    (52) else_pro -> ELSE IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .

    SEMI_COLON      reduce using rule 52 (else_pro -> ELSE IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    CONSOLE         reduce using rule 52 (else_pro -> ELSE IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    LET             reduce using rule 52 (else_pro -> ELSE IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    LITERAL         reduce using rule 52 (else_pro -> ELSE IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    IF              reduce using rule 52 (else_pro -> ELSE IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    WHILE           reduce using rule 52 (else_pro -> ELSE IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    FOR             reduce using rule 52 (else_pro -> ELSE IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    INTERFACE       reduce using rule 52 (else_pro -> ELSE IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    CONTINUE        reduce using rule 52 (else_pro -> ELSE IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    BREAK           reduce using rule 52 (else_pro -> ELSE IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    RETURN          reduce using rule 52 (else_pro -> ELSE IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    FUNCTION        reduce using rule 52 (else_pro -> ELSE IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    $end            reduce using rule 52 (else_pro -> ELSE IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    R_LLAVE         reduce using rule 52 (else_pro -> ELSE IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LITERAL in state 27 resolved as shift
