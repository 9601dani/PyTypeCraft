Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> init
Rule 1     init -> instrucciones
Rule 2     instrucciones -> instrucciones instruccion
Rule 3     instrucciones -> instruccion
Rule 4     instruccion -> console_pro sc
Rule 5     instruccion -> declaration_instruction sc
Rule 6     instruccion -> assig_pro sc
Rule 7     instruccion -> interface_assign_pro sc
Rule 8     instruccion -> if_pro sc
Rule 9     instruccion -> while_pro sc
Rule 10    instruccion -> for_pro sc
Rule 11    instruccion -> for_each_pro sc
Rule 12    instruccion -> interface_pro sc
Rule 13    instruccion -> continue_pro sc
Rule 14    instruccion -> break_pro sc
Rule 15    instruccion -> return_pro sc
Rule 16    instruccion -> function_pro sc
Rule 17    instruccion -> call_function_pro sc
Rule 18    instruccion -> sumadores sc
Rule 19    sc -> SEMI_COLON
Rule 20    sc -> <empty>
Rule 21    function_pro -> FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE
Rule 22    function_pro -> FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE
Rule 23    call_function_pro -> LITERAL L_PAREN values R_PAREN
Rule 24    call_function_pro -> LITERAL L_PAREN R_PAREN
Rule 25    call_function_pro -> TOSTRING L_PAREN values R_PAREN
Rule 26    values -> values COMA a
Rule 27    values -> a
Rule 28    parameters_pro -> parameters_pro COMA parameter_pro
Rule 29    parameters_pro -> parameter_pro
Rule 30    parameter_pro -> LITERAL COLON type
Rule 31    parameter_pro -> LITERAL
Rule 32    continue_pro -> CONTINUE
Rule 33    break_pro -> BREAK
Rule 34    return_pro -> RETURN
Rule 35    return_pro -> RETURN a
Rule 36    interface_pro -> INTERFACE LITERAL L_LLAVE interface_atributos R_LLAVE
Rule 37    interface_atributos -> interface_atributos interface_atributo sc
Rule 38    interface_atributos -> <empty>
Rule 39    interface_atributo -> LITERAL COLON type
Rule 40    interface_atributo -> LITERAL
Rule 41    interface_assign_pro -> a PUNTO LITERAL IGUAL a
Rule 42    declaration_instruction -> LET declaracion_list
Rule 43    declaracion_list -> declaracion_list COMA assignacion_instruction
Rule 44    declaracion_list -> assignacion_instruction
Rule 45    assignacion_instruction -> LITERAL COLON type IGUAL a
Rule 46    assignacion_instruction -> LITERAL COLON type
Rule 47    assignacion_instruction -> LITERAL IGUAL a
Rule 48    assignacion_instruction -> LITERAL
Rule 49    type -> NUMBER
Rule 50    type -> STRING
Rule 51    type -> BOOLEAN
Rule 52    type -> ANY
Rule 53    type -> LITERAL
Rule 54    type -> NULL
Rule 55    assig_pro -> LITERAL IGUAL a
Rule 56    if_pro -> IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro
Rule 57    else_pro -> ELSE IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro
Rule 58    else_pro -> ELSE L_LLAVE instrucciones R_LLAVE
Rule 59    else_pro -> <empty>
Rule 60    while_pro -> WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE
Rule 61    for_pro -> FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE
Rule 62    for_pro -> FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE
Rule 63    inDec_pro -> assig_pro
Rule 64    inDec_pro -> sumadores
Rule 65    for_each_pro -> FOR L_PAREN LET LITERAL OF a R_PAREN L_LLAVE instrucciones R_LLAVE
Rule 66    console_pro -> CONSOLE PUNTO LOG L_PAREN expresion R_PAREN
Rule 67    expresion -> expresion COMA a
Rule 68    expresion -> a
Rule 69    a -> a OR b
Rule 70    a -> b
Rule 71    b -> b AND c
Rule 72    b -> c
Rule 73    c -> NOT d
Rule 74    c -> d
Rule 75    d -> d DISTINTO_QUE e
Rule 76    d -> d MENOR_QUE e
Rule 77    d -> d MENOR_IGUAL_QUE e
Rule 78    d -> d MAYOR_QUE e
Rule 79    d -> d MAYOR_IGUAL_QUE e
Rule 80    d -> d TRIPLE_IGUAL e
Rule 81    d -> e
Rule 82    e -> e MAS f
Rule 83    e -> e MENOS f
Rule 84    e -> f
Rule 85    f -> MENOS g
Rule 86    f -> MAS g
Rule 87    f -> g
Rule 88    g -> g TIMES h
Rule 89    g -> g DIVIDE h
Rule 90    g -> g MOD h
Rule 91    g -> g POTENCIA h
Rule 92    g -> h
Rule 93    h -> ENTERO
Rule 94    h -> DECIMAL
Rule 95    h -> CADENA
Rule 96    h -> LITERAL
Rule 97    h -> TRUE
Rule 98    h -> FALSE
Rule 99    h -> call_function_pro
Rule 100   h -> array_pro
Rule 101   h -> interface_assi
Rule 102   h -> L_PAREN a R_PAREN
Rule 103   h -> array_val_pro
Rule 104   h -> a PUNTO LITERAL
Rule 105   h -> a PUNTO nativeFun L_PAREN expresion R_PAREN
Rule 106   h -> a PUNTO nativeFun L_PAREN R_PAREN
Rule 107   array_val_pro -> LITERAL dimensions
Rule 108   dimensions -> dimensions L_CORCHETE a R_CORCHETE
Rule 109   dimensions -> L_CORCHETE a R_CORCHETE
Rule 110   sumadores -> LITERAL MAS MAS
Rule 111   sumadores -> LITERAL MENOS MENOS
Rule 112   interface_assi -> L_LLAVE atributos_assi R_LLAVE
Rule 113   atributos_assi -> atributos_assi COMA LITERAL COLON a
Rule 114   atributos_assi -> LITERAL COLON a
Rule 115   array_pro -> L_CORCHETE values R_CORCHETE
Rule 116   nativeFun -> TOSTRING
Rule 117   nativeFun -> TOFIXED
Rule 118   nativeFun -> TOEXPONENTIAL
Rule 119   nativeFun -> TOLOWERCASE
Rule 120   nativeFun -> TOUPPERCASE
Rule 121   nativeFun -> SPLIT
Rule 122   nativeFun -> CONCAT
Rule 123   nativeFun -> LENGTH

Terminals, with rules where they appear

AND                  : 71
ANY                  : 52
BOOLEAN              : 51
BREAK                : 33
CADENA               : 95
COLON                : 30 39 45 46 113 114
COMA                 : 26 28 43 67 113
CONCAT               : 122
CONSOLE              : 66
CONTINUE             : 32
DECIMAL              : 94
DISTINTO_QUE         : 75
DIVIDE               : 89
ELSE                 : 57 58
ENTERO               : 93
FALSE                : 98
FOR                  : 61 62 65
FUNCTION             : 21 22
IF                   : 56 57
IGUAL                : 41 45 47 55
INTERFACE            : 36
LENGTH               : 123
LET                  : 42 65
LITERAL              : 21 22 23 24 30 31 36 39 40 41 45 46 47 48 53 55 65 96 104 107 110 111 113 114
LOG                  : 66
L_CORCHETE           : 108 109 115
L_LLAVE              : 21 22 36 56 57 58 60 61 62 65 112
L_PAREN              : 21 22 23 24 25 56 57 60 61 62 65 66 102 105 106
MAS                  : 82 86 110 110
MAYOR_IGUAL_QUE      : 79
MAYOR_QUE            : 78
MENOR_IGUAL_QUE      : 77
MENOR_QUE            : 76
MENOS                : 83 85 111 111
MOD                  : 90
NOT                  : 73
NULL                 : 54
NUMBER               : 49
OF                   : 65
OR                   : 69
POTENCIA             : 91
PUNTO                : 41 66 104 105 106
RETURN               : 34 35
R_CORCHETE           : 108 109 115
R_LLAVE              : 21 22 36 56 57 58 60 61 62 65 112
R_PAREN              : 21 22 23 24 25 56 57 60 61 62 65 66 102 105 106
SEMI_COLON           : 19 61 61 62 62
SPLIT                : 121
STRING               : 50
TIMES                : 88
TOEXPONENTIAL        : 118
TOFIXED              : 117
TOLOWERCASE          : 119
TOSTRING             : 25 116
TOUPPERCASE          : 120
TRIPLE_IGUAL         : 80
TRUE                 : 97
WHILE                : 60
error                : 

Nonterminals, with rules where they appear

a                    : 26 27 35 41 41 45 47 55 56 57 60 61 62 65 67 68 69 102 104 105 106 108 109 113 114
array_pro            : 100
array_val_pro        : 103
assig_pro            : 6 62 63
assignacion_instruction : 43 44
atributos_assi       : 112 113
b                    : 69 70 71
break_pro            : 14
c                    : 71 72
call_function_pro    : 17 99
console_pro          : 4
continue_pro         : 13
d                    : 73 74 75 76 77 78 79 80
declaracion_list     : 42 43
declaration_instruction : 5 61
dimensions           : 107 108
e                    : 75 76 77 78 79 80 81 82 83
else_pro             : 56 57
expresion            : 66 67 105
f                    : 82 83 84
for_each_pro         : 11
for_pro              : 10
function_pro         : 16
g                    : 85 86 87 88 89 90 91
h                    : 88 89 90 91 92
if_pro               : 8
inDec_pro            : 61 62
init                 : 0
instruccion          : 2 3
instrucciones        : 1 2 21 22 56 57 58 60 61 62 65
interface_assi       : 101
interface_assign_pro : 7
interface_atributo   : 37
interface_atributos  : 36 37
interface_pro        : 12
nativeFun            : 105 106
parameter_pro        : 28 29
parameters_pro       : 21 28
return_pro           : 15
sc                   : 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 37
sumadores            : 18 64
type                 : 30 39 45 46
values               : 23 25 26 115
while_pro            : 9

Parsing method: LALR

state 0

    (0) S' -> . init
    (1) init -> . instrucciones
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . console_pro sc
    (5) instruccion -> . declaration_instruction sc
    (6) instruccion -> . assig_pro sc
    (7) instruccion -> . interface_assign_pro sc
    (8) instruccion -> . if_pro sc
    (9) instruccion -> . while_pro sc
    (10) instruccion -> . for_pro sc
    (11) instruccion -> . for_each_pro sc
    (12) instruccion -> . interface_pro sc
    (13) instruccion -> . continue_pro sc
    (14) instruccion -> . break_pro sc
    (15) instruccion -> . return_pro sc
    (16) instruccion -> . function_pro sc
    (17) instruccion -> . call_function_pro sc
    (18) instruccion -> . sumadores sc
    (66) console_pro -> . CONSOLE PUNTO LOG L_PAREN expresion R_PAREN
    (42) declaration_instruction -> . LET declaracion_list
    (55) assig_pro -> . LITERAL IGUAL a
    (41) interface_assign_pro -> . a PUNTO LITERAL IGUAL a
    (56) if_pro -> . IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro
    (60) while_pro -> . WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE
    (61) for_pro -> . FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (62) for_pro -> . FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (65) for_each_pro -> . FOR L_PAREN LET LITERAL OF a R_PAREN L_LLAVE instrucciones R_LLAVE
    (36) interface_pro -> . INTERFACE LITERAL L_LLAVE interface_atributos R_LLAVE
    (32) continue_pro -> . CONTINUE
    (33) break_pro -> . BREAK
    (34) return_pro -> . RETURN
    (35) return_pro -> . RETURN a
    (21) function_pro -> . FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (22) function_pro -> . FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE
    (23) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (24) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (25) call_function_pro -> . TOSTRING L_PAREN values R_PAREN
    (110) sumadores -> . LITERAL MAS MAS
    (111) sumadores -> . LITERAL MENOS MENOS
    (69) a -> . a OR b
    (70) a -> . b
    (71) b -> . b AND c
    (72) b -> . c
    (73) c -> . NOT d
    (74) c -> . d
    (75) d -> . d DISTINTO_QUE e
    (76) d -> . d MENOR_QUE e
    (77) d -> . d MENOR_IGUAL_QUE e
    (78) d -> . d MAYOR_QUE e
    (79) d -> . d MAYOR_IGUAL_QUE e
    (80) d -> . d TRIPLE_IGUAL e
    (81) d -> . e
    (82) e -> . e MAS f
    (83) e -> . e MENOS f
    (84) e -> . f
    (85) f -> . MENOS g
    (86) f -> . MAS g
    (87) f -> . g
    (88) g -> . g TIMES h
    (89) g -> . g DIVIDE h
    (90) g -> . g MOD h
    (91) g -> . g POTENCIA h
    (92) g -> . h
    (93) h -> . ENTERO
    (94) h -> . DECIMAL
    (95) h -> . CADENA
    (96) h -> . LITERAL
    (97) h -> . TRUE
    (98) h -> . FALSE
    (99) h -> . call_function_pro
    (100) h -> . array_pro
    (101) h -> . interface_assi
    (102) h -> . L_PAREN a R_PAREN
    (103) h -> . array_val_pro
    (104) h -> . a PUNTO LITERAL
    (105) h -> . a PUNTO nativeFun L_PAREN expresion R_PAREN
    (106) h -> . a PUNTO nativeFun L_PAREN R_PAREN
    (115) array_pro -> . L_CORCHETE values R_CORCHETE
    (112) interface_assi -> . L_LLAVE atributos_assi R_LLAVE
    (107) array_val_pro -> . LITERAL dimensions

    CONSOLE         shift and go to state 19
    LET             shift and go to state 21
    LITERAL         shift and go to state 22
    IF              shift and go to state 24
    WHILE           shift and go to state 26
    FOR             shift and go to state 27
    INTERFACE       shift and go to state 28
    CONTINUE        shift and go to state 29
    BREAK           shift and go to state 30
    RETURN          shift and go to state 31
    FUNCTION        shift and go to state 32
    TOSTRING        shift and go to state 33
    NOT             shift and go to state 38
    MENOS           shift and go to state 35
    MAS             shift and go to state 34
    ENTERO          shift and go to state 44
    DECIMAL         shift and go to state 45
    CADENA          shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    L_PAREN         shift and go to state 20
    L_CORCHETE      shift and go to state 52
    L_LLAVE         shift and go to state 25

    init                           shift and go to state 1
    instrucciones                  shift and go to state 2
    instruccion                    shift and go to state 3
    console_pro                    shift and go to state 4
    declaration_instruction        shift and go to state 5
    assig_pro                      shift and go to state 6
    interface_assign_pro           shift and go to state 7
    if_pro                         shift and go to state 8
    while_pro                      shift and go to state 9
    for_pro                        shift and go to state 10
    for_each_pro                   shift and go to state 11
    interface_pro                  shift and go to state 12
    continue_pro                   shift and go to state 13
    break_pro                      shift and go to state 14
    return_pro                     shift and go to state 15
    function_pro                   shift and go to state 16
    call_function_pro              shift and go to state 17
    sumadores                      shift and go to state 18
    a                              shift and go to state 23
    b                              shift and go to state 36
    c                              shift and go to state 37
    d                              shift and go to state 39
    e                              shift and go to state 40
    f                              shift and go to state 41
    g                              shift and go to state 42
    h                              shift and go to state 43
    array_pro                      shift and go to state 49
    interface_assi                 shift and go to state 50
    array_val_pro                  shift and go to state 51

state 1

    (0) S' -> init .



state 2

    (1) init -> instrucciones .
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . console_pro sc
    (5) instruccion -> . declaration_instruction sc
    (6) instruccion -> . assig_pro sc
    (7) instruccion -> . interface_assign_pro sc
    (8) instruccion -> . if_pro sc
    (9) instruccion -> . while_pro sc
    (10) instruccion -> . for_pro sc
    (11) instruccion -> . for_each_pro sc
    (12) instruccion -> . interface_pro sc
    (13) instruccion -> . continue_pro sc
    (14) instruccion -> . break_pro sc
    (15) instruccion -> . return_pro sc
    (16) instruccion -> . function_pro sc
    (17) instruccion -> . call_function_pro sc
    (18) instruccion -> . sumadores sc
    (66) console_pro -> . CONSOLE PUNTO LOG L_PAREN expresion R_PAREN
    (42) declaration_instruction -> . LET declaracion_list
    (55) assig_pro -> . LITERAL IGUAL a
    (41) interface_assign_pro -> . a PUNTO LITERAL IGUAL a
    (56) if_pro -> . IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro
    (60) while_pro -> . WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE
    (61) for_pro -> . FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (62) for_pro -> . FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (65) for_each_pro -> . FOR L_PAREN LET LITERAL OF a R_PAREN L_LLAVE instrucciones R_LLAVE
    (36) interface_pro -> . INTERFACE LITERAL L_LLAVE interface_atributos R_LLAVE
    (32) continue_pro -> . CONTINUE
    (33) break_pro -> . BREAK
    (34) return_pro -> . RETURN
    (35) return_pro -> . RETURN a
    (21) function_pro -> . FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (22) function_pro -> . FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE
    (23) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (24) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (25) call_function_pro -> . TOSTRING L_PAREN values R_PAREN
    (110) sumadores -> . LITERAL MAS MAS
    (111) sumadores -> . LITERAL MENOS MENOS
    (69) a -> . a OR b
    (70) a -> . b
    (71) b -> . b AND c
    (72) b -> . c
    (73) c -> . NOT d
    (74) c -> . d
    (75) d -> . d DISTINTO_QUE e
    (76) d -> . d MENOR_QUE e
    (77) d -> . d MENOR_IGUAL_QUE e
    (78) d -> . d MAYOR_QUE e
    (79) d -> . d MAYOR_IGUAL_QUE e
    (80) d -> . d TRIPLE_IGUAL e
    (81) d -> . e
    (82) e -> . e MAS f
    (83) e -> . e MENOS f
    (84) e -> . f
    (85) f -> . MENOS g
    (86) f -> . MAS g
    (87) f -> . g
    (88) g -> . g TIMES h
    (89) g -> . g DIVIDE h
    (90) g -> . g MOD h
    (91) g -> . g POTENCIA h
    (92) g -> . h
    (93) h -> . ENTERO
    (94) h -> . DECIMAL
    (95) h -> . CADENA
    (96) h -> . LITERAL
    (97) h -> . TRUE
    (98) h -> . FALSE
    (99) h -> . call_function_pro
    (100) h -> . array_pro
    (101) h -> . interface_assi
    (102) h -> . L_PAREN a R_PAREN
    (103) h -> . array_val_pro
    (104) h -> . a PUNTO LITERAL
    (105) h -> . a PUNTO nativeFun L_PAREN expresion R_PAREN
    (106) h -> . a PUNTO nativeFun L_PAREN R_PAREN
    (115) array_pro -> . L_CORCHETE values R_CORCHETE
    (112) interface_assi -> . L_LLAVE atributos_assi R_LLAVE
    (107) array_val_pro -> . LITERAL dimensions

    $end            reduce using rule 1 (init -> instrucciones .)
    CONSOLE         shift and go to state 19
    LET             shift and go to state 21
    LITERAL         shift and go to state 22
    IF              shift and go to state 24
    WHILE           shift and go to state 26
    FOR             shift and go to state 27
    INTERFACE       shift and go to state 28
    CONTINUE        shift and go to state 29
    BREAK           shift and go to state 30
    RETURN          shift and go to state 31
    FUNCTION        shift and go to state 32
    TOSTRING        shift and go to state 33
    NOT             shift and go to state 38
    MENOS           shift and go to state 35
    MAS             shift and go to state 34
    ENTERO          shift and go to state 44
    DECIMAL         shift and go to state 45
    CADENA          shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    L_PAREN         shift and go to state 20
    L_CORCHETE      shift and go to state 52
    L_LLAVE         shift and go to state 25

    instruccion                    shift and go to state 53
    console_pro                    shift and go to state 4
    declaration_instruction        shift and go to state 5
    assig_pro                      shift and go to state 6
    interface_assign_pro           shift and go to state 7
    if_pro                         shift and go to state 8
    while_pro                      shift and go to state 9
    for_pro                        shift and go to state 10
    for_each_pro                   shift and go to state 11
    interface_pro                  shift and go to state 12
    continue_pro                   shift and go to state 13
    break_pro                      shift and go to state 14
    return_pro                     shift and go to state 15
    function_pro                   shift and go to state 16
    call_function_pro              shift and go to state 17
    sumadores                      shift and go to state 18
    a                              shift and go to state 23
    b                              shift and go to state 36
    c                              shift and go to state 37
    d                              shift and go to state 39
    e                              shift and go to state 40
    f                              shift and go to state 41
    g                              shift and go to state 42
    h                              shift and go to state 43
    array_pro                      shift and go to state 49
    interface_assi                 shift and go to state 50
    array_val_pro                  shift and go to state 51

state 3

    (3) instrucciones -> instruccion .

    CONSOLE         reduce using rule 3 (instrucciones -> instruccion .)
    LET             reduce using rule 3 (instrucciones -> instruccion .)
    LITERAL         reduce using rule 3 (instrucciones -> instruccion .)
    IF              reduce using rule 3 (instrucciones -> instruccion .)
    WHILE           reduce using rule 3 (instrucciones -> instruccion .)
    FOR             reduce using rule 3 (instrucciones -> instruccion .)
    INTERFACE       reduce using rule 3 (instrucciones -> instruccion .)
    CONTINUE        reduce using rule 3 (instrucciones -> instruccion .)
    BREAK           reduce using rule 3 (instrucciones -> instruccion .)
    RETURN          reduce using rule 3 (instrucciones -> instruccion .)
    FUNCTION        reduce using rule 3 (instrucciones -> instruccion .)
    TOSTRING        reduce using rule 3 (instrucciones -> instruccion .)
    NOT             reduce using rule 3 (instrucciones -> instruccion .)
    MENOS           reduce using rule 3 (instrucciones -> instruccion .)
    MAS             reduce using rule 3 (instrucciones -> instruccion .)
    ENTERO          reduce using rule 3 (instrucciones -> instruccion .)
    DECIMAL         reduce using rule 3 (instrucciones -> instruccion .)
    CADENA          reduce using rule 3 (instrucciones -> instruccion .)
    TRUE            reduce using rule 3 (instrucciones -> instruccion .)
    FALSE           reduce using rule 3 (instrucciones -> instruccion .)
    L_PAREN         reduce using rule 3 (instrucciones -> instruccion .)
    L_CORCHETE      reduce using rule 3 (instrucciones -> instruccion .)
    L_LLAVE         reduce using rule 3 (instrucciones -> instruccion .)
    $end            reduce using rule 3 (instrucciones -> instruccion .)
    R_LLAVE         reduce using rule 3 (instrucciones -> instruccion .)


state 4

    (4) instruccion -> console_pro . sc
    (19) sc -> . SEMI_COLON
    (20) sc -> .

    SEMI_COLON      shift and go to state 55
    CONSOLE         reduce using rule 20 (sc -> .)
    LET             reduce using rule 20 (sc -> .)
    LITERAL         reduce using rule 20 (sc -> .)
    IF              reduce using rule 20 (sc -> .)
    WHILE           reduce using rule 20 (sc -> .)
    FOR             reduce using rule 20 (sc -> .)
    INTERFACE       reduce using rule 20 (sc -> .)
    CONTINUE        reduce using rule 20 (sc -> .)
    BREAK           reduce using rule 20 (sc -> .)
    RETURN          reduce using rule 20 (sc -> .)
    FUNCTION        reduce using rule 20 (sc -> .)
    TOSTRING        reduce using rule 20 (sc -> .)
    NOT             reduce using rule 20 (sc -> .)
    MENOS           reduce using rule 20 (sc -> .)
    MAS             reduce using rule 20 (sc -> .)
    ENTERO          reduce using rule 20 (sc -> .)
    DECIMAL         reduce using rule 20 (sc -> .)
    CADENA          reduce using rule 20 (sc -> .)
    TRUE            reduce using rule 20 (sc -> .)
    FALSE           reduce using rule 20 (sc -> .)
    L_PAREN         reduce using rule 20 (sc -> .)
    L_CORCHETE      reduce using rule 20 (sc -> .)
    L_LLAVE         reduce using rule 20 (sc -> .)
    $end            reduce using rule 20 (sc -> .)
    R_LLAVE         reduce using rule 20 (sc -> .)

    sc                             shift and go to state 54

state 5

    (5) instruccion -> declaration_instruction . sc
    (19) sc -> . SEMI_COLON
    (20) sc -> .

    SEMI_COLON      shift and go to state 55
    CONSOLE         reduce using rule 20 (sc -> .)
    LET             reduce using rule 20 (sc -> .)
    LITERAL         reduce using rule 20 (sc -> .)
    IF              reduce using rule 20 (sc -> .)
    WHILE           reduce using rule 20 (sc -> .)
    FOR             reduce using rule 20 (sc -> .)
    INTERFACE       reduce using rule 20 (sc -> .)
    CONTINUE        reduce using rule 20 (sc -> .)
    BREAK           reduce using rule 20 (sc -> .)
    RETURN          reduce using rule 20 (sc -> .)
    FUNCTION        reduce using rule 20 (sc -> .)
    TOSTRING        reduce using rule 20 (sc -> .)
    NOT             reduce using rule 20 (sc -> .)
    MENOS           reduce using rule 20 (sc -> .)
    MAS             reduce using rule 20 (sc -> .)
    ENTERO          reduce using rule 20 (sc -> .)
    DECIMAL         reduce using rule 20 (sc -> .)
    CADENA          reduce using rule 20 (sc -> .)
    TRUE            reduce using rule 20 (sc -> .)
    FALSE           reduce using rule 20 (sc -> .)
    L_PAREN         reduce using rule 20 (sc -> .)
    L_CORCHETE      reduce using rule 20 (sc -> .)
    L_LLAVE         reduce using rule 20 (sc -> .)
    $end            reduce using rule 20 (sc -> .)
    R_LLAVE         reduce using rule 20 (sc -> .)

    sc                             shift and go to state 56

state 6

    (6) instruccion -> assig_pro . sc
    (19) sc -> . SEMI_COLON
    (20) sc -> .

    SEMI_COLON      shift and go to state 55
    CONSOLE         reduce using rule 20 (sc -> .)
    LET             reduce using rule 20 (sc -> .)
    LITERAL         reduce using rule 20 (sc -> .)
    IF              reduce using rule 20 (sc -> .)
    WHILE           reduce using rule 20 (sc -> .)
    FOR             reduce using rule 20 (sc -> .)
    INTERFACE       reduce using rule 20 (sc -> .)
    CONTINUE        reduce using rule 20 (sc -> .)
    BREAK           reduce using rule 20 (sc -> .)
    RETURN          reduce using rule 20 (sc -> .)
    FUNCTION        reduce using rule 20 (sc -> .)
    TOSTRING        reduce using rule 20 (sc -> .)
    NOT             reduce using rule 20 (sc -> .)
    MENOS           reduce using rule 20 (sc -> .)
    MAS             reduce using rule 20 (sc -> .)
    ENTERO          reduce using rule 20 (sc -> .)
    DECIMAL         reduce using rule 20 (sc -> .)
    CADENA          reduce using rule 20 (sc -> .)
    TRUE            reduce using rule 20 (sc -> .)
    FALSE           reduce using rule 20 (sc -> .)
    L_PAREN         reduce using rule 20 (sc -> .)
    L_CORCHETE      reduce using rule 20 (sc -> .)
    L_LLAVE         reduce using rule 20 (sc -> .)
    $end            reduce using rule 20 (sc -> .)
    R_LLAVE         reduce using rule 20 (sc -> .)

    sc                             shift and go to state 57

state 7

    (7) instruccion -> interface_assign_pro . sc
    (19) sc -> . SEMI_COLON
    (20) sc -> .

    SEMI_COLON      shift and go to state 55
    CONSOLE         reduce using rule 20 (sc -> .)
    LET             reduce using rule 20 (sc -> .)
    LITERAL         reduce using rule 20 (sc -> .)
    IF              reduce using rule 20 (sc -> .)
    WHILE           reduce using rule 20 (sc -> .)
    FOR             reduce using rule 20 (sc -> .)
    INTERFACE       reduce using rule 20 (sc -> .)
    CONTINUE        reduce using rule 20 (sc -> .)
    BREAK           reduce using rule 20 (sc -> .)
    RETURN          reduce using rule 20 (sc -> .)
    FUNCTION        reduce using rule 20 (sc -> .)
    TOSTRING        reduce using rule 20 (sc -> .)
    NOT             reduce using rule 20 (sc -> .)
    MENOS           reduce using rule 20 (sc -> .)
    MAS             reduce using rule 20 (sc -> .)
    ENTERO          reduce using rule 20 (sc -> .)
    DECIMAL         reduce using rule 20 (sc -> .)
    CADENA          reduce using rule 20 (sc -> .)
    TRUE            reduce using rule 20 (sc -> .)
    FALSE           reduce using rule 20 (sc -> .)
    L_PAREN         reduce using rule 20 (sc -> .)
    L_CORCHETE      reduce using rule 20 (sc -> .)
    L_LLAVE         reduce using rule 20 (sc -> .)
    $end            reduce using rule 20 (sc -> .)
    R_LLAVE         reduce using rule 20 (sc -> .)

    sc                             shift and go to state 58

state 8

    (8) instruccion -> if_pro . sc
    (19) sc -> . SEMI_COLON
    (20) sc -> .

    SEMI_COLON      shift and go to state 55
    CONSOLE         reduce using rule 20 (sc -> .)
    LET             reduce using rule 20 (sc -> .)
    LITERAL         reduce using rule 20 (sc -> .)
    IF              reduce using rule 20 (sc -> .)
    WHILE           reduce using rule 20 (sc -> .)
    FOR             reduce using rule 20 (sc -> .)
    INTERFACE       reduce using rule 20 (sc -> .)
    CONTINUE        reduce using rule 20 (sc -> .)
    BREAK           reduce using rule 20 (sc -> .)
    RETURN          reduce using rule 20 (sc -> .)
    FUNCTION        reduce using rule 20 (sc -> .)
    TOSTRING        reduce using rule 20 (sc -> .)
    NOT             reduce using rule 20 (sc -> .)
    MENOS           reduce using rule 20 (sc -> .)
    MAS             reduce using rule 20 (sc -> .)
    ENTERO          reduce using rule 20 (sc -> .)
    DECIMAL         reduce using rule 20 (sc -> .)
    CADENA          reduce using rule 20 (sc -> .)
    TRUE            reduce using rule 20 (sc -> .)
    FALSE           reduce using rule 20 (sc -> .)
    L_PAREN         reduce using rule 20 (sc -> .)
    L_CORCHETE      reduce using rule 20 (sc -> .)
    L_LLAVE         reduce using rule 20 (sc -> .)
    $end            reduce using rule 20 (sc -> .)
    R_LLAVE         reduce using rule 20 (sc -> .)

    sc                             shift and go to state 59

state 9

    (9) instruccion -> while_pro . sc
    (19) sc -> . SEMI_COLON
    (20) sc -> .

    SEMI_COLON      shift and go to state 55
    CONSOLE         reduce using rule 20 (sc -> .)
    LET             reduce using rule 20 (sc -> .)
    LITERAL         reduce using rule 20 (sc -> .)
    IF              reduce using rule 20 (sc -> .)
    WHILE           reduce using rule 20 (sc -> .)
    FOR             reduce using rule 20 (sc -> .)
    INTERFACE       reduce using rule 20 (sc -> .)
    CONTINUE        reduce using rule 20 (sc -> .)
    BREAK           reduce using rule 20 (sc -> .)
    RETURN          reduce using rule 20 (sc -> .)
    FUNCTION        reduce using rule 20 (sc -> .)
    TOSTRING        reduce using rule 20 (sc -> .)
    NOT             reduce using rule 20 (sc -> .)
    MENOS           reduce using rule 20 (sc -> .)
    MAS             reduce using rule 20 (sc -> .)
    ENTERO          reduce using rule 20 (sc -> .)
    DECIMAL         reduce using rule 20 (sc -> .)
    CADENA          reduce using rule 20 (sc -> .)
    TRUE            reduce using rule 20 (sc -> .)
    FALSE           reduce using rule 20 (sc -> .)
    L_PAREN         reduce using rule 20 (sc -> .)
    L_CORCHETE      reduce using rule 20 (sc -> .)
    L_LLAVE         reduce using rule 20 (sc -> .)
    $end            reduce using rule 20 (sc -> .)
    R_LLAVE         reduce using rule 20 (sc -> .)

    sc                             shift and go to state 60

state 10

    (10) instruccion -> for_pro . sc
    (19) sc -> . SEMI_COLON
    (20) sc -> .

    SEMI_COLON      shift and go to state 55
    CONSOLE         reduce using rule 20 (sc -> .)
    LET             reduce using rule 20 (sc -> .)
    LITERAL         reduce using rule 20 (sc -> .)
    IF              reduce using rule 20 (sc -> .)
    WHILE           reduce using rule 20 (sc -> .)
    FOR             reduce using rule 20 (sc -> .)
    INTERFACE       reduce using rule 20 (sc -> .)
    CONTINUE        reduce using rule 20 (sc -> .)
    BREAK           reduce using rule 20 (sc -> .)
    RETURN          reduce using rule 20 (sc -> .)
    FUNCTION        reduce using rule 20 (sc -> .)
    TOSTRING        reduce using rule 20 (sc -> .)
    NOT             reduce using rule 20 (sc -> .)
    MENOS           reduce using rule 20 (sc -> .)
    MAS             reduce using rule 20 (sc -> .)
    ENTERO          reduce using rule 20 (sc -> .)
    DECIMAL         reduce using rule 20 (sc -> .)
    CADENA          reduce using rule 20 (sc -> .)
    TRUE            reduce using rule 20 (sc -> .)
    FALSE           reduce using rule 20 (sc -> .)
    L_PAREN         reduce using rule 20 (sc -> .)
    L_CORCHETE      reduce using rule 20 (sc -> .)
    L_LLAVE         reduce using rule 20 (sc -> .)
    $end            reduce using rule 20 (sc -> .)
    R_LLAVE         reduce using rule 20 (sc -> .)

    sc                             shift and go to state 61

state 11

    (11) instruccion -> for_each_pro . sc
    (19) sc -> . SEMI_COLON
    (20) sc -> .

    SEMI_COLON      shift and go to state 55
    CONSOLE         reduce using rule 20 (sc -> .)
    LET             reduce using rule 20 (sc -> .)
    LITERAL         reduce using rule 20 (sc -> .)
    IF              reduce using rule 20 (sc -> .)
    WHILE           reduce using rule 20 (sc -> .)
    FOR             reduce using rule 20 (sc -> .)
    INTERFACE       reduce using rule 20 (sc -> .)
    CONTINUE        reduce using rule 20 (sc -> .)
    BREAK           reduce using rule 20 (sc -> .)
    RETURN          reduce using rule 20 (sc -> .)
    FUNCTION        reduce using rule 20 (sc -> .)
    TOSTRING        reduce using rule 20 (sc -> .)
    NOT             reduce using rule 20 (sc -> .)
    MENOS           reduce using rule 20 (sc -> .)
    MAS             reduce using rule 20 (sc -> .)
    ENTERO          reduce using rule 20 (sc -> .)
    DECIMAL         reduce using rule 20 (sc -> .)
    CADENA          reduce using rule 20 (sc -> .)
    TRUE            reduce using rule 20 (sc -> .)
    FALSE           reduce using rule 20 (sc -> .)
    L_PAREN         reduce using rule 20 (sc -> .)
    L_CORCHETE      reduce using rule 20 (sc -> .)
    L_LLAVE         reduce using rule 20 (sc -> .)
    $end            reduce using rule 20 (sc -> .)
    R_LLAVE         reduce using rule 20 (sc -> .)

    sc                             shift and go to state 62

state 12

    (12) instruccion -> interface_pro . sc
    (19) sc -> . SEMI_COLON
    (20) sc -> .

    SEMI_COLON      shift and go to state 55
    CONSOLE         reduce using rule 20 (sc -> .)
    LET             reduce using rule 20 (sc -> .)
    LITERAL         reduce using rule 20 (sc -> .)
    IF              reduce using rule 20 (sc -> .)
    WHILE           reduce using rule 20 (sc -> .)
    FOR             reduce using rule 20 (sc -> .)
    INTERFACE       reduce using rule 20 (sc -> .)
    CONTINUE        reduce using rule 20 (sc -> .)
    BREAK           reduce using rule 20 (sc -> .)
    RETURN          reduce using rule 20 (sc -> .)
    FUNCTION        reduce using rule 20 (sc -> .)
    TOSTRING        reduce using rule 20 (sc -> .)
    NOT             reduce using rule 20 (sc -> .)
    MENOS           reduce using rule 20 (sc -> .)
    MAS             reduce using rule 20 (sc -> .)
    ENTERO          reduce using rule 20 (sc -> .)
    DECIMAL         reduce using rule 20 (sc -> .)
    CADENA          reduce using rule 20 (sc -> .)
    TRUE            reduce using rule 20 (sc -> .)
    FALSE           reduce using rule 20 (sc -> .)
    L_PAREN         reduce using rule 20 (sc -> .)
    L_CORCHETE      reduce using rule 20 (sc -> .)
    L_LLAVE         reduce using rule 20 (sc -> .)
    $end            reduce using rule 20 (sc -> .)
    R_LLAVE         reduce using rule 20 (sc -> .)

    sc                             shift and go to state 63

state 13

    (13) instruccion -> continue_pro . sc
    (19) sc -> . SEMI_COLON
    (20) sc -> .

    SEMI_COLON      shift and go to state 55
    CONSOLE         reduce using rule 20 (sc -> .)
    LET             reduce using rule 20 (sc -> .)
    LITERAL         reduce using rule 20 (sc -> .)
    IF              reduce using rule 20 (sc -> .)
    WHILE           reduce using rule 20 (sc -> .)
    FOR             reduce using rule 20 (sc -> .)
    INTERFACE       reduce using rule 20 (sc -> .)
    CONTINUE        reduce using rule 20 (sc -> .)
    BREAK           reduce using rule 20 (sc -> .)
    RETURN          reduce using rule 20 (sc -> .)
    FUNCTION        reduce using rule 20 (sc -> .)
    TOSTRING        reduce using rule 20 (sc -> .)
    NOT             reduce using rule 20 (sc -> .)
    MENOS           reduce using rule 20 (sc -> .)
    MAS             reduce using rule 20 (sc -> .)
    ENTERO          reduce using rule 20 (sc -> .)
    DECIMAL         reduce using rule 20 (sc -> .)
    CADENA          reduce using rule 20 (sc -> .)
    TRUE            reduce using rule 20 (sc -> .)
    FALSE           reduce using rule 20 (sc -> .)
    L_PAREN         reduce using rule 20 (sc -> .)
    L_CORCHETE      reduce using rule 20 (sc -> .)
    L_LLAVE         reduce using rule 20 (sc -> .)
    $end            reduce using rule 20 (sc -> .)
    R_LLAVE         reduce using rule 20 (sc -> .)

    sc                             shift and go to state 64

state 14

    (14) instruccion -> break_pro . sc
    (19) sc -> . SEMI_COLON
    (20) sc -> .

    SEMI_COLON      shift and go to state 55
    CONSOLE         reduce using rule 20 (sc -> .)
    LET             reduce using rule 20 (sc -> .)
    LITERAL         reduce using rule 20 (sc -> .)
    IF              reduce using rule 20 (sc -> .)
    WHILE           reduce using rule 20 (sc -> .)
    FOR             reduce using rule 20 (sc -> .)
    INTERFACE       reduce using rule 20 (sc -> .)
    CONTINUE        reduce using rule 20 (sc -> .)
    BREAK           reduce using rule 20 (sc -> .)
    RETURN          reduce using rule 20 (sc -> .)
    FUNCTION        reduce using rule 20 (sc -> .)
    TOSTRING        reduce using rule 20 (sc -> .)
    NOT             reduce using rule 20 (sc -> .)
    MENOS           reduce using rule 20 (sc -> .)
    MAS             reduce using rule 20 (sc -> .)
    ENTERO          reduce using rule 20 (sc -> .)
    DECIMAL         reduce using rule 20 (sc -> .)
    CADENA          reduce using rule 20 (sc -> .)
    TRUE            reduce using rule 20 (sc -> .)
    FALSE           reduce using rule 20 (sc -> .)
    L_PAREN         reduce using rule 20 (sc -> .)
    L_CORCHETE      reduce using rule 20 (sc -> .)
    L_LLAVE         reduce using rule 20 (sc -> .)
    $end            reduce using rule 20 (sc -> .)
    R_LLAVE         reduce using rule 20 (sc -> .)

    sc                             shift and go to state 65

state 15

    (15) instruccion -> return_pro . sc
    (19) sc -> . SEMI_COLON
    (20) sc -> .

    SEMI_COLON      shift and go to state 55
    CONSOLE         reduce using rule 20 (sc -> .)
    LET             reduce using rule 20 (sc -> .)
    LITERAL         reduce using rule 20 (sc -> .)
    IF              reduce using rule 20 (sc -> .)
    WHILE           reduce using rule 20 (sc -> .)
    FOR             reduce using rule 20 (sc -> .)
    INTERFACE       reduce using rule 20 (sc -> .)
    CONTINUE        reduce using rule 20 (sc -> .)
    BREAK           reduce using rule 20 (sc -> .)
    RETURN          reduce using rule 20 (sc -> .)
    FUNCTION        reduce using rule 20 (sc -> .)
    TOSTRING        reduce using rule 20 (sc -> .)
    NOT             reduce using rule 20 (sc -> .)
    MENOS           reduce using rule 20 (sc -> .)
    MAS             reduce using rule 20 (sc -> .)
    ENTERO          reduce using rule 20 (sc -> .)
    DECIMAL         reduce using rule 20 (sc -> .)
    CADENA          reduce using rule 20 (sc -> .)
    TRUE            reduce using rule 20 (sc -> .)
    FALSE           reduce using rule 20 (sc -> .)
    L_PAREN         reduce using rule 20 (sc -> .)
    L_CORCHETE      reduce using rule 20 (sc -> .)
    L_LLAVE         reduce using rule 20 (sc -> .)
    $end            reduce using rule 20 (sc -> .)
    R_LLAVE         reduce using rule 20 (sc -> .)

    sc                             shift and go to state 66

state 16

    (16) instruccion -> function_pro . sc
    (19) sc -> . SEMI_COLON
    (20) sc -> .

    SEMI_COLON      shift and go to state 55
    CONSOLE         reduce using rule 20 (sc -> .)
    LET             reduce using rule 20 (sc -> .)
    LITERAL         reduce using rule 20 (sc -> .)
    IF              reduce using rule 20 (sc -> .)
    WHILE           reduce using rule 20 (sc -> .)
    FOR             reduce using rule 20 (sc -> .)
    INTERFACE       reduce using rule 20 (sc -> .)
    CONTINUE        reduce using rule 20 (sc -> .)
    BREAK           reduce using rule 20 (sc -> .)
    RETURN          reduce using rule 20 (sc -> .)
    FUNCTION        reduce using rule 20 (sc -> .)
    TOSTRING        reduce using rule 20 (sc -> .)
    NOT             reduce using rule 20 (sc -> .)
    MENOS           reduce using rule 20 (sc -> .)
    MAS             reduce using rule 20 (sc -> .)
    ENTERO          reduce using rule 20 (sc -> .)
    DECIMAL         reduce using rule 20 (sc -> .)
    CADENA          reduce using rule 20 (sc -> .)
    TRUE            reduce using rule 20 (sc -> .)
    FALSE           reduce using rule 20 (sc -> .)
    L_PAREN         reduce using rule 20 (sc -> .)
    L_CORCHETE      reduce using rule 20 (sc -> .)
    L_LLAVE         reduce using rule 20 (sc -> .)
    $end            reduce using rule 20 (sc -> .)
    R_LLAVE         reduce using rule 20 (sc -> .)

    sc                             shift and go to state 67

state 17

    (17) instruccion -> call_function_pro . sc
    (99) h -> call_function_pro .
    (19) sc -> . SEMI_COLON
    (20) sc -> .

  ! reduce/reduce conflict for MENOS resolved using rule 20 (sc -> .)
  ! reduce/reduce conflict for MAS resolved using rule 20 (sc -> .)
    TIMES           reduce using rule 99 (h -> call_function_pro .)
    DIVIDE          reduce using rule 99 (h -> call_function_pro .)
    MOD             reduce using rule 99 (h -> call_function_pro .)
    POTENCIA        reduce using rule 99 (h -> call_function_pro .)
    DISTINTO_QUE    reduce using rule 99 (h -> call_function_pro .)
    MENOR_QUE       reduce using rule 99 (h -> call_function_pro .)
    MENOR_IGUAL_QUE reduce using rule 99 (h -> call_function_pro .)
    MAYOR_QUE       reduce using rule 99 (h -> call_function_pro .)
    MAYOR_IGUAL_QUE reduce using rule 99 (h -> call_function_pro .)
    TRIPLE_IGUAL    reduce using rule 99 (h -> call_function_pro .)
    AND             reduce using rule 99 (h -> call_function_pro .)
    PUNTO           reduce using rule 99 (h -> call_function_pro .)
    OR              reduce using rule 99 (h -> call_function_pro .)
    SEMI_COLON      shift and go to state 55
    CONSOLE         reduce using rule 20 (sc -> .)
    LET             reduce using rule 20 (sc -> .)
    LITERAL         reduce using rule 20 (sc -> .)
    IF              reduce using rule 20 (sc -> .)
    WHILE           reduce using rule 20 (sc -> .)
    FOR             reduce using rule 20 (sc -> .)
    INTERFACE       reduce using rule 20 (sc -> .)
    CONTINUE        reduce using rule 20 (sc -> .)
    BREAK           reduce using rule 20 (sc -> .)
    RETURN          reduce using rule 20 (sc -> .)
    FUNCTION        reduce using rule 20 (sc -> .)
    TOSTRING        reduce using rule 20 (sc -> .)
    NOT             reduce using rule 20 (sc -> .)
    MENOS           reduce using rule 20 (sc -> .)
    MAS             reduce using rule 20 (sc -> .)
    ENTERO          reduce using rule 20 (sc -> .)
    DECIMAL         reduce using rule 20 (sc -> .)
    CADENA          reduce using rule 20 (sc -> .)
    TRUE            reduce using rule 20 (sc -> .)
    FALSE           reduce using rule 20 (sc -> .)
    L_PAREN         reduce using rule 20 (sc -> .)
    L_CORCHETE      reduce using rule 20 (sc -> .)
    L_LLAVE         reduce using rule 20 (sc -> .)
    $end            reduce using rule 20 (sc -> .)
    R_LLAVE         reduce using rule 20 (sc -> .)

  ! MAS             [ reduce using rule 99 (h -> call_function_pro .) ]
  ! MENOS           [ reduce using rule 99 (h -> call_function_pro .) ]

    sc                             shift and go to state 68

state 18

    (18) instruccion -> sumadores . sc
    (19) sc -> . SEMI_COLON
    (20) sc -> .

    SEMI_COLON      shift and go to state 55
    CONSOLE         reduce using rule 20 (sc -> .)
    LET             reduce using rule 20 (sc -> .)
    LITERAL         reduce using rule 20 (sc -> .)
    IF              reduce using rule 20 (sc -> .)
    WHILE           reduce using rule 20 (sc -> .)
    FOR             reduce using rule 20 (sc -> .)
    INTERFACE       reduce using rule 20 (sc -> .)
    CONTINUE        reduce using rule 20 (sc -> .)
    BREAK           reduce using rule 20 (sc -> .)
    RETURN          reduce using rule 20 (sc -> .)
    FUNCTION        reduce using rule 20 (sc -> .)
    TOSTRING        reduce using rule 20 (sc -> .)
    NOT             reduce using rule 20 (sc -> .)
    MENOS           reduce using rule 20 (sc -> .)
    MAS             reduce using rule 20 (sc -> .)
    ENTERO          reduce using rule 20 (sc -> .)
    DECIMAL         reduce using rule 20 (sc -> .)
    CADENA          reduce using rule 20 (sc -> .)
    TRUE            reduce using rule 20 (sc -> .)
    FALSE           reduce using rule 20 (sc -> .)
    L_PAREN         reduce using rule 20 (sc -> .)
    L_CORCHETE      reduce using rule 20 (sc -> .)
    L_LLAVE         reduce using rule 20 (sc -> .)
    $end            reduce using rule 20 (sc -> .)
    R_LLAVE         reduce using rule 20 (sc -> .)

    sc                             shift and go to state 69

state 19

    (66) console_pro -> CONSOLE . PUNTO LOG L_PAREN expresion R_PAREN

    PUNTO           shift and go to state 70


state 20

    (102) h -> L_PAREN . a R_PAREN
    (69) a -> . a OR b
    (70) a -> . b
    (71) b -> . b AND c
    (72) b -> . c
    (73) c -> . NOT d
    (74) c -> . d
    (75) d -> . d DISTINTO_QUE e
    (76) d -> . d MENOR_QUE e
    (77) d -> . d MENOR_IGUAL_QUE e
    (78) d -> . d MAYOR_QUE e
    (79) d -> . d MAYOR_IGUAL_QUE e
    (80) d -> . d TRIPLE_IGUAL e
    (81) d -> . e
    (82) e -> . e MAS f
    (83) e -> . e MENOS f
    (84) e -> . f
    (85) f -> . MENOS g
    (86) f -> . MAS g
    (87) f -> . g
    (88) g -> . g TIMES h
    (89) g -> . g DIVIDE h
    (90) g -> . g MOD h
    (91) g -> . g POTENCIA h
    (92) g -> . h
    (93) h -> . ENTERO
    (94) h -> . DECIMAL
    (95) h -> . CADENA
    (96) h -> . LITERAL
    (97) h -> . TRUE
    (98) h -> . FALSE
    (99) h -> . call_function_pro
    (100) h -> . array_pro
    (101) h -> . interface_assi
    (102) h -> . L_PAREN a R_PAREN
    (103) h -> . array_val_pro
    (104) h -> . a PUNTO LITERAL
    (105) h -> . a PUNTO nativeFun L_PAREN expresion R_PAREN
    (106) h -> . a PUNTO nativeFun L_PAREN R_PAREN
    (23) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (24) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (25) call_function_pro -> . TOSTRING L_PAREN values R_PAREN
    (115) array_pro -> . L_CORCHETE values R_CORCHETE
    (112) interface_assi -> . L_LLAVE atributos_assi R_LLAVE
    (107) array_val_pro -> . LITERAL dimensions

    NOT             shift and go to state 38
    MENOS           shift and go to state 35
    MAS             shift and go to state 34
    ENTERO          shift and go to state 44
    DECIMAL         shift and go to state 45
    CADENA          shift and go to state 46
    LITERAL         shift and go to state 72
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    L_PAREN         shift and go to state 20
    TOSTRING        shift and go to state 33
    L_CORCHETE      shift and go to state 52
    L_LLAVE         shift and go to state 25

    a                              shift and go to state 71
    b                              shift and go to state 36
    c                              shift and go to state 37
    d                              shift and go to state 39
    e                              shift and go to state 40
    f                              shift and go to state 41
    g                              shift and go to state 42
    h                              shift and go to state 43
    call_function_pro              shift and go to state 73
    array_pro                      shift and go to state 49
    interface_assi                 shift and go to state 50
    array_val_pro                  shift and go to state 51

state 21

    (42) declaration_instruction -> LET . declaracion_list
    (43) declaracion_list -> . declaracion_list COMA assignacion_instruction
    (44) declaracion_list -> . assignacion_instruction
    (45) assignacion_instruction -> . LITERAL COLON type IGUAL a
    (46) assignacion_instruction -> . LITERAL COLON type
    (47) assignacion_instruction -> . LITERAL IGUAL a
    (48) assignacion_instruction -> . LITERAL

    LITERAL         shift and go to state 76

    declaracion_list               shift and go to state 74
    assignacion_instruction        shift and go to state 75

state 22

    (55) assig_pro -> LITERAL . IGUAL a
    (23) call_function_pro -> LITERAL . L_PAREN values R_PAREN
    (24) call_function_pro -> LITERAL . L_PAREN R_PAREN
    (110) sumadores -> LITERAL . MAS MAS
    (111) sumadores -> LITERAL . MENOS MENOS
    (96) h -> LITERAL .
    (107) array_val_pro -> LITERAL . dimensions
    (108) dimensions -> . dimensions L_CORCHETE a R_CORCHETE
    (109) dimensions -> . L_CORCHETE a R_CORCHETE

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    IGUAL           shift and go to state 77
    L_PAREN         shift and go to state 78
    MAS             shift and go to state 79
    MENOS           shift and go to state 80
    TIMES           reduce using rule 96 (h -> LITERAL .)
    DIVIDE          reduce using rule 96 (h -> LITERAL .)
    MOD             reduce using rule 96 (h -> LITERAL .)
    POTENCIA        reduce using rule 96 (h -> LITERAL .)
    DISTINTO_QUE    reduce using rule 96 (h -> LITERAL .)
    MENOR_QUE       reduce using rule 96 (h -> LITERAL .)
    MENOR_IGUAL_QUE reduce using rule 96 (h -> LITERAL .)
    MAYOR_QUE       reduce using rule 96 (h -> LITERAL .)
    MAYOR_IGUAL_QUE reduce using rule 96 (h -> LITERAL .)
    TRIPLE_IGUAL    reduce using rule 96 (h -> LITERAL .)
    AND             reduce using rule 96 (h -> LITERAL .)
    PUNTO           reduce using rule 96 (h -> LITERAL .)
    OR              reduce using rule 96 (h -> LITERAL .)
    L_CORCHETE      shift and go to state 82

  ! MAS             [ reduce using rule 96 (h -> LITERAL .) ]
  ! MENOS           [ reduce using rule 96 (h -> LITERAL .) ]

    dimensions                     shift and go to state 81

state 23

    (41) interface_assign_pro -> a . PUNTO LITERAL IGUAL a
    (69) a -> a . OR b
    (104) h -> a . PUNTO LITERAL
    (105) h -> a . PUNTO nativeFun L_PAREN expresion R_PAREN
    (106) h -> a . PUNTO nativeFun L_PAREN R_PAREN

    PUNTO           shift and go to state 83
    OR              shift and go to state 84


state 24

    (56) if_pro -> IF . L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro

    L_PAREN         shift and go to state 85


state 25

    (112) interface_assi -> L_LLAVE . atributos_assi R_LLAVE
    (113) atributos_assi -> . atributos_assi COMA LITERAL COLON a
    (114) atributos_assi -> . LITERAL COLON a

    LITERAL         shift and go to state 87

    atributos_assi                 shift and go to state 86

state 26

    (60) while_pro -> WHILE . L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE

    L_PAREN         shift and go to state 88


state 27

    (61) for_pro -> FOR . L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (62) for_pro -> FOR . L_PAREN assig_pro SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (65) for_each_pro -> FOR . L_PAREN LET LITERAL OF a R_PAREN L_LLAVE instrucciones R_LLAVE

    L_PAREN         shift and go to state 89


state 28

    (36) interface_pro -> INTERFACE . LITERAL L_LLAVE interface_atributos R_LLAVE

    LITERAL         shift and go to state 90


state 29

    (32) continue_pro -> CONTINUE .

    SEMI_COLON      reduce using rule 32 (continue_pro -> CONTINUE .)
    CONSOLE         reduce using rule 32 (continue_pro -> CONTINUE .)
    LET             reduce using rule 32 (continue_pro -> CONTINUE .)
    LITERAL         reduce using rule 32 (continue_pro -> CONTINUE .)
    IF              reduce using rule 32 (continue_pro -> CONTINUE .)
    WHILE           reduce using rule 32 (continue_pro -> CONTINUE .)
    FOR             reduce using rule 32 (continue_pro -> CONTINUE .)
    INTERFACE       reduce using rule 32 (continue_pro -> CONTINUE .)
    CONTINUE        reduce using rule 32 (continue_pro -> CONTINUE .)
    BREAK           reduce using rule 32 (continue_pro -> CONTINUE .)
    RETURN          reduce using rule 32 (continue_pro -> CONTINUE .)
    FUNCTION        reduce using rule 32 (continue_pro -> CONTINUE .)
    TOSTRING        reduce using rule 32 (continue_pro -> CONTINUE .)
    NOT             reduce using rule 32 (continue_pro -> CONTINUE .)
    MENOS           reduce using rule 32 (continue_pro -> CONTINUE .)
    MAS             reduce using rule 32 (continue_pro -> CONTINUE .)
    ENTERO          reduce using rule 32 (continue_pro -> CONTINUE .)
    DECIMAL         reduce using rule 32 (continue_pro -> CONTINUE .)
    CADENA          reduce using rule 32 (continue_pro -> CONTINUE .)
    TRUE            reduce using rule 32 (continue_pro -> CONTINUE .)
    FALSE           reduce using rule 32 (continue_pro -> CONTINUE .)
    L_PAREN         reduce using rule 32 (continue_pro -> CONTINUE .)
    L_CORCHETE      reduce using rule 32 (continue_pro -> CONTINUE .)
    L_LLAVE         reduce using rule 32 (continue_pro -> CONTINUE .)
    $end            reduce using rule 32 (continue_pro -> CONTINUE .)
    R_LLAVE         reduce using rule 32 (continue_pro -> CONTINUE .)


state 30

    (33) break_pro -> BREAK .

    SEMI_COLON      reduce using rule 33 (break_pro -> BREAK .)
    CONSOLE         reduce using rule 33 (break_pro -> BREAK .)
    LET             reduce using rule 33 (break_pro -> BREAK .)
    LITERAL         reduce using rule 33 (break_pro -> BREAK .)
    IF              reduce using rule 33 (break_pro -> BREAK .)
    WHILE           reduce using rule 33 (break_pro -> BREAK .)
    FOR             reduce using rule 33 (break_pro -> BREAK .)
    INTERFACE       reduce using rule 33 (break_pro -> BREAK .)
    CONTINUE        reduce using rule 33 (break_pro -> BREAK .)
    BREAK           reduce using rule 33 (break_pro -> BREAK .)
    RETURN          reduce using rule 33 (break_pro -> BREAK .)
    FUNCTION        reduce using rule 33 (break_pro -> BREAK .)
    TOSTRING        reduce using rule 33 (break_pro -> BREAK .)
    NOT             reduce using rule 33 (break_pro -> BREAK .)
    MENOS           reduce using rule 33 (break_pro -> BREAK .)
    MAS             reduce using rule 33 (break_pro -> BREAK .)
    ENTERO          reduce using rule 33 (break_pro -> BREAK .)
    DECIMAL         reduce using rule 33 (break_pro -> BREAK .)
    CADENA          reduce using rule 33 (break_pro -> BREAK .)
    TRUE            reduce using rule 33 (break_pro -> BREAK .)
    FALSE           reduce using rule 33 (break_pro -> BREAK .)
    L_PAREN         reduce using rule 33 (break_pro -> BREAK .)
    L_CORCHETE      reduce using rule 33 (break_pro -> BREAK .)
    L_LLAVE         reduce using rule 33 (break_pro -> BREAK .)
    $end            reduce using rule 33 (break_pro -> BREAK .)
    R_LLAVE         reduce using rule 33 (break_pro -> BREAK .)


state 31

    (34) return_pro -> RETURN .
    (35) return_pro -> RETURN . a
    (69) a -> . a OR b
    (70) a -> . b
    (71) b -> . b AND c
    (72) b -> . c
    (73) c -> . NOT d
    (74) c -> . d
    (75) d -> . d DISTINTO_QUE e
    (76) d -> . d MENOR_QUE e
    (77) d -> . d MENOR_IGUAL_QUE e
    (78) d -> . d MAYOR_QUE e
    (79) d -> . d MAYOR_IGUAL_QUE e
    (80) d -> . d TRIPLE_IGUAL e
    (81) d -> . e
    (82) e -> . e MAS f
    (83) e -> . e MENOS f
    (84) e -> . f
    (85) f -> . MENOS g
    (86) f -> . MAS g
    (87) f -> . g
    (88) g -> . g TIMES h
    (89) g -> . g DIVIDE h
    (90) g -> . g MOD h
    (91) g -> . g POTENCIA h
    (92) g -> . h
    (93) h -> . ENTERO
    (94) h -> . DECIMAL
    (95) h -> . CADENA
    (96) h -> . LITERAL
    (97) h -> . TRUE
    (98) h -> . FALSE
    (99) h -> . call_function_pro
    (100) h -> . array_pro
    (101) h -> . interface_assi
    (102) h -> . L_PAREN a R_PAREN
    (103) h -> . array_val_pro
    (104) h -> . a PUNTO LITERAL
    (105) h -> . a PUNTO nativeFun L_PAREN expresion R_PAREN
    (106) h -> . a PUNTO nativeFun L_PAREN R_PAREN
    (23) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (24) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (25) call_function_pro -> . TOSTRING L_PAREN values R_PAREN
    (115) array_pro -> . L_CORCHETE values R_CORCHETE
    (112) interface_assi -> . L_LLAVE atributos_assi R_LLAVE
    (107) array_val_pro -> . LITERAL dimensions

  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for ENTERO resolved as shift
  ! shift/reduce conflict for DECIMAL resolved as shift
  ! shift/reduce conflict for CADENA resolved as shift
  ! shift/reduce conflict for LITERAL resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for L_PAREN resolved as shift
  ! shift/reduce conflict for TOSTRING resolved as shift
  ! shift/reduce conflict for L_CORCHETE resolved as shift
  ! shift/reduce conflict for L_LLAVE resolved as shift
    SEMI_COLON      reduce using rule 34 (return_pro -> RETURN .)
    CONSOLE         reduce using rule 34 (return_pro -> RETURN .)
    LET             reduce using rule 34 (return_pro -> RETURN .)
    IF              reduce using rule 34 (return_pro -> RETURN .)
    WHILE           reduce using rule 34 (return_pro -> RETURN .)
    FOR             reduce using rule 34 (return_pro -> RETURN .)
    INTERFACE       reduce using rule 34 (return_pro -> RETURN .)
    CONTINUE        reduce using rule 34 (return_pro -> RETURN .)
    BREAK           reduce using rule 34 (return_pro -> RETURN .)
    RETURN          reduce using rule 34 (return_pro -> RETURN .)
    FUNCTION        reduce using rule 34 (return_pro -> RETURN .)
    $end            reduce using rule 34 (return_pro -> RETURN .)
    R_LLAVE         reduce using rule 34 (return_pro -> RETURN .)
    NOT             shift and go to state 38
    MENOS           shift and go to state 35
    MAS             shift and go to state 34
    ENTERO          shift and go to state 44
    DECIMAL         shift and go to state 45
    CADENA          shift and go to state 46
    LITERAL         shift and go to state 72
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    L_PAREN         shift and go to state 20
    TOSTRING        shift and go to state 33
    L_CORCHETE      shift and go to state 52
    L_LLAVE         shift and go to state 25

  ! LITERAL         [ reduce using rule 34 (return_pro -> RETURN .) ]
  ! TOSTRING        [ reduce using rule 34 (return_pro -> RETURN .) ]
  ! NOT             [ reduce using rule 34 (return_pro -> RETURN .) ]
  ! MENOS           [ reduce using rule 34 (return_pro -> RETURN .) ]
  ! MAS             [ reduce using rule 34 (return_pro -> RETURN .) ]
  ! ENTERO          [ reduce using rule 34 (return_pro -> RETURN .) ]
  ! DECIMAL         [ reduce using rule 34 (return_pro -> RETURN .) ]
  ! CADENA          [ reduce using rule 34 (return_pro -> RETURN .) ]
  ! TRUE            [ reduce using rule 34 (return_pro -> RETURN .) ]
  ! FALSE           [ reduce using rule 34 (return_pro -> RETURN .) ]
  ! L_PAREN         [ reduce using rule 34 (return_pro -> RETURN .) ]
  ! L_CORCHETE      [ reduce using rule 34 (return_pro -> RETURN .) ]
  ! L_LLAVE         [ reduce using rule 34 (return_pro -> RETURN .) ]

    a                              shift and go to state 91
    b                              shift and go to state 36
    c                              shift and go to state 37
    d                              shift and go to state 39
    e                              shift and go to state 40
    f                              shift and go to state 41
    g                              shift and go to state 42
    h                              shift and go to state 43
    call_function_pro              shift and go to state 73
    array_pro                      shift and go to state 49
    interface_assi                 shift and go to state 50
    array_val_pro                  shift and go to state 51

state 32

    (21) function_pro -> FUNCTION . LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (22) function_pro -> FUNCTION . LITERAL L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE

    LITERAL         shift and go to state 92


state 33

    (25) call_function_pro -> TOSTRING . L_PAREN values R_PAREN

    L_PAREN         shift and go to state 93


state 34

    (86) f -> MAS . g
    (88) g -> . g TIMES h
    (89) g -> . g DIVIDE h
    (90) g -> . g MOD h
    (91) g -> . g POTENCIA h
    (92) g -> . h
    (93) h -> . ENTERO
    (94) h -> . DECIMAL
    (95) h -> . CADENA
    (96) h -> . LITERAL
    (97) h -> . TRUE
    (98) h -> . FALSE
    (99) h -> . call_function_pro
    (100) h -> . array_pro
    (101) h -> . interface_assi
    (102) h -> . L_PAREN a R_PAREN
    (103) h -> . array_val_pro
    (104) h -> . a PUNTO LITERAL
    (105) h -> . a PUNTO nativeFun L_PAREN expresion R_PAREN
    (106) h -> . a PUNTO nativeFun L_PAREN R_PAREN
    (23) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (24) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (25) call_function_pro -> . TOSTRING L_PAREN values R_PAREN
    (115) array_pro -> . L_CORCHETE values R_CORCHETE
    (112) interface_assi -> . L_LLAVE atributos_assi R_LLAVE
    (107) array_val_pro -> . LITERAL dimensions
    (69) a -> . a OR b
    (70) a -> . b
    (71) b -> . b AND c
    (72) b -> . c
    (73) c -> . NOT d
    (74) c -> . d
    (75) d -> . d DISTINTO_QUE e
    (76) d -> . d MENOR_QUE e
    (77) d -> . d MENOR_IGUAL_QUE e
    (78) d -> . d MAYOR_QUE e
    (79) d -> . d MAYOR_IGUAL_QUE e
    (80) d -> . d TRIPLE_IGUAL e
    (81) d -> . e
    (82) e -> . e MAS f
    (83) e -> . e MENOS f
    (84) e -> . f
    (85) f -> . MENOS g
    (86) f -> . MAS g
    (87) f -> . g

    ENTERO          shift and go to state 44
    DECIMAL         shift and go to state 45
    CADENA          shift and go to state 46
    LITERAL         shift and go to state 72
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    L_PAREN         shift and go to state 20
    TOSTRING        shift and go to state 33
    L_CORCHETE      shift and go to state 52
    L_LLAVE         shift and go to state 25
    NOT             shift and go to state 38
    MENOS           shift and go to state 35
    MAS             shift and go to state 34

    g                              shift and go to state 94
    h                              shift and go to state 43
    call_function_pro              shift and go to state 73
    array_pro                      shift and go to state 49
    interface_assi                 shift and go to state 50
    a                              shift and go to state 95
    array_val_pro                  shift and go to state 51
    b                              shift and go to state 36
    c                              shift and go to state 37
    d                              shift and go to state 39
    e                              shift and go to state 40
    f                              shift and go to state 41

state 35

    (85) f -> MENOS . g
    (88) g -> . g TIMES h
    (89) g -> . g DIVIDE h
    (90) g -> . g MOD h
    (91) g -> . g POTENCIA h
    (92) g -> . h
    (93) h -> . ENTERO
    (94) h -> . DECIMAL
    (95) h -> . CADENA
    (96) h -> . LITERAL
    (97) h -> . TRUE
    (98) h -> . FALSE
    (99) h -> . call_function_pro
    (100) h -> . array_pro
    (101) h -> . interface_assi
    (102) h -> . L_PAREN a R_PAREN
    (103) h -> . array_val_pro
    (104) h -> . a PUNTO LITERAL
    (105) h -> . a PUNTO nativeFun L_PAREN expresion R_PAREN
    (106) h -> . a PUNTO nativeFun L_PAREN R_PAREN
    (23) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (24) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (25) call_function_pro -> . TOSTRING L_PAREN values R_PAREN
    (115) array_pro -> . L_CORCHETE values R_CORCHETE
    (112) interface_assi -> . L_LLAVE atributos_assi R_LLAVE
    (107) array_val_pro -> . LITERAL dimensions
    (69) a -> . a OR b
    (70) a -> . b
    (71) b -> . b AND c
    (72) b -> . c
    (73) c -> . NOT d
    (74) c -> . d
    (75) d -> . d DISTINTO_QUE e
    (76) d -> . d MENOR_QUE e
    (77) d -> . d MENOR_IGUAL_QUE e
    (78) d -> . d MAYOR_QUE e
    (79) d -> . d MAYOR_IGUAL_QUE e
    (80) d -> . d TRIPLE_IGUAL e
    (81) d -> . e
    (82) e -> . e MAS f
    (83) e -> . e MENOS f
    (84) e -> . f
    (85) f -> . MENOS g
    (86) f -> . MAS g
    (87) f -> . g

    ENTERO          shift and go to state 44
    DECIMAL         shift and go to state 45
    CADENA          shift and go to state 46
    LITERAL         shift and go to state 72
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    L_PAREN         shift and go to state 20
    TOSTRING        shift and go to state 33
    L_CORCHETE      shift and go to state 52
    L_LLAVE         shift and go to state 25
    NOT             shift and go to state 38
    MENOS           shift and go to state 35
    MAS             shift and go to state 34

    g                              shift and go to state 96
    h                              shift and go to state 43
    call_function_pro              shift and go to state 73
    array_pro                      shift and go to state 49
    interface_assi                 shift and go to state 50
    a                              shift and go to state 95
    array_val_pro                  shift and go to state 51
    b                              shift and go to state 36
    c                              shift and go to state 37
    d                              shift and go to state 39
    e                              shift and go to state 40
    f                              shift and go to state 41

state 36

    (70) a -> b .
    (71) b -> b . AND c

    PUNTO           reduce using rule 70 (a -> b .)
    OR              reduce using rule 70 (a -> b .)
    R_PAREN         reduce using rule 70 (a -> b .)
    SEMI_COLON      reduce using rule 70 (a -> b .)
    CONSOLE         reduce using rule 70 (a -> b .)
    LET             reduce using rule 70 (a -> b .)
    LITERAL         reduce using rule 70 (a -> b .)
    IF              reduce using rule 70 (a -> b .)
    WHILE           reduce using rule 70 (a -> b .)
    FOR             reduce using rule 70 (a -> b .)
    INTERFACE       reduce using rule 70 (a -> b .)
    CONTINUE        reduce using rule 70 (a -> b .)
    BREAK           reduce using rule 70 (a -> b .)
    RETURN          reduce using rule 70 (a -> b .)
    FUNCTION        reduce using rule 70 (a -> b .)
    TOSTRING        reduce using rule 70 (a -> b .)
    NOT             reduce using rule 70 (a -> b .)
    MENOS           reduce using rule 70 (a -> b .)
    MAS             reduce using rule 70 (a -> b .)
    ENTERO          reduce using rule 70 (a -> b .)
    DECIMAL         reduce using rule 70 (a -> b .)
    CADENA          reduce using rule 70 (a -> b .)
    TRUE            reduce using rule 70 (a -> b .)
    FALSE           reduce using rule 70 (a -> b .)
    L_PAREN         reduce using rule 70 (a -> b .)
    L_CORCHETE      reduce using rule 70 (a -> b .)
    L_LLAVE         reduce using rule 70 (a -> b .)
    $end            reduce using rule 70 (a -> b .)
    R_LLAVE         reduce using rule 70 (a -> b .)
    R_CORCHETE      reduce using rule 70 (a -> b .)
    COMA            reduce using rule 70 (a -> b .)
    AND             shift and go to state 97


state 37

    (72) b -> c .

    AND             reduce using rule 72 (b -> c .)
    PUNTO           reduce using rule 72 (b -> c .)
    OR              reduce using rule 72 (b -> c .)
    R_PAREN         reduce using rule 72 (b -> c .)
    SEMI_COLON      reduce using rule 72 (b -> c .)
    CONSOLE         reduce using rule 72 (b -> c .)
    LET             reduce using rule 72 (b -> c .)
    LITERAL         reduce using rule 72 (b -> c .)
    IF              reduce using rule 72 (b -> c .)
    WHILE           reduce using rule 72 (b -> c .)
    FOR             reduce using rule 72 (b -> c .)
    INTERFACE       reduce using rule 72 (b -> c .)
    CONTINUE        reduce using rule 72 (b -> c .)
    BREAK           reduce using rule 72 (b -> c .)
    RETURN          reduce using rule 72 (b -> c .)
    FUNCTION        reduce using rule 72 (b -> c .)
    TOSTRING        reduce using rule 72 (b -> c .)
    NOT             reduce using rule 72 (b -> c .)
    MENOS           reduce using rule 72 (b -> c .)
    MAS             reduce using rule 72 (b -> c .)
    ENTERO          reduce using rule 72 (b -> c .)
    DECIMAL         reduce using rule 72 (b -> c .)
    CADENA          reduce using rule 72 (b -> c .)
    TRUE            reduce using rule 72 (b -> c .)
    FALSE           reduce using rule 72 (b -> c .)
    L_PAREN         reduce using rule 72 (b -> c .)
    L_CORCHETE      reduce using rule 72 (b -> c .)
    L_LLAVE         reduce using rule 72 (b -> c .)
    $end            reduce using rule 72 (b -> c .)
    R_LLAVE         reduce using rule 72 (b -> c .)
    R_CORCHETE      reduce using rule 72 (b -> c .)
    COMA            reduce using rule 72 (b -> c .)


state 38

    (73) c -> NOT . d
    (75) d -> . d DISTINTO_QUE e
    (76) d -> . d MENOR_QUE e
    (77) d -> . d MENOR_IGUAL_QUE e
    (78) d -> . d MAYOR_QUE e
    (79) d -> . d MAYOR_IGUAL_QUE e
    (80) d -> . d TRIPLE_IGUAL e
    (81) d -> . e
    (82) e -> . e MAS f
    (83) e -> . e MENOS f
    (84) e -> . f
    (85) f -> . MENOS g
    (86) f -> . MAS g
    (87) f -> . g
    (88) g -> . g TIMES h
    (89) g -> . g DIVIDE h
    (90) g -> . g MOD h
    (91) g -> . g POTENCIA h
    (92) g -> . h
    (93) h -> . ENTERO
    (94) h -> . DECIMAL
    (95) h -> . CADENA
    (96) h -> . LITERAL
    (97) h -> . TRUE
    (98) h -> . FALSE
    (99) h -> . call_function_pro
    (100) h -> . array_pro
    (101) h -> . interface_assi
    (102) h -> . L_PAREN a R_PAREN
    (103) h -> . array_val_pro
    (104) h -> . a PUNTO LITERAL
    (105) h -> . a PUNTO nativeFun L_PAREN expresion R_PAREN
    (106) h -> . a PUNTO nativeFun L_PAREN R_PAREN
    (23) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (24) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (25) call_function_pro -> . TOSTRING L_PAREN values R_PAREN
    (115) array_pro -> . L_CORCHETE values R_CORCHETE
    (112) interface_assi -> . L_LLAVE atributos_assi R_LLAVE
    (107) array_val_pro -> . LITERAL dimensions
    (69) a -> . a OR b
    (70) a -> . b
    (71) b -> . b AND c
    (72) b -> . c
    (73) c -> . NOT d
    (74) c -> . d

    MENOS           shift and go to state 35
    MAS             shift and go to state 34
    ENTERO          shift and go to state 44
    DECIMAL         shift and go to state 45
    CADENA          shift and go to state 46
    LITERAL         shift and go to state 72
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    L_PAREN         shift and go to state 20
    TOSTRING        shift and go to state 33
    L_CORCHETE      shift and go to state 52
    L_LLAVE         shift and go to state 25
    NOT             shift and go to state 38

    d                              shift and go to state 98
    e                              shift and go to state 40
    f                              shift and go to state 41
    g                              shift and go to state 42
    h                              shift and go to state 43
    call_function_pro              shift and go to state 73
    array_pro                      shift and go to state 49
    interface_assi                 shift and go to state 50
    a                              shift and go to state 95
    array_val_pro                  shift and go to state 51
    b                              shift and go to state 36
    c                              shift and go to state 37

state 39

    (74) c -> d .
    (75) d -> d . DISTINTO_QUE e
    (76) d -> d . MENOR_QUE e
    (77) d -> d . MENOR_IGUAL_QUE e
    (78) d -> d . MAYOR_QUE e
    (79) d -> d . MAYOR_IGUAL_QUE e
    (80) d -> d . TRIPLE_IGUAL e

    AND             reduce using rule 74 (c -> d .)
    PUNTO           reduce using rule 74 (c -> d .)
    OR              reduce using rule 74 (c -> d .)
    R_PAREN         reduce using rule 74 (c -> d .)
    SEMI_COLON      reduce using rule 74 (c -> d .)
    CONSOLE         reduce using rule 74 (c -> d .)
    LET             reduce using rule 74 (c -> d .)
    LITERAL         reduce using rule 74 (c -> d .)
    IF              reduce using rule 74 (c -> d .)
    WHILE           reduce using rule 74 (c -> d .)
    FOR             reduce using rule 74 (c -> d .)
    INTERFACE       reduce using rule 74 (c -> d .)
    CONTINUE        reduce using rule 74 (c -> d .)
    BREAK           reduce using rule 74 (c -> d .)
    RETURN          reduce using rule 74 (c -> d .)
    FUNCTION        reduce using rule 74 (c -> d .)
    TOSTRING        reduce using rule 74 (c -> d .)
    NOT             reduce using rule 74 (c -> d .)
    MENOS           reduce using rule 74 (c -> d .)
    MAS             reduce using rule 74 (c -> d .)
    ENTERO          reduce using rule 74 (c -> d .)
    DECIMAL         reduce using rule 74 (c -> d .)
    CADENA          reduce using rule 74 (c -> d .)
    TRUE            reduce using rule 74 (c -> d .)
    FALSE           reduce using rule 74 (c -> d .)
    L_PAREN         reduce using rule 74 (c -> d .)
    L_CORCHETE      reduce using rule 74 (c -> d .)
    L_LLAVE         reduce using rule 74 (c -> d .)
    $end            reduce using rule 74 (c -> d .)
    R_LLAVE         reduce using rule 74 (c -> d .)
    R_CORCHETE      reduce using rule 74 (c -> d .)
    COMA            reduce using rule 74 (c -> d .)
    DISTINTO_QUE    shift and go to state 99
    MENOR_QUE       shift and go to state 100
    MENOR_IGUAL_QUE shift and go to state 101
    MAYOR_QUE       shift and go to state 102
    MAYOR_IGUAL_QUE shift and go to state 103
    TRIPLE_IGUAL    shift and go to state 104


state 40

    (81) d -> e .
    (82) e -> e . MAS f
    (83) e -> e . MENOS f

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    DISTINTO_QUE    reduce using rule 81 (d -> e .)
    MENOR_QUE       reduce using rule 81 (d -> e .)
    MENOR_IGUAL_QUE reduce using rule 81 (d -> e .)
    MAYOR_QUE       reduce using rule 81 (d -> e .)
    MAYOR_IGUAL_QUE reduce using rule 81 (d -> e .)
    TRIPLE_IGUAL    reduce using rule 81 (d -> e .)
    AND             reduce using rule 81 (d -> e .)
    PUNTO           reduce using rule 81 (d -> e .)
    OR              reduce using rule 81 (d -> e .)
    R_PAREN         reduce using rule 81 (d -> e .)
    SEMI_COLON      reduce using rule 81 (d -> e .)
    CONSOLE         reduce using rule 81 (d -> e .)
    LET             reduce using rule 81 (d -> e .)
    LITERAL         reduce using rule 81 (d -> e .)
    IF              reduce using rule 81 (d -> e .)
    WHILE           reduce using rule 81 (d -> e .)
    FOR             reduce using rule 81 (d -> e .)
    INTERFACE       reduce using rule 81 (d -> e .)
    CONTINUE        reduce using rule 81 (d -> e .)
    BREAK           reduce using rule 81 (d -> e .)
    RETURN          reduce using rule 81 (d -> e .)
    FUNCTION        reduce using rule 81 (d -> e .)
    TOSTRING        reduce using rule 81 (d -> e .)
    NOT             reduce using rule 81 (d -> e .)
    ENTERO          reduce using rule 81 (d -> e .)
    DECIMAL         reduce using rule 81 (d -> e .)
    CADENA          reduce using rule 81 (d -> e .)
    TRUE            reduce using rule 81 (d -> e .)
    FALSE           reduce using rule 81 (d -> e .)
    L_PAREN         reduce using rule 81 (d -> e .)
    L_CORCHETE      reduce using rule 81 (d -> e .)
    L_LLAVE         reduce using rule 81 (d -> e .)
    $end            reduce using rule 81 (d -> e .)
    R_LLAVE         reduce using rule 81 (d -> e .)
    R_CORCHETE      reduce using rule 81 (d -> e .)
    COMA            reduce using rule 81 (d -> e .)
    MAS             shift and go to state 105
    MENOS           shift and go to state 106

  ! MENOS           [ reduce using rule 81 (d -> e .) ]
  ! MAS             [ reduce using rule 81 (d -> e .) ]


state 41

    (84) e -> f .

    MAS             reduce using rule 84 (e -> f .)
    MENOS           reduce using rule 84 (e -> f .)
    DISTINTO_QUE    reduce using rule 84 (e -> f .)
    MENOR_QUE       reduce using rule 84 (e -> f .)
    MENOR_IGUAL_QUE reduce using rule 84 (e -> f .)
    MAYOR_QUE       reduce using rule 84 (e -> f .)
    MAYOR_IGUAL_QUE reduce using rule 84 (e -> f .)
    TRIPLE_IGUAL    reduce using rule 84 (e -> f .)
    AND             reduce using rule 84 (e -> f .)
    PUNTO           reduce using rule 84 (e -> f .)
    OR              reduce using rule 84 (e -> f .)
    R_PAREN         reduce using rule 84 (e -> f .)
    SEMI_COLON      reduce using rule 84 (e -> f .)
    CONSOLE         reduce using rule 84 (e -> f .)
    LET             reduce using rule 84 (e -> f .)
    LITERAL         reduce using rule 84 (e -> f .)
    IF              reduce using rule 84 (e -> f .)
    WHILE           reduce using rule 84 (e -> f .)
    FOR             reduce using rule 84 (e -> f .)
    INTERFACE       reduce using rule 84 (e -> f .)
    CONTINUE        reduce using rule 84 (e -> f .)
    BREAK           reduce using rule 84 (e -> f .)
    RETURN          reduce using rule 84 (e -> f .)
    FUNCTION        reduce using rule 84 (e -> f .)
    TOSTRING        reduce using rule 84 (e -> f .)
    NOT             reduce using rule 84 (e -> f .)
    ENTERO          reduce using rule 84 (e -> f .)
    DECIMAL         reduce using rule 84 (e -> f .)
    CADENA          reduce using rule 84 (e -> f .)
    TRUE            reduce using rule 84 (e -> f .)
    FALSE           reduce using rule 84 (e -> f .)
    L_PAREN         reduce using rule 84 (e -> f .)
    L_CORCHETE      reduce using rule 84 (e -> f .)
    L_LLAVE         reduce using rule 84 (e -> f .)
    $end            reduce using rule 84 (e -> f .)
    R_LLAVE         reduce using rule 84 (e -> f .)
    R_CORCHETE      reduce using rule 84 (e -> f .)
    COMA            reduce using rule 84 (e -> f .)


state 42

    (87) f -> g .
    (88) g -> g . TIMES h
    (89) g -> g . DIVIDE h
    (90) g -> g . MOD h
    (91) g -> g . POTENCIA h

    MAS             reduce using rule 87 (f -> g .)
    MENOS           reduce using rule 87 (f -> g .)
    DISTINTO_QUE    reduce using rule 87 (f -> g .)
    MENOR_QUE       reduce using rule 87 (f -> g .)
    MENOR_IGUAL_QUE reduce using rule 87 (f -> g .)
    MAYOR_QUE       reduce using rule 87 (f -> g .)
    MAYOR_IGUAL_QUE reduce using rule 87 (f -> g .)
    TRIPLE_IGUAL    reduce using rule 87 (f -> g .)
    AND             reduce using rule 87 (f -> g .)
    PUNTO           reduce using rule 87 (f -> g .)
    OR              reduce using rule 87 (f -> g .)
    R_PAREN         reduce using rule 87 (f -> g .)
    SEMI_COLON      reduce using rule 87 (f -> g .)
    CONSOLE         reduce using rule 87 (f -> g .)
    LET             reduce using rule 87 (f -> g .)
    LITERAL         reduce using rule 87 (f -> g .)
    IF              reduce using rule 87 (f -> g .)
    WHILE           reduce using rule 87 (f -> g .)
    FOR             reduce using rule 87 (f -> g .)
    INTERFACE       reduce using rule 87 (f -> g .)
    CONTINUE        reduce using rule 87 (f -> g .)
    BREAK           reduce using rule 87 (f -> g .)
    RETURN          reduce using rule 87 (f -> g .)
    FUNCTION        reduce using rule 87 (f -> g .)
    TOSTRING        reduce using rule 87 (f -> g .)
    NOT             reduce using rule 87 (f -> g .)
    ENTERO          reduce using rule 87 (f -> g .)
    DECIMAL         reduce using rule 87 (f -> g .)
    CADENA          reduce using rule 87 (f -> g .)
    TRUE            reduce using rule 87 (f -> g .)
    FALSE           reduce using rule 87 (f -> g .)
    L_PAREN         reduce using rule 87 (f -> g .)
    L_CORCHETE      reduce using rule 87 (f -> g .)
    L_LLAVE         reduce using rule 87 (f -> g .)
    $end            reduce using rule 87 (f -> g .)
    R_LLAVE         reduce using rule 87 (f -> g .)
    R_CORCHETE      reduce using rule 87 (f -> g .)
    COMA            reduce using rule 87 (f -> g .)
    TIMES           shift and go to state 107
    DIVIDE          shift and go to state 108
    MOD             shift and go to state 109
    POTENCIA        shift and go to state 110


state 43

    (92) g -> h .

    TIMES           reduce using rule 92 (g -> h .)
    DIVIDE          reduce using rule 92 (g -> h .)
    MOD             reduce using rule 92 (g -> h .)
    POTENCIA        reduce using rule 92 (g -> h .)
    MAS             reduce using rule 92 (g -> h .)
    MENOS           reduce using rule 92 (g -> h .)
    DISTINTO_QUE    reduce using rule 92 (g -> h .)
    MENOR_QUE       reduce using rule 92 (g -> h .)
    MENOR_IGUAL_QUE reduce using rule 92 (g -> h .)
    MAYOR_QUE       reduce using rule 92 (g -> h .)
    MAYOR_IGUAL_QUE reduce using rule 92 (g -> h .)
    TRIPLE_IGUAL    reduce using rule 92 (g -> h .)
    AND             reduce using rule 92 (g -> h .)
    PUNTO           reduce using rule 92 (g -> h .)
    OR              reduce using rule 92 (g -> h .)
    R_PAREN         reduce using rule 92 (g -> h .)
    SEMI_COLON      reduce using rule 92 (g -> h .)
    CONSOLE         reduce using rule 92 (g -> h .)
    LET             reduce using rule 92 (g -> h .)
    LITERAL         reduce using rule 92 (g -> h .)
    IF              reduce using rule 92 (g -> h .)
    WHILE           reduce using rule 92 (g -> h .)
    FOR             reduce using rule 92 (g -> h .)
    INTERFACE       reduce using rule 92 (g -> h .)
    CONTINUE        reduce using rule 92 (g -> h .)
    BREAK           reduce using rule 92 (g -> h .)
    RETURN          reduce using rule 92 (g -> h .)
    FUNCTION        reduce using rule 92 (g -> h .)
    TOSTRING        reduce using rule 92 (g -> h .)
    NOT             reduce using rule 92 (g -> h .)
    ENTERO          reduce using rule 92 (g -> h .)
    DECIMAL         reduce using rule 92 (g -> h .)
    CADENA          reduce using rule 92 (g -> h .)
    TRUE            reduce using rule 92 (g -> h .)
    FALSE           reduce using rule 92 (g -> h .)
    L_PAREN         reduce using rule 92 (g -> h .)
    L_CORCHETE      reduce using rule 92 (g -> h .)
    L_LLAVE         reduce using rule 92 (g -> h .)
    $end            reduce using rule 92 (g -> h .)
    R_LLAVE         reduce using rule 92 (g -> h .)
    R_CORCHETE      reduce using rule 92 (g -> h .)
    COMA            reduce using rule 92 (g -> h .)


state 44

    (93) h -> ENTERO .

    TIMES           reduce using rule 93 (h -> ENTERO .)
    DIVIDE          reduce using rule 93 (h -> ENTERO .)
    MOD             reduce using rule 93 (h -> ENTERO .)
    POTENCIA        reduce using rule 93 (h -> ENTERO .)
    MAS             reduce using rule 93 (h -> ENTERO .)
    MENOS           reduce using rule 93 (h -> ENTERO .)
    DISTINTO_QUE    reduce using rule 93 (h -> ENTERO .)
    MENOR_QUE       reduce using rule 93 (h -> ENTERO .)
    MENOR_IGUAL_QUE reduce using rule 93 (h -> ENTERO .)
    MAYOR_QUE       reduce using rule 93 (h -> ENTERO .)
    MAYOR_IGUAL_QUE reduce using rule 93 (h -> ENTERO .)
    TRIPLE_IGUAL    reduce using rule 93 (h -> ENTERO .)
    AND             reduce using rule 93 (h -> ENTERO .)
    PUNTO           reduce using rule 93 (h -> ENTERO .)
    OR              reduce using rule 93 (h -> ENTERO .)
    R_PAREN         reduce using rule 93 (h -> ENTERO .)
    SEMI_COLON      reduce using rule 93 (h -> ENTERO .)
    CONSOLE         reduce using rule 93 (h -> ENTERO .)
    LET             reduce using rule 93 (h -> ENTERO .)
    LITERAL         reduce using rule 93 (h -> ENTERO .)
    IF              reduce using rule 93 (h -> ENTERO .)
    WHILE           reduce using rule 93 (h -> ENTERO .)
    FOR             reduce using rule 93 (h -> ENTERO .)
    INTERFACE       reduce using rule 93 (h -> ENTERO .)
    CONTINUE        reduce using rule 93 (h -> ENTERO .)
    BREAK           reduce using rule 93 (h -> ENTERO .)
    RETURN          reduce using rule 93 (h -> ENTERO .)
    FUNCTION        reduce using rule 93 (h -> ENTERO .)
    TOSTRING        reduce using rule 93 (h -> ENTERO .)
    NOT             reduce using rule 93 (h -> ENTERO .)
    ENTERO          reduce using rule 93 (h -> ENTERO .)
    DECIMAL         reduce using rule 93 (h -> ENTERO .)
    CADENA          reduce using rule 93 (h -> ENTERO .)
    TRUE            reduce using rule 93 (h -> ENTERO .)
    FALSE           reduce using rule 93 (h -> ENTERO .)
    L_PAREN         reduce using rule 93 (h -> ENTERO .)
    L_CORCHETE      reduce using rule 93 (h -> ENTERO .)
    L_LLAVE         reduce using rule 93 (h -> ENTERO .)
    $end            reduce using rule 93 (h -> ENTERO .)
    R_LLAVE         reduce using rule 93 (h -> ENTERO .)
    R_CORCHETE      reduce using rule 93 (h -> ENTERO .)
    COMA            reduce using rule 93 (h -> ENTERO .)


state 45

    (94) h -> DECIMAL .

    TIMES           reduce using rule 94 (h -> DECIMAL .)
    DIVIDE          reduce using rule 94 (h -> DECIMAL .)
    MOD             reduce using rule 94 (h -> DECIMAL .)
    POTENCIA        reduce using rule 94 (h -> DECIMAL .)
    MAS             reduce using rule 94 (h -> DECIMAL .)
    MENOS           reduce using rule 94 (h -> DECIMAL .)
    DISTINTO_QUE    reduce using rule 94 (h -> DECIMAL .)
    MENOR_QUE       reduce using rule 94 (h -> DECIMAL .)
    MENOR_IGUAL_QUE reduce using rule 94 (h -> DECIMAL .)
    MAYOR_QUE       reduce using rule 94 (h -> DECIMAL .)
    MAYOR_IGUAL_QUE reduce using rule 94 (h -> DECIMAL .)
    TRIPLE_IGUAL    reduce using rule 94 (h -> DECIMAL .)
    AND             reduce using rule 94 (h -> DECIMAL .)
    PUNTO           reduce using rule 94 (h -> DECIMAL .)
    OR              reduce using rule 94 (h -> DECIMAL .)
    R_PAREN         reduce using rule 94 (h -> DECIMAL .)
    SEMI_COLON      reduce using rule 94 (h -> DECIMAL .)
    CONSOLE         reduce using rule 94 (h -> DECIMAL .)
    LET             reduce using rule 94 (h -> DECIMAL .)
    LITERAL         reduce using rule 94 (h -> DECIMAL .)
    IF              reduce using rule 94 (h -> DECIMAL .)
    WHILE           reduce using rule 94 (h -> DECIMAL .)
    FOR             reduce using rule 94 (h -> DECIMAL .)
    INTERFACE       reduce using rule 94 (h -> DECIMAL .)
    CONTINUE        reduce using rule 94 (h -> DECIMAL .)
    BREAK           reduce using rule 94 (h -> DECIMAL .)
    RETURN          reduce using rule 94 (h -> DECIMAL .)
    FUNCTION        reduce using rule 94 (h -> DECIMAL .)
    TOSTRING        reduce using rule 94 (h -> DECIMAL .)
    NOT             reduce using rule 94 (h -> DECIMAL .)
    ENTERO          reduce using rule 94 (h -> DECIMAL .)
    DECIMAL         reduce using rule 94 (h -> DECIMAL .)
    CADENA          reduce using rule 94 (h -> DECIMAL .)
    TRUE            reduce using rule 94 (h -> DECIMAL .)
    FALSE           reduce using rule 94 (h -> DECIMAL .)
    L_PAREN         reduce using rule 94 (h -> DECIMAL .)
    L_CORCHETE      reduce using rule 94 (h -> DECIMAL .)
    L_LLAVE         reduce using rule 94 (h -> DECIMAL .)
    $end            reduce using rule 94 (h -> DECIMAL .)
    R_LLAVE         reduce using rule 94 (h -> DECIMAL .)
    R_CORCHETE      reduce using rule 94 (h -> DECIMAL .)
    COMA            reduce using rule 94 (h -> DECIMAL .)


state 46

    (95) h -> CADENA .

    TIMES           reduce using rule 95 (h -> CADENA .)
    DIVIDE          reduce using rule 95 (h -> CADENA .)
    MOD             reduce using rule 95 (h -> CADENA .)
    POTENCIA        reduce using rule 95 (h -> CADENA .)
    MAS             reduce using rule 95 (h -> CADENA .)
    MENOS           reduce using rule 95 (h -> CADENA .)
    DISTINTO_QUE    reduce using rule 95 (h -> CADENA .)
    MENOR_QUE       reduce using rule 95 (h -> CADENA .)
    MENOR_IGUAL_QUE reduce using rule 95 (h -> CADENA .)
    MAYOR_QUE       reduce using rule 95 (h -> CADENA .)
    MAYOR_IGUAL_QUE reduce using rule 95 (h -> CADENA .)
    TRIPLE_IGUAL    reduce using rule 95 (h -> CADENA .)
    AND             reduce using rule 95 (h -> CADENA .)
    PUNTO           reduce using rule 95 (h -> CADENA .)
    OR              reduce using rule 95 (h -> CADENA .)
    R_PAREN         reduce using rule 95 (h -> CADENA .)
    SEMI_COLON      reduce using rule 95 (h -> CADENA .)
    CONSOLE         reduce using rule 95 (h -> CADENA .)
    LET             reduce using rule 95 (h -> CADENA .)
    LITERAL         reduce using rule 95 (h -> CADENA .)
    IF              reduce using rule 95 (h -> CADENA .)
    WHILE           reduce using rule 95 (h -> CADENA .)
    FOR             reduce using rule 95 (h -> CADENA .)
    INTERFACE       reduce using rule 95 (h -> CADENA .)
    CONTINUE        reduce using rule 95 (h -> CADENA .)
    BREAK           reduce using rule 95 (h -> CADENA .)
    RETURN          reduce using rule 95 (h -> CADENA .)
    FUNCTION        reduce using rule 95 (h -> CADENA .)
    TOSTRING        reduce using rule 95 (h -> CADENA .)
    NOT             reduce using rule 95 (h -> CADENA .)
    ENTERO          reduce using rule 95 (h -> CADENA .)
    DECIMAL         reduce using rule 95 (h -> CADENA .)
    CADENA          reduce using rule 95 (h -> CADENA .)
    TRUE            reduce using rule 95 (h -> CADENA .)
    FALSE           reduce using rule 95 (h -> CADENA .)
    L_PAREN         reduce using rule 95 (h -> CADENA .)
    L_CORCHETE      reduce using rule 95 (h -> CADENA .)
    L_LLAVE         reduce using rule 95 (h -> CADENA .)
    $end            reduce using rule 95 (h -> CADENA .)
    R_LLAVE         reduce using rule 95 (h -> CADENA .)
    R_CORCHETE      reduce using rule 95 (h -> CADENA .)
    COMA            reduce using rule 95 (h -> CADENA .)


state 47

    (97) h -> TRUE .

    TIMES           reduce using rule 97 (h -> TRUE .)
    DIVIDE          reduce using rule 97 (h -> TRUE .)
    MOD             reduce using rule 97 (h -> TRUE .)
    POTENCIA        reduce using rule 97 (h -> TRUE .)
    MAS             reduce using rule 97 (h -> TRUE .)
    MENOS           reduce using rule 97 (h -> TRUE .)
    DISTINTO_QUE    reduce using rule 97 (h -> TRUE .)
    MENOR_QUE       reduce using rule 97 (h -> TRUE .)
    MENOR_IGUAL_QUE reduce using rule 97 (h -> TRUE .)
    MAYOR_QUE       reduce using rule 97 (h -> TRUE .)
    MAYOR_IGUAL_QUE reduce using rule 97 (h -> TRUE .)
    TRIPLE_IGUAL    reduce using rule 97 (h -> TRUE .)
    AND             reduce using rule 97 (h -> TRUE .)
    PUNTO           reduce using rule 97 (h -> TRUE .)
    OR              reduce using rule 97 (h -> TRUE .)
    R_PAREN         reduce using rule 97 (h -> TRUE .)
    SEMI_COLON      reduce using rule 97 (h -> TRUE .)
    CONSOLE         reduce using rule 97 (h -> TRUE .)
    LET             reduce using rule 97 (h -> TRUE .)
    LITERAL         reduce using rule 97 (h -> TRUE .)
    IF              reduce using rule 97 (h -> TRUE .)
    WHILE           reduce using rule 97 (h -> TRUE .)
    FOR             reduce using rule 97 (h -> TRUE .)
    INTERFACE       reduce using rule 97 (h -> TRUE .)
    CONTINUE        reduce using rule 97 (h -> TRUE .)
    BREAK           reduce using rule 97 (h -> TRUE .)
    RETURN          reduce using rule 97 (h -> TRUE .)
    FUNCTION        reduce using rule 97 (h -> TRUE .)
    TOSTRING        reduce using rule 97 (h -> TRUE .)
    NOT             reduce using rule 97 (h -> TRUE .)
    ENTERO          reduce using rule 97 (h -> TRUE .)
    DECIMAL         reduce using rule 97 (h -> TRUE .)
    CADENA          reduce using rule 97 (h -> TRUE .)
    TRUE            reduce using rule 97 (h -> TRUE .)
    FALSE           reduce using rule 97 (h -> TRUE .)
    L_PAREN         reduce using rule 97 (h -> TRUE .)
    L_CORCHETE      reduce using rule 97 (h -> TRUE .)
    L_LLAVE         reduce using rule 97 (h -> TRUE .)
    $end            reduce using rule 97 (h -> TRUE .)
    R_LLAVE         reduce using rule 97 (h -> TRUE .)
    R_CORCHETE      reduce using rule 97 (h -> TRUE .)
    COMA            reduce using rule 97 (h -> TRUE .)


state 48

    (98) h -> FALSE .

    TIMES           reduce using rule 98 (h -> FALSE .)
    DIVIDE          reduce using rule 98 (h -> FALSE .)
    MOD             reduce using rule 98 (h -> FALSE .)
    POTENCIA        reduce using rule 98 (h -> FALSE .)
    MAS             reduce using rule 98 (h -> FALSE .)
    MENOS           reduce using rule 98 (h -> FALSE .)
    DISTINTO_QUE    reduce using rule 98 (h -> FALSE .)
    MENOR_QUE       reduce using rule 98 (h -> FALSE .)
    MENOR_IGUAL_QUE reduce using rule 98 (h -> FALSE .)
    MAYOR_QUE       reduce using rule 98 (h -> FALSE .)
    MAYOR_IGUAL_QUE reduce using rule 98 (h -> FALSE .)
    TRIPLE_IGUAL    reduce using rule 98 (h -> FALSE .)
    AND             reduce using rule 98 (h -> FALSE .)
    PUNTO           reduce using rule 98 (h -> FALSE .)
    OR              reduce using rule 98 (h -> FALSE .)
    R_PAREN         reduce using rule 98 (h -> FALSE .)
    SEMI_COLON      reduce using rule 98 (h -> FALSE .)
    CONSOLE         reduce using rule 98 (h -> FALSE .)
    LET             reduce using rule 98 (h -> FALSE .)
    LITERAL         reduce using rule 98 (h -> FALSE .)
    IF              reduce using rule 98 (h -> FALSE .)
    WHILE           reduce using rule 98 (h -> FALSE .)
    FOR             reduce using rule 98 (h -> FALSE .)
    INTERFACE       reduce using rule 98 (h -> FALSE .)
    CONTINUE        reduce using rule 98 (h -> FALSE .)
    BREAK           reduce using rule 98 (h -> FALSE .)
    RETURN          reduce using rule 98 (h -> FALSE .)
    FUNCTION        reduce using rule 98 (h -> FALSE .)
    TOSTRING        reduce using rule 98 (h -> FALSE .)
    NOT             reduce using rule 98 (h -> FALSE .)
    ENTERO          reduce using rule 98 (h -> FALSE .)
    DECIMAL         reduce using rule 98 (h -> FALSE .)
    CADENA          reduce using rule 98 (h -> FALSE .)
    TRUE            reduce using rule 98 (h -> FALSE .)
    FALSE           reduce using rule 98 (h -> FALSE .)
    L_PAREN         reduce using rule 98 (h -> FALSE .)
    L_CORCHETE      reduce using rule 98 (h -> FALSE .)
    L_LLAVE         reduce using rule 98 (h -> FALSE .)
    $end            reduce using rule 98 (h -> FALSE .)
    R_LLAVE         reduce using rule 98 (h -> FALSE .)
    R_CORCHETE      reduce using rule 98 (h -> FALSE .)
    COMA            reduce using rule 98 (h -> FALSE .)


state 49

    (100) h -> array_pro .

    TIMES           reduce using rule 100 (h -> array_pro .)
    DIVIDE          reduce using rule 100 (h -> array_pro .)
    MOD             reduce using rule 100 (h -> array_pro .)
    POTENCIA        reduce using rule 100 (h -> array_pro .)
    MAS             reduce using rule 100 (h -> array_pro .)
    MENOS           reduce using rule 100 (h -> array_pro .)
    DISTINTO_QUE    reduce using rule 100 (h -> array_pro .)
    MENOR_QUE       reduce using rule 100 (h -> array_pro .)
    MENOR_IGUAL_QUE reduce using rule 100 (h -> array_pro .)
    MAYOR_QUE       reduce using rule 100 (h -> array_pro .)
    MAYOR_IGUAL_QUE reduce using rule 100 (h -> array_pro .)
    TRIPLE_IGUAL    reduce using rule 100 (h -> array_pro .)
    AND             reduce using rule 100 (h -> array_pro .)
    PUNTO           reduce using rule 100 (h -> array_pro .)
    OR              reduce using rule 100 (h -> array_pro .)
    R_PAREN         reduce using rule 100 (h -> array_pro .)
    SEMI_COLON      reduce using rule 100 (h -> array_pro .)
    CONSOLE         reduce using rule 100 (h -> array_pro .)
    LET             reduce using rule 100 (h -> array_pro .)
    LITERAL         reduce using rule 100 (h -> array_pro .)
    IF              reduce using rule 100 (h -> array_pro .)
    WHILE           reduce using rule 100 (h -> array_pro .)
    FOR             reduce using rule 100 (h -> array_pro .)
    INTERFACE       reduce using rule 100 (h -> array_pro .)
    CONTINUE        reduce using rule 100 (h -> array_pro .)
    BREAK           reduce using rule 100 (h -> array_pro .)
    RETURN          reduce using rule 100 (h -> array_pro .)
    FUNCTION        reduce using rule 100 (h -> array_pro .)
    TOSTRING        reduce using rule 100 (h -> array_pro .)
    NOT             reduce using rule 100 (h -> array_pro .)
    ENTERO          reduce using rule 100 (h -> array_pro .)
    DECIMAL         reduce using rule 100 (h -> array_pro .)
    CADENA          reduce using rule 100 (h -> array_pro .)
    TRUE            reduce using rule 100 (h -> array_pro .)
    FALSE           reduce using rule 100 (h -> array_pro .)
    L_PAREN         reduce using rule 100 (h -> array_pro .)
    L_CORCHETE      reduce using rule 100 (h -> array_pro .)
    L_LLAVE         reduce using rule 100 (h -> array_pro .)
    $end            reduce using rule 100 (h -> array_pro .)
    R_LLAVE         reduce using rule 100 (h -> array_pro .)
    R_CORCHETE      reduce using rule 100 (h -> array_pro .)
    COMA            reduce using rule 100 (h -> array_pro .)


state 50

    (101) h -> interface_assi .

    TIMES           reduce using rule 101 (h -> interface_assi .)
    DIVIDE          reduce using rule 101 (h -> interface_assi .)
    MOD             reduce using rule 101 (h -> interface_assi .)
    POTENCIA        reduce using rule 101 (h -> interface_assi .)
    MAS             reduce using rule 101 (h -> interface_assi .)
    MENOS           reduce using rule 101 (h -> interface_assi .)
    DISTINTO_QUE    reduce using rule 101 (h -> interface_assi .)
    MENOR_QUE       reduce using rule 101 (h -> interface_assi .)
    MENOR_IGUAL_QUE reduce using rule 101 (h -> interface_assi .)
    MAYOR_QUE       reduce using rule 101 (h -> interface_assi .)
    MAYOR_IGUAL_QUE reduce using rule 101 (h -> interface_assi .)
    TRIPLE_IGUAL    reduce using rule 101 (h -> interface_assi .)
    AND             reduce using rule 101 (h -> interface_assi .)
    PUNTO           reduce using rule 101 (h -> interface_assi .)
    OR              reduce using rule 101 (h -> interface_assi .)
    R_PAREN         reduce using rule 101 (h -> interface_assi .)
    SEMI_COLON      reduce using rule 101 (h -> interface_assi .)
    CONSOLE         reduce using rule 101 (h -> interface_assi .)
    LET             reduce using rule 101 (h -> interface_assi .)
    LITERAL         reduce using rule 101 (h -> interface_assi .)
    IF              reduce using rule 101 (h -> interface_assi .)
    WHILE           reduce using rule 101 (h -> interface_assi .)
    FOR             reduce using rule 101 (h -> interface_assi .)
    INTERFACE       reduce using rule 101 (h -> interface_assi .)
    CONTINUE        reduce using rule 101 (h -> interface_assi .)
    BREAK           reduce using rule 101 (h -> interface_assi .)
    RETURN          reduce using rule 101 (h -> interface_assi .)
    FUNCTION        reduce using rule 101 (h -> interface_assi .)
    TOSTRING        reduce using rule 101 (h -> interface_assi .)
    NOT             reduce using rule 101 (h -> interface_assi .)
    ENTERO          reduce using rule 101 (h -> interface_assi .)
    DECIMAL         reduce using rule 101 (h -> interface_assi .)
    CADENA          reduce using rule 101 (h -> interface_assi .)
    TRUE            reduce using rule 101 (h -> interface_assi .)
    FALSE           reduce using rule 101 (h -> interface_assi .)
    L_PAREN         reduce using rule 101 (h -> interface_assi .)
    L_CORCHETE      reduce using rule 101 (h -> interface_assi .)
    L_LLAVE         reduce using rule 101 (h -> interface_assi .)
    $end            reduce using rule 101 (h -> interface_assi .)
    R_LLAVE         reduce using rule 101 (h -> interface_assi .)
    R_CORCHETE      reduce using rule 101 (h -> interface_assi .)
    COMA            reduce using rule 101 (h -> interface_assi .)


state 51

    (103) h -> array_val_pro .

    TIMES           reduce using rule 103 (h -> array_val_pro .)
    DIVIDE          reduce using rule 103 (h -> array_val_pro .)
    MOD             reduce using rule 103 (h -> array_val_pro .)
    POTENCIA        reduce using rule 103 (h -> array_val_pro .)
    MAS             reduce using rule 103 (h -> array_val_pro .)
    MENOS           reduce using rule 103 (h -> array_val_pro .)
    DISTINTO_QUE    reduce using rule 103 (h -> array_val_pro .)
    MENOR_QUE       reduce using rule 103 (h -> array_val_pro .)
    MENOR_IGUAL_QUE reduce using rule 103 (h -> array_val_pro .)
    MAYOR_QUE       reduce using rule 103 (h -> array_val_pro .)
    MAYOR_IGUAL_QUE reduce using rule 103 (h -> array_val_pro .)
    TRIPLE_IGUAL    reduce using rule 103 (h -> array_val_pro .)
    AND             reduce using rule 103 (h -> array_val_pro .)
    PUNTO           reduce using rule 103 (h -> array_val_pro .)
    OR              reduce using rule 103 (h -> array_val_pro .)
    R_PAREN         reduce using rule 103 (h -> array_val_pro .)
    SEMI_COLON      reduce using rule 103 (h -> array_val_pro .)
    CONSOLE         reduce using rule 103 (h -> array_val_pro .)
    LET             reduce using rule 103 (h -> array_val_pro .)
    LITERAL         reduce using rule 103 (h -> array_val_pro .)
    IF              reduce using rule 103 (h -> array_val_pro .)
    WHILE           reduce using rule 103 (h -> array_val_pro .)
    FOR             reduce using rule 103 (h -> array_val_pro .)
    INTERFACE       reduce using rule 103 (h -> array_val_pro .)
    CONTINUE        reduce using rule 103 (h -> array_val_pro .)
    BREAK           reduce using rule 103 (h -> array_val_pro .)
    RETURN          reduce using rule 103 (h -> array_val_pro .)
    FUNCTION        reduce using rule 103 (h -> array_val_pro .)
    TOSTRING        reduce using rule 103 (h -> array_val_pro .)
    NOT             reduce using rule 103 (h -> array_val_pro .)
    ENTERO          reduce using rule 103 (h -> array_val_pro .)
    DECIMAL         reduce using rule 103 (h -> array_val_pro .)
    CADENA          reduce using rule 103 (h -> array_val_pro .)
    TRUE            reduce using rule 103 (h -> array_val_pro .)
    FALSE           reduce using rule 103 (h -> array_val_pro .)
    L_PAREN         reduce using rule 103 (h -> array_val_pro .)
    L_CORCHETE      reduce using rule 103 (h -> array_val_pro .)
    L_LLAVE         reduce using rule 103 (h -> array_val_pro .)
    $end            reduce using rule 103 (h -> array_val_pro .)
    R_LLAVE         reduce using rule 103 (h -> array_val_pro .)
    R_CORCHETE      reduce using rule 103 (h -> array_val_pro .)
    COMA            reduce using rule 103 (h -> array_val_pro .)


state 52

    (115) array_pro -> L_CORCHETE . values R_CORCHETE
    (26) values -> . values COMA a
    (27) values -> . a
    (69) a -> . a OR b
    (70) a -> . b
    (71) b -> . b AND c
    (72) b -> . c
    (73) c -> . NOT d
    (74) c -> . d
    (75) d -> . d DISTINTO_QUE e
    (76) d -> . d MENOR_QUE e
    (77) d -> . d MENOR_IGUAL_QUE e
    (78) d -> . d MAYOR_QUE e
    (79) d -> . d MAYOR_IGUAL_QUE e
    (80) d -> . d TRIPLE_IGUAL e
    (81) d -> . e
    (82) e -> . e MAS f
    (83) e -> . e MENOS f
    (84) e -> . f
    (85) f -> . MENOS g
    (86) f -> . MAS g
    (87) f -> . g
    (88) g -> . g TIMES h
    (89) g -> . g DIVIDE h
    (90) g -> . g MOD h
    (91) g -> . g POTENCIA h
    (92) g -> . h
    (93) h -> . ENTERO
    (94) h -> . DECIMAL
    (95) h -> . CADENA
    (96) h -> . LITERAL
    (97) h -> . TRUE
    (98) h -> . FALSE
    (99) h -> . call_function_pro
    (100) h -> . array_pro
    (101) h -> . interface_assi
    (102) h -> . L_PAREN a R_PAREN
    (103) h -> . array_val_pro
    (104) h -> . a PUNTO LITERAL
    (105) h -> . a PUNTO nativeFun L_PAREN expresion R_PAREN
    (106) h -> . a PUNTO nativeFun L_PAREN R_PAREN
    (23) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (24) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (25) call_function_pro -> . TOSTRING L_PAREN values R_PAREN
    (115) array_pro -> . L_CORCHETE values R_CORCHETE
    (112) interface_assi -> . L_LLAVE atributos_assi R_LLAVE
    (107) array_val_pro -> . LITERAL dimensions

    NOT             shift and go to state 38
    MENOS           shift and go to state 35
    MAS             shift and go to state 34
    ENTERO          shift and go to state 44
    DECIMAL         shift and go to state 45
    CADENA          shift and go to state 46
    LITERAL         shift and go to state 72
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    L_PAREN         shift and go to state 20
    TOSTRING        shift and go to state 33
    L_CORCHETE      shift and go to state 52
    L_LLAVE         shift and go to state 25

    values                         shift and go to state 111
    a                              shift and go to state 112
    b                              shift and go to state 36
    c                              shift and go to state 37
    d                              shift and go to state 39
    e                              shift and go to state 40
    f                              shift and go to state 41
    g                              shift and go to state 42
    h                              shift and go to state 43
    call_function_pro              shift and go to state 73
    array_pro                      shift and go to state 49
    interface_assi                 shift and go to state 50
    array_val_pro                  shift and go to state 51

state 53

    (2) instrucciones -> instrucciones instruccion .

    CONSOLE         reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    LET             reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    LITERAL         reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    IF              reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    WHILE           reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    FOR             reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    INTERFACE       reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    CONTINUE        reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    BREAK           reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    RETURN          reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    FUNCTION        reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    TOSTRING        reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    NOT             reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    MENOS           reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    MAS             reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    ENTERO          reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    DECIMAL         reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    CADENA          reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    TRUE            reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    FALSE           reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    L_PAREN         reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    L_CORCHETE      reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    L_LLAVE         reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    $end            reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    R_LLAVE         reduce using rule 2 (instrucciones -> instrucciones instruccion .)


state 54

    (4) instruccion -> console_pro sc .

    CONSOLE         reduce using rule 4 (instruccion -> console_pro sc .)
    LET             reduce using rule 4 (instruccion -> console_pro sc .)
    LITERAL         reduce using rule 4 (instruccion -> console_pro sc .)
    IF              reduce using rule 4 (instruccion -> console_pro sc .)
    WHILE           reduce using rule 4 (instruccion -> console_pro sc .)
    FOR             reduce using rule 4 (instruccion -> console_pro sc .)
    INTERFACE       reduce using rule 4 (instruccion -> console_pro sc .)
    CONTINUE        reduce using rule 4 (instruccion -> console_pro sc .)
    BREAK           reduce using rule 4 (instruccion -> console_pro sc .)
    RETURN          reduce using rule 4 (instruccion -> console_pro sc .)
    FUNCTION        reduce using rule 4 (instruccion -> console_pro sc .)
    TOSTRING        reduce using rule 4 (instruccion -> console_pro sc .)
    NOT             reduce using rule 4 (instruccion -> console_pro sc .)
    MENOS           reduce using rule 4 (instruccion -> console_pro sc .)
    MAS             reduce using rule 4 (instruccion -> console_pro sc .)
    ENTERO          reduce using rule 4 (instruccion -> console_pro sc .)
    DECIMAL         reduce using rule 4 (instruccion -> console_pro sc .)
    CADENA          reduce using rule 4 (instruccion -> console_pro sc .)
    TRUE            reduce using rule 4 (instruccion -> console_pro sc .)
    FALSE           reduce using rule 4 (instruccion -> console_pro sc .)
    L_PAREN         reduce using rule 4 (instruccion -> console_pro sc .)
    L_CORCHETE      reduce using rule 4 (instruccion -> console_pro sc .)
    L_LLAVE         reduce using rule 4 (instruccion -> console_pro sc .)
    $end            reduce using rule 4 (instruccion -> console_pro sc .)
    R_LLAVE         reduce using rule 4 (instruccion -> console_pro sc .)


state 55

    (19) sc -> SEMI_COLON .

    CONSOLE         reduce using rule 19 (sc -> SEMI_COLON .)
    LET             reduce using rule 19 (sc -> SEMI_COLON .)
    LITERAL         reduce using rule 19 (sc -> SEMI_COLON .)
    IF              reduce using rule 19 (sc -> SEMI_COLON .)
    WHILE           reduce using rule 19 (sc -> SEMI_COLON .)
    FOR             reduce using rule 19 (sc -> SEMI_COLON .)
    INTERFACE       reduce using rule 19 (sc -> SEMI_COLON .)
    CONTINUE        reduce using rule 19 (sc -> SEMI_COLON .)
    BREAK           reduce using rule 19 (sc -> SEMI_COLON .)
    RETURN          reduce using rule 19 (sc -> SEMI_COLON .)
    FUNCTION        reduce using rule 19 (sc -> SEMI_COLON .)
    TOSTRING        reduce using rule 19 (sc -> SEMI_COLON .)
    NOT             reduce using rule 19 (sc -> SEMI_COLON .)
    MENOS           reduce using rule 19 (sc -> SEMI_COLON .)
    MAS             reduce using rule 19 (sc -> SEMI_COLON .)
    ENTERO          reduce using rule 19 (sc -> SEMI_COLON .)
    DECIMAL         reduce using rule 19 (sc -> SEMI_COLON .)
    CADENA          reduce using rule 19 (sc -> SEMI_COLON .)
    TRUE            reduce using rule 19 (sc -> SEMI_COLON .)
    FALSE           reduce using rule 19 (sc -> SEMI_COLON .)
    L_PAREN         reduce using rule 19 (sc -> SEMI_COLON .)
    L_CORCHETE      reduce using rule 19 (sc -> SEMI_COLON .)
    L_LLAVE         reduce using rule 19 (sc -> SEMI_COLON .)
    $end            reduce using rule 19 (sc -> SEMI_COLON .)
    R_LLAVE         reduce using rule 19 (sc -> SEMI_COLON .)


state 56

    (5) instruccion -> declaration_instruction sc .

    CONSOLE         reduce using rule 5 (instruccion -> declaration_instruction sc .)
    LET             reduce using rule 5 (instruccion -> declaration_instruction sc .)
    LITERAL         reduce using rule 5 (instruccion -> declaration_instruction sc .)
    IF              reduce using rule 5 (instruccion -> declaration_instruction sc .)
    WHILE           reduce using rule 5 (instruccion -> declaration_instruction sc .)
    FOR             reduce using rule 5 (instruccion -> declaration_instruction sc .)
    INTERFACE       reduce using rule 5 (instruccion -> declaration_instruction sc .)
    CONTINUE        reduce using rule 5 (instruccion -> declaration_instruction sc .)
    BREAK           reduce using rule 5 (instruccion -> declaration_instruction sc .)
    RETURN          reduce using rule 5 (instruccion -> declaration_instruction sc .)
    FUNCTION        reduce using rule 5 (instruccion -> declaration_instruction sc .)
    TOSTRING        reduce using rule 5 (instruccion -> declaration_instruction sc .)
    NOT             reduce using rule 5 (instruccion -> declaration_instruction sc .)
    MENOS           reduce using rule 5 (instruccion -> declaration_instruction sc .)
    MAS             reduce using rule 5 (instruccion -> declaration_instruction sc .)
    ENTERO          reduce using rule 5 (instruccion -> declaration_instruction sc .)
    DECIMAL         reduce using rule 5 (instruccion -> declaration_instruction sc .)
    CADENA          reduce using rule 5 (instruccion -> declaration_instruction sc .)
    TRUE            reduce using rule 5 (instruccion -> declaration_instruction sc .)
    FALSE           reduce using rule 5 (instruccion -> declaration_instruction sc .)
    L_PAREN         reduce using rule 5 (instruccion -> declaration_instruction sc .)
    L_CORCHETE      reduce using rule 5 (instruccion -> declaration_instruction sc .)
    L_LLAVE         reduce using rule 5 (instruccion -> declaration_instruction sc .)
    $end            reduce using rule 5 (instruccion -> declaration_instruction sc .)
    R_LLAVE         reduce using rule 5 (instruccion -> declaration_instruction sc .)


state 57

    (6) instruccion -> assig_pro sc .

    CONSOLE         reduce using rule 6 (instruccion -> assig_pro sc .)
    LET             reduce using rule 6 (instruccion -> assig_pro sc .)
    LITERAL         reduce using rule 6 (instruccion -> assig_pro sc .)
    IF              reduce using rule 6 (instruccion -> assig_pro sc .)
    WHILE           reduce using rule 6 (instruccion -> assig_pro sc .)
    FOR             reduce using rule 6 (instruccion -> assig_pro sc .)
    INTERFACE       reduce using rule 6 (instruccion -> assig_pro sc .)
    CONTINUE        reduce using rule 6 (instruccion -> assig_pro sc .)
    BREAK           reduce using rule 6 (instruccion -> assig_pro sc .)
    RETURN          reduce using rule 6 (instruccion -> assig_pro sc .)
    FUNCTION        reduce using rule 6 (instruccion -> assig_pro sc .)
    TOSTRING        reduce using rule 6 (instruccion -> assig_pro sc .)
    NOT             reduce using rule 6 (instruccion -> assig_pro sc .)
    MENOS           reduce using rule 6 (instruccion -> assig_pro sc .)
    MAS             reduce using rule 6 (instruccion -> assig_pro sc .)
    ENTERO          reduce using rule 6 (instruccion -> assig_pro sc .)
    DECIMAL         reduce using rule 6 (instruccion -> assig_pro sc .)
    CADENA          reduce using rule 6 (instruccion -> assig_pro sc .)
    TRUE            reduce using rule 6 (instruccion -> assig_pro sc .)
    FALSE           reduce using rule 6 (instruccion -> assig_pro sc .)
    L_PAREN         reduce using rule 6 (instruccion -> assig_pro sc .)
    L_CORCHETE      reduce using rule 6 (instruccion -> assig_pro sc .)
    L_LLAVE         reduce using rule 6 (instruccion -> assig_pro sc .)
    $end            reduce using rule 6 (instruccion -> assig_pro sc .)
    R_LLAVE         reduce using rule 6 (instruccion -> assig_pro sc .)


state 58

    (7) instruccion -> interface_assign_pro sc .

    CONSOLE         reduce using rule 7 (instruccion -> interface_assign_pro sc .)
    LET             reduce using rule 7 (instruccion -> interface_assign_pro sc .)
    LITERAL         reduce using rule 7 (instruccion -> interface_assign_pro sc .)
    IF              reduce using rule 7 (instruccion -> interface_assign_pro sc .)
    WHILE           reduce using rule 7 (instruccion -> interface_assign_pro sc .)
    FOR             reduce using rule 7 (instruccion -> interface_assign_pro sc .)
    INTERFACE       reduce using rule 7 (instruccion -> interface_assign_pro sc .)
    CONTINUE        reduce using rule 7 (instruccion -> interface_assign_pro sc .)
    BREAK           reduce using rule 7 (instruccion -> interface_assign_pro sc .)
    RETURN          reduce using rule 7 (instruccion -> interface_assign_pro sc .)
    FUNCTION        reduce using rule 7 (instruccion -> interface_assign_pro sc .)
    TOSTRING        reduce using rule 7 (instruccion -> interface_assign_pro sc .)
    NOT             reduce using rule 7 (instruccion -> interface_assign_pro sc .)
    MENOS           reduce using rule 7 (instruccion -> interface_assign_pro sc .)
    MAS             reduce using rule 7 (instruccion -> interface_assign_pro sc .)
    ENTERO          reduce using rule 7 (instruccion -> interface_assign_pro sc .)
    DECIMAL         reduce using rule 7 (instruccion -> interface_assign_pro sc .)
    CADENA          reduce using rule 7 (instruccion -> interface_assign_pro sc .)
    TRUE            reduce using rule 7 (instruccion -> interface_assign_pro sc .)
    FALSE           reduce using rule 7 (instruccion -> interface_assign_pro sc .)
    L_PAREN         reduce using rule 7 (instruccion -> interface_assign_pro sc .)
    L_CORCHETE      reduce using rule 7 (instruccion -> interface_assign_pro sc .)
    L_LLAVE         reduce using rule 7 (instruccion -> interface_assign_pro sc .)
    $end            reduce using rule 7 (instruccion -> interface_assign_pro sc .)
    R_LLAVE         reduce using rule 7 (instruccion -> interface_assign_pro sc .)


state 59

    (8) instruccion -> if_pro sc .

    CONSOLE         reduce using rule 8 (instruccion -> if_pro sc .)
    LET             reduce using rule 8 (instruccion -> if_pro sc .)
    LITERAL         reduce using rule 8 (instruccion -> if_pro sc .)
    IF              reduce using rule 8 (instruccion -> if_pro sc .)
    WHILE           reduce using rule 8 (instruccion -> if_pro sc .)
    FOR             reduce using rule 8 (instruccion -> if_pro sc .)
    INTERFACE       reduce using rule 8 (instruccion -> if_pro sc .)
    CONTINUE        reduce using rule 8 (instruccion -> if_pro sc .)
    BREAK           reduce using rule 8 (instruccion -> if_pro sc .)
    RETURN          reduce using rule 8 (instruccion -> if_pro sc .)
    FUNCTION        reduce using rule 8 (instruccion -> if_pro sc .)
    TOSTRING        reduce using rule 8 (instruccion -> if_pro sc .)
    NOT             reduce using rule 8 (instruccion -> if_pro sc .)
    MENOS           reduce using rule 8 (instruccion -> if_pro sc .)
    MAS             reduce using rule 8 (instruccion -> if_pro sc .)
    ENTERO          reduce using rule 8 (instruccion -> if_pro sc .)
    DECIMAL         reduce using rule 8 (instruccion -> if_pro sc .)
    CADENA          reduce using rule 8 (instruccion -> if_pro sc .)
    TRUE            reduce using rule 8 (instruccion -> if_pro sc .)
    FALSE           reduce using rule 8 (instruccion -> if_pro sc .)
    L_PAREN         reduce using rule 8 (instruccion -> if_pro sc .)
    L_CORCHETE      reduce using rule 8 (instruccion -> if_pro sc .)
    L_LLAVE         reduce using rule 8 (instruccion -> if_pro sc .)
    $end            reduce using rule 8 (instruccion -> if_pro sc .)
    R_LLAVE         reduce using rule 8 (instruccion -> if_pro sc .)


state 60

    (9) instruccion -> while_pro sc .

    CONSOLE         reduce using rule 9 (instruccion -> while_pro sc .)
    LET             reduce using rule 9 (instruccion -> while_pro sc .)
    LITERAL         reduce using rule 9 (instruccion -> while_pro sc .)
    IF              reduce using rule 9 (instruccion -> while_pro sc .)
    WHILE           reduce using rule 9 (instruccion -> while_pro sc .)
    FOR             reduce using rule 9 (instruccion -> while_pro sc .)
    INTERFACE       reduce using rule 9 (instruccion -> while_pro sc .)
    CONTINUE        reduce using rule 9 (instruccion -> while_pro sc .)
    BREAK           reduce using rule 9 (instruccion -> while_pro sc .)
    RETURN          reduce using rule 9 (instruccion -> while_pro sc .)
    FUNCTION        reduce using rule 9 (instruccion -> while_pro sc .)
    TOSTRING        reduce using rule 9 (instruccion -> while_pro sc .)
    NOT             reduce using rule 9 (instruccion -> while_pro sc .)
    MENOS           reduce using rule 9 (instruccion -> while_pro sc .)
    MAS             reduce using rule 9 (instruccion -> while_pro sc .)
    ENTERO          reduce using rule 9 (instruccion -> while_pro sc .)
    DECIMAL         reduce using rule 9 (instruccion -> while_pro sc .)
    CADENA          reduce using rule 9 (instruccion -> while_pro sc .)
    TRUE            reduce using rule 9 (instruccion -> while_pro sc .)
    FALSE           reduce using rule 9 (instruccion -> while_pro sc .)
    L_PAREN         reduce using rule 9 (instruccion -> while_pro sc .)
    L_CORCHETE      reduce using rule 9 (instruccion -> while_pro sc .)
    L_LLAVE         reduce using rule 9 (instruccion -> while_pro sc .)
    $end            reduce using rule 9 (instruccion -> while_pro sc .)
    R_LLAVE         reduce using rule 9 (instruccion -> while_pro sc .)


state 61

    (10) instruccion -> for_pro sc .

    CONSOLE         reduce using rule 10 (instruccion -> for_pro sc .)
    LET             reduce using rule 10 (instruccion -> for_pro sc .)
    LITERAL         reduce using rule 10 (instruccion -> for_pro sc .)
    IF              reduce using rule 10 (instruccion -> for_pro sc .)
    WHILE           reduce using rule 10 (instruccion -> for_pro sc .)
    FOR             reduce using rule 10 (instruccion -> for_pro sc .)
    INTERFACE       reduce using rule 10 (instruccion -> for_pro sc .)
    CONTINUE        reduce using rule 10 (instruccion -> for_pro sc .)
    BREAK           reduce using rule 10 (instruccion -> for_pro sc .)
    RETURN          reduce using rule 10 (instruccion -> for_pro sc .)
    FUNCTION        reduce using rule 10 (instruccion -> for_pro sc .)
    TOSTRING        reduce using rule 10 (instruccion -> for_pro sc .)
    NOT             reduce using rule 10 (instruccion -> for_pro sc .)
    MENOS           reduce using rule 10 (instruccion -> for_pro sc .)
    MAS             reduce using rule 10 (instruccion -> for_pro sc .)
    ENTERO          reduce using rule 10 (instruccion -> for_pro sc .)
    DECIMAL         reduce using rule 10 (instruccion -> for_pro sc .)
    CADENA          reduce using rule 10 (instruccion -> for_pro sc .)
    TRUE            reduce using rule 10 (instruccion -> for_pro sc .)
    FALSE           reduce using rule 10 (instruccion -> for_pro sc .)
    L_PAREN         reduce using rule 10 (instruccion -> for_pro sc .)
    L_CORCHETE      reduce using rule 10 (instruccion -> for_pro sc .)
    L_LLAVE         reduce using rule 10 (instruccion -> for_pro sc .)
    $end            reduce using rule 10 (instruccion -> for_pro sc .)
    R_LLAVE         reduce using rule 10 (instruccion -> for_pro sc .)


state 62

    (11) instruccion -> for_each_pro sc .

    CONSOLE         reduce using rule 11 (instruccion -> for_each_pro sc .)
    LET             reduce using rule 11 (instruccion -> for_each_pro sc .)
    LITERAL         reduce using rule 11 (instruccion -> for_each_pro sc .)
    IF              reduce using rule 11 (instruccion -> for_each_pro sc .)
    WHILE           reduce using rule 11 (instruccion -> for_each_pro sc .)
    FOR             reduce using rule 11 (instruccion -> for_each_pro sc .)
    INTERFACE       reduce using rule 11 (instruccion -> for_each_pro sc .)
    CONTINUE        reduce using rule 11 (instruccion -> for_each_pro sc .)
    BREAK           reduce using rule 11 (instruccion -> for_each_pro sc .)
    RETURN          reduce using rule 11 (instruccion -> for_each_pro sc .)
    FUNCTION        reduce using rule 11 (instruccion -> for_each_pro sc .)
    TOSTRING        reduce using rule 11 (instruccion -> for_each_pro sc .)
    NOT             reduce using rule 11 (instruccion -> for_each_pro sc .)
    MENOS           reduce using rule 11 (instruccion -> for_each_pro sc .)
    MAS             reduce using rule 11 (instruccion -> for_each_pro sc .)
    ENTERO          reduce using rule 11 (instruccion -> for_each_pro sc .)
    DECIMAL         reduce using rule 11 (instruccion -> for_each_pro sc .)
    CADENA          reduce using rule 11 (instruccion -> for_each_pro sc .)
    TRUE            reduce using rule 11 (instruccion -> for_each_pro sc .)
    FALSE           reduce using rule 11 (instruccion -> for_each_pro sc .)
    L_PAREN         reduce using rule 11 (instruccion -> for_each_pro sc .)
    L_CORCHETE      reduce using rule 11 (instruccion -> for_each_pro sc .)
    L_LLAVE         reduce using rule 11 (instruccion -> for_each_pro sc .)
    $end            reduce using rule 11 (instruccion -> for_each_pro sc .)
    R_LLAVE         reduce using rule 11 (instruccion -> for_each_pro sc .)


state 63

    (12) instruccion -> interface_pro sc .

    CONSOLE         reduce using rule 12 (instruccion -> interface_pro sc .)
    LET             reduce using rule 12 (instruccion -> interface_pro sc .)
    LITERAL         reduce using rule 12 (instruccion -> interface_pro sc .)
    IF              reduce using rule 12 (instruccion -> interface_pro sc .)
    WHILE           reduce using rule 12 (instruccion -> interface_pro sc .)
    FOR             reduce using rule 12 (instruccion -> interface_pro sc .)
    INTERFACE       reduce using rule 12 (instruccion -> interface_pro sc .)
    CONTINUE        reduce using rule 12 (instruccion -> interface_pro sc .)
    BREAK           reduce using rule 12 (instruccion -> interface_pro sc .)
    RETURN          reduce using rule 12 (instruccion -> interface_pro sc .)
    FUNCTION        reduce using rule 12 (instruccion -> interface_pro sc .)
    TOSTRING        reduce using rule 12 (instruccion -> interface_pro sc .)
    NOT             reduce using rule 12 (instruccion -> interface_pro sc .)
    MENOS           reduce using rule 12 (instruccion -> interface_pro sc .)
    MAS             reduce using rule 12 (instruccion -> interface_pro sc .)
    ENTERO          reduce using rule 12 (instruccion -> interface_pro sc .)
    DECIMAL         reduce using rule 12 (instruccion -> interface_pro sc .)
    CADENA          reduce using rule 12 (instruccion -> interface_pro sc .)
    TRUE            reduce using rule 12 (instruccion -> interface_pro sc .)
    FALSE           reduce using rule 12 (instruccion -> interface_pro sc .)
    L_PAREN         reduce using rule 12 (instruccion -> interface_pro sc .)
    L_CORCHETE      reduce using rule 12 (instruccion -> interface_pro sc .)
    L_LLAVE         reduce using rule 12 (instruccion -> interface_pro sc .)
    $end            reduce using rule 12 (instruccion -> interface_pro sc .)
    R_LLAVE         reduce using rule 12 (instruccion -> interface_pro sc .)


state 64

    (13) instruccion -> continue_pro sc .

    CONSOLE         reduce using rule 13 (instruccion -> continue_pro sc .)
    LET             reduce using rule 13 (instruccion -> continue_pro sc .)
    LITERAL         reduce using rule 13 (instruccion -> continue_pro sc .)
    IF              reduce using rule 13 (instruccion -> continue_pro sc .)
    WHILE           reduce using rule 13 (instruccion -> continue_pro sc .)
    FOR             reduce using rule 13 (instruccion -> continue_pro sc .)
    INTERFACE       reduce using rule 13 (instruccion -> continue_pro sc .)
    CONTINUE        reduce using rule 13 (instruccion -> continue_pro sc .)
    BREAK           reduce using rule 13 (instruccion -> continue_pro sc .)
    RETURN          reduce using rule 13 (instruccion -> continue_pro sc .)
    FUNCTION        reduce using rule 13 (instruccion -> continue_pro sc .)
    TOSTRING        reduce using rule 13 (instruccion -> continue_pro sc .)
    NOT             reduce using rule 13 (instruccion -> continue_pro sc .)
    MENOS           reduce using rule 13 (instruccion -> continue_pro sc .)
    MAS             reduce using rule 13 (instruccion -> continue_pro sc .)
    ENTERO          reduce using rule 13 (instruccion -> continue_pro sc .)
    DECIMAL         reduce using rule 13 (instruccion -> continue_pro sc .)
    CADENA          reduce using rule 13 (instruccion -> continue_pro sc .)
    TRUE            reduce using rule 13 (instruccion -> continue_pro sc .)
    FALSE           reduce using rule 13 (instruccion -> continue_pro sc .)
    L_PAREN         reduce using rule 13 (instruccion -> continue_pro sc .)
    L_CORCHETE      reduce using rule 13 (instruccion -> continue_pro sc .)
    L_LLAVE         reduce using rule 13 (instruccion -> continue_pro sc .)
    $end            reduce using rule 13 (instruccion -> continue_pro sc .)
    R_LLAVE         reduce using rule 13 (instruccion -> continue_pro sc .)


state 65

    (14) instruccion -> break_pro sc .

    CONSOLE         reduce using rule 14 (instruccion -> break_pro sc .)
    LET             reduce using rule 14 (instruccion -> break_pro sc .)
    LITERAL         reduce using rule 14 (instruccion -> break_pro sc .)
    IF              reduce using rule 14 (instruccion -> break_pro sc .)
    WHILE           reduce using rule 14 (instruccion -> break_pro sc .)
    FOR             reduce using rule 14 (instruccion -> break_pro sc .)
    INTERFACE       reduce using rule 14 (instruccion -> break_pro sc .)
    CONTINUE        reduce using rule 14 (instruccion -> break_pro sc .)
    BREAK           reduce using rule 14 (instruccion -> break_pro sc .)
    RETURN          reduce using rule 14 (instruccion -> break_pro sc .)
    FUNCTION        reduce using rule 14 (instruccion -> break_pro sc .)
    TOSTRING        reduce using rule 14 (instruccion -> break_pro sc .)
    NOT             reduce using rule 14 (instruccion -> break_pro sc .)
    MENOS           reduce using rule 14 (instruccion -> break_pro sc .)
    MAS             reduce using rule 14 (instruccion -> break_pro sc .)
    ENTERO          reduce using rule 14 (instruccion -> break_pro sc .)
    DECIMAL         reduce using rule 14 (instruccion -> break_pro sc .)
    CADENA          reduce using rule 14 (instruccion -> break_pro sc .)
    TRUE            reduce using rule 14 (instruccion -> break_pro sc .)
    FALSE           reduce using rule 14 (instruccion -> break_pro sc .)
    L_PAREN         reduce using rule 14 (instruccion -> break_pro sc .)
    L_CORCHETE      reduce using rule 14 (instruccion -> break_pro sc .)
    L_LLAVE         reduce using rule 14 (instruccion -> break_pro sc .)
    $end            reduce using rule 14 (instruccion -> break_pro sc .)
    R_LLAVE         reduce using rule 14 (instruccion -> break_pro sc .)


state 66

    (15) instruccion -> return_pro sc .

    CONSOLE         reduce using rule 15 (instruccion -> return_pro sc .)
    LET             reduce using rule 15 (instruccion -> return_pro sc .)
    LITERAL         reduce using rule 15 (instruccion -> return_pro sc .)
    IF              reduce using rule 15 (instruccion -> return_pro sc .)
    WHILE           reduce using rule 15 (instruccion -> return_pro sc .)
    FOR             reduce using rule 15 (instruccion -> return_pro sc .)
    INTERFACE       reduce using rule 15 (instruccion -> return_pro sc .)
    CONTINUE        reduce using rule 15 (instruccion -> return_pro sc .)
    BREAK           reduce using rule 15 (instruccion -> return_pro sc .)
    RETURN          reduce using rule 15 (instruccion -> return_pro sc .)
    FUNCTION        reduce using rule 15 (instruccion -> return_pro sc .)
    TOSTRING        reduce using rule 15 (instruccion -> return_pro sc .)
    NOT             reduce using rule 15 (instruccion -> return_pro sc .)
    MENOS           reduce using rule 15 (instruccion -> return_pro sc .)
    MAS             reduce using rule 15 (instruccion -> return_pro sc .)
    ENTERO          reduce using rule 15 (instruccion -> return_pro sc .)
    DECIMAL         reduce using rule 15 (instruccion -> return_pro sc .)
    CADENA          reduce using rule 15 (instruccion -> return_pro sc .)
    TRUE            reduce using rule 15 (instruccion -> return_pro sc .)
    FALSE           reduce using rule 15 (instruccion -> return_pro sc .)
    L_PAREN         reduce using rule 15 (instruccion -> return_pro sc .)
    L_CORCHETE      reduce using rule 15 (instruccion -> return_pro sc .)
    L_LLAVE         reduce using rule 15 (instruccion -> return_pro sc .)
    $end            reduce using rule 15 (instruccion -> return_pro sc .)
    R_LLAVE         reduce using rule 15 (instruccion -> return_pro sc .)


state 67

    (16) instruccion -> function_pro sc .

    CONSOLE         reduce using rule 16 (instruccion -> function_pro sc .)
    LET             reduce using rule 16 (instruccion -> function_pro sc .)
    LITERAL         reduce using rule 16 (instruccion -> function_pro sc .)
    IF              reduce using rule 16 (instruccion -> function_pro sc .)
    WHILE           reduce using rule 16 (instruccion -> function_pro sc .)
    FOR             reduce using rule 16 (instruccion -> function_pro sc .)
    INTERFACE       reduce using rule 16 (instruccion -> function_pro sc .)
    CONTINUE        reduce using rule 16 (instruccion -> function_pro sc .)
    BREAK           reduce using rule 16 (instruccion -> function_pro sc .)
    RETURN          reduce using rule 16 (instruccion -> function_pro sc .)
    FUNCTION        reduce using rule 16 (instruccion -> function_pro sc .)
    TOSTRING        reduce using rule 16 (instruccion -> function_pro sc .)
    NOT             reduce using rule 16 (instruccion -> function_pro sc .)
    MENOS           reduce using rule 16 (instruccion -> function_pro sc .)
    MAS             reduce using rule 16 (instruccion -> function_pro sc .)
    ENTERO          reduce using rule 16 (instruccion -> function_pro sc .)
    DECIMAL         reduce using rule 16 (instruccion -> function_pro sc .)
    CADENA          reduce using rule 16 (instruccion -> function_pro sc .)
    TRUE            reduce using rule 16 (instruccion -> function_pro sc .)
    FALSE           reduce using rule 16 (instruccion -> function_pro sc .)
    L_PAREN         reduce using rule 16 (instruccion -> function_pro sc .)
    L_CORCHETE      reduce using rule 16 (instruccion -> function_pro sc .)
    L_LLAVE         reduce using rule 16 (instruccion -> function_pro sc .)
    $end            reduce using rule 16 (instruccion -> function_pro sc .)
    R_LLAVE         reduce using rule 16 (instruccion -> function_pro sc .)


state 68

    (17) instruccion -> call_function_pro sc .

    CONSOLE         reduce using rule 17 (instruccion -> call_function_pro sc .)
    LET             reduce using rule 17 (instruccion -> call_function_pro sc .)
    LITERAL         reduce using rule 17 (instruccion -> call_function_pro sc .)
    IF              reduce using rule 17 (instruccion -> call_function_pro sc .)
    WHILE           reduce using rule 17 (instruccion -> call_function_pro sc .)
    FOR             reduce using rule 17 (instruccion -> call_function_pro sc .)
    INTERFACE       reduce using rule 17 (instruccion -> call_function_pro sc .)
    CONTINUE        reduce using rule 17 (instruccion -> call_function_pro sc .)
    BREAK           reduce using rule 17 (instruccion -> call_function_pro sc .)
    RETURN          reduce using rule 17 (instruccion -> call_function_pro sc .)
    FUNCTION        reduce using rule 17 (instruccion -> call_function_pro sc .)
    TOSTRING        reduce using rule 17 (instruccion -> call_function_pro sc .)
    NOT             reduce using rule 17 (instruccion -> call_function_pro sc .)
    MENOS           reduce using rule 17 (instruccion -> call_function_pro sc .)
    MAS             reduce using rule 17 (instruccion -> call_function_pro sc .)
    ENTERO          reduce using rule 17 (instruccion -> call_function_pro sc .)
    DECIMAL         reduce using rule 17 (instruccion -> call_function_pro sc .)
    CADENA          reduce using rule 17 (instruccion -> call_function_pro sc .)
    TRUE            reduce using rule 17 (instruccion -> call_function_pro sc .)
    FALSE           reduce using rule 17 (instruccion -> call_function_pro sc .)
    L_PAREN         reduce using rule 17 (instruccion -> call_function_pro sc .)
    L_CORCHETE      reduce using rule 17 (instruccion -> call_function_pro sc .)
    L_LLAVE         reduce using rule 17 (instruccion -> call_function_pro sc .)
    $end            reduce using rule 17 (instruccion -> call_function_pro sc .)
    R_LLAVE         reduce using rule 17 (instruccion -> call_function_pro sc .)


state 69

    (18) instruccion -> sumadores sc .

    CONSOLE         reduce using rule 18 (instruccion -> sumadores sc .)
    LET             reduce using rule 18 (instruccion -> sumadores sc .)
    LITERAL         reduce using rule 18 (instruccion -> sumadores sc .)
    IF              reduce using rule 18 (instruccion -> sumadores sc .)
    WHILE           reduce using rule 18 (instruccion -> sumadores sc .)
    FOR             reduce using rule 18 (instruccion -> sumadores sc .)
    INTERFACE       reduce using rule 18 (instruccion -> sumadores sc .)
    CONTINUE        reduce using rule 18 (instruccion -> sumadores sc .)
    BREAK           reduce using rule 18 (instruccion -> sumadores sc .)
    RETURN          reduce using rule 18 (instruccion -> sumadores sc .)
    FUNCTION        reduce using rule 18 (instruccion -> sumadores sc .)
    TOSTRING        reduce using rule 18 (instruccion -> sumadores sc .)
    NOT             reduce using rule 18 (instruccion -> sumadores sc .)
    MENOS           reduce using rule 18 (instruccion -> sumadores sc .)
    MAS             reduce using rule 18 (instruccion -> sumadores sc .)
    ENTERO          reduce using rule 18 (instruccion -> sumadores sc .)
    DECIMAL         reduce using rule 18 (instruccion -> sumadores sc .)
    CADENA          reduce using rule 18 (instruccion -> sumadores sc .)
    TRUE            reduce using rule 18 (instruccion -> sumadores sc .)
    FALSE           reduce using rule 18 (instruccion -> sumadores sc .)
    L_PAREN         reduce using rule 18 (instruccion -> sumadores sc .)
    L_CORCHETE      reduce using rule 18 (instruccion -> sumadores sc .)
    L_LLAVE         reduce using rule 18 (instruccion -> sumadores sc .)
    $end            reduce using rule 18 (instruccion -> sumadores sc .)
    R_LLAVE         reduce using rule 18 (instruccion -> sumadores sc .)


state 70

    (66) console_pro -> CONSOLE PUNTO . LOG L_PAREN expresion R_PAREN

    LOG             shift and go to state 113


state 71

    (102) h -> L_PAREN a . R_PAREN
    (69) a -> a . OR b
    (104) h -> a . PUNTO LITERAL
    (105) h -> a . PUNTO nativeFun L_PAREN expresion R_PAREN
    (106) h -> a . PUNTO nativeFun L_PAREN R_PAREN

    R_PAREN         shift and go to state 114
    OR              shift and go to state 84
    PUNTO           shift and go to state 115


state 72

    (96) h -> LITERAL .
    (23) call_function_pro -> LITERAL . L_PAREN values R_PAREN
    (24) call_function_pro -> LITERAL . L_PAREN R_PAREN
    (107) array_val_pro -> LITERAL . dimensions
    (108) dimensions -> . dimensions L_CORCHETE a R_CORCHETE
    (109) dimensions -> . L_CORCHETE a R_CORCHETE

  ! shift/reduce conflict for L_PAREN resolved as shift
  ! shift/reduce conflict for L_CORCHETE resolved as shift
    TIMES           reduce using rule 96 (h -> LITERAL .)
    DIVIDE          reduce using rule 96 (h -> LITERAL .)
    MOD             reduce using rule 96 (h -> LITERAL .)
    POTENCIA        reduce using rule 96 (h -> LITERAL .)
    MAS             reduce using rule 96 (h -> LITERAL .)
    MENOS           reduce using rule 96 (h -> LITERAL .)
    DISTINTO_QUE    reduce using rule 96 (h -> LITERAL .)
    MENOR_QUE       reduce using rule 96 (h -> LITERAL .)
    MENOR_IGUAL_QUE reduce using rule 96 (h -> LITERAL .)
    MAYOR_QUE       reduce using rule 96 (h -> LITERAL .)
    MAYOR_IGUAL_QUE reduce using rule 96 (h -> LITERAL .)
    TRIPLE_IGUAL    reduce using rule 96 (h -> LITERAL .)
    AND             reduce using rule 96 (h -> LITERAL .)
    R_PAREN         reduce using rule 96 (h -> LITERAL .)
    OR              reduce using rule 96 (h -> LITERAL .)
    PUNTO           reduce using rule 96 (h -> LITERAL .)
    SEMI_COLON      reduce using rule 96 (h -> LITERAL .)
    CONSOLE         reduce using rule 96 (h -> LITERAL .)
    LET             reduce using rule 96 (h -> LITERAL .)
    LITERAL         reduce using rule 96 (h -> LITERAL .)
    IF              reduce using rule 96 (h -> LITERAL .)
    WHILE           reduce using rule 96 (h -> LITERAL .)
    FOR             reduce using rule 96 (h -> LITERAL .)
    INTERFACE       reduce using rule 96 (h -> LITERAL .)
    CONTINUE        reduce using rule 96 (h -> LITERAL .)
    BREAK           reduce using rule 96 (h -> LITERAL .)
    RETURN          reduce using rule 96 (h -> LITERAL .)
    FUNCTION        reduce using rule 96 (h -> LITERAL .)
    TOSTRING        reduce using rule 96 (h -> LITERAL .)
    NOT             reduce using rule 96 (h -> LITERAL .)
    ENTERO          reduce using rule 96 (h -> LITERAL .)
    DECIMAL         reduce using rule 96 (h -> LITERAL .)
    CADENA          reduce using rule 96 (h -> LITERAL .)
    TRUE            reduce using rule 96 (h -> LITERAL .)
    FALSE           reduce using rule 96 (h -> LITERAL .)
    L_LLAVE         reduce using rule 96 (h -> LITERAL .)
    $end            reduce using rule 96 (h -> LITERAL .)
    R_LLAVE         reduce using rule 96 (h -> LITERAL .)
    R_CORCHETE      reduce using rule 96 (h -> LITERAL .)
    COMA            reduce using rule 96 (h -> LITERAL .)
    L_PAREN         shift and go to state 78
    L_CORCHETE      shift and go to state 82

  ! L_PAREN         [ reduce using rule 96 (h -> LITERAL .) ]
  ! L_CORCHETE      [ reduce using rule 96 (h -> LITERAL .) ]

    dimensions                     shift and go to state 81

state 73

    (99) h -> call_function_pro .

    TIMES           reduce using rule 99 (h -> call_function_pro .)
    DIVIDE          reduce using rule 99 (h -> call_function_pro .)
    MOD             reduce using rule 99 (h -> call_function_pro .)
    POTENCIA        reduce using rule 99 (h -> call_function_pro .)
    MAS             reduce using rule 99 (h -> call_function_pro .)
    MENOS           reduce using rule 99 (h -> call_function_pro .)
    DISTINTO_QUE    reduce using rule 99 (h -> call_function_pro .)
    MENOR_QUE       reduce using rule 99 (h -> call_function_pro .)
    MENOR_IGUAL_QUE reduce using rule 99 (h -> call_function_pro .)
    MAYOR_QUE       reduce using rule 99 (h -> call_function_pro .)
    MAYOR_IGUAL_QUE reduce using rule 99 (h -> call_function_pro .)
    TRIPLE_IGUAL    reduce using rule 99 (h -> call_function_pro .)
    AND             reduce using rule 99 (h -> call_function_pro .)
    R_PAREN         reduce using rule 99 (h -> call_function_pro .)
    OR              reduce using rule 99 (h -> call_function_pro .)
    PUNTO           reduce using rule 99 (h -> call_function_pro .)
    SEMI_COLON      reduce using rule 99 (h -> call_function_pro .)
    CONSOLE         reduce using rule 99 (h -> call_function_pro .)
    LET             reduce using rule 99 (h -> call_function_pro .)
    LITERAL         reduce using rule 99 (h -> call_function_pro .)
    IF              reduce using rule 99 (h -> call_function_pro .)
    WHILE           reduce using rule 99 (h -> call_function_pro .)
    FOR             reduce using rule 99 (h -> call_function_pro .)
    INTERFACE       reduce using rule 99 (h -> call_function_pro .)
    CONTINUE        reduce using rule 99 (h -> call_function_pro .)
    BREAK           reduce using rule 99 (h -> call_function_pro .)
    RETURN          reduce using rule 99 (h -> call_function_pro .)
    FUNCTION        reduce using rule 99 (h -> call_function_pro .)
    TOSTRING        reduce using rule 99 (h -> call_function_pro .)
    NOT             reduce using rule 99 (h -> call_function_pro .)
    ENTERO          reduce using rule 99 (h -> call_function_pro .)
    DECIMAL         reduce using rule 99 (h -> call_function_pro .)
    CADENA          reduce using rule 99 (h -> call_function_pro .)
    TRUE            reduce using rule 99 (h -> call_function_pro .)
    FALSE           reduce using rule 99 (h -> call_function_pro .)
    L_PAREN         reduce using rule 99 (h -> call_function_pro .)
    L_CORCHETE      reduce using rule 99 (h -> call_function_pro .)
    L_LLAVE         reduce using rule 99 (h -> call_function_pro .)
    $end            reduce using rule 99 (h -> call_function_pro .)
    R_LLAVE         reduce using rule 99 (h -> call_function_pro .)
    R_CORCHETE      reduce using rule 99 (h -> call_function_pro .)
    COMA            reduce using rule 99 (h -> call_function_pro .)


state 74

    (42) declaration_instruction -> LET declaracion_list .
    (43) declaracion_list -> declaracion_list . COMA assignacion_instruction

    SEMI_COLON      reduce using rule 42 (declaration_instruction -> LET declaracion_list .)
    CONSOLE         reduce using rule 42 (declaration_instruction -> LET declaracion_list .)
    LET             reduce using rule 42 (declaration_instruction -> LET declaracion_list .)
    LITERAL         reduce using rule 42 (declaration_instruction -> LET declaracion_list .)
    IF              reduce using rule 42 (declaration_instruction -> LET declaracion_list .)
    WHILE           reduce using rule 42 (declaration_instruction -> LET declaracion_list .)
    FOR             reduce using rule 42 (declaration_instruction -> LET declaracion_list .)
    INTERFACE       reduce using rule 42 (declaration_instruction -> LET declaracion_list .)
    CONTINUE        reduce using rule 42 (declaration_instruction -> LET declaracion_list .)
    BREAK           reduce using rule 42 (declaration_instruction -> LET declaracion_list .)
    RETURN          reduce using rule 42 (declaration_instruction -> LET declaracion_list .)
    FUNCTION        reduce using rule 42 (declaration_instruction -> LET declaracion_list .)
    TOSTRING        reduce using rule 42 (declaration_instruction -> LET declaracion_list .)
    NOT             reduce using rule 42 (declaration_instruction -> LET declaracion_list .)
    MENOS           reduce using rule 42 (declaration_instruction -> LET declaracion_list .)
    MAS             reduce using rule 42 (declaration_instruction -> LET declaracion_list .)
    ENTERO          reduce using rule 42 (declaration_instruction -> LET declaracion_list .)
    DECIMAL         reduce using rule 42 (declaration_instruction -> LET declaracion_list .)
    CADENA          reduce using rule 42 (declaration_instruction -> LET declaracion_list .)
    TRUE            reduce using rule 42 (declaration_instruction -> LET declaracion_list .)
    FALSE           reduce using rule 42 (declaration_instruction -> LET declaracion_list .)
    L_PAREN         reduce using rule 42 (declaration_instruction -> LET declaracion_list .)
    L_CORCHETE      reduce using rule 42 (declaration_instruction -> LET declaracion_list .)
    L_LLAVE         reduce using rule 42 (declaration_instruction -> LET declaracion_list .)
    $end            reduce using rule 42 (declaration_instruction -> LET declaracion_list .)
    R_LLAVE         reduce using rule 42 (declaration_instruction -> LET declaracion_list .)
    COMA            shift and go to state 116


state 75

    (44) declaracion_list -> assignacion_instruction .

    COMA            reduce using rule 44 (declaracion_list -> assignacion_instruction .)
    SEMI_COLON      reduce using rule 44 (declaracion_list -> assignacion_instruction .)
    CONSOLE         reduce using rule 44 (declaracion_list -> assignacion_instruction .)
    LET             reduce using rule 44 (declaracion_list -> assignacion_instruction .)
    LITERAL         reduce using rule 44 (declaracion_list -> assignacion_instruction .)
    IF              reduce using rule 44 (declaracion_list -> assignacion_instruction .)
    WHILE           reduce using rule 44 (declaracion_list -> assignacion_instruction .)
    FOR             reduce using rule 44 (declaracion_list -> assignacion_instruction .)
    INTERFACE       reduce using rule 44 (declaracion_list -> assignacion_instruction .)
    CONTINUE        reduce using rule 44 (declaracion_list -> assignacion_instruction .)
    BREAK           reduce using rule 44 (declaracion_list -> assignacion_instruction .)
    RETURN          reduce using rule 44 (declaracion_list -> assignacion_instruction .)
    FUNCTION        reduce using rule 44 (declaracion_list -> assignacion_instruction .)
    TOSTRING        reduce using rule 44 (declaracion_list -> assignacion_instruction .)
    NOT             reduce using rule 44 (declaracion_list -> assignacion_instruction .)
    MENOS           reduce using rule 44 (declaracion_list -> assignacion_instruction .)
    MAS             reduce using rule 44 (declaracion_list -> assignacion_instruction .)
    ENTERO          reduce using rule 44 (declaracion_list -> assignacion_instruction .)
    DECIMAL         reduce using rule 44 (declaracion_list -> assignacion_instruction .)
    CADENA          reduce using rule 44 (declaracion_list -> assignacion_instruction .)
    TRUE            reduce using rule 44 (declaracion_list -> assignacion_instruction .)
    FALSE           reduce using rule 44 (declaracion_list -> assignacion_instruction .)
    L_PAREN         reduce using rule 44 (declaracion_list -> assignacion_instruction .)
    L_CORCHETE      reduce using rule 44 (declaracion_list -> assignacion_instruction .)
    L_LLAVE         reduce using rule 44 (declaracion_list -> assignacion_instruction .)
    $end            reduce using rule 44 (declaracion_list -> assignacion_instruction .)
    R_LLAVE         reduce using rule 44 (declaracion_list -> assignacion_instruction .)


state 76

    (45) assignacion_instruction -> LITERAL . COLON type IGUAL a
    (46) assignacion_instruction -> LITERAL . COLON type
    (47) assignacion_instruction -> LITERAL . IGUAL a
    (48) assignacion_instruction -> LITERAL .

    COLON           shift and go to state 117
    IGUAL           shift and go to state 118
    COMA            reduce using rule 48 (assignacion_instruction -> LITERAL .)
    SEMI_COLON      reduce using rule 48 (assignacion_instruction -> LITERAL .)
    CONSOLE         reduce using rule 48 (assignacion_instruction -> LITERAL .)
    LET             reduce using rule 48 (assignacion_instruction -> LITERAL .)
    LITERAL         reduce using rule 48 (assignacion_instruction -> LITERAL .)
    IF              reduce using rule 48 (assignacion_instruction -> LITERAL .)
    WHILE           reduce using rule 48 (assignacion_instruction -> LITERAL .)
    FOR             reduce using rule 48 (assignacion_instruction -> LITERAL .)
    INTERFACE       reduce using rule 48 (assignacion_instruction -> LITERAL .)
    CONTINUE        reduce using rule 48 (assignacion_instruction -> LITERAL .)
    BREAK           reduce using rule 48 (assignacion_instruction -> LITERAL .)
    RETURN          reduce using rule 48 (assignacion_instruction -> LITERAL .)
    FUNCTION        reduce using rule 48 (assignacion_instruction -> LITERAL .)
    TOSTRING        reduce using rule 48 (assignacion_instruction -> LITERAL .)
    NOT             reduce using rule 48 (assignacion_instruction -> LITERAL .)
    MENOS           reduce using rule 48 (assignacion_instruction -> LITERAL .)
    MAS             reduce using rule 48 (assignacion_instruction -> LITERAL .)
    ENTERO          reduce using rule 48 (assignacion_instruction -> LITERAL .)
    DECIMAL         reduce using rule 48 (assignacion_instruction -> LITERAL .)
    CADENA          reduce using rule 48 (assignacion_instruction -> LITERAL .)
    TRUE            reduce using rule 48 (assignacion_instruction -> LITERAL .)
    FALSE           reduce using rule 48 (assignacion_instruction -> LITERAL .)
    L_PAREN         reduce using rule 48 (assignacion_instruction -> LITERAL .)
    L_CORCHETE      reduce using rule 48 (assignacion_instruction -> LITERAL .)
    L_LLAVE         reduce using rule 48 (assignacion_instruction -> LITERAL .)
    $end            reduce using rule 48 (assignacion_instruction -> LITERAL .)
    R_LLAVE         reduce using rule 48 (assignacion_instruction -> LITERAL .)


state 77

    (55) assig_pro -> LITERAL IGUAL . a
    (69) a -> . a OR b
    (70) a -> . b
    (71) b -> . b AND c
    (72) b -> . c
    (73) c -> . NOT d
    (74) c -> . d
    (75) d -> . d DISTINTO_QUE e
    (76) d -> . d MENOR_QUE e
    (77) d -> . d MENOR_IGUAL_QUE e
    (78) d -> . d MAYOR_QUE e
    (79) d -> . d MAYOR_IGUAL_QUE e
    (80) d -> . d TRIPLE_IGUAL e
    (81) d -> . e
    (82) e -> . e MAS f
    (83) e -> . e MENOS f
    (84) e -> . f
    (85) f -> . MENOS g
    (86) f -> . MAS g
    (87) f -> . g
    (88) g -> . g TIMES h
    (89) g -> . g DIVIDE h
    (90) g -> . g MOD h
    (91) g -> . g POTENCIA h
    (92) g -> . h
    (93) h -> . ENTERO
    (94) h -> . DECIMAL
    (95) h -> . CADENA
    (96) h -> . LITERAL
    (97) h -> . TRUE
    (98) h -> . FALSE
    (99) h -> . call_function_pro
    (100) h -> . array_pro
    (101) h -> . interface_assi
    (102) h -> . L_PAREN a R_PAREN
    (103) h -> . array_val_pro
    (104) h -> . a PUNTO LITERAL
    (105) h -> . a PUNTO nativeFun L_PAREN expresion R_PAREN
    (106) h -> . a PUNTO nativeFun L_PAREN R_PAREN
    (23) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (24) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (25) call_function_pro -> . TOSTRING L_PAREN values R_PAREN
    (115) array_pro -> . L_CORCHETE values R_CORCHETE
    (112) interface_assi -> . L_LLAVE atributos_assi R_LLAVE
    (107) array_val_pro -> . LITERAL dimensions

    NOT             shift and go to state 38
    MENOS           shift and go to state 35
    MAS             shift and go to state 34
    ENTERO          shift and go to state 44
    DECIMAL         shift and go to state 45
    CADENA          shift and go to state 46
    LITERAL         shift and go to state 72
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    L_PAREN         shift and go to state 20
    TOSTRING        shift and go to state 33
    L_CORCHETE      shift and go to state 52
    L_LLAVE         shift and go to state 25

    a                              shift and go to state 119
    b                              shift and go to state 36
    c                              shift and go to state 37
    d                              shift and go to state 39
    e                              shift and go to state 40
    f                              shift and go to state 41
    g                              shift and go to state 42
    h                              shift and go to state 43
    call_function_pro              shift and go to state 73
    array_pro                      shift and go to state 49
    interface_assi                 shift and go to state 50
    array_val_pro                  shift and go to state 51

state 78

    (23) call_function_pro -> LITERAL L_PAREN . values R_PAREN
    (24) call_function_pro -> LITERAL L_PAREN . R_PAREN
    (26) values -> . values COMA a
    (27) values -> . a
    (69) a -> . a OR b
    (70) a -> . b
    (71) b -> . b AND c
    (72) b -> . c
    (73) c -> . NOT d
    (74) c -> . d
    (75) d -> . d DISTINTO_QUE e
    (76) d -> . d MENOR_QUE e
    (77) d -> . d MENOR_IGUAL_QUE e
    (78) d -> . d MAYOR_QUE e
    (79) d -> . d MAYOR_IGUAL_QUE e
    (80) d -> . d TRIPLE_IGUAL e
    (81) d -> . e
    (82) e -> . e MAS f
    (83) e -> . e MENOS f
    (84) e -> . f
    (85) f -> . MENOS g
    (86) f -> . MAS g
    (87) f -> . g
    (88) g -> . g TIMES h
    (89) g -> . g DIVIDE h
    (90) g -> . g MOD h
    (91) g -> . g POTENCIA h
    (92) g -> . h
    (93) h -> . ENTERO
    (94) h -> . DECIMAL
    (95) h -> . CADENA
    (96) h -> . LITERAL
    (97) h -> . TRUE
    (98) h -> . FALSE
    (99) h -> . call_function_pro
    (100) h -> . array_pro
    (101) h -> . interface_assi
    (102) h -> . L_PAREN a R_PAREN
    (103) h -> . array_val_pro
    (104) h -> . a PUNTO LITERAL
    (105) h -> . a PUNTO nativeFun L_PAREN expresion R_PAREN
    (106) h -> . a PUNTO nativeFun L_PAREN R_PAREN
    (23) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (24) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (25) call_function_pro -> . TOSTRING L_PAREN values R_PAREN
    (115) array_pro -> . L_CORCHETE values R_CORCHETE
    (112) interface_assi -> . L_LLAVE atributos_assi R_LLAVE
    (107) array_val_pro -> . LITERAL dimensions

    R_PAREN         shift and go to state 121
    NOT             shift and go to state 38
    MENOS           shift and go to state 35
    MAS             shift and go to state 34
    ENTERO          shift and go to state 44
    DECIMAL         shift and go to state 45
    CADENA          shift and go to state 46
    LITERAL         shift and go to state 72
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    L_PAREN         shift and go to state 20
    TOSTRING        shift and go to state 33
    L_CORCHETE      shift and go to state 52
    L_LLAVE         shift and go to state 25

    values                         shift and go to state 120
    a                              shift and go to state 112
    b                              shift and go to state 36
    c                              shift and go to state 37
    d                              shift and go to state 39
    e                              shift and go to state 40
    f                              shift and go to state 41
    g                              shift and go to state 42
    h                              shift and go to state 43
    call_function_pro              shift and go to state 73
    array_pro                      shift and go to state 49
    interface_assi                 shift and go to state 50
    array_val_pro                  shift and go to state 51

state 79

    (110) sumadores -> LITERAL MAS . MAS

    MAS             shift and go to state 122


state 80

    (111) sumadores -> LITERAL MENOS . MENOS

    MENOS           shift and go to state 123


state 81

    (107) array_val_pro -> LITERAL dimensions .
    (108) dimensions -> dimensions . L_CORCHETE a R_CORCHETE

  ! shift/reduce conflict for L_CORCHETE resolved as shift
    TIMES           reduce using rule 107 (array_val_pro -> LITERAL dimensions .)
    DIVIDE          reduce using rule 107 (array_val_pro -> LITERAL dimensions .)
    MOD             reduce using rule 107 (array_val_pro -> LITERAL dimensions .)
    POTENCIA        reduce using rule 107 (array_val_pro -> LITERAL dimensions .)
    MAS             reduce using rule 107 (array_val_pro -> LITERAL dimensions .)
    MENOS           reduce using rule 107 (array_val_pro -> LITERAL dimensions .)
    DISTINTO_QUE    reduce using rule 107 (array_val_pro -> LITERAL dimensions .)
    MENOR_QUE       reduce using rule 107 (array_val_pro -> LITERAL dimensions .)
    MENOR_IGUAL_QUE reduce using rule 107 (array_val_pro -> LITERAL dimensions .)
    MAYOR_QUE       reduce using rule 107 (array_val_pro -> LITERAL dimensions .)
    MAYOR_IGUAL_QUE reduce using rule 107 (array_val_pro -> LITERAL dimensions .)
    TRIPLE_IGUAL    reduce using rule 107 (array_val_pro -> LITERAL dimensions .)
    AND             reduce using rule 107 (array_val_pro -> LITERAL dimensions .)
    PUNTO           reduce using rule 107 (array_val_pro -> LITERAL dimensions .)
    OR              reduce using rule 107 (array_val_pro -> LITERAL dimensions .)
    R_PAREN         reduce using rule 107 (array_val_pro -> LITERAL dimensions .)
    SEMI_COLON      reduce using rule 107 (array_val_pro -> LITERAL dimensions .)
    CONSOLE         reduce using rule 107 (array_val_pro -> LITERAL dimensions .)
    LET             reduce using rule 107 (array_val_pro -> LITERAL dimensions .)
    LITERAL         reduce using rule 107 (array_val_pro -> LITERAL dimensions .)
    IF              reduce using rule 107 (array_val_pro -> LITERAL dimensions .)
    WHILE           reduce using rule 107 (array_val_pro -> LITERAL dimensions .)
    FOR             reduce using rule 107 (array_val_pro -> LITERAL dimensions .)
    INTERFACE       reduce using rule 107 (array_val_pro -> LITERAL dimensions .)
    CONTINUE        reduce using rule 107 (array_val_pro -> LITERAL dimensions .)
    BREAK           reduce using rule 107 (array_val_pro -> LITERAL dimensions .)
    RETURN          reduce using rule 107 (array_val_pro -> LITERAL dimensions .)
    FUNCTION        reduce using rule 107 (array_val_pro -> LITERAL dimensions .)
    TOSTRING        reduce using rule 107 (array_val_pro -> LITERAL dimensions .)
    NOT             reduce using rule 107 (array_val_pro -> LITERAL dimensions .)
    ENTERO          reduce using rule 107 (array_val_pro -> LITERAL dimensions .)
    DECIMAL         reduce using rule 107 (array_val_pro -> LITERAL dimensions .)
    CADENA          reduce using rule 107 (array_val_pro -> LITERAL dimensions .)
    TRUE            reduce using rule 107 (array_val_pro -> LITERAL dimensions .)
    FALSE           reduce using rule 107 (array_val_pro -> LITERAL dimensions .)
    L_PAREN         reduce using rule 107 (array_val_pro -> LITERAL dimensions .)
    L_LLAVE         reduce using rule 107 (array_val_pro -> LITERAL dimensions .)
    $end            reduce using rule 107 (array_val_pro -> LITERAL dimensions .)
    R_LLAVE         reduce using rule 107 (array_val_pro -> LITERAL dimensions .)
    R_CORCHETE      reduce using rule 107 (array_val_pro -> LITERAL dimensions .)
    COMA            reduce using rule 107 (array_val_pro -> LITERAL dimensions .)
    L_CORCHETE      shift and go to state 124

  ! L_CORCHETE      [ reduce using rule 107 (array_val_pro -> LITERAL dimensions .) ]


state 82

    (109) dimensions -> L_CORCHETE . a R_CORCHETE
    (69) a -> . a OR b
    (70) a -> . b
    (71) b -> . b AND c
    (72) b -> . c
    (73) c -> . NOT d
    (74) c -> . d
    (75) d -> . d DISTINTO_QUE e
    (76) d -> . d MENOR_QUE e
    (77) d -> . d MENOR_IGUAL_QUE e
    (78) d -> . d MAYOR_QUE e
    (79) d -> . d MAYOR_IGUAL_QUE e
    (80) d -> . d TRIPLE_IGUAL e
    (81) d -> . e
    (82) e -> . e MAS f
    (83) e -> . e MENOS f
    (84) e -> . f
    (85) f -> . MENOS g
    (86) f -> . MAS g
    (87) f -> . g
    (88) g -> . g TIMES h
    (89) g -> . g DIVIDE h
    (90) g -> . g MOD h
    (91) g -> . g POTENCIA h
    (92) g -> . h
    (93) h -> . ENTERO
    (94) h -> . DECIMAL
    (95) h -> . CADENA
    (96) h -> . LITERAL
    (97) h -> . TRUE
    (98) h -> . FALSE
    (99) h -> . call_function_pro
    (100) h -> . array_pro
    (101) h -> . interface_assi
    (102) h -> . L_PAREN a R_PAREN
    (103) h -> . array_val_pro
    (104) h -> . a PUNTO LITERAL
    (105) h -> . a PUNTO nativeFun L_PAREN expresion R_PAREN
    (106) h -> . a PUNTO nativeFun L_PAREN R_PAREN
    (23) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (24) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (25) call_function_pro -> . TOSTRING L_PAREN values R_PAREN
    (115) array_pro -> . L_CORCHETE values R_CORCHETE
    (112) interface_assi -> . L_LLAVE atributos_assi R_LLAVE
    (107) array_val_pro -> . LITERAL dimensions

    NOT             shift and go to state 38
    MENOS           shift and go to state 35
    MAS             shift and go to state 34
    ENTERO          shift and go to state 44
    DECIMAL         shift and go to state 45
    CADENA          shift and go to state 46
    LITERAL         shift and go to state 72
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    L_PAREN         shift and go to state 20
    TOSTRING        shift and go to state 33
    L_CORCHETE      shift and go to state 52
    L_LLAVE         shift and go to state 25

    a                              shift and go to state 125
    b                              shift and go to state 36
    c                              shift and go to state 37
    d                              shift and go to state 39
    e                              shift and go to state 40
    f                              shift and go to state 41
    g                              shift and go to state 42
    h                              shift and go to state 43
    call_function_pro              shift and go to state 73
    array_pro                      shift and go to state 49
    interface_assi                 shift and go to state 50
    array_val_pro                  shift and go to state 51

state 83

    (41) interface_assign_pro -> a PUNTO . LITERAL IGUAL a
    (104) h -> a PUNTO . LITERAL
    (105) h -> a PUNTO . nativeFun L_PAREN expresion R_PAREN
    (106) h -> a PUNTO . nativeFun L_PAREN R_PAREN
    (116) nativeFun -> . TOSTRING
    (117) nativeFun -> . TOFIXED
    (118) nativeFun -> . TOEXPONENTIAL
    (119) nativeFun -> . TOLOWERCASE
    (120) nativeFun -> . TOUPPERCASE
    (121) nativeFun -> . SPLIT
    (122) nativeFun -> . CONCAT
    (123) nativeFun -> . LENGTH

    LITERAL         shift and go to state 126
    TOSTRING        shift and go to state 128
    TOFIXED         shift and go to state 129
    TOEXPONENTIAL   shift and go to state 130
    TOLOWERCASE     shift and go to state 131
    TOUPPERCASE     shift and go to state 132
    SPLIT           shift and go to state 133
    CONCAT          shift and go to state 134
    LENGTH          shift and go to state 135

    nativeFun                      shift and go to state 127

state 84

    (69) a -> a OR . b
    (71) b -> . b AND c
    (72) b -> . c
    (73) c -> . NOT d
    (74) c -> . d
    (75) d -> . d DISTINTO_QUE e
    (76) d -> . d MENOR_QUE e
    (77) d -> . d MENOR_IGUAL_QUE e
    (78) d -> . d MAYOR_QUE e
    (79) d -> . d MAYOR_IGUAL_QUE e
    (80) d -> . d TRIPLE_IGUAL e
    (81) d -> . e
    (82) e -> . e MAS f
    (83) e -> . e MENOS f
    (84) e -> . f
    (85) f -> . MENOS g
    (86) f -> . MAS g
    (87) f -> . g
    (88) g -> . g TIMES h
    (89) g -> . g DIVIDE h
    (90) g -> . g MOD h
    (91) g -> . g POTENCIA h
    (92) g -> . h
    (93) h -> . ENTERO
    (94) h -> . DECIMAL
    (95) h -> . CADENA
    (96) h -> . LITERAL
    (97) h -> . TRUE
    (98) h -> . FALSE
    (99) h -> . call_function_pro
    (100) h -> . array_pro
    (101) h -> . interface_assi
    (102) h -> . L_PAREN a R_PAREN
    (103) h -> . array_val_pro
    (104) h -> . a PUNTO LITERAL
    (105) h -> . a PUNTO nativeFun L_PAREN expresion R_PAREN
    (106) h -> . a PUNTO nativeFun L_PAREN R_PAREN
    (23) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (24) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (25) call_function_pro -> . TOSTRING L_PAREN values R_PAREN
    (115) array_pro -> . L_CORCHETE values R_CORCHETE
    (112) interface_assi -> . L_LLAVE atributos_assi R_LLAVE
    (107) array_val_pro -> . LITERAL dimensions
    (69) a -> . a OR b
    (70) a -> . b

    NOT             shift and go to state 38
    MENOS           shift and go to state 35
    MAS             shift and go to state 34
    ENTERO          shift and go to state 44
    DECIMAL         shift and go to state 45
    CADENA          shift and go to state 46
    LITERAL         shift and go to state 72
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    L_PAREN         shift and go to state 20
    TOSTRING        shift and go to state 33
    L_CORCHETE      shift and go to state 52
    L_LLAVE         shift and go to state 25

    a                              shift and go to state 95
    b                              shift and go to state 136
    c                              shift and go to state 37
    d                              shift and go to state 39
    e                              shift and go to state 40
    f                              shift and go to state 41
    g                              shift and go to state 42
    h                              shift and go to state 43
    call_function_pro              shift and go to state 73
    array_pro                      shift and go to state 49
    interface_assi                 shift and go to state 50
    array_val_pro                  shift and go to state 51

state 85

    (56) if_pro -> IF L_PAREN . a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro
    (69) a -> . a OR b
    (70) a -> . b
    (71) b -> . b AND c
    (72) b -> . c
    (73) c -> . NOT d
    (74) c -> . d
    (75) d -> . d DISTINTO_QUE e
    (76) d -> . d MENOR_QUE e
    (77) d -> . d MENOR_IGUAL_QUE e
    (78) d -> . d MAYOR_QUE e
    (79) d -> . d MAYOR_IGUAL_QUE e
    (80) d -> . d TRIPLE_IGUAL e
    (81) d -> . e
    (82) e -> . e MAS f
    (83) e -> . e MENOS f
    (84) e -> . f
    (85) f -> . MENOS g
    (86) f -> . MAS g
    (87) f -> . g
    (88) g -> . g TIMES h
    (89) g -> . g DIVIDE h
    (90) g -> . g MOD h
    (91) g -> . g POTENCIA h
    (92) g -> . h
    (93) h -> . ENTERO
    (94) h -> . DECIMAL
    (95) h -> . CADENA
    (96) h -> . LITERAL
    (97) h -> . TRUE
    (98) h -> . FALSE
    (99) h -> . call_function_pro
    (100) h -> . array_pro
    (101) h -> . interface_assi
    (102) h -> . L_PAREN a R_PAREN
    (103) h -> . array_val_pro
    (104) h -> . a PUNTO LITERAL
    (105) h -> . a PUNTO nativeFun L_PAREN expresion R_PAREN
    (106) h -> . a PUNTO nativeFun L_PAREN R_PAREN
    (23) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (24) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (25) call_function_pro -> . TOSTRING L_PAREN values R_PAREN
    (115) array_pro -> . L_CORCHETE values R_CORCHETE
    (112) interface_assi -> . L_LLAVE atributos_assi R_LLAVE
    (107) array_val_pro -> . LITERAL dimensions

    NOT             shift and go to state 38
    MENOS           shift and go to state 35
    MAS             shift and go to state 34
    ENTERO          shift and go to state 44
    DECIMAL         shift and go to state 45
    CADENA          shift and go to state 46
    LITERAL         shift and go to state 72
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    L_PAREN         shift and go to state 20
    TOSTRING        shift and go to state 33
    L_CORCHETE      shift and go to state 52
    L_LLAVE         shift and go to state 25

    a                              shift and go to state 137
    b                              shift and go to state 36
    c                              shift and go to state 37
    d                              shift and go to state 39
    e                              shift and go to state 40
    f                              shift and go to state 41
    g                              shift and go to state 42
    h                              shift and go to state 43
    call_function_pro              shift and go to state 73
    array_pro                      shift and go to state 49
    interface_assi                 shift and go to state 50
    array_val_pro                  shift and go to state 51

state 86

    (112) interface_assi -> L_LLAVE atributos_assi . R_LLAVE
    (113) atributos_assi -> atributos_assi . COMA LITERAL COLON a

    R_LLAVE         shift and go to state 138
    COMA            shift and go to state 139


state 87

    (114) atributos_assi -> LITERAL . COLON a

    COLON           shift and go to state 140


state 88

    (60) while_pro -> WHILE L_PAREN . a R_PAREN L_LLAVE instrucciones R_LLAVE
    (69) a -> . a OR b
    (70) a -> . b
    (71) b -> . b AND c
    (72) b -> . c
    (73) c -> . NOT d
    (74) c -> . d
    (75) d -> . d DISTINTO_QUE e
    (76) d -> . d MENOR_QUE e
    (77) d -> . d MENOR_IGUAL_QUE e
    (78) d -> . d MAYOR_QUE e
    (79) d -> . d MAYOR_IGUAL_QUE e
    (80) d -> . d TRIPLE_IGUAL e
    (81) d -> . e
    (82) e -> . e MAS f
    (83) e -> . e MENOS f
    (84) e -> . f
    (85) f -> . MENOS g
    (86) f -> . MAS g
    (87) f -> . g
    (88) g -> . g TIMES h
    (89) g -> . g DIVIDE h
    (90) g -> . g MOD h
    (91) g -> . g POTENCIA h
    (92) g -> . h
    (93) h -> . ENTERO
    (94) h -> . DECIMAL
    (95) h -> . CADENA
    (96) h -> . LITERAL
    (97) h -> . TRUE
    (98) h -> . FALSE
    (99) h -> . call_function_pro
    (100) h -> . array_pro
    (101) h -> . interface_assi
    (102) h -> . L_PAREN a R_PAREN
    (103) h -> . array_val_pro
    (104) h -> . a PUNTO LITERAL
    (105) h -> . a PUNTO nativeFun L_PAREN expresion R_PAREN
    (106) h -> . a PUNTO nativeFun L_PAREN R_PAREN
    (23) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (24) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (25) call_function_pro -> . TOSTRING L_PAREN values R_PAREN
    (115) array_pro -> . L_CORCHETE values R_CORCHETE
    (112) interface_assi -> . L_LLAVE atributos_assi R_LLAVE
    (107) array_val_pro -> . LITERAL dimensions

    NOT             shift and go to state 38
    MENOS           shift and go to state 35
    MAS             shift and go to state 34
    ENTERO          shift and go to state 44
    DECIMAL         shift and go to state 45
    CADENA          shift and go to state 46
    LITERAL         shift and go to state 72
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    L_PAREN         shift and go to state 20
    TOSTRING        shift and go to state 33
    L_CORCHETE      shift and go to state 52
    L_LLAVE         shift and go to state 25

    a                              shift and go to state 141
    b                              shift and go to state 36
    c                              shift and go to state 37
    d                              shift and go to state 39
    e                              shift and go to state 40
    f                              shift and go to state 41
    g                              shift and go to state 42
    h                              shift and go to state 43
    call_function_pro              shift and go to state 73
    array_pro                      shift and go to state 49
    interface_assi                 shift and go to state 50
    array_val_pro                  shift and go to state 51

state 89

    (61) for_pro -> FOR L_PAREN . declaration_instruction SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (62) for_pro -> FOR L_PAREN . assig_pro SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (65) for_each_pro -> FOR L_PAREN . LET LITERAL OF a R_PAREN L_LLAVE instrucciones R_LLAVE
    (42) declaration_instruction -> . LET declaracion_list
    (55) assig_pro -> . LITERAL IGUAL a

    LET             shift and go to state 144
    LITERAL         shift and go to state 145

    declaration_instruction        shift and go to state 142
    assig_pro                      shift and go to state 143

state 90

    (36) interface_pro -> INTERFACE LITERAL . L_LLAVE interface_atributos R_LLAVE

    L_LLAVE         shift and go to state 146


state 91

    (35) return_pro -> RETURN a .
    (69) a -> a . OR b
    (104) h -> a . PUNTO LITERAL
    (105) h -> a . PUNTO nativeFun L_PAREN expresion R_PAREN
    (106) h -> a . PUNTO nativeFun L_PAREN R_PAREN

    SEMI_COLON      reduce using rule 35 (return_pro -> RETURN a .)
    CONSOLE         reduce using rule 35 (return_pro -> RETURN a .)
    LET             reduce using rule 35 (return_pro -> RETURN a .)
    LITERAL         reduce using rule 35 (return_pro -> RETURN a .)
    IF              reduce using rule 35 (return_pro -> RETURN a .)
    WHILE           reduce using rule 35 (return_pro -> RETURN a .)
    FOR             reduce using rule 35 (return_pro -> RETURN a .)
    INTERFACE       reduce using rule 35 (return_pro -> RETURN a .)
    CONTINUE        reduce using rule 35 (return_pro -> RETURN a .)
    BREAK           reduce using rule 35 (return_pro -> RETURN a .)
    RETURN          reduce using rule 35 (return_pro -> RETURN a .)
    FUNCTION        reduce using rule 35 (return_pro -> RETURN a .)
    TOSTRING        reduce using rule 35 (return_pro -> RETURN a .)
    NOT             reduce using rule 35 (return_pro -> RETURN a .)
    MENOS           reduce using rule 35 (return_pro -> RETURN a .)
    MAS             reduce using rule 35 (return_pro -> RETURN a .)
    ENTERO          reduce using rule 35 (return_pro -> RETURN a .)
    DECIMAL         reduce using rule 35 (return_pro -> RETURN a .)
    CADENA          reduce using rule 35 (return_pro -> RETURN a .)
    TRUE            reduce using rule 35 (return_pro -> RETURN a .)
    FALSE           reduce using rule 35 (return_pro -> RETURN a .)
    L_PAREN         reduce using rule 35 (return_pro -> RETURN a .)
    L_CORCHETE      reduce using rule 35 (return_pro -> RETURN a .)
    L_LLAVE         reduce using rule 35 (return_pro -> RETURN a .)
    $end            reduce using rule 35 (return_pro -> RETURN a .)
    R_LLAVE         reduce using rule 35 (return_pro -> RETURN a .)
    OR              shift and go to state 84
    PUNTO           shift and go to state 115


state 92

    (21) function_pro -> FUNCTION LITERAL . L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (22) function_pro -> FUNCTION LITERAL . L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE

    L_PAREN         shift and go to state 147


state 93

    (25) call_function_pro -> TOSTRING L_PAREN . values R_PAREN
    (26) values -> . values COMA a
    (27) values -> . a
    (69) a -> . a OR b
    (70) a -> . b
    (71) b -> . b AND c
    (72) b -> . c
    (73) c -> . NOT d
    (74) c -> . d
    (75) d -> . d DISTINTO_QUE e
    (76) d -> . d MENOR_QUE e
    (77) d -> . d MENOR_IGUAL_QUE e
    (78) d -> . d MAYOR_QUE e
    (79) d -> . d MAYOR_IGUAL_QUE e
    (80) d -> . d TRIPLE_IGUAL e
    (81) d -> . e
    (82) e -> . e MAS f
    (83) e -> . e MENOS f
    (84) e -> . f
    (85) f -> . MENOS g
    (86) f -> . MAS g
    (87) f -> . g
    (88) g -> . g TIMES h
    (89) g -> . g DIVIDE h
    (90) g -> . g MOD h
    (91) g -> . g POTENCIA h
    (92) g -> . h
    (93) h -> . ENTERO
    (94) h -> . DECIMAL
    (95) h -> . CADENA
    (96) h -> . LITERAL
    (97) h -> . TRUE
    (98) h -> . FALSE
    (99) h -> . call_function_pro
    (100) h -> . array_pro
    (101) h -> . interface_assi
    (102) h -> . L_PAREN a R_PAREN
    (103) h -> . array_val_pro
    (104) h -> . a PUNTO LITERAL
    (105) h -> . a PUNTO nativeFun L_PAREN expresion R_PAREN
    (106) h -> . a PUNTO nativeFun L_PAREN R_PAREN
    (23) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (24) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (25) call_function_pro -> . TOSTRING L_PAREN values R_PAREN
    (115) array_pro -> . L_CORCHETE values R_CORCHETE
    (112) interface_assi -> . L_LLAVE atributos_assi R_LLAVE
    (107) array_val_pro -> . LITERAL dimensions

    NOT             shift and go to state 38
    MENOS           shift and go to state 35
    MAS             shift and go to state 34
    ENTERO          shift and go to state 44
    DECIMAL         shift and go to state 45
    CADENA          shift and go to state 46
    LITERAL         shift and go to state 72
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    L_PAREN         shift and go to state 20
    TOSTRING        shift and go to state 33
    L_CORCHETE      shift and go to state 52
    L_LLAVE         shift and go to state 25

    values                         shift and go to state 148
    a                              shift and go to state 112
    b                              shift and go to state 36
    c                              shift and go to state 37
    d                              shift and go to state 39
    e                              shift and go to state 40
    f                              shift and go to state 41
    g                              shift and go to state 42
    h                              shift and go to state 43
    call_function_pro              shift and go to state 73
    array_pro                      shift and go to state 49
    interface_assi                 shift and go to state 50
    array_val_pro                  shift and go to state 51

state 94

    (86) f -> MAS g .
    (88) g -> g . TIMES h
    (89) g -> g . DIVIDE h
    (90) g -> g . MOD h
    (91) g -> g . POTENCIA h
    (87) f -> g .

  ! reduce/reduce conflict for MAS resolved using rule 86 (f -> MAS g .)
  ! reduce/reduce conflict for MENOS resolved using rule 86 (f -> MAS g .)
  ! reduce/reduce conflict for DISTINTO_QUE resolved using rule 86 (f -> MAS g .)
  ! reduce/reduce conflict for MENOR_QUE resolved using rule 86 (f -> MAS g .)
  ! reduce/reduce conflict for MENOR_IGUAL_QUE resolved using rule 86 (f -> MAS g .)
  ! reduce/reduce conflict for MAYOR_QUE resolved using rule 86 (f -> MAS g .)
  ! reduce/reduce conflict for MAYOR_IGUAL_QUE resolved using rule 86 (f -> MAS g .)
  ! reduce/reduce conflict for TRIPLE_IGUAL resolved using rule 86 (f -> MAS g .)
  ! reduce/reduce conflict for AND resolved using rule 86 (f -> MAS g .)
  ! reduce/reduce conflict for PUNTO resolved using rule 86 (f -> MAS g .)
  ! reduce/reduce conflict for OR resolved using rule 86 (f -> MAS g .)
    MAS             reduce using rule 86 (f -> MAS g .)
    MENOS           reduce using rule 86 (f -> MAS g .)
    DISTINTO_QUE    reduce using rule 86 (f -> MAS g .)
    MENOR_QUE       reduce using rule 86 (f -> MAS g .)
    MENOR_IGUAL_QUE reduce using rule 86 (f -> MAS g .)
    MAYOR_QUE       reduce using rule 86 (f -> MAS g .)
    MAYOR_IGUAL_QUE reduce using rule 86 (f -> MAS g .)
    TRIPLE_IGUAL    reduce using rule 86 (f -> MAS g .)
    AND             reduce using rule 86 (f -> MAS g .)
    PUNTO           reduce using rule 86 (f -> MAS g .)
    OR              reduce using rule 86 (f -> MAS g .)
    R_PAREN         reduce using rule 86 (f -> MAS g .)
    SEMI_COLON      reduce using rule 86 (f -> MAS g .)
    CONSOLE         reduce using rule 86 (f -> MAS g .)
    LET             reduce using rule 86 (f -> MAS g .)
    LITERAL         reduce using rule 86 (f -> MAS g .)
    IF              reduce using rule 86 (f -> MAS g .)
    WHILE           reduce using rule 86 (f -> MAS g .)
    FOR             reduce using rule 86 (f -> MAS g .)
    INTERFACE       reduce using rule 86 (f -> MAS g .)
    CONTINUE        reduce using rule 86 (f -> MAS g .)
    BREAK           reduce using rule 86 (f -> MAS g .)
    RETURN          reduce using rule 86 (f -> MAS g .)
    FUNCTION        reduce using rule 86 (f -> MAS g .)
    TOSTRING        reduce using rule 86 (f -> MAS g .)
    NOT             reduce using rule 86 (f -> MAS g .)
    ENTERO          reduce using rule 86 (f -> MAS g .)
    DECIMAL         reduce using rule 86 (f -> MAS g .)
    CADENA          reduce using rule 86 (f -> MAS g .)
    TRUE            reduce using rule 86 (f -> MAS g .)
    FALSE           reduce using rule 86 (f -> MAS g .)
    L_PAREN         reduce using rule 86 (f -> MAS g .)
    L_CORCHETE      reduce using rule 86 (f -> MAS g .)
    L_LLAVE         reduce using rule 86 (f -> MAS g .)
    $end            reduce using rule 86 (f -> MAS g .)
    R_LLAVE         reduce using rule 86 (f -> MAS g .)
    R_CORCHETE      reduce using rule 86 (f -> MAS g .)
    COMA            reduce using rule 86 (f -> MAS g .)
    TIMES           shift and go to state 107
    DIVIDE          shift and go to state 108
    MOD             shift and go to state 109
    POTENCIA        shift and go to state 110

  ! MAS             [ reduce using rule 87 (f -> g .) ]
  ! MENOS           [ reduce using rule 87 (f -> g .) ]
  ! DISTINTO_QUE    [ reduce using rule 87 (f -> g .) ]
  ! MENOR_QUE       [ reduce using rule 87 (f -> g .) ]
  ! MENOR_IGUAL_QUE [ reduce using rule 87 (f -> g .) ]
  ! MAYOR_QUE       [ reduce using rule 87 (f -> g .) ]
  ! MAYOR_IGUAL_QUE [ reduce using rule 87 (f -> g .) ]
  ! TRIPLE_IGUAL    [ reduce using rule 87 (f -> g .) ]
  ! AND             [ reduce using rule 87 (f -> g .) ]
  ! PUNTO           [ reduce using rule 87 (f -> g .) ]
  ! OR              [ reduce using rule 87 (f -> g .) ]


state 95

    (104) h -> a . PUNTO LITERAL
    (105) h -> a . PUNTO nativeFun L_PAREN expresion R_PAREN
    (106) h -> a . PUNTO nativeFun L_PAREN R_PAREN
    (69) a -> a . OR b

    PUNTO           shift and go to state 115
    OR              shift and go to state 84


state 96

    (85) f -> MENOS g .
    (88) g -> g . TIMES h
    (89) g -> g . DIVIDE h
    (90) g -> g . MOD h
    (91) g -> g . POTENCIA h
    (87) f -> g .

  ! reduce/reduce conflict for MAS resolved using rule 85 (f -> MENOS g .)
  ! reduce/reduce conflict for MENOS resolved using rule 85 (f -> MENOS g .)
  ! reduce/reduce conflict for DISTINTO_QUE resolved using rule 85 (f -> MENOS g .)
  ! reduce/reduce conflict for MENOR_QUE resolved using rule 85 (f -> MENOS g .)
  ! reduce/reduce conflict for MENOR_IGUAL_QUE resolved using rule 85 (f -> MENOS g .)
  ! reduce/reduce conflict for MAYOR_QUE resolved using rule 85 (f -> MENOS g .)
  ! reduce/reduce conflict for MAYOR_IGUAL_QUE resolved using rule 85 (f -> MENOS g .)
  ! reduce/reduce conflict for TRIPLE_IGUAL resolved using rule 85 (f -> MENOS g .)
  ! reduce/reduce conflict for AND resolved using rule 85 (f -> MENOS g .)
  ! reduce/reduce conflict for PUNTO resolved using rule 85 (f -> MENOS g .)
  ! reduce/reduce conflict for OR resolved using rule 85 (f -> MENOS g .)
    MAS             reduce using rule 85 (f -> MENOS g .)
    MENOS           reduce using rule 85 (f -> MENOS g .)
    DISTINTO_QUE    reduce using rule 85 (f -> MENOS g .)
    MENOR_QUE       reduce using rule 85 (f -> MENOS g .)
    MENOR_IGUAL_QUE reduce using rule 85 (f -> MENOS g .)
    MAYOR_QUE       reduce using rule 85 (f -> MENOS g .)
    MAYOR_IGUAL_QUE reduce using rule 85 (f -> MENOS g .)
    TRIPLE_IGUAL    reduce using rule 85 (f -> MENOS g .)
    AND             reduce using rule 85 (f -> MENOS g .)
    PUNTO           reduce using rule 85 (f -> MENOS g .)
    OR              reduce using rule 85 (f -> MENOS g .)
    R_PAREN         reduce using rule 85 (f -> MENOS g .)
    SEMI_COLON      reduce using rule 85 (f -> MENOS g .)
    CONSOLE         reduce using rule 85 (f -> MENOS g .)
    LET             reduce using rule 85 (f -> MENOS g .)
    LITERAL         reduce using rule 85 (f -> MENOS g .)
    IF              reduce using rule 85 (f -> MENOS g .)
    WHILE           reduce using rule 85 (f -> MENOS g .)
    FOR             reduce using rule 85 (f -> MENOS g .)
    INTERFACE       reduce using rule 85 (f -> MENOS g .)
    CONTINUE        reduce using rule 85 (f -> MENOS g .)
    BREAK           reduce using rule 85 (f -> MENOS g .)
    RETURN          reduce using rule 85 (f -> MENOS g .)
    FUNCTION        reduce using rule 85 (f -> MENOS g .)
    TOSTRING        reduce using rule 85 (f -> MENOS g .)
    NOT             reduce using rule 85 (f -> MENOS g .)
    ENTERO          reduce using rule 85 (f -> MENOS g .)
    DECIMAL         reduce using rule 85 (f -> MENOS g .)
    CADENA          reduce using rule 85 (f -> MENOS g .)
    TRUE            reduce using rule 85 (f -> MENOS g .)
    FALSE           reduce using rule 85 (f -> MENOS g .)
    L_PAREN         reduce using rule 85 (f -> MENOS g .)
    L_CORCHETE      reduce using rule 85 (f -> MENOS g .)
    L_LLAVE         reduce using rule 85 (f -> MENOS g .)
    $end            reduce using rule 85 (f -> MENOS g .)
    R_LLAVE         reduce using rule 85 (f -> MENOS g .)
    R_CORCHETE      reduce using rule 85 (f -> MENOS g .)
    COMA            reduce using rule 85 (f -> MENOS g .)
    TIMES           shift and go to state 107
    DIVIDE          shift and go to state 108
    MOD             shift and go to state 109
    POTENCIA        shift and go to state 110

  ! MAS             [ reduce using rule 87 (f -> g .) ]
  ! MENOS           [ reduce using rule 87 (f -> g .) ]
  ! DISTINTO_QUE    [ reduce using rule 87 (f -> g .) ]
  ! MENOR_QUE       [ reduce using rule 87 (f -> g .) ]
  ! MENOR_IGUAL_QUE [ reduce using rule 87 (f -> g .) ]
  ! MAYOR_QUE       [ reduce using rule 87 (f -> g .) ]
  ! MAYOR_IGUAL_QUE [ reduce using rule 87 (f -> g .) ]
  ! TRIPLE_IGUAL    [ reduce using rule 87 (f -> g .) ]
  ! AND             [ reduce using rule 87 (f -> g .) ]
  ! PUNTO           [ reduce using rule 87 (f -> g .) ]
  ! OR              [ reduce using rule 87 (f -> g .) ]


state 97

    (71) b -> b AND . c
    (73) c -> . NOT d
    (74) c -> . d
    (75) d -> . d DISTINTO_QUE e
    (76) d -> . d MENOR_QUE e
    (77) d -> . d MENOR_IGUAL_QUE e
    (78) d -> . d MAYOR_QUE e
    (79) d -> . d MAYOR_IGUAL_QUE e
    (80) d -> . d TRIPLE_IGUAL e
    (81) d -> . e
    (82) e -> . e MAS f
    (83) e -> . e MENOS f
    (84) e -> . f
    (85) f -> . MENOS g
    (86) f -> . MAS g
    (87) f -> . g
    (88) g -> . g TIMES h
    (89) g -> . g DIVIDE h
    (90) g -> . g MOD h
    (91) g -> . g POTENCIA h
    (92) g -> . h
    (93) h -> . ENTERO
    (94) h -> . DECIMAL
    (95) h -> . CADENA
    (96) h -> . LITERAL
    (97) h -> . TRUE
    (98) h -> . FALSE
    (99) h -> . call_function_pro
    (100) h -> . array_pro
    (101) h -> . interface_assi
    (102) h -> . L_PAREN a R_PAREN
    (103) h -> . array_val_pro
    (104) h -> . a PUNTO LITERAL
    (105) h -> . a PUNTO nativeFun L_PAREN expresion R_PAREN
    (106) h -> . a PUNTO nativeFun L_PAREN R_PAREN
    (23) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (24) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (25) call_function_pro -> . TOSTRING L_PAREN values R_PAREN
    (115) array_pro -> . L_CORCHETE values R_CORCHETE
    (112) interface_assi -> . L_LLAVE atributos_assi R_LLAVE
    (107) array_val_pro -> . LITERAL dimensions
    (69) a -> . a OR b
    (70) a -> . b
    (71) b -> . b AND c
    (72) b -> . c

    NOT             shift and go to state 38
    MENOS           shift and go to state 35
    MAS             shift and go to state 34
    ENTERO          shift and go to state 44
    DECIMAL         shift and go to state 45
    CADENA          shift and go to state 46
    LITERAL         shift and go to state 72
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    L_PAREN         shift and go to state 20
    TOSTRING        shift and go to state 33
    L_CORCHETE      shift and go to state 52
    L_LLAVE         shift and go to state 25

    b                              shift and go to state 36
    c                              shift and go to state 149
    d                              shift and go to state 39
    e                              shift and go to state 40
    f                              shift and go to state 41
    g                              shift and go to state 42
    h                              shift and go to state 43
    call_function_pro              shift and go to state 73
    array_pro                      shift and go to state 49
    interface_assi                 shift and go to state 50
    a                              shift and go to state 95
    array_val_pro                  shift and go to state 51

state 98

    (73) c -> NOT d .
    (75) d -> d . DISTINTO_QUE e
    (76) d -> d . MENOR_QUE e
    (77) d -> d . MENOR_IGUAL_QUE e
    (78) d -> d . MAYOR_QUE e
    (79) d -> d . MAYOR_IGUAL_QUE e
    (80) d -> d . TRIPLE_IGUAL e
    (74) c -> d .

  ! reduce/reduce conflict for AND resolved using rule 73 (c -> NOT d .)
  ! reduce/reduce conflict for PUNTO resolved using rule 73 (c -> NOT d .)
  ! reduce/reduce conflict for OR resolved using rule 73 (c -> NOT d .)
    AND             reduce using rule 73 (c -> NOT d .)
    PUNTO           reduce using rule 73 (c -> NOT d .)
    OR              reduce using rule 73 (c -> NOT d .)
    R_PAREN         reduce using rule 73 (c -> NOT d .)
    SEMI_COLON      reduce using rule 73 (c -> NOT d .)
    CONSOLE         reduce using rule 73 (c -> NOT d .)
    LET             reduce using rule 73 (c -> NOT d .)
    LITERAL         reduce using rule 73 (c -> NOT d .)
    IF              reduce using rule 73 (c -> NOT d .)
    WHILE           reduce using rule 73 (c -> NOT d .)
    FOR             reduce using rule 73 (c -> NOT d .)
    INTERFACE       reduce using rule 73 (c -> NOT d .)
    CONTINUE        reduce using rule 73 (c -> NOT d .)
    BREAK           reduce using rule 73 (c -> NOT d .)
    RETURN          reduce using rule 73 (c -> NOT d .)
    FUNCTION        reduce using rule 73 (c -> NOT d .)
    TOSTRING        reduce using rule 73 (c -> NOT d .)
    NOT             reduce using rule 73 (c -> NOT d .)
    MENOS           reduce using rule 73 (c -> NOT d .)
    MAS             reduce using rule 73 (c -> NOT d .)
    ENTERO          reduce using rule 73 (c -> NOT d .)
    DECIMAL         reduce using rule 73 (c -> NOT d .)
    CADENA          reduce using rule 73 (c -> NOT d .)
    TRUE            reduce using rule 73 (c -> NOT d .)
    FALSE           reduce using rule 73 (c -> NOT d .)
    L_PAREN         reduce using rule 73 (c -> NOT d .)
    L_CORCHETE      reduce using rule 73 (c -> NOT d .)
    L_LLAVE         reduce using rule 73 (c -> NOT d .)
    $end            reduce using rule 73 (c -> NOT d .)
    R_LLAVE         reduce using rule 73 (c -> NOT d .)
    R_CORCHETE      reduce using rule 73 (c -> NOT d .)
    COMA            reduce using rule 73 (c -> NOT d .)
    DISTINTO_QUE    shift and go to state 99
    MENOR_QUE       shift and go to state 100
    MENOR_IGUAL_QUE shift and go to state 101
    MAYOR_QUE       shift and go to state 102
    MAYOR_IGUAL_QUE shift and go to state 103
    TRIPLE_IGUAL    shift and go to state 104

  ! AND             [ reduce using rule 74 (c -> d .) ]
  ! PUNTO           [ reduce using rule 74 (c -> d .) ]
  ! OR              [ reduce using rule 74 (c -> d .) ]


state 99

    (75) d -> d DISTINTO_QUE . e
    (82) e -> . e MAS f
    (83) e -> . e MENOS f
    (84) e -> . f
    (85) f -> . MENOS g
    (86) f -> . MAS g
    (87) f -> . g
    (88) g -> . g TIMES h
    (89) g -> . g DIVIDE h
    (90) g -> . g MOD h
    (91) g -> . g POTENCIA h
    (92) g -> . h
    (93) h -> . ENTERO
    (94) h -> . DECIMAL
    (95) h -> . CADENA
    (96) h -> . LITERAL
    (97) h -> . TRUE
    (98) h -> . FALSE
    (99) h -> . call_function_pro
    (100) h -> . array_pro
    (101) h -> . interface_assi
    (102) h -> . L_PAREN a R_PAREN
    (103) h -> . array_val_pro
    (104) h -> . a PUNTO LITERAL
    (105) h -> . a PUNTO nativeFun L_PAREN expresion R_PAREN
    (106) h -> . a PUNTO nativeFun L_PAREN R_PAREN
    (23) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (24) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (25) call_function_pro -> . TOSTRING L_PAREN values R_PAREN
    (115) array_pro -> . L_CORCHETE values R_CORCHETE
    (112) interface_assi -> . L_LLAVE atributos_assi R_LLAVE
    (107) array_val_pro -> . LITERAL dimensions
    (69) a -> . a OR b
    (70) a -> . b
    (71) b -> . b AND c
    (72) b -> . c
    (73) c -> . NOT d
    (74) c -> . d
    (75) d -> . d DISTINTO_QUE e
    (76) d -> . d MENOR_QUE e
    (77) d -> . d MENOR_IGUAL_QUE e
    (78) d -> . d MAYOR_QUE e
    (79) d -> . d MAYOR_IGUAL_QUE e
    (80) d -> . d TRIPLE_IGUAL e
    (81) d -> . e

    MENOS           shift and go to state 35
    MAS             shift and go to state 34
    ENTERO          shift and go to state 44
    DECIMAL         shift and go to state 45
    CADENA          shift and go to state 46
    LITERAL         shift and go to state 72
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    L_PAREN         shift and go to state 20
    TOSTRING        shift and go to state 33
    L_CORCHETE      shift and go to state 52
    L_LLAVE         shift and go to state 25
    NOT             shift and go to state 38

    d                              shift and go to state 39
    e                              shift and go to state 150
    f                              shift and go to state 41
    g                              shift and go to state 42
    h                              shift and go to state 43
    call_function_pro              shift and go to state 73
    array_pro                      shift and go to state 49
    interface_assi                 shift and go to state 50
    a                              shift and go to state 95
    array_val_pro                  shift and go to state 51
    b                              shift and go to state 36
    c                              shift and go to state 37

state 100

    (76) d -> d MENOR_QUE . e
    (82) e -> . e MAS f
    (83) e -> . e MENOS f
    (84) e -> . f
    (85) f -> . MENOS g
    (86) f -> . MAS g
    (87) f -> . g
    (88) g -> . g TIMES h
    (89) g -> . g DIVIDE h
    (90) g -> . g MOD h
    (91) g -> . g POTENCIA h
    (92) g -> . h
    (93) h -> . ENTERO
    (94) h -> . DECIMAL
    (95) h -> . CADENA
    (96) h -> . LITERAL
    (97) h -> . TRUE
    (98) h -> . FALSE
    (99) h -> . call_function_pro
    (100) h -> . array_pro
    (101) h -> . interface_assi
    (102) h -> . L_PAREN a R_PAREN
    (103) h -> . array_val_pro
    (104) h -> . a PUNTO LITERAL
    (105) h -> . a PUNTO nativeFun L_PAREN expresion R_PAREN
    (106) h -> . a PUNTO nativeFun L_PAREN R_PAREN
    (23) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (24) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (25) call_function_pro -> . TOSTRING L_PAREN values R_PAREN
    (115) array_pro -> . L_CORCHETE values R_CORCHETE
    (112) interface_assi -> . L_LLAVE atributos_assi R_LLAVE
    (107) array_val_pro -> . LITERAL dimensions
    (69) a -> . a OR b
    (70) a -> . b
    (71) b -> . b AND c
    (72) b -> . c
    (73) c -> . NOT d
    (74) c -> . d
    (75) d -> . d DISTINTO_QUE e
    (76) d -> . d MENOR_QUE e
    (77) d -> . d MENOR_IGUAL_QUE e
    (78) d -> . d MAYOR_QUE e
    (79) d -> . d MAYOR_IGUAL_QUE e
    (80) d -> . d TRIPLE_IGUAL e
    (81) d -> . e

    MENOS           shift and go to state 35
    MAS             shift and go to state 34
    ENTERO          shift and go to state 44
    DECIMAL         shift and go to state 45
    CADENA          shift and go to state 46
    LITERAL         shift and go to state 72
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    L_PAREN         shift and go to state 20
    TOSTRING        shift and go to state 33
    L_CORCHETE      shift and go to state 52
    L_LLAVE         shift and go to state 25
    NOT             shift and go to state 38

    d                              shift and go to state 39
    e                              shift and go to state 151
    f                              shift and go to state 41
    g                              shift and go to state 42
    h                              shift and go to state 43
    call_function_pro              shift and go to state 73
    array_pro                      shift and go to state 49
    interface_assi                 shift and go to state 50
    a                              shift and go to state 95
    array_val_pro                  shift and go to state 51
    b                              shift and go to state 36
    c                              shift and go to state 37

state 101

    (77) d -> d MENOR_IGUAL_QUE . e
    (82) e -> . e MAS f
    (83) e -> . e MENOS f
    (84) e -> . f
    (85) f -> . MENOS g
    (86) f -> . MAS g
    (87) f -> . g
    (88) g -> . g TIMES h
    (89) g -> . g DIVIDE h
    (90) g -> . g MOD h
    (91) g -> . g POTENCIA h
    (92) g -> . h
    (93) h -> . ENTERO
    (94) h -> . DECIMAL
    (95) h -> . CADENA
    (96) h -> . LITERAL
    (97) h -> . TRUE
    (98) h -> . FALSE
    (99) h -> . call_function_pro
    (100) h -> . array_pro
    (101) h -> . interface_assi
    (102) h -> . L_PAREN a R_PAREN
    (103) h -> . array_val_pro
    (104) h -> . a PUNTO LITERAL
    (105) h -> . a PUNTO nativeFun L_PAREN expresion R_PAREN
    (106) h -> . a PUNTO nativeFun L_PAREN R_PAREN
    (23) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (24) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (25) call_function_pro -> . TOSTRING L_PAREN values R_PAREN
    (115) array_pro -> . L_CORCHETE values R_CORCHETE
    (112) interface_assi -> . L_LLAVE atributos_assi R_LLAVE
    (107) array_val_pro -> . LITERAL dimensions
    (69) a -> . a OR b
    (70) a -> . b
    (71) b -> . b AND c
    (72) b -> . c
    (73) c -> . NOT d
    (74) c -> . d
    (75) d -> . d DISTINTO_QUE e
    (76) d -> . d MENOR_QUE e
    (77) d -> . d MENOR_IGUAL_QUE e
    (78) d -> . d MAYOR_QUE e
    (79) d -> . d MAYOR_IGUAL_QUE e
    (80) d -> . d TRIPLE_IGUAL e
    (81) d -> . e

    MENOS           shift and go to state 35
    MAS             shift and go to state 34
    ENTERO          shift and go to state 44
    DECIMAL         shift and go to state 45
    CADENA          shift and go to state 46
    LITERAL         shift and go to state 72
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    L_PAREN         shift and go to state 20
    TOSTRING        shift and go to state 33
    L_CORCHETE      shift and go to state 52
    L_LLAVE         shift and go to state 25
    NOT             shift and go to state 38

    d                              shift and go to state 39
    e                              shift and go to state 152
    f                              shift and go to state 41
    g                              shift and go to state 42
    h                              shift and go to state 43
    call_function_pro              shift and go to state 73
    array_pro                      shift and go to state 49
    interface_assi                 shift and go to state 50
    a                              shift and go to state 95
    array_val_pro                  shift and go to state 51
    b                              shift and go to state 36
    c                              shift and go to state 37

state 102

    (78) d -> d MAYOR_QUE . e
    (82) e -> . e MAS f
    (83) e -> . e MENOS f
    (84) e -> . f
    (85) f -> . MENOS g
    (86) f -> . MAS g
    (87) f -> . g
    (88) g -> . g TIMES h
    (89) g -> . g DIVIDE h
    (90) g -> . g MOD h
    (91) g -> . g POTENCIA h
    (92) g -> . h
    (93) h -> . ENTERO
    (94) h -> . DECIMAL
    (95) h -> . CADENA
    (96) h -> . LITERAL
    (97) h -> . TRUE
    (98) h -> . FALSE
    (99) h -> . call_function_pro
    (100) h -> . array_pro
    (101) h -> . interface_assi
    (102) h -> . L_PAREN a R_PAREN
    (103) h -> . array_val_pro
    (104) h -> . a PUNTO LITERAL
    (105) h -> . a PUNTO nativeFun L_PAREN expresion R_PAREN
    (106) h -> . a PUNTO nativeFun L_PAREN R_PAREN
    (23) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (24) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (25) call_function_pro -> . TOSTRING L_PAREN values R_PAREN
    (115) array_pro -> . L_CORCHETE values R_CORCHETE
    (112) interface_assi -> . L_LLAVE atributos_assi R_LLAVE
    (107) array_val_pro -> . LITERAL dimensions
    (69) a -> . a OR b
    (70) a -> . b
    (71) b -> . b AND c
    (72) b -> . c
    (73) c -> . NOT d
    (74) c -> . d
    (75) d -> . d DISTINTO_QUE e
    (76) d -> . d MENOR_QUE e
    (77) d -> . d MENOR_IGUAL_QUE e
    (78) d -> . d MAYOR_QUE e
    (79) d -> . d MAYOR_IGUAL_QUE e
    (80) d -> . d TRIPLE_IGUAL e
    (81) d -> . e

    MENOS           shift and go to state 35
    MAS             shift and go to state 34
    ENTERO          shift and go to state 44
    DECIMAL         shift and go to state 45
    CADENA          shift and go to state 46
    LITERAL         shift and go to state 72
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    L_PAREN         shift and go to state 20
    TOSTRING        shift and go to state 33
    L_CORCHETE      shift and go to state 52
    L_LLAVE         shift and go to state 25
    NOT             shift and go to state 38

    d                              shift and go to state 39
    e                              shift and go to state 153
    f                              shift and go to state 41
    g                              shift and go to state 42
    h                              shift and go to state 43
    call_function_pro              shift and go to state 73
    array_pro                      shift and go to state 49
    interface_assi                 shift and go to state 50
    a                              shift and go to state 95
    array_val_pro                  shift and go to state 51
    b                              shift and go to state 36
    c                              shift and go to state 37

state 103

    (79) d -> d MAYOR_IGUAL_QUE . e
    (82) e -> . e MAS f
    (83) e -> . e MENOS f
    (84) e -> . f
    (85) f -> . MENOS g
    (86) f -> . MAS g
    (87) f -> . g
    (88) g -> . g TIMES h
    (89) g -> . g DIVIDE h
    (90) g -> . g MOD h
    (91) g -> . g POTENCIA h
    (92) g -> . h
    (93) h -> . ENTERO
    (94) h -> . DECIMAL
    (95) h -> . CADENA
    (96) h -> . LITERAL
    (97) h -> . TRUE
    (98) h -> . FALSE
    (99) h -> . call_function_pro
    (100) h -> . array_pro
    (101) h -> . interface_assi
    (102) h -> . L_PAREN a R_PAREN
    (103) h -> . array_val_pro
    (104) h -> . a PUNTO LITERAL
    (105) h -> . a PUNTO nativeFun L_PAREN expresion R_PAREN
    (106) h -> . a PUNTO nativeFun L_PAREN R_PAREN
    (23) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (24) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (25) call_function_pro -> . TOSTRING L_PAREN values R_PAREN
    (115) array_pro -> . L_CORCHETE values R_CORCHETE
    (112) interface_assi -> . L_LLAVE atributos_assi R_LLAVE
    (107) array_val_pro -> . LITERAL dimensions
    (69) a -> . a OR b
    (70) a -> . b
    (71) b -> . b AND c
    (72) b -> . c
    (73) c -> . NOT d
    (74) c -> . d
    (75) d -> . d DISTINTO_QUE e
    (76) d -> . d MENOR_QUE e
    (77) d -> . d MENOR_IGUAL_QUE e
    (78) d -> . d MAYOR_QUE e
    (79) d -> . d MAYOR_IGUAL_QUE e
    (80) d -> . d TRIPLE_IGUAL e
    (81) d -> . e

    MENOS           shift and go to state 35
    MAS             shift and go to state 34
    ENTERO          shift and go to state 44
    DECIMAL         shift and go to state 45
    CADENA          shift and go to state 46
    LITERAL         shift and go to state 72
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    L_PAREN         shift and go to state 20
    TOSTRING        shift and go to state 33
    L_CORCHETE      shift and go to state 52
    L_LLAVE         shift and go to state 25
    NOT             shift and go to state 38

    d                              shift and go to state 39
    e                              shift and go to state 154
    f                              shift and go to state 41
    g                              shift and go to state 42
    h                              shift and go to state 43
    call_function_pro              shift and go to state 73
    array_pro                      shift and go to state 49
    interface_assi                 shift and go to state 50
    a                              shift and go to state 95
    array_val_pro                  shift and go to state 51
    b                              shift and go to state 36
    c                              shift and go to state 37

state 104

    (80) d -> d TRIPLE_IGUAL . e
    (82) e -> . e MAS f
    (83) e -> . e MENOS f
    (84) e -> . f
    (85) f -> . MENOS g
    (86) f -> . MAS g
    (87) f -> . g
    (88) g -> . g TIMES h
    (89) g -> . g DIVIDE h
    (90) g -> . g MOD h
    (91) g -> . g POTENCIA h
    (92) g -> . h
    (93) h -> . ENTERO
    (94) h -> . DECIMAL
    (95) h -> . CADENA
    (96) h -> . LITERAL
    (97) h -> . TRUE
    (98) h -> . FALSE
    (99) h -> . call_function_pro
    (100) h -> . array_pro
    (101) h -> . interface_assi
    (102) h -> . L_PAREN a R_PAREN
    (103) h -> . array_val_pro
    (104) h -> . a PUNTO LITERAL
    (105) h -> . a PUNTO nativeFun L_PAREN expresion R_PAREN
    (106) h -> . a PUNTO nativeFun L_PAREN R_PAREN
    (23) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (24) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (25) call_function_pro -> . TOSTRING L_PAREN values R_PAREN
    (115) array_pro -> . L_CORCHETE values R_CORCHETE
    (112) interface_assi -> . L_LLAVE atributos_assi R_LLAVE
    (107) array_val_pro -> . LITERAL dimensions
    (69) a -> . a OR b
    (70) a -> . b
    (71) b -> . b AND c
    (72) b -> . c
    (73) c -> . NOT d
    (74) c -> . d
    (75) d -> . d DISTINTO_QUE e
    (76) d -> . d MENOR_QUE e
    (77) d -> . d MENOR_IGUAL_QUE e
    (78) d -> . d MAYOR_QUE e
    (79) d -> . d MAYOR_IGUAL_QUE e
    (80) d -> . d TRIPLE_IGUAL e
    (81) d -> . e

    MENOS           shift and go to state 35
    MAS             shift and go to state 34
    ENTERO          shift and go to state 44
    DECIMAL         shift and go to state 45
    CADENA          shift and go to state 46
    LITERAL         shift and go to state 72
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    L_PAREN         shift and go to state 20
    TOSTRING        shift and go to state 33
    L_CORCHETE      shift and go to state 52
    L_LLAVE         shift and go to state 25
    NOT             shift and go to state 38

    d                              shift and go to state 39
    e                              shift and go to state 155
    f                              shift and go to state 41
    g                              shift and go to state 42
    h                              shift and go to state 43
    call_function_pro              shift and go to state 73
    array_pro                      shift and go to state 49
    interface_assi                 shift and go to state 50
    a                              shift and go to state 95
    array_val_pro                  shift and go to state 51
    b                              shift and go to state 36
    c                              shift and go to state 37

state 105

    (82) e -> e MAS . f
    (85) f -> . MENOS g
    (86) f -> . MAS g
    (87) f -> . g
    (88) g -> . g TIMES h
    (89) g -> . g DIVIDE h
    (90) g -> . g MOD h
    (91) g -> . g POTENCIA h
    (92) g -> . h
    (93) h -> . ENTERO
    (94) h -> . DECIMAL
    (95) h -> . CADENA
    (96) h -> . LITERAL
    (97) h -> . TRUE
    (98) h -> . FALSE
    (99) h -> . call_function_pro
    (100) h -> . array_pro
    (101) h -> . interface_assi
    (102) h -> . L_PAREN a R_PAREN
    (103) h -> . array_val_pro
    (104) h -> . a PUNTO LITERAL
    (105) h -> . a PUNTO nativeFun L_PAREN expresion R_PAREN
    (106) h -> . a PUNTO nativeFun L_PAREN R_PAREN
    (23) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (24) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (25) call_function_pro -> . TOSTRING L_PAREN values R_PAREN
    (115) array_pro -> . L_CORCHETE values R_CORCHETE
    (112) interface_assi -> . L_LLAVE atributos_assi R_LLAVE
    (107) array_val_pro -> . LITERAL dimensions
    (69) a -> . a OR b
    (70) a -> . b
    (71) b -> . b AND c
    (72) b -> . c
    (73) c -> . NOT d
    (74) c -> . d
    (75) d -> . d DISTINTO_QUE e
    (76) d -> . d MENOR_QUE e
    (77) d -> . d MENOR_IGUAL_QUE e
    (78) d -> . d MAYOR_QUE e
    (79) d -> . d MAYOR_IGUAL_QUE e
    (80) d -> . d TRIPLE_IGUAL e
    (81) d -> . e
    (82) e -> . e MAS f
    (83) e -> . e MENOS f
    (84) e -> . f

    MENOS           shift and go to state 35
    MAS             shift and go to state 34
    ENTERO          shift and go to state 44
    DECIMAL         shift and go to state 45
    CADENA          shift and go to state 46
    LITERAL         shift and go to state 72
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    L_PAREN         shift and go to state 20
    TOSTRING        shift and go to state 33
    L_CORCHETE      shift and go to state 52
    L_LLAVE         shift and go to state 25
    NOT             shift and go to state 38

    e                              shift and go to state 40
    f                              shift and go to state 156
    g                              shift and go to state 42
    h                              shift and go to state 43
    call_function_pro              shift and go to state 73
    array_pro                      shift and go to state 49
    interface_assi                 shift and go to state 50
    a                              shift and go to state 95
    array_val_pro                  shift and go to state 51
    b                              shift and go to state 36
    c                              shift and go to state 37
    d                              shift and go to state 39

state 106

    (83) e -> e MENOS . f
    (85) f -> . MENOS g
    (86) f -> . MAS g
    (87) f -> . g
    (88) g -> . g TIMES h
    (89) g -> . g DIVIDE h
    (90) g -> . g MOD h
    (91) g -> . g POTENCIA h
    (92) g -> . h
    (93) h -> . ENTERO
    (94) h -> . DECIMAL
    (95) h -> . CADENA
    (96) h -> . LITERAL
    (97) h -> . TRUE
    (98) h -> . FALSE
    (99) h -> . call_function_pro
    (100) h -> . array_pro
    (101) h -> . interface_assi
    (102) h -> . L_PAREN a R_PAREN
    (103) h -> . array_val_pro
    (104) h -> . a PUNTO LITERAL
    (105) h -> . a PUNTO nativeFun L_PAREN expresion R_PAREN
    (106) h -> . a PUNTO nativeFun L_PAREN R_PAREN
    (23) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (24) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (25) call_function_pro -> . TOSTRING L_PAREN values R_PAREN
    (115) array_pro -> . L_CORCHETE values R_CORCHETE
    (112) interface_assi -> . L_LLAVE atributos_assi R_LLAVE
    (107) array_val_pro -> . LITERAL dimensions
    (69) a -> . a OR b
    (70) a -> . b
    (71) b -> . b AND c
    (72) b -> . c
    (73) c -> . NOT d
    (74) c -> . d
    (75) d -> . d DISTINTO_QUE e
    (76) d -> . d MENOR_QUE e
    (77) d -> . d MENOR_IGUAL_QUE e
    (78) d -> . d MAYOR_QUE e
    (79) d -> . d MAYOR_IGUAL_QUE e
    (80) d -> . d TRIPLE_IGUAL e
    (81) d -> . e
    (82) e -> . e MAS f
    (83) e -> . e MENOS f
    (84) e -> . f

    MENOS           shift and go to state 35
    MAS             shift and go to state 34
    ENTERO          shift and go to state 44
    DECIMAL         shift and go to state 45
    CADENA          shift and go to state 46
    LITERAL         shift and go to state 72
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    L_PAREN         shift and go to state 20
    TOSTRING        shift and go to state 33
    L_CORCHETE      shift and go to state 52
    L_LLAVE         shift and go to state 25
    NOT             shift and go to state 38

    e                              shift and go to state 40
    f                              shift and go to state 157
    g                              shift and go to state 42
    h                              shift and go to state 43
    call_function_pro              shift and go to state 73
    array_pro                      shift and go to state 49
    interface_assi                 shift and go to state 50
    a                              shift and go to state 95
    array_val_pro                  shift and go to state 51
    b                              shift and go to state 36
    c                              shift and go to state 37
    d                              shift and go to state 39

state 107

    (88) g -> g TIMES . h
    (93) h -> . ENTERO
    (94) h -> . DECIMAL
    (95) h -> . CADENA
    (96) h -> . LITERAL
    (97) h -> . TRUE
    (98) h -> . FALSE
    (99) h -> . call_function_pro
    (100) h -> . array_pro
    (101) h -> . interface_assi
    (102) h -> . L_PAREN a R_PAREN
    (103) h -> . array_val_pro
    (104) h -> . a PUNTO LITERAL
    (105) h -> . a PUNTO nativeFun L_PAREN expresion R_PAREN
    (106) h -> . a PUNTO nativeFun L_PAREN R_PAREN
    (23) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (24) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (25) call_function_pro -> . TOSTRING L_PAREN values R_PAREN
    (115) array_pro -> . L_CORCHETE values R_CORCHETE
    (112) interface_assi -> . L_LLAVE atributos_assi R_LLAVE
    (107) array_val_pro -> . LITERAL dimensions
    (69) a -> . a OR b
    (70) a -> . b
    (71) b -> . b AND c
    (72) b -> . c
    (73) c -> . NOT d
    (74) c -> . d
    (75) d -> . d DISTINTO_QUE e
    (76) d -> . d MENOR_QUE e
    (77) d -> . d MENOR_IGUAL_QUE e
    (78) d -> . d MAYOR_QUE e
    (79) d -> . d MAYOR_IGUAL_QUE e
    (80) d -> . d TRIPLE_IGUAL e
    (81) d -> . e
    (82) e -> . e MAS f
    (83) e -> . e MENOS f
    (84) e -> . f
    (85) f -> . MENOS g
    (86) f -> . MAS g
    (87) f -> . g
    (88) g -> . g TIMES h
    (89) g -> . g DIVIDE h
    (90) g -> . g MOD h
    (91) g -> . g POTENCIA h
    (92) g -> . h

    ENTERO          shift and go to state 44
    DECIMAL         shift and go to state 45
    CADENA          shift and go to state 46
    LITERAL         shift and go to state 72
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    L_PAREN         shift and go to state 20
    TOSTRING        shift and go to state 33
    L_CORCHETE      shift and go to state 52
    L_LLAVE         shift and go to state 25
    NOT             shift and go to state 38
    MENOS           shift and go to state 35
    MAS             shift and go to state 34

    g                              shift and go to state 42
    h                              shift and go to state 158
    call_function_pro              shift and go to state 73
    array_pro                      shift and go to state 49
    interface_assi                 shift and go to state 50
    a                              shift and go to state 95
    array_val_pro                  shift and go to state 51
    b                              shift and go to state 36
    c                              shift and go to state 37
    d                              shift and go to state 39
    e                              shift and go to state 40
    f                              shift and go to state 41

state 108

    (89) g -> g DIVIDE . h
    (93) h -> . ENTERO
    (94) h -> . DECIMAL
    (95) h -> . CADENA
    (96) h -> . LITERAL
    (97) h -> . TRUE
    (98) h -> . FALSE
    (99) h -> . call_function_pro
    (100) h -> . array_pro
    (101) h -> . interface_assi
    (102) h -> . L_PAREN a R_PAREN
    (103) h -> . array_val_pro
    (104) h -> . a PUNTO LITERAL
    (105) h -> . a PUNTO nativeFun L_PAREN expresion R_PAREN
    (106) h -> . a PUNTO nativeFun L_PAREN R_PAREN
    (23) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (24) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (25) call_function_pro -> . TOSTRING L_PAREN values R_PAREN
    (115) array_pro -> . L_CORCHETE values R_CORCHETE
    (112) interface_assi -> . L_LLAVE atributos_assi R_LLAVE
    (107) array_val_pro -> . LITERAL dimensions
    (69) a -> . a OR b
    (70) a -> . b
    (71) b -> . b AND c
    (72) b -> . c
    (73) c -> . NOT d
    (74) c -> . d
    (75) d -> . d DISTINTO_QUE e
    (76) d -> . d MENOR_QUE e
    (77) d -> . d MENOR_IGUAL_QUE e
    (78) d -> . d MAYOR_QUE e
    (79) d -> . d MAYOR_IGUAL_QUE e
    (80) d -> . d TRIPLE_IGUAL e
    (81) d -> . e
    (82) e -> . e MAS f
    (83) e -> . e MENOS f
    (84) e -> . f
    (85) f -> . MENOS g
    (86) f -> . MAS g
    (87) f -> . g
    (88) g -> . g TIMES h
    (89) g -> . g DIVIDE h
    (90) g -> . g MOD h
    (91) g -> . g POTENCIA h
    (92) g -> . h

    ENTERO          shift and go to state 44
    DECIMAL         shift and go to state 45
    CADENA          shift and go to state 46
    LITERAL         shift and go to state 72
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    L_PAREN         shift and go to state 20
    TOSTRING        shift and go to state 33
    L_CORCHETE      shift and go to state 52
    L_LLAVE         shift and go to state 25
    NOT             shift and go to state 38
    MENOS           shift and go to state 35
    MAS             shift and go to state 34

    g                              shift and go to state 42
    h                              shift and go to state 159
    call_function_pro              shift and go to state 73
    array_pro                      shift and go to state 49
    interface_assi                 shift and go to state 50
    a                              shift and go to state 95
    array_val_pro                  shift and go to state 51
    b                              shift and go to state 36
    c                              shift and go to state 37
    d                              shift and go to state 39
    e                              shift and go to state 40
    f                              shift and go to state 41

state 109

    (90) g -> g MOD . h
    (93) h -> . ENTERO
    (94) h -> . DECIMAL
    (95) h -> . CADENA
    (96) h -> . LITERAL
    (97) h -> . TRUE
    (98) h -> . FALSE
    (99) h -> . call_function_pro
    (100) h -> . array_pro
    (101) h -> . interface_assi
    (102) h -> . L_PAREN a R_PAREN
    (103) h -> . array_val_pro
    (104) h -> . a PUNTO LITERAL
    (105) h -> . a PUNTO nativeFun L_PAREN expresion R_PAREN
    (106) h -> . a PUNTO nativeFun L_PAREN R_PAREN
    (23) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (24) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (25) call_function_pro -> . TOSTRING L_PAREN values R_PAREN
    (115) array_pro -> . L_CORCHETE values R_CORCHETE
    (112) interface_assi -> . L_LLAVE atributos_assi R_LLAVE
    (107) array_val_pro -> . LITERAL dimensions
    (69) a -> . a OR b
    (70) a -> . b
    (71) b -> . b AND c
    (72) b -> . c
    (73) c -> . NOT d
    (74) c -> . d
    (75) d -> . d DISTINTO_QUE e
    (76) d -> . d MENOR_QUE e
    (77) d -> . d MENOR_IGUAL_QUE e
    (78) d -> . d MAYOR_QUE e
    (79) d -> . d MAYOR_IGUAL_QUE e
    (80) d -> . d TRIPLE_IGUAL e
    (81) d -> . e
    (82) e -> . e MAS f
    (83) e -> . e MENOS f
    (84) e -> . f
    (85) f -> . MENOS g
    (86) f -> . MAS g
    (87) f -> . g
    (88) g -> . g TIMES h
    (89) g -> . g DIVIDE h
    (90) g -> . g MOD h
    (91) g -> . g POTENCIA h
    (92) g -> . h

    ENTERO          shift and go to state 44
    DECIMAL         shift and go to state 45
    CADENA          shift and go to state 46
    LITERAL         shift and go to state 72
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    L_PAREN         shift and go to state 20
    TOSTRING        shift and go to state 33
    L_CORCHETE      shift and go to state 52
    L_LLAVE         shift and go to state 25
    NOT             shift and go to state 38
    MENOS           shift and go to state 35
    MAS             shift and go to state 34

    g                              shift and go to state 42
    h                              shift and go to state 160
    call_function_pro              shift and go to state 73
    array_pro                      shift and go to state 49
    interface_assi                 shift and go to state 50
    a                              shift and go to state 95
    array_val_pro                  shift and go to state 51
    b                              shift and go to state 36
    c                              shift and go to state 37
    d                              shift and go to state 39
    e                              shift and go to state 40
    f                              shift and go to state 41

state 110

    (91) g -> g POTENCIA . h
    (93) h -> . ENTERO
    (94) h -> . DECIMAL
    (95) h -> . CADENA
    (96) h -> . LITERAL
    (97) h -> . TRUE
    (98) h -> . FALSE
    (99) h -> . call_function_pro
    (100) h -> . array_pro
    (101) h -> . interface_assi
    (102) h -> . L_PAREN a R_PAREN
    (103) h -> . array_val_pro
    (104) h -> . a PUNTO LITERAL
    (105) h -> . a PUNTO nativeFun L_PAREN expresion R_PAREN
    (106) h -> . a PUNTO nativeFun L_PAREN R_PAREN
    (23) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (24) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (25) call_function_pro -> . TOSTRING L_PAREN values R_PAREN
    (115) array_pro -> . L_CORCHETE values R_CORCHETE
    (112) interface_assi -> . L_LLAVE atributos_assi R_LLAVE
    (107) array_val_pro -> . LITERAL dimensions
    (69) a -> . a OR b
    (70) a -> . b
    (71) b -> . b AND c
    (72) b -> . c
    (73) c -> . NOT d
    (74) c -> . d
    (75) d -> . d DISTINTO_QUE e
    (76) d -> . d MENOR_QUE e
    (77) d -> . d MENOR_IGUAL_QUE e
    (78) d -> . d MAYOR_QUE e
    (79) d -> . d MAYOR_IGUAL_QUE e
    (80) d -> . d TRIPLE_IGUAL e
    (81) d -> . e
    (82) e -> . e MAS f
    (83) e -> . e MENOS f
    (84) e -> . f
    (85) f -> . MENOS g
    (86) f -> . MAS g
    (87) f -> . g
    (88) g -> . g TIMES h
    (89) g -> . g DIVIDE h
    (90) g -> . g MOD h
    (91) g -> . g POTENCIA h
    (92) g -> . h

    ENTERO          shift and go to state 44
    DECIMAL         shift and go to state 45
    CADENA          shift and go to state 46
    LITERAL         shift and go to state 72
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    L_PAREN         shift and go to state 20
    TOSTRING        shift and go to state 33
    L_CORCHETE      shift and go to state 52
    L_LLAVE         shift and go to state 25
    NOT             shift and go to state 38
    MENOS           shift and go to state 35
    MAS             shift and go to state 34

    g                              shift and go to state 42
    h                              shift and go to state 161
    call_function_pro              shift and go to state 73
    array_pro                      shift and go to state 49
    interface_assi                 shift and go to state 50
    a                              shift and go to state 95
    array_val_pro                  shift and go to state 51
    b                              shift and go to state 36
    c                              shift and go to state 37
    d                              shift and go to state 39
    e                              shift and go to state 40
    f                              shift and go to state 41

state 111

    (115) array_pro -> L_CORCHETE values . R_CORCHETE
    (26) values -> values . COMA a

    R_CORCHETE      shift and go to state 162
    COMA            shift and go to state 163


state 112

    (27) values -> a .
    (69) a -> a . OR b
    (104) h -> a . PUNTO LITERAL
    (105) h -> a . PUNTO nativeFun L_PAREN expresion R_PAREN
    (106) h -> a . PUNTO nativeFun L_PAREN R_PAREN

    R_CORCHETE      reduce using rule 27 (values -> a .)
    COMA            reduce using rule 27 (values -> a .)
    R_PAREN         reduce using rule 27 (values -> a .)
    OR              shift and go to state 84
    PUNTO           shift and go to state 115


state 113

    (66) console_pro -> CONSOLE PUNTO LOG . L_PAREN expresion R_PAREN

    L_PAREN         shift and go to state 164


state 114

    (102) h -> L_PAREN a R_PAREN .

    TIMES           reduce using rule 102 (h -> L_PAREN a R_PAREN .)
    DIVIDE          reduce using rule 102 (h -> L_PAREN a R_PAREN .)
    MOD             reduce using rule 102 (h -> L_PAREN a R_PAREN .)
    POTENCIA        reduce using rule 102 (h -> L_PAREN a R_PAREN .)
    MAS             reduce using rule 102 (h -> L_PAREN a R_PAREN .)
    MENOS           reduce using rule 102 (h -> L_PAREN a R_PAREN .)
    DISTINTO_QUE    reduce using rule 102 (h -> L_PAREN a R_PAREN .)
    MENOR_QUE       reduce using rule 102 (h -> L_PAREN a R_PAREN .)
    MENOR_IGUAL_QUE reduce using rule 102 (h -> L_PAREN a R_PAREN .)
    MAYOR_QUE       reduce using rule 102 (h -> L_PAREN a R_PAREN .)
    MAYOR_IGUAL_QUE reduce using rule 102 (h -> L_PAREN a R_PAREN .)
    TRIPLE_IGUAL    reduce using rule 102 (h -> L_PAREN a R_PAREN .)
    AND             reduce using rule 102 (h -> L_PAREN a R_PAREN .)
    PUNTO           reduce using rule 102 (h -> L_PAREN a R_PAREN .)
    OR              reduce using rule 102 (h -> L_PAREN a R_PAREN .)
    R_PAREN         reduce using rule 102 (h -> L_PAREN a R_PAREN .)
    SEMI_COLON      reduce using rule 102 (h -> L_PAREN a R_PAREN .)
    CONSOLE         reduce using rule 102 (h -> L_PAREN a R_PAREN .)
    LET             reduce using rule 102 (h -> L_PAREN a R_PAREN .)
    LITERAL         reduce using rule 102 (h -> L_PAREN a R_PAREN .)
    IF              reduce using rule 102 (h -> L_PAREN a R_PAREN .)
    WHILE           reduce using rule 102 (h -> L_PAREN a R_PAREN .)
    FOR             reduce using rule 102 (h -> L_PAREN a R_PAREN .)
    INTERFACE       reduce using rule 102 (h -> L_PAREN a R_PAREN .)
    CONTINUE        reduce using rule 102 (h -> L_PAREN a R_PAREN .)
    BREAK           reduce using rule 102 (h -> L_PAREN a R_PAREN .)
    RETURN          reduce using rule 102 (h -> L_PAREN a R_PAREN .)
    FUNCTION        reduce using rule 102 (h -> L_PAREN a R_PAREN .)
    TOSTRING        reduce using rule 102 (h -> L_PAREN a R_PAREN .)
    NOT             reduce using rule 102 (h -> L_PAREN a R_PAREN .)
    ENTERO          reduce using rule 102 (h -> L_PAREN a R_PAREN .)
    DECIMAL         reduce using rule 102 (h -> L_PAREN a R_PAREN .)
    CADENA          reduce using rule 102 (h -> L_PAREN a R_PAREN .)
    TRUE            reduce using rule 102 (h -> L_PAREN a R_PAREN .)
    FALSE           reduce using rule 102 (h -> L_PAREN a R_PAREN .)
    L_PAREN         reduce using rule 102 (h -> L_PAREN a R_PAREN .)
    L_CORCHETE      reduce using rule 102 (h -> L_PAREN a R_PAREN .)
    L_LLAVE         reduce using rule 102 (h -> L_PAREN a R_PAREN .)
    $end            reduce using rule 102 (h -> L_PAREN a R_PAREN .)
    R_LLAVE         reduce using rule 102 (h -> L_PAREN a R_PAREN .)
    R_CORCHETE      reduce using rule 102 (h -> L_PAREN a R_PAREN .)
    COMA            reduce using rule 102 (h -> L_PAREN a R_PAREN .)


state 115

    (104) h -> a PUNTO . LITERAL
    (105) h -> a PUNTO . nativeFun L_PAREN expresion R_PAREN
    (106) h -> a PUNTO . nativeFun L_PAREN R_PAREN
    (116) nativeFun -> . TOSTRING
    (117) nativeFun -> . TOFIXED
    (118) nativeFun -> . TOEXPONENTIAL
    (119) nativeFun -> . TOLOWERCASE
    (120) nativeFun -> . TOUPPERCASE
    (121) nativeFun -> . SPLIT
    (122) nativeFun -> . CONCAT
    (123) nativeFun -> . LENGTH

    LITERAL         shift and go to state 165
    TOSTRING        shift and go to state 128
    TOFIXED         shift and go to state 129
    TOEXPONENTIAL   shift and go to state 130
    TOLOWERCASE     shift and go to state 131
    TOUPPERCASE     shift and go to state 132
    SPLIT           shift and go to state 133
    CONCAT          shift and go to state 134
    LENGTH          shift and go to state 135

    nativeFun                      shift and go to state 127

state 116

    (43) declaracion_list -> declaracion_list COMA . assignacion_instruction
    (45) assignacion_instruction -> . LITERAL COLON type IGUAL a
    (46) assignacion_instruction -> . LITERAL COLON type
    (47) assignacion_instruction -> . LITERAL IGUAL a
    (48) assignacion_instruction -> . LITERAL

    LITERAL         shift and go to state 76

    assignacion_instruction        shift and go to state 166

state 117

    (45) assignacion_instruction -> LITERAL COLON . type IGUAL a
    (46) assignacion_instruction -> LITERAL COLON . type
    (49) type -> . NUMBER
    (50) type -> . STRING
    (51) type -> . BOOLEAN
    (52) type -> . ANY
    (53) type -> . LITERAL
    (54) type -> . NULL

    NUMBER          shift and go to state 169
    STRING          shift and go to state 170
    BOOLEAN         shift and go to state 171
    ANY             shift and go to state 172
    LITERAL         shift and go to state 167
    NULL            shift and go to state 173

    type                           shift and go to state 168

state 118

    (47) assignacion_instruction -> LITERAL IGUAL . a
    (69) a -> . a OR b
    (70) a -> . b
    (71) b -> . b AND c
    (72) b -> . c
    (73) c -> . NOT d
    (74) c -> . d
    (75) d -> . d DISTINTO_QUE e
    (76) d -> . d MENOR_QUE e
    (77) d -> . d MENOR_IGUAL_QUE e
    (78) d -> . d MAYOR_QUE e
    (79) d -> . d MAYOR_IGUAL_QUE e
    (80) d -> . d TRIPLE_IGUAL e
    (81) d -> . e
    (82) e -> . e MAS f
    (83) e -> . e MENOS f
    (84) e -> . f
    (85) f -> . MENOS g
    (86) f -> . MAS g
    (87) f -> . g
    (88) g -> . g TIMES h
    (89) g -> . g DIVIDE h
    (90) g -> . g MOD h
    (91) g -> . g POTENCIA h
    (92) g -> . h
    (93) h -> . ENTERO
    (94) h -> . DECIMAL
    (95) h -> . CADENA
    (96) h -> . LITERAL
    (97) h -> . TRUE
    (98) h -> . FALSE
    (99) h -> . call_function_pro
    (100) h -> . array_pro
    (101) h -> . interface_assi
    (102) h -> . L_PAREN a R_PAREN
    (103) h -> . array_val_pro
    (104) h -> . a PUNTO LITERAL
    (105) h -> . a PUNTO nativeFun L_PAREN expresion R_PAREN
    (106) h -> . a PUNTO nativeFun L_PAREN R_PAREN
    (23) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (24) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (25) call_function_pro -> . TOSTRING L_PAREN values R_PAREN
    (115) array_pro -> . L_CORCHETE values R_CORCHETE
    (112) interface_assi -> . L_LLAVE atributos_assi R_LLAVE
    (107) array_val_pro -> . LITERAL dimensions

    NOT             shift and go to state 38
    MENOS           shift and go to state 35
    MAS             shift and go to state 34
    ENTERO          shift and go to state 44
    DECIMAL         shift and go to state 45
    CADENA          shift and go to state 46
    LITERAL         shift and go to state 72
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    L_PAREN         shift and go to state 20
    TOSTRING        shift and go to state 33
    L_CORCHETE      shift and go to state 52
    L_LLAVE         shift and go to state 25

    a                              shift and go to state 174
    b                              shift and go to state 36
    c                              shift and go to state 37
    d                              shift and go to state 39
    e                              shift and go to state 40
    f                              shift and go to state 41
    g                              shift and go to state 42
    h                              shift and go to state 43
    call_function_pro              shift and go to state 73
    array_pro                      shift and go to state 49
    interface_assi                 shift and go to state 50
    array_val_pro                  shift and go to state 51

state 119

    (55) assig_pro -> LITERAL IGUAL a .
    (69) a -> a . OR b
    (104) h -> a . PUNTO LITERAL
    (105) h -> a . PUNTO nativeFun L_PAREN expresion R_PAREN
    (106) h -> a . PUNTO nativeFun L_PAREN R_PAREN

    SEMI_COLON      reduce using rule 55 (assig_pro -> LITERAL IGUAL a .)
    CONSOLE         reduce using rule 55 (assig_pro -> LITERAL IGUAL a .)
    LET             reduce using rule 55 (assig_pro -> LITERAL IGUAL a .)
    LITERAL         reduce using rule 55 (assig_pro -> LITERAL IGUAL a .)
    IF              reduce using rule 55 (assig_pro -> LITERAL IGUAL a .)
    WHILE           reduce using rule 55 (assig_pro -> LITERAL IGUAL a .)
    FOR             reduce using rule 55 (assig_pro -> LITERAL IGUAL a .)
    INTERFACE       reduce using rule 55 (assig_pro -> LITERAL IGUAL a .)
    CONTINUE        reduce using rule 55 (assig_pro -> LITERAL IGUAL a .)
    BREAK           reduce using rule 55 (assig_pro -> LITERAL IGUAL a .)
    RETURN          reduce using rule 55 (assig_pro -> LITERAL IGUAL a .)
    FUNCTION        reduce using rule 55 (assig_pro -> LITERAL IGUAL a .)
    TOSTRING        reduce using rule 55 (assig_pro -> LITERAL IGUAL a .)
    NOT             reduce using rule 55 (assig_pro -> LITERAL IGUAL a .)
    MENOS           reduce using rule 55 (assig_pro -> LITERAL IGUAL a .)
    MAS             reduce using rule 55 (assig_pro -> LITERAL IGUAL a .)
    ENTERO          reduce using rule 55 (assig_pro -> LITERAL IGUAL a .)
    DECIMAL         reduce using rule 55 (assig_pro -> LITERAL IGUAL a .)
    CADENA          reduce using rule 55 (assig_pro -> LITERAL IGUAL a .)
    TRUE            reduce using rule 55 (assig_pro -> LITERAL IGUAL a .)
    FALSE           reduce using rule 55 (assig_pro -> LITERAL IGUAL a .)
    L_PAREN         reduce using rule 55 (assig_pro -> LITERAL IGUAL a .)
    L_CORCHETE      reduce using rule 55 (assig_pro -> LITERAL IGUAL a .)
    L_LLAVE         reduce using rule 55 (assig_pro -> LITERAL IGUAL a .)
    $end            reduce using rule 55 (assig_pro -> LITERAL IGUAL a .)
    R_LLAVE         reduce using rule 55 (assig_pro -> LITERAL IGUAL a .)
    R_PAREN         reduce using rule 55 (assig_pro -> LITERAL IGUAL a .)
    OR              shift and go to state 84
    PUNTO           shift and go to state 115


state 120

    (23) call_function_pro -> LITERAL L_PAREN values . R_PAREN
    (26) values -> values . COMA a

    R_PAREN         shift and go to state 175
    COMA            shift and go to state 163


state 121

    (24) call_function_pro -> LITERAL L_PAREN R_PAREN .

    SEMI_COLON      reduce using rule 24 (call_function_pro -> LITERAL L_PAREN R_PAREN .)
    CONSOLE         reduce using rule 24 (call_function_pro -> LITERAL L_PAREN R_PAREN .)
    LET             reduce using rule 24 (call_function_pro -> LITERAL L_PAREN R_PAREN .)
    LITERAL         reduce using rule 24 (call_function_pro -> LITERAL L_PAREN R_PAREN .)
    IF              reduce using rule 24 (call_function_pro -> LITERAL L_PAREN R_PAREN .)
    WHILE           reduce using rule 24 (call_function_pro -> LITERAL L_PAREN R_PAREN .)
    FOR             reduce using rule 24 (call_function_pro -> LITERAL L_PAREN R_PAREN .)
    INTERFACE       reduce using rule 24 (call_function_pro -> LITERAL L_PAREN R_PAREN .)
    CONTINUE        reduce using rule 24 (call_function_pro -> LITERAL L_PAREN R_PAREN .)
    BREAK           reduce using rule 24 (call_function_pro -> LITERAL L_PAREN R_PAREN .)
    RETURN          reduce using rule 24 (call_function_pro -> LITERAL L_PAREN R_PAREN .)
    FUNCTION        reduce using rule 24 (call_function_pro -> LITERAL L_PAREN R_PAREN .)
    TOSTRING        reduce using rule 24 (call_function_pro -> LITERAL L_PAREN R_PAREN .)
    NOT             reduce using rule 24 (call_function_pro -> LITERAL L_PAREN R_PAREN .)
    MENOS           reduce using rule 24 (call_function_pro -> LITERAL L_PAREN R_PAREN .)
    MAS             reduce using rule 24 (call_function_pro -> LITERAL L_PAREN R_PAREN .)
    ENTERO          reduce using rule 24 (call_function_pro -> LITERAL L_PAREN R_PAREN .)
    DECIMAL         reduce using rule 24 (call_function_pro -> LITERAL L_PAREN R_PAREN .)
    CADENA          reduce using rule 24 (call_function_pro -> LITERAL L_PAREN R_PAREN .)
    TRUE            reduce using rule 24 (call_function_pro -> LITERAL L_PAREN R_PAREN .)
    FALSE           reduce using rule 24 (call_function_pro -> LITERAL L_PAREN R_PAREN .)
    L_PAREN         reduce using rule 24 (call_function_pro -> LITERAL L_PAREN R_PAREN .)
    L_CORCHETE      reduce using rule 24 (call_function_pro -> LITERAL L_PAREN R_PAREN .)
    L_LLAVE         reduce using rule 24 (call_function_pro -> LITERAL L_PAREN R_PAREN .)
    $end            reduce using rule 24 (call_function_pro -> LITERAL L_PAREN R_PAREN .)
    TIMES           reduce using rule 24 (call_function_pro -> LITERAL L_PAREN R_PAREN .)
    DIVIDE          reduce using rule 24 (call_function_pro -> LITERAL L_PAREN R_PAREN .)
    MOD             reduce using rule 24 (call_function_pro -> LITERAL L_PAREN R_PAREN .)
    POTENCIA        reduce using rule 24 (call_function_pro -> LITERAL L_PAREN R_PAREN .)
    DISTINTO_QUE    reduce using rule 24 (call_function_pro -> LITERAL L_PAREN R_PAREN .)
    MENOR_QUE       reduce using rule 24 (call_function_pro -> LITERAL L_PAREN R_PAREN .)
    MENOR_IGUAL_QUE reduce using rule 24 (call_function_pro -> LITERAL L_PAREN R_PAREN .)
    MAYOR_QUE       reduce using rule 24 (call_function_pro -> LITERAL L_PAREN R_PAREN .)
    MAYOR_IGUAL_QUE reduce using rule 24 (call_function_pro -> LITERAL L_PAREN R_PAREN .)
    TRIPLE_IGUAL    reduce using rule 24 (call_function_pro -> LITERAL L_PAREN R_PAREN .)
    AND             reduce using rule 24 (call_function_pro -> LITERAL L_PAREN R_PAREN .)
    PUNTO           reduce using rule 24 (call_function_pro -> LITERAL L_PAREN R_PAREN .)
    OR              reduce using rule 24 (call_function_pro -> LITERAL L_PAREN R_PAREN .)
    R_PAREN         reduce using rule 24 (call_function_pro -> LITERAL L_PAREN R_PAREN .)
    R_LLAVE         reduce using rule 24 (call_function_pro -> LITERAL L_PAREN R_PAREN .)
    R_CORCHETE      reduce using rule 24 (call_function_pro -> LITERAL L_PAREN R_PAREN .)
    COMA            reduce using rule 24 (call_function_pro -> LITERAL L_PAREN R_PAREN .)


state 122

    (110) sumadores -> LITERAL MAS MAS .

    SEMI_COLON      reduce using rule 110 (sumadores -> LITERAL MAS MAS .)
    CONSOLE         reduce using rule 110 (sumadores -> LITERAL MAS MAS .)
    LET             reduce using rule 110 (sumadores -> LITERAL MAS MAS .)
    LITERAL         reduce using rule 110 (sumadores -> LITERAL MAS MAS .)
    IF              reduce using rule 110 (sumadores -> LITERAL MAS MAS .)
    WHILE           reduce using rule 110 (sumadores -> LITERAL MAS MAS .)
    FOR             reduce using rule 110 (sumadores -> LITERAL MAS MAS .)
    INTERFACE       reduce using rule 110 (sumadores -> LITERAL MAS MAS .)
    CONTINUE        reduce using rule 110 (sumadores -> LITERAL MAS MAS .)
    BREAK           reduce using rule 110 (sumadores -> LITERAL MAS MAS .)
    RETURN          reduce using rule 110 (sumadores -> LITERAL MAS MAS .)
    FUNCTION        reduce using rule 110 (sumadores -> LITERAL MAS MAS .)
    TOSTRING        reduce using rule 110 (sumadores -> LITERAL MAS MAS .)
    NOT             reduce using rule 110 (sumadores -> LITERAL MAS MAS .)
    MENOS           reduce using rule 110 (sumadores -> LITERAL MAS MAS .)
    MAS             reduce using rule 110 (sumadores -> LITERAL MAS MAS .)
    ENTERO          reduce using rule 110 (sumadores -> LITERAL MAS MAS .)
    DECIMAL         reduce using rule 110 (sumadores -> LITERAL MAS MAS .)
    CADENA          reduce using rule 110 (sumadores -> LITERAL MAS MAS .)
    TRUE            reduce using rule 110 (sumadores -> LITERAL MAS MAS .)
    FALSE           reduce using rule 110 (sumadores -> LITERAL MAS MAS .)
    L_PAREN         reduce using rule 110 (sumadores -> LITERAL MAS MAS .)
    L_CORCHETE      reduce using rule 110 (sumadores -> LITERAL MAS MAS .)
    L_LLAVE         reduce using rule 110 (sumadores -> LITERAL MAS MAS .)
    $end            reduce using rule 110 (sumadores -> LITERAL MAS MAS .)
    R_LLAVE         reduce using rule 110 (sumadores -> LITERAL MAS MAS .)
    R_PAREN         reduce using rule 110 (sumadores -> LITERAL MAS MAS .)


state 123

    (111) sumadores -> LITERAL MENOS MENOS .

    SEMI_COLON      reduce using rule 111 (sumadores -> LITERAL MENOS MENOS .)
    CONSOLE         reduce using rule 111 (sumadores -> LITERAL MENOS MENOS .)
    LET             reduce using rule 111 (sumadores -> LITERAL MENOS MENOS .)
    LITERAL         reduce using rule 111 (sumadores -> LITERAL MENOS MENOS .)
    IF              reduce using rule 111 (sumadores -> LITERAL MENOS MENOS .)
    WHILE           reduce using rule 111 (sumadores -> LITERAL MENOS MENOS .)
    FOR             reduce using rule 111 (sumadores -> LITERAL MENOS MENOS .)
    INTERFACE       reduce using rule 111 (sumadores -> LITERAL MENOS MENOS .)
    CONTINUE        reduce using rule 111 (sumadores -> LITERAL MENOS MENOS .)
    BREAK           reduce using rule 111 (sumadores -> LITERAL MENOS MENOS .)
    RETURN          reduce using rule 111 (sumadores -> LITERAL MENOS MENOS .)
    FUNCTION        reduce using rule 111 (sumadores -> LITERAL MENOS MENOS .)
    TOSTRING        reduce using rule 111 (sumadores -> LITERAL MENOS MENOS .)
    NOT             reduce using rule 111 (sumadores -> LITERAL MENOS MENOS .)
    MENOS           reduce using rule 111 (sumadores -> LITERAL MENOS MENOS .)
    MAS             reduce using rule 111 (sumadores -> LITERAL MENOS MENOS .)
    ENTERO          reduce using rule 111 (sumadores -> LITERAL MENOS MENOS .)
    DECIMAL         reduce using rule 111 (sumadores -> LITERAL MENOS MENOS .)
    CADENA          reduce using rule 111 (sumadores -> LITERAL MENOS MENOS .)
    TRUE            reduce using rule 111 (sumadores -> LITERAL MENOS MENOS .)
    FALSE           reduce using rule 111 (sumadores -> LITERAL MENOS MENOS .)
    L_PAREN         reduce using rule 111 (sumadores -> LITERAL MENOS MENOS .)
    L_CORCHETE      reduce using rule 111 (sumadores -> LITERAL MENOS MENOS .)
    L_LLAVE         reduce using rule 111 (sumadores -> LITERAL MENOS MENOS .)
    $end            reduce using rule 111 (sumadores -> LITERAL MENOS MENOS .)
    R_LLAVE         reduce using rule 111 (sumadores -> LITERAL MENOS MENOS .)
    R_PAREN         reduce using rule 111 (sumadores -> LITERAL MENOS MENOS .)


state 124

    (108) dimensions -> dimensions L_CORCHETE . a R_CORCHETE
    (69) a -> . a OR b
    (70) a -> . b
    (71) b -> . b AND c
    (72) b -> . c
    (73) c -> . NOT d
    (74) c -> . d
    (75) d -> . d DISTINTO_QUE e
    (76) d -> . d MENOR_QUE e
    (77) d -> . d MENOR_IGUAL_QUE e
    (78) d -> . d MAYOR_QUE e
    (79) d -> . d MAYOR_IGUAL_QUE e
    (80) d -> . d TRIPLE_IGUAL e
    (81) d -> . e
    (82) e -> . e MAS f
    (83) e -> . e MENOS f
    (84) e -> . f
    (85) f -> . MENOS g
    (86) f -> . MAS g
    (87) f -> . g
    (88) g -> . g TIMES h
    (89) g -> . g DIVIDE h
    (90) g -> . g MOD h
    (91) g -> . g POTENCIA h
    (92) g -> . h
    (93) h -> . ENTERO
    (94) h -> . DECIMAL
    (95) h -> . CADENA
    (96) h -> . LITERAL
    (97) h -> . TRUE
    (98) h -> . FALSE
    (99) h -> . call_function_pro
    (100) h -> . array_pro
    (101) h -> . interface_assi
    (102) h -> . L_PAREN a R_PAREN
    (103) h -> . array_val_pro
    (104) h -> . a PUNTO LITERAL
    (105) h -> . a PUNTO nativeFun L_PAREN expresion R_PAREN
    (106) h -> . a PUNTO nativeFun L_PAREN R_PAREN
    (23) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (24) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (25) call_function_pro -> . TOSTRING L_PAREN values R_PAREN
    (115) array_pro -> . L_CORCHETE values R_CORCHETE
    (112) interface_assi -> . L_LLAVE atributos_assi R_LLAVE
    (107) array_val_pro -> . LITERAL dimensions

    NOT             shift and go to state 38
    MENOS           shift and go to state 35
    MAS             shift and go to state 34
    ENTERO          shift and go to state 44
    DECIMAL         shift and go to state 45
    CADENA          shift and go to state 46
    LITERAL         shift and go to state 72
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    L_PAREN         shift and go to state 20
    TOSTRING        shift and go to state 33
    L_CORCHETE      shift and go to state 52
    L_LLAVE         shift and go to state 25

    a                              shift and go to state 176
    b                              shift and go to state 36
    c                              shift and go to state 37
    d                              shift and go to state 39
    e                              shift and go to state 40
    f                              shift and go to state 41
    g                              shift and go to state 42
    h                              shift and go to state 43
    call_function_pro              shift and go to state 73
    array_pro                      shift and go to state 49
    interface_assi                 shift and go to state 50
    array_val_pro                  shift and go to state 51

state 125

    (109) dimensions -> L_CORCHETE a . R_CORCHETE
    (69) a -> a . OR b
    (104) h -> a . PUNTO LITERAL
    (105) h -> a . PUNTO nativeFun L_PAREN expresion R_PAREN
    (106) h -> a . PUNTO nativeFun L_PAREN R_PAREN

    R_CORCHETE      shift and go to state 177
    OR              shift and go to state 84
    PUNTO           shift and go to state 115


state 126

    (41) interface_assign_pro -> a PUNTO LITERAL . IGUAL a
    (104) h -> a PUNTO LITERAL .

    IGUAL           shift and go to state 178
    TIMES           reduce using rule 104 (h -> a PUNTO LITERAL .)
    DIVIDE          reduce using rule 104 (h -> a PUNTO LITERAL .)
    MOD             reduce using rule 104 (h -> a PUNTO LITERAL .)
    POTENCIA        reduce using rule 104 (h -> a PUNTO LITERAL .)
    MAS             reduce using rule 104 (h -> a PUNTO LITERAL .)
    MENOS           reduce using rule 104 (h -> a PUNTO LITERAL .)
    DISTINTO_QUE    reduce using rule 104 (h -> a PUNTO LITERAL .)
    MENOR_QUE       reduce using rule 104 (h -> a PUNTO LITERAL .)
    MENOR_IGUAL_QUE reduce using rule 104 (h -> a PUNTO LITERAL .)
    MAYOR_QUE       reduce using rule 104 (h -> a PUNTO LITERAL .)
    MAYOR_IGUAL_QUE reduce using rule 104 (h -> a PUNTO LITERAL .)
    TRIPLE_IGUAL    reduce using rule 104 (h -> a PUNTO LITERAL .)
    AND             reduce using rule 104 (h -> a PUNTO LITERAL .)
    PUNTO           reduce using rule 104 (h -> a PUNTO LITERAL .)
    OR              reduce using rule 104 (h -> a PUNTO LITERAL .)


state 127

    (105) h -> a PUNTO nativeFun . L_PAREN expresion R_PAREN
    (106) h -> a PUNTO nativeFun . L_PAREN R_PAREN

    L_PAREN         shift and go to state 179


state 128

    (116) nativeFun -> TOSTRING .

    L_PAREN         reduce using rule 116 (nativeFun -> TOSTRING .)


state 129

    (117) nativeFun -> TOFIXED .

    L_PAREN         reduce using rule 117 (nativeFun -> TOFIXED .)


state 130

    (118) nativeFun -> TOEXPONENTIAL .

    L_PAREN         reduce using rule 118 (nativeFun -> TOEXPONENTIAL .)


state 131

    (119) nativeFun -> TOLOWERCASE .

    L_PAREN         reduce using rule 119 (nativeFun -> TOLOWERCASE .)


state 132

    (120) nativeFun -> TOUPPERCASE .

    L_PAREN         reduce using rule 120 (nativeFun -> TOUPPERCASE .)


state 133

    (121) nativeFun -> SPLIT .

    L_PAREN         reduce using rule 121 (nativeFun -> SPLIT .)


state 134

    (122) nativeFun -> CONCAT .

    L_PAREN         reduce using rule 122 (nativeFun -> CONCAT .)


state 135

    (123) nativeFun -> LENGTH .

    L_PAREN         reduce using rule 123 (nativeFun -> LENGTH .)


state 136

    (69) a -> a OR b .
    (71) b -> b . AND c
    (70) a -> b .

  ! reduce/reduce conflict for PUNTO resolved using rule 69 (a -> a OR b .)
  ! reduce/reduce conflict for OR resolved using rule 69 (a -> a OR b .)
    PUNTO           reduce using rule 69 (a -> a OR b .)
    OR              reduce using rule 69 (a -> a OR b .)
    R_PAREN         reduce using rule 69 (a -> a OR b .)
    SEMI_COLON      reduce using rule 69 (a -> a OR b .)
    CONSOLE         reduce using rule 69 (a -> a OR b .)
    LET             reduce using rule 69 (a -> a OR b .)
    LITERAL         reduce using rule 69 (a -> a OR b .)
    IF              reduce using rule 69 (a -> a OR b .)
    WHILE           reduce using rule 69 (a -> a OR b .)
    FOR             reduce using rule 69 (a -> a OR b .)
    INTERFACE       reduce using rule 69 (a -> a OR b .)
    CONTINUE        reduce using rule 69 (a -> a OR b .)
    BREAK           reduce using rule 69 (a -> a OR b .)
    RETURN          reduce using rule 69 (a -> a OR b .)
    FUNCTION        reduce using rule 69 (a -> a OR b .)
    TOSTRING        reduce using rule 69 (a -> a OR b .)
    NOT             reduce using rule 69 (a -> a OR b .)
    MENOS           reduce using rule 69 (a -> a OR b .)
    MAS             reduce using rule 69 (a -> a OR b .)
    ENTERO          reduce using rule 69 (a -> a OR b .)
    DECIMAL         reduce using rule 69 (a -> a OR b .)
    CADENA          reduce using rule 69 (a -> a OR b .)
    TRUE            reduce using rule 69 (a -> a OR b .)
    FALSE           reduce using rule 69 (a -> a OR b .)
    L_PAREN         reduce using rule 69 (a -> a OR b .)
    L_CORCHETE      reduce using rule 69 (a -> a OR b .)
    L_LLAVE         reduce using rule 69 (a -> a OR b .)
    $end            reduce using rule 69 (a -> a OR b .)
    R_LLAVE         reduce using rule 69 (a -> a OR b .)
    R_CORCHETE      reduce using rule 69 (a -> a OR b .)
    COMA            reduce using rule 69 (a -> a OR b .)
    AND             shift and go to state 97

  ! PUNTO           [ reduce using rule 70 (a -> b .) ]
  ! OR              [ reduce using rule 70 (a -> b .) ]


state 137

    (56) if_pro -> IF L_PAREN a . R_PAREN L_LLAVE instrucciones R_LLAVE else_pro
    (69) a -> a . OR b
    (104) h -> a . PUNTO LITERAL
    (105) h -> a . PUNTO nativeFun L_PAREN expresion R_PAREN
    (106) h -> a . PUNTO nativeFun L_PAREN R_PAREN

    R_PAREN         shift and go to state 180
    OR              shift and go to state 84
    PUNTO           shift and go to state 115


state 138

    (112) interface_assi -> L_LLAVE atributos_assi R_LLAVE .

    TIMES           reduce using rule 112 (interface_assi -> L_LLAVE atributos_assi R_LLAVE .)
    DIVIDE          reduce using rule 112 (interface_assi -> L_LLAVE atributos_assi R_LLAVE .)
    MOD             reduce using rule 112 (interface_assi -> L_LLAVE atributos_assi R_LLAVE .)
    POTENCIA        reduce using rule 112 (interface_assi -> L_LLAVE atributos_assi R_LLAVE .)
    MAS             reduce using rule 112 (interface_assi -> L_LLAVE atributos_assi R_LLAVE .)
    MENOS           reduce using rule 112 (interface_assi -> L_LLAVE atributos_assi R_LLAVE .)
    DISTINTO_QUE    reduce using rule 112 (interface_assi -> L_LLAVE atributos_assi R_LLAVE .)
    MENOR_QUE       reduce using rule 112 (interface_assi -> L_LLAVE atributos_assi R_LLAVE .)
    MENOR_IGUAL_QUE reduce using rule 112 (interface_assi -> L_LLAVE atributos_assi R_LLAVE .)
    MAYOR_QUE       reduce using rule 112 (interface_assi -> L_LLAVE atributos_assi R_LLAVE .)
    MAYOR_IGUAL_QUE reduce using rule 112 (interface_assi -> L_LLAVE atributos_assi R_LLAVE .)
    TRIPLE_IGUAL    reduce using rule 112 (interface_assi -> L_LLAVE atributos_assi R_LLAVE .)
    AND             reduce using rule 112 (interface_assi -> L_LLAVE atributos_assi R_LLAVE .)
    PUNTO           reduce using rule 112 (interface_assi -> L_LLAVE atributos_assi R_LLAVE .)
    OR              reduce using rule 112 (interface_assi -> L_LLAVE atributos_assi R_LLAVE .)
    R_PAREN         reduce using rule 112 (interface_assi -> L_LLAVE atributos_assi R_LLAVE .)
    SEMI_COLON      reduce using rule 112 (interface_assi -> L_LLAVE atributos_assi R_LLAVE .)
    CONSOLE         reduce using rule 112 (interface_assi -> L_LLAVE atributos_assi R_LLAVE .)
    LET             reduce using rule 112 (interface_assi -> L_LLAVE atributos_assi R_LLAVE .)
    LITERAL         reduce using rule 112 (interface_assi -> L_LLAVE atributos_assi R_LLAVE .)
    IF              reduce using rule 112 (interface_assi -> L_LLAVE atributos_assi R_LLAVE .)
    WHILE           reduce using rule 112 (interface_assi -> L_LLAVE atributos_assi R_LLAVE .)
    FOR             reduce using rule 112 (interface_assi -> L_LLAVE atributos_assi R_LLAVE .)
    INTERFACE       reduce using rule 112 (interface_assi -> L_LLAVE atributos_assi R_LLAVE .)
    CONTINUE        reduce using rule 112 (interface_assi -> L_LLAVE atributos_assi R_LLAVE .)
    BREAK           reduce using rule 112 (interface_assi -> L_LLAVE atributos_assi R_LLAVE .)
    RETURN          reduce using rule 112 (interface_assi -> L_LLAVE atributos_assi R_LLAVE .)
    FUNCTION        reduce using rule 112 (interface_assi -> L_LLAVE atributos_assi R_LLAVE .)
    TOSTRING        reduce using rule 112 (interface_assi -> L_LLAVE atributos_assi R_LLAVE .)
    NOT             reduce using rule 112 (interface_assi -> L_LLAVE atributos_assi R_LLAVE .)
    ENTERO          reduce using rule 112 (interface_assi -> L_LLAVE atributos_assi R_LLAVE .)
    DECIMAL         reduce using rule 112 (interface_assi -> L_LLAVE atributos_assi R_LLAVE .)
    CADENA          reduce using rule 112 (interface_assi -> L_LLAVE atributos_assi R_LLAVE .)
    TRUE            reduce using rule 112 (interface_assi -> L_LLAVE atributos_assi R_LLAVE .)
    FALSE           reduce using rule 112 (interface_assi -> L_LLAVE atributos_assi R_LLAVE .)
    L_PAREN         reduce using rule 112 (interface_assi -> L_LLAVE atributos_assi R_LLAVE .)
    L_CORCHETE      reduce using rule 112 (interface_assi -> L_LLAVE atributos_assi R_LLAVE .)
    L_LLAVE         reduce using rule 112 (interface_assi -> L_LLAVE atributos_assi R_LLAVE .)
    $end            reduce using rule 112 (interface_assi -> L_LLAVE atributos_assi R_LLAVE .)
    R_LLAVE         reduce using rule 112 (interface_assi -> L_LLAVE atributos_assi R_LLAVE .)
    R_CORCHETE      reduce using rule 112 (interface_assi -> L_LLAVE atributos_assi R_LLAVE .)
    COMA            reduce using rule 112 (interface_assi -> L_LLAVE atributos_assi R_LLAVE .)


state 139

    (113) atributos_assi -> atributos_assi COMA . LITERAL COLON a

    LITERAL         shift and go to state 181


state 140

    (114) atributos_assi -> LITERAL COLON . a
    (69) a -> . a OR b
    (70) a -> . b
    (71) b -> . b AND c
    (72) b -> . c
    (73) c -> . NOT d
    (74) c -> . d
    (75) d -> . d DISTINTO_QUE e
    (76) d -> . d MENOR_QUE e
    (77) d -> . d MENOR_IGUAL_QUE e
    (78) d -> . d MAYOR_QUE e
    (79) d -> . d MAYOR_IGUAL_QUE e
    (80) d -> . d TRIPLE_IGUAL e
    (81) d -> . e
    (82) e -> . e MAS f
    (83) e -> . e MENOS f
    (84) e -> . f
    (85) f -> . MENOS g
    (86) f -> . MAS g
    (87) f -> . g
    (88) g -> . g TIMES h
    (89) g -> . g DIVIDE h
    (90) g -> . g MOD h
    (91) g -> . g POTENCIA h
    (92) g -> . h
    (93) h -> . ENTERO
    (94) h -> . DECIMAL
    (95) h -> . CADENA
    (96) h -> . LITERAL
    (97) h -> . TRUE
    (98) h -> . FALSE
    (99) h -> . call_function_pro
    (100) h -> . array_pro
    (101) h -> . interface_assi
    (102) h -> . L_PAREN a R_PAREN
    (103) h -> . array_val_pro
    (104) h -> . a PUNTO LITERAL
    (105) h -> . a PUNTO nativeFun L_PAREN expresion R_PAREN
    (106) h -> . a PUNTO nativeFun L_PAREN R_PAREN
    (23) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (24) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (25) call_function_pro -> . TOSTRING L_PAREN values R_PAREN
    (115) array_pro -> . L_CORCHETE values R_CORCHETE
    (112) interface_assi -> . L_LLAVE atributos_assi R_LLAVE
    (107) array_val_pro -> . LITERAL dimensions

    NOT             shift and go to state 38
    MENOS           shift and go to state 35
    MAS             shift and go to state 34
    ENTERO          shift and go to state 44
    DECIMAL         shift and go to state 45
    CADENA          shift and go to state 46
    LITERAL         shift and go to state 72
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    L_PAREN         shift and go to state 20
    TOSTRING        shift and go to state 33
    L_CORCHETE      shift and go to state 52
    L_LLAVE         shift and go to state 25

    a                              shift and go to state 182
    b                              shift and go to state 36
    c                              shift and go to state 37
    d                              shift and go to state 39
    e                              shift and go to state 40
    f                              shift and go to state 41
    g                              shift and go to state 42
    h                              shift and go to state 43
    call_function_pro              shift and go to state 73
    array_pro                      shift and go to state 49
    interface_assi                 shift and go to state 50
    array_val_pro                  shift and go to state 51

state 141

    (60) while_pro -> WHILE L_PAREN a . R_PAREN L_LLAVE instrucciones R_LLAVE
    (69) a -> a . OR b
    (104) h -> a . PUNTO LITERAL
    (105) h -> a . PUNTO nativeFun L_PAREN expresion R_PAREN
    (106) h -> a . PUNTO nativeFun L_PAREN R_PAREN

    R_PAREN         shift and go to state 183
    OR              shift and go to state 84
    PUNTO           shift and go to state 115


state 142

    (61) for_pro -> FOR L_PAREN declaration_instruction . SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE

    SEMI_COLON      shift and go to state 184


state 143

    (62) for_pro -> FOR L_PAREN assig_pro . SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE

    SEMI_COLON      shift and go to state 185


state 144

    (65) for_each_pro -> FOR L_PAREN LET . LITERAL OF a R_PAREN L_LLAVE instrucciones R_LLAVE
    (42) declaration_instruction -> LET . declaracion_list
    (43) declaracion_list -> . declaracion_list COMA assignacion_instruction
    (44) declaracion_list -> . assignacion_instruction
    (45) assignacion_instruction -> . LITERAL COLON type IGUAL a
    (46) assignacion_instruction -> . LITERAL COLON type
    (47) assignacion_instruction -> . LITERAL IGUAL a
    (48) assignacion_instruction -> . LITERAL

    LITERAL         shift and go to state 186

    declaracion_list               shift and go to state 74
    assignacion_instruction        shift and go to state 75

state 145

    (55) assig_pro -> LITERAL . IGUAL a

    IGUAL           shift and go to state 77


state 146

    (36) interface_pro -> INTERFACE LITERAL L_LLAVE . interface_atributos R_LLAVE
    (37) interface_atributos -> . interface_atributos interface_atributo sc
    (38) interface_atributos -> .

    R_LLAVE         reduce using rule 38 (interface_atributos -> .)
    LITERAL         reduce using rule 38 (interface_atributos -> .)

    interface_atributos            shift and go to state 187

state 147

    (21) function_pro -> FUNCTION LITERAL L_PAREN . parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (22) function_pro -> FUNCTION LITERAL L_PAREN . R_PAREN L_LLAVE instrucciones R_LLAVE
    (28) parameters_pro -> . parameters_pro COMA parameter_pro
    (29) parameters_pro -> . parameter_pro
    (30) parameter_pro -> . LITERAL COLON type
    (31) parameter_pro -> . LITERAL

    R_PAREN         shift and go to state 190
    LITERAL         shift and go to state 188

    parameters_pro                 shift and go to state 189
    parameter_pro                  shift and go to state 191

state 148

    (25) call_function_pro -> TOSTRING L_PAREN values . R_PAREN
    (26) values -> values . COMA a

    R_PAREN         shift and go to state 192
    COMA            shift and go to state 163


state 149

    (71) b -> b AND c .
    (72) b -> c .

  ! reduce/reduce conflict for AND resolved using rule 71 (b -> b AND c .)
  ! reduce/reduce conflict for PUNTO resolved using rule 71 (b -> b AND c .)
  ! reduce/reduce conflict for OR resolved using rule 71 (b -> b AND c .)
    AND             reduce using rule 71 (b -> b AND c .)
    PUNTO           reduce using rule 71 (b -> b AND c .)
    OR              reduce using rule 71 (b -> b AND c .)
    R_PAREN         reduce using rule 71 (b -> b AND c .)
    SEMI_COLON      reduce using rule 71 (b -> b AND c .)
    CONSOLE         reduce using rule 71 (b -> b AND c .)
    LET             reduce using rule 71 (b -> b AND c .)
    LITERAL         reduce using rule 71 (b -> b AND c .)
    IF              reduce using rule 71 (b -> b AND c .)
    WHILE           reduce using rule 71 (b -> b AND c .)
    FOR             reduce using rule 71 (b -> b AND c .)
    INTERFACE       reduce using rule 71 (b -> b AND c .)
    CONTINUE        reduce using rule 71 (b -> b AND c .)
    BREAK           reduce using rule 71 (b -> b AND c .)
    RETURN          reduce using rule 71 (b -> b AND c .)
    FUNCTION        reduce using rule 71 (b -> b AND c .)
    TOSTRING        reduce using rule 71 (b -> b AND c .)
    NOT             reduce using rule 71 (b -> b AND c .)
    MENOS           reduce using rule 71 (b -> b AND c .)
    MAS             reduce using rule 71 (b -> b AND c .)
    ENTERO          reduce using rule 71 (b -> b AND c .)
    DECIMAL         reduce using rule 71 (b -> b AND c .)
    CADENA          reduce using rule 71 (b -> b AND c .)
    TRUE            reduce using rule 71 (b -> b AND c .)
    FALSE           reduce using rule 71 (b -> b AND c .)
    L_PAREN         reduce using rule 71 (b -> b AND c .)
    L_CORCHETE      reduce using rule 71 (b -> b AND c .)
    L_LLAVE         reduce using rule 71 (b -> b AND c .)
    $end            reduce using rule 71 (b -> b AND c .)
    R_LLAVE         reduce using rule 71 (b -> b AND c .)
    R_CORCHETE      reduce using rule 71 (b -> b AND c .)
    COMA            reduce using rule 71 (b -> b AND c .)

  ! AND             [ reduce using rule 72 (b -> c .) ]
  ! PUNTO           [ reduce using rule 72 (b -> c .) ]
  ! OR              [ reduce using rule 72 (b -> c .) ]


state 150

    (75) d -> d DISTINTO_QUE e .
    (82) e -> e . MAS f
    (83) e -> e . MENOS f
    (81) d -> e .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
  ! reduce/reduce conflict for DISTINTO_QUE resolved using rule 75 (d -> d DISTINTO_QUE e .)
  ! reduce/reduce conflict for MENOR_QUE resolved using rule 75 (d -> d DISTINTO_QUE e .)
  ! reduce/reduce conflict for MENOR_IGUAL_QUE resolved using rule 75 (d -> d DISTINTO_QUE e .)
  ! reduce/reduce conflict for MAYOR_QUE resolved using rule 75 (d -> d DISTINTO_QUE e .)
  ! reduce/reduce conflict for MAYOR_IGUAL_QUE resolved using rule 75 (d -> d DISTINTO_QUE e .)
  ! reduce/reduce conflict for TRIPLE_IGUAL resolved using rule 75 (d -> d DISTINTO_QUE e .)
  ! reduce/reduce conflict for AND resolved using rule 75 (d -> d DISTINTO_QUE e .)
  ! reduce/reduce conflict for PUNTO resolved using rule 75 (d -> d DISTINTO_QUE e .)
  ! reduce/reduce conflict for OR resolved using rule 75 (d -> d DISTINTO_QUE e .)
    DISTINTO_QUE    reduce using rule 75 (d -> d DISTINTO_QUE e .)
    MENOR_QUE       reduce using rule 75 (d -> d DISTINTO_QUE e .)
    MENOR_IGUAL_QUE reduce using rule 75 (d -> d DISTINTO_QUE e .)
    MAYOR_QUE       reduce using rule 75 (d -> d DISTINTO_QUE e .)
    MAYOR_IGUAL_QUE reduce using rule 75 (d -> d DISTINTO_QUE e .)
    TRIPLE_IGUAL    reduce using rule 75 (d -> d DISTINTO_QUE e .)
    AND             reduce using rule 75 (d -> d DISTINTO_QUE e .)
    PUNTO           reduce using rule 75 (d -> d DISTINTO_QUE e .)
    OR              reduce using rule 75 (d -> d DISTINTO_QUE e .)
    R_PAREN         reduce using rule 75 (d -> d DISTINTO_QUE e .)
    SEMI_COLON      reduce using rule 75 (d -> d DISTINTO_QUE e .)
    CONSOLE         reduce using rule 75 (d -> d DISTINTO_QUE e .)
    LET             reduce using rule 75 (d -> d DISTINTO_QUE e .)
    LITERAL         reduce using rule 75 (d -> d DISTINTO_QUE e .)
    IF              reduce using rule 75 (d -> d DISTINTO_QUE e .)
    WHILE           reduce using rule 75 (d -> d DISTINTO_QUE e .)
    FOR             reduce using rule 75 (d -> d DISTINTO_QUE e .)
    INTERFACE       reduce using rule 75 (d -> d DISTINTO_QUE e .)
    CONTINUE        reduce using rule 75 (d -> d DISTINTO_QUE e .)
    BREAK           reduce using rule 75 (d -> d DISTINTO_QUE e .)
    RETURN          reduce using rule 75 (d -> d DISTINTO_QUE e .)
    FUNCTION        reduce using rule 75 (d -> d DISTINTO_QUE e .)
    TOSTRING        reduce using rule 75 (d -> d DISTINTO_QUE e .)
    NOT             reduce using rule 75 (d -> d DISTINTO_QUE e .)
    ENTERO          reduce using rule 75 (d -> d DISTINTO_QUE e .)
    DECIMAL         reduce using rule 75 (d -> d DISTINTO_QUE e .)
    CADENA          reduce using rule 75 (d -> d DISTINTO_QUE e .)
    TRUE            reduce using rule 75 (d -> d DISTINTO_QUE e .)
    FALSE           reduce using rule 75 (d -> d DISTINTO_QUE e .)
    L_PAREN         reduce using rule 75 (d -> d DISTINTO_QUE e .)
    L_CORCHETE      reduce using rule 75 (d -> d DISTINTO_QUE e .)
    L_LLAVE         reduce using rule 75 (d -> d DISTINTO_QUE e .)
    $end            reduce using rule 75 (d -> d DISTINTO_QUE e .)
    R_LLAVE         reduce using rule 75 (d -> d DISTINTO_QUE e .)
    R_CORCHETE      reduce using rule 75 (d -> d DISTINTO_QUE e .)
    COMA            reduce using rule 75 (d -> d DISTINTO_QUE e .)
    MAS             shift and go to state 105
    MENOS           shift and go to state 106

  ! MENOS           [ reduce using rule 75 (d -> d DISTINTO_QUE e .) ]
  ! MAS             [ reduce using rule 75 (d -> d DISTINTO_QUE e .) ]
  ! DISTINTO_QUE    [ reduce using rule 81 (d -> e .) ]
  ! MENOR_QUE       [ reduce using rule 81 (d -> e .) ]
  ! MENOR_IGUAL_QUE [ reduce using rule 81 (d -> e .) ]
  ! MAYOR_QUE       [ reduce using rule 81 (d -> e .) ]
  ! MAYOR_IGUAL_QUE [ reduce using rule 81 (d -> e .) ]
  ! TRIPLE_IGUAL    [ reduce using rule 81 (d -> e .) ]
  ! AND             [ reduce using rule 81 (d -> e .) ]
  ! PUNTO           [ reduce using rule 81 (d -> e .) ]
  ! OR              [ reduce using rule 81 (d -> e .) ]


state 151

    (76) d -> d MENOR_QUE e .
    (82) e -> e . MAS f
    (83) e -> e . MENOS f
    (81) d -> e .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
  ! reduce/reduce conflict for DISTINTO_QUE resolved using rule 76 (d -> d MENOR_QUE e .)
  ! reduce/reduce conflict for MENOR_QUE resolved using rule 76 (d -> d MENOR_QUE e .)
  ! reduce/reduce conflict for MENOR_IGUAL_QUE resolved using rule 76 (d -> d MENOR_QUE e .)
  ! reduce/reduce conflict for MAYOR_QUE resolved using rule 76 (d -> d MENOR_QUE e .)
  ! reduce/reduce conflict for MAYOR_IGUAL_QUE resolved using rule 76 (d -> d MENOR_QUE e .)
  ! reduce/reduce conflict for TRIPLE_IGUAL resolved using rule 76 (d -> d MENOR_QUE e .)
  ! reduce/reduce conflict for AND resolved using rule 76 (d -> d MENOR_QUE e .)
  ! reduce/reduce conflict for PUNTO resolved using rule 76 (d -> d MENOR_QUE e .)
  ! reduce/reduce conflict for OR resolved using rule 76 (d -> d MENOR_QUE e .)
    DISTINTO_QUE    reduce using rule 76 (d -> d MENOR_QUE e .)
    MENOR_QUE       reduce using rule 76 (d -> d MENOR_QUE e .)
    MENOR_IGUAL_QUE reduce using rule 76 (d -> d MENOR_QUE e .)
    MAYOR_QUE       reduce using rule 76 (d -> d MENOR_QUE e .)
    MAYOR_IGUAL_QUE reduce using rule 76 (d -> d MENOR_QUE e .)
    TRIPLE_IGUAL    reduce using rule 76 (d -> d MENOR_QUE e .)
    AND             reduce using rule 76 (d -> d MENOR_QUE e .)
    PUNTO           reduce using rule 76 (d -> d MENOR_QUE e .)
    OR              reduce using rule 76 (d -> d MENOR_QUE e .)
    R_PAREN         reduce using rule 76 (d -> d MENOR_QUE e .)
    SEMI_COLON      reduce using rule 76 (d -> d MENOR_QUE e .)
    CONSOLE         reduce using rule 76 (d -> d MENOR_QUE e .)
    LET             reduce using rule 76 (d -> d MENOR_QUE e .)
    LITERAL         reduce using rule 76 (d -> d MENOR_QUE e .)
    IF              reduce using rule 76 (d -> d MENOR_QUE e .)
    WHILE           reduce using rule 76 (d -> d MENOR_QUE e .)
    FOR             reduce using rule 76 (d -> d MENOR_QUE e .)
    INTERFACE       reduce using rule 76 (d -> d MENOR_QUE e .)
    CONTINUE        reduce using rule 76 (d -> d MENOR_QUE e .)
    BREAK           reduce using rule 76 (d -> d MENOR_QUE e .)
    RETURN          reduce using rule 76 (d -> d MENOR_QUE e .)
    FUNCTION        reduce using rule 76 (d -> d MENOR_QUE e .)
    TOSTRING        reduce using rule 76 (d -> d MENOR_QUE e .)
    NOT             reduce using rule 76 (d -> d MENOR_QUE e .)
    ENTERO          reduce using rule 76 (d -> d MENOR_QUE e .)
    DECIMAL         reduce using rule 76 (d -> d MENOR_QUE e .)
    CADENA          reduce using rule 76 (d -> d MENOR_QUE e .)
    TRUE            reduce using rule 76 (d -> d MENOR_QUE e .)
    FALSE           reduce using rule 76 (d -> d MENOR_QUE e .)
    L_PAREN         reduce using rule 76 (d -> d MENOR_QUE e .)
    L_CORCHETE      reduce using rule 76 (d -> d MENOR_QUE e .)
    L_LLAVE         reduce using rule 76 (d -> d MENOR_QUE e .)
    $end            reduce using rule 76 (d -> d MENOR_QUE e .)
    R_LLAVE         reduce using rule 76 (d -> d MENOR_QUE e .)
    R_CORCHETE      reduce using rule 76 (d -> d MENOR_QUE e .)
    COMA            reduce using rule 76 (d -> d MENOR_QUE e .)
    MAS             shift and go to state 105
    MENOS           shift and go to state 106

  ! MENOS           [ reduce using rule 76 (d -> d MENOR_QUE e .) ]
  ! MAS             [ reduce using rule 76 (d -> d MENOR_QUE e .) ]
  ! DISTINTO_QUE    [ reduce using rule 81 (d -> e .) ]
  ! MENOR_QUE       [ reduce using rule 81 (d -> e .) ]
  ! MENOR_IGUAL_QUE [ reduce using rule 81 (d -> e .) ]
  ! MAYOR_QUE       [ reduce using rule 81 (d -> e .) ]
  ! MAYOR_IGUAL_QUE [ reduce using rule 81 (d -> e .) ]
  ! TRIPLE_IGUAL    [ reduce using rule 81 (d -> e .) ]
  ! AND             [ reduce using rule 81 (d -> e .) ]
  ! PUNTO           [ reduce using rule 81 (d -> e .) ]
  ! OR              [ reduce using rule 81 (d -> e .) ]


state 152

    (77) d -> d MENOR_IGUAL_QUE e .
    (82) e -> e . MAS f
    (83) e -> e . MENOS f
    (81) d -> e .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
  ! reduce/reduce conflict for DISTINTO_QUE resolved using rule 77 (d -> d MENOR_IGUAL_QUE e .)
  ! reduce/reduce conflict for MENOR_QUE resolved using rule 77 (d -> d MENOR_IGUAL_QUE e .)
  ! reduce/reduce conflict for MENOR_IGUAL_QUE resolved using rule 77 (d -> d MENOR_IGUAL_QUE e .)
  ! reduce/reduce conflict for MAYOR_QUE resolved using rule 77 (d -> d MENOR_IGUAL_QUE e .)
  ! reduce/reduce conflict for MAYOR_IGUAL_QUE resolved using rule 77 (d -> d MENOR_IGUAL_QUE e .)
  ! reduce/reduce conflict for TRIPLE_IGUAL resolved using rule 77 (d -> d MENOR_IGUAL_QUE e .)
  ! reduce/reduce conflict for AND resolved using rule 77 (d -> d MENOR_IGUAL_QUE e .)
  ! reduce/reduce conflict for PUNTO resolved using rule 77 (d -> d MENOR_IGUAL_QUE e .)
  ! reduce/reduce conflict for OR resolved using rule 77 (d -> d MENOR_IGUAL_QUE e .)
    DISTINTO_QUE    reduce using rule 77 (d -> d MENOR_IGUAL_QUE e .)
    MENOR_QUE       reduce using rule 77 (d -> d MENOR_IGUAL_QUE e .)
    MENOR_IGUAL_QUE reduce using rule 77 (d -> d MENOR_IGUAL_QUE e .)
    MAYOR_QUE       reduce using rule 77 (d -> d MENOR_IGUAL_QUE e .)
    MAYOR_IGUAL_QUE reduce using rule 77 (d -> d MENOR_IGUAL_QUE e .)
    TRIPLE_IGUAL    reduce using rule 77 (d -> d MENOR_IGUAL_QUE e .)
    AND             reduce using rule 77 (d -> d MENOR_IGUAL_QUE e .)
    PUNTO           reduce using rule 77 (d -> d MENOR_IGUAL_QUE e .)
    OR              reduce using rule 77 (d -> d MENOR_IGUAL_QUE e .)
    R_PAREN         reduce using rule 77 (d -> d MENOR_IGUAL_QUE e .)
    SEMI_COLON      reduce using rule 77 (d -> d MENOR_IGUAL_QUE e .)
    CONSOLE         reduce using rule 77 (d -> d MENOR_IGUAL_QUE e .)
    LET             reduce using rule 77 (d -> d MENOR_IGUAL_QUE e .)
    LITERAL         reduce using rule 77 (d -> d MENOR_IGUAL_QUE e .)
    IF              reduce using rule 77 (d -> d MENOR_IGUAL_QUE e .)
    WHILE           reduce using rule 77 (d -> d MENOR_IGUAL_QUE e .)
    FOR             reduce using rule 77 (d -> d MENOR_IGUAL_QUE e .)
    INTERFACE       reduce using rule 77 (d -> d MENOR_IGUAL_QUE e .)
    CONTINUE        reduce using rule 77 (d -> d MENOR_IGUAL_QUE e .)
    BREAK           reduce using rule 77 (d -> d MENOR_IGUAL_QUE e .)
    RETURN          reduce using rule 77 (d -> d MENOR_IGUAL_QUE e .)
    FUNCTION        reduce using rule 77 (d -> d MENOR_IGUAL_QUE e .)
    TOSTRING        reduce using rule 77 (d -> d MENOR_IGUAL_QUE e .)
    NOT             reduce using rule 77 (d -> d MENOR_IGUAL_QUE e .)
    ENTERO          reduce using rule 77 (d -> d MENOR_IGUAL_QUE e .)
    DECIMAL         reduce using rule 77 (d -> d MENOR_IGUAL_QUE e .)
    CADENA          reduce using rule 77 (d -> d MENOR_IGUAL_QUE e .)
    TRUE            reduce using rule 77 (d -> d MENOR_IGUAL_QUE e .)
    FALSE           reduce using rule 77 (d -> d MENOR_IGUAL_QUE e .)
    L_PAREN         reduce using rule 77 (d -> d MENOR_IGUAL_QUE e .)
    L_CORCHETE      reduce using rule 77 (d -> d MENOR_IGUAL_QUE e .)
    L_LLAVE         reduce using rule 77 (d -> d MENOR_IGUAL_QUE e .)
    $end            reduce using rule 77 (d -> d MENOR_IGUAL_QUE e .)
    R_LLAVE         reduce using rule 77 (d -> d MENOR_IGUAL_QUE e .)
    R_CORCHETE      reduce using rule 77 (d -> d MENOR_IGUAL_QUE e .)
    COMA            reduce using rule 77 (d -> d MENOR_IGUAL_QUE e .)
    MAS             shift and go to state 105
    MENOS           shift and go to state 106

  ! MENOS           [ reduce using rule 77 (d -> d MENOR_IGUAL_QUE e .) ]
  ! MAS             [ reduce using rule 77 (d -> d MENOR_IGUAL_QUE e .) ]
  ! DISTINTO_QUE    [ reduce using rule 81 (d -> e .) ]
  ! MENOR_QUE       [ reduce using rule 81 (d -> e .) ]
  ! MENOR_IGUAL_QUE [ reduce using rule 81 (d -> e .) ]
  ! MAYOR_QUE       [ reduce using rule 81 (d -> e .) ]
  ! MAYOR_IGUAL_QUE [ reduce using rule 81 (d -> e .) ]
  ! TRIPLE_IGUAL    [ reduce using rule 81 (d -> e .) ]
  ! AND             [ reduce using rule 81 (d -> e .) ]
  ! PUNTO           [ reduce using rule 81 (d -> e .) ]
  ! OR              [ reduce using rule 81 (d -> e .) ]


state 153

    (78) d -> d MAYOR_QUE e .
    (82) e -> e . MAS f
    (83) e -> e . MENOS f
    (81) d -> e .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
  ! reduce/reduce conflict for DISTINTO_QUE resolved using rule 78 (d -> d MAYOR_QUE e .)
  ! reduce/reduce conflict for MENOR_QUE resolved using rule 78 (d -> d MAYOR_QUE e .)
  ! reduce/reduce conflict for MENOR_IGUAL_QUE resolved using rule 78 (d -> d MAYOR_QUE e .)
  ! reduce/reduce conflict for MAYOR_QUE resolved using rule 78 (d -> d MAYOR_QUE e .)
  ! reduce/reduce conflict for MAYOR_IGUAL_QUE resolved using rule 78 (d -> d MAYOR_QUE e .)
  ! reduce/reduce conflict for TRIPLE_IGUAL resolved using rule 78 (d -> d MAYOR_QUE e .)
  ! reduce/reduce conflict for AND resolved using rule 78 (d -> d MAYOR_QUE e .)
  ! reduce/reduce conflict for PUNTO resolved using rule 78 (d -> d MAYOR_QUE e .)
  ! reduce/reduce conflict for OR resolved using rule 78 (d -> d MAYOR_QUE e .)
    DISTINTO_QUE    reduce using rule 78 (d -> d MAYOR_QUE e .)
    MENOR_QUE       reduce using rule 78 (d -> d MAYOR_QUE e .)
    MENOR_IGUAL_QUE reduce using rule 78 (d -> d MAYOR_QUE e .)
    MAYOR_QUE       reduce using rule 78 (d -> d MAYOR_QUE e .)
    MAYOR_IGUAL_QUE reduce using rule 78 (d -> d MAYOR_QUE e .)
    TRIPLE_IGUAL    reduce using rule 78 (d -> d MAYOR_QUE e .)
    AND             reduce using rule 78 (d -> d MAYOR_QUE e .)
    PUNTO           reduce using rule 78 (d -> d MAYOR_QUE e .)
    OR              reduce using rule 78 (d -> d MAYOR_QUE e .)
    R_PAREN         reduce using rule 78 (d -> d MAYOR_QUE e .)
    SEMI_COLON      reduce using rule 78 (d -> d MAYOR_QUE e .)
    CONSOLE         reduce using rule 78 (d -> d MAYOR_QUE e .)
    LET             reduce using rule 78 (d -> d MAYOR_QUE e .)
    LITERAL         reduce using rule 78 (d -> d MAYOR_QUE e .)
    IF              reduce using rule 78 (d -> d MAYOR_QUE e .)
    WHILE           reduce using rule 78 (d -> d MAYOR_QUE e .)
    FOR             reduce using rule 78 (d -> d MAYOR_QUE e .)
    INTERFACE       reduce using rule 78 (d -> d MAYOR_QUE e .)
    CONTINUE        reduce using rule 78 (d -> d MAYOR_QUE e .)
    BREAK           reduce using rule 78 (d -> d MAYOR_QUE e .)
    RETURN          reduce using rule 78 (d -> d MAYOR_QUE e .)
    FUNCTION        reduce using rule 78 (d -> d MAYOR_QUE e .)
    TOSTRING        reduce using rule 78 (d -> d MAYOR_QUE e .)
    NOT             reduce using rule 78 (d -> d MAYOR_QUE e .)
    ENTERO          reduce using rule 78 (d -> d MAYOR_QUE e .)
    DECIMAL         reduce using rule 78 (d -> d MAYOR_QUE e .)
    CADENA          reduce using rule 78 (d -> d MAYOR_QUE e .)
    TRUE            reduce using rule 78 (d -> d MAYOR_QUE e .)
    FALSE           reduce using rule 78 (d -> d MAYOR_QUE e .)
    L_PAREN         reduce using rule 78 (d -> d MAYOR_QUE e .)
    L_CORCHETE      reduce using rule 78 (d -> d MAYOR_QUE e .)
    L_LLAVE         reduce using rule 78 (d -> d MAYOR_QUE e .)
    $end            reduce using rule 78 (d -> d MAYOR_QUE e .)
    R_LLAVE         reduce using rule 78 (d -> d MAYOR_QUE e .)
    R_CORCHETE      reduce using rule 78 (d -> d MAYOR_QUE e .)
    COMA            reduce using rule 78 (d -> d MAYOR_QUE e .)
    MAS             shift and go to state 105
    MENOS           shift and go to state 106

  ! MENOS           [ reduce using rule 78 (d -> d MAYOR_QUE e .) ]
  ! MAS             [ reduce using rule 78 (d -> d MAYOR_QUE e .) ]
  ! DISTINTO_QUE    [ reduce using rule 81 (d -> e .) ]
  ! MENOR_QUE       [ reduce using rule 81 (d -> e .) ]
  ! MENOR_IGUAL_QUE [ reduce using rule 81 (d -> e .) ]
  ! MAYOR_QUE       [ reduce using rule 81 (d -> e .) ]
  ! MAYOR_IGUAL_QUE [ reduce using rule 81 (d -> e .) ]
  ! TRIPLE_IGUAL    [ reduce using rule 81 (d -> e .) ]
  ! AND             [ reduce using rule 81 (d -> e .) ]
  ! PUNTO           [ reduce using rule 81 (d -> e .) ]
  ! OR              [ reduce using rule 81 (d -> e .) ]


state 154

    (79) d -> d MAYOR_IGUAL_QUE e .
    (82) e -> e . MAS f
    (83) e -> e . MENOS f
    (81) d -> e .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
  ! reduce/reduce conflict for DISTINTO_QUE resolved using rule 79 (d -> d MAYOR_IGUAL_QUE e .)
  ! reduce/reduce conflict for MENOR_QUE resolved using rule 79 (d -> d MAYOR_IGUAL_QUE e .)
  ! reduce/reduce conflict for MENOR_IGUAL_QUE resolved using rule 79 (d -> d MAYOR_IGUAL_QUE e .)
  ! reduce/reduce conflict for MAYOR_QUE resolved using rule 79 (d -> d MAYOR_IGUAL_QUE e .)
  ! reduce/reduce conflict for MAYOR_IGUAL_QUE resolved using rule 79 (d -> d MAYOR_IGUAL_QUE e .)
  ! reduce/reduce conflict for TRIPLE_IGUAL resolved using rule 79 (d -> d MAYOR_IGUAL_QUE e .)
  ! reduce/reduce conflict for AND resolved using rule 79 (d -> d MAYOR_IGUAL_QUE e .)
  ! reduce/reduce conflict for PUNTO resolved using rule 79 (d -> d MAYOR_IGUAL_QUE e .)
  ! reduce/reduce conflict for OR resolved using rule 79 (d -> d MAYOR_IGUAL_QUE e .)
    DISTINTO_QUE    reduce using rule 79 (d -> d MAYOR_IGUAL_QUE e .)
    MENOR_QUE       reduce using rule 79 (d -> d MAYOR_IGUAL_QUE e .)
    MENOR_IGUAL_QUE reduce using rule 79 (d -> d MAYOR_IGUAL_QUE e .)
    MAYOR_QUE       reduce using rule 79 (d -> d MAYOR_IGUAL_QUE e .)
    MAYOR_IGUAL_QUE reduce using rule 79 (d -> d MAYOR_IGUAL_QUE e .)
    TRIPLE_IGUAL    reduce using rule 79 (d -> d MAYOR_IGUAL_QUE e .)
    AND             reduce using rule 79 (d -> d MAYOR_IGUAL_QUE e .)
    PUNTO           reduce using rule 79 (d -> d MAYOR_IGUAL_QUE e .)
    OR              reduce using rule 79 (d -> d MAYOR_IGUAL_QUE e .)
    R_PAREN         reduce using rule 79 (d -> d MAYOR_IGUAL_QUE e .)
    SEMI_COLON      reduce using rule 79 (d -> d MAYOR_IGUAL_QUE e .)
    CONSOLE         reduce using rule 79 (d -> d MAYOR_IGUAL_QUE e .)
    LET             reduce using rule 79 (d -> d MAYOR_IGUAL_QUE e .)
    LITERAL         reduce using rule 79 (d -> d MAYOR_IGUAL_QUE e .)
    IF              reduce using rule 79 (d -> d MAYOR_IGUAL_QUE e .)
    WHILE           reduce using rule 79 (d -> d MAYOR_IGUAL_QUE e .)
    FOR             reduce using rule 79 (d -> d MAYOR_IGUAL_QUE e .)
    INTERFACE       reduce using rule 79 (d -> d MAYOR_IGUAL_QUE e .)
    CONTINUE        reduce using rule 79 (d -> d MAYOR_IGUAL_QUE e .)
    BREAK           reduce using rule 79 (d -> d MAYOR_IGUAL_QUE e .)
    RETURN          reduce using rule 79 (d -> d MAYOR_IGUAL_QUE e .)
    FUNCTION        reduce using rule 79 (d -> d MAYOR_IGUAL_QUE e .)
    TOSTRING        reduce using rule 79 (d -> d MAYOR_IGUAL_QUE e .)
    NOT             reduce using rule 79 (d -> d MAYOR_IGUAL_QUE e .)
    ENTERO          reduce using rule 79 (d -> d MAYOR_IGUAL_QUE e .)
    DECIMAL         reduce using rule 79 (d -> d MAYOR_IGUAL_QUE e .)
    CADENA          reduce using rule 79 (d -> d MAYOR_IGUAL_QUE e .)
    TRUE            reduce using rule 79 (d -> d MAYOR_IGUAL_QUE e .)
    FALSE           reduce using rule 79 (d -> d MAYOR_IGUAL_QUE e .)
    L_PAREN         reduce using rule 79 (d -> d MAYOR_IGUAL_QUE e .)
    L_CORCHETE      reduce using rule 79 (d -> d MAYOR_IGUAL_QUE e .)
    L_LLAVE         reduce using rule 79 (d -> d MAYOR_IGUAL_QUE e .)
    $end            reduce using rule 79 (d -> d MAYOR_IGUAL_QUE e .)
    R_LLAVE         reduce using rule 79 (d -> d MAYOR_IGUAL_QUE e .)
    R_CORCHETE      reduce using rule 79 (d -> d MAYOR_IGUAL_QUE e .)
    COMA            reduce using rule 79 (d -> d MAYOR_IGUAL_QUE e .)
    MAS             shift and go to state 105
    MENOS           shift and go to state 106

  ! MENOS           [ reduce using rule 79 (d -> d MAYOR_IGUAL_QUE e .) ]
  ! MAS             [ reduce using rule 79 (d -> d MAYOR_IGUAL_QUE e .) ]
  ! DISTINTO_QUE    [ reduce using rule 81 (d -> e .) ]
  ! MENOR_QUE       [ reduce using rule 81 (d -> e .) ]
  ! MENOR_IGUAL_QUE [ reduce using rule 81 (d -> e .) ]
  ! MAYOR_QUE       [ reduce using rule 81 (d -> e .) ]
  ! MAYOR_IGUAL_QUE [ reduce using rule 81 (d -> e .) ]
  ! TRIPLE_IGUAL    [ reduce using rule 81 (d -> e .) ]
  ! AND             [ reduce using rule 81 (d -> e .) ]
  ! PUNTO           [ reduce using rule 81 (d -> e .) ]
  ! OR              [ reduce using rule 81 (d -> e .) ]


state 155

    (80) d -> d TRIPLE_IGUAL e .
    (82) e -> e . MAS f
    (83) e -> e . MENOS f
    (81) d -> e .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
  ! reduce/reduce conflict for DISTINTO_QUE resolved using rule 80 (d -> d TRIPLE_IGUAL e .)
  ! reduce/reduce conflict for MENOR_QUE resolved using rule 80 (d -> d TRIPLE_IGUAL e .)
  ! reduce/reduce conflict for MENOR_IGUAL_QUE resolved using rule 80 (d -> d TRIPLE_IGUAL e .)
  ! reduce/reduce conflict for MAYOR_QUE resolved using rule 80 (d -> d TRIPLE_IGUAL e .)
  ! reduce/reduce conflict for MAYOR_IGUAL_QUE resolved using rule 80 (d -> d TRIPLE_IGUAL e .)
  ! reduce/reduce conflict for TRIPLE_IGUAL resolved using rule 80 (d -> d TRIPLE_IGUAL e .)
  ! reduce/reduce conflict for AND resolved using rule 80 (d -> d TRIPLE_IGUAL e .)
  ! reduce/reduce conflict for PUNTO resolved using rule 80 (d -> d TRIPLE_IGUAL e .)
  ! reduce/reduce conflict for OR resolved using rule 80 (d -> d TRIPLE_IGUAL e .)
    DISTINTO_QUE    reduce using rule 80 (d -> d TRIPLE_IGUAL e .)
    MENOR_QUE       reduce using rule 80 (d -> d TRIPLE_IGUAL e .)
    MENOR_IGUAL_QUE reduce using rule 80 (d -> d TRIPLE_IGUAL e .)
    MAYOR_QUE       reduce using rule 80 (d -> d TRIPLE_IGUAL e .)
    MAYOR_IGUAL_QUE reduce using rule 80 (d -> d TRIPLE_IGUAL e .)
    TRIPLE_IGUAL    reduce using rule 80 (d -> d TRIPLE_IGUAL e .)
    AND             reduce using rule 80 (d -> d TRIPLE_IGUAL e .)
    PUNTO           reduce using rule 80 (d -> d TRIPLE_IGUAL e .)
    OR              reduce using rule 80 (d -> d TRIPLE_IGUAL e .)
    R_PAREN         reduce using rule 80 (d -> d TRIPLE_IGUAL e .)
    SEMI_COLON      reduce using rule 80 (d -> d TRIPLE_IGUAL e .)
    CONSOLE         reduce using rule 80 (d -> d TRIPLE_IGUAL e .)
    LET             reduce using rule 80 (d -> d TRIPLE_IGUAL e .)
    LITERAL         reduce using rule 80 (d -> d TRIPLE_IGUAL e .)
    IF              reduce using rule 80 (d -> d TRIPLE_IGUAL e .)
    WHILE           reduce using rule 80 (d -> d TRIPLE_IGUAL e .)
    FOR             reduce using rule 80 (d -> d TRIPLE_IGUAL e .)
    INTERFACE       reduce using rule 80 (d -> d TRIPLE_IGUAL e .)
    CONTINUE        reduce using rule 80 (d -> d TRIPLE_IGUAL e .)
    BREAK           reduce using rule 80 (d -> d TRIPLE_IGUAL e .)
    RETURN          reduce using rule 80 (d -> d TRIPLE_IGUAL e .)
    FUNCTION        reduce using rule 80 (d -> d TRIPLE_IGUAL e .)
    TOSTRING        reduce using rule 80 (d -> d TRIPLE_IGUAL e .)
    NOT             reduce using rule 80 (d -> d TRIPLE_IGUAL e .)
    ENTERO          reduce using rule 80 (d -> d TRIPLE_IGUAL e .)
    DECIMAL         reduce using rule 80 (d -> d TRIPLE_IGUAL e .)
    CADENA          reduce using rule 80 (d -> d TRIPLE_IGUAL e .)
    TRUE            reduce using rule 80 (d -> d TRIPLE_IGUAL e .)
    FALSE           reduce using rule 80 (d -> d TRIPLE_IGUAL e .)
    L_PAREN         reduce using rule 80 (d -> d TRIPLE_IGUAL e .)
    L_CORCHETE      reduce using rule 80 (d -> d TRIPLE_IGUAL e .)
    L_LLAVE         reduce using rule 80 (d -> d TRIPLE_IGUAL e .)
    $end            reduce using rule 80 (d -> d TRIPLE_IGUAL e .)
    R_LLAVE         reduce using rule 80 (d -> d TRIPLE_IGUAL e .)
    R_CORCHETE      reduce using rule 80 (d -> d TRIPLE_IGUAL e .)
    COMA            reduce using rule 80 (d -> d TRIPLE_IGUAL e .)
    MAS             shift and go to state 105
    MENOS           shift and go to state 106

  ! MENOS           [ reduce using rule 80 (d -> d TRIPLE_IGUAL e .) ]
  ! MAS             [ reduce using rule 80 (d -> d TRIPLE_IGUAL e .) ]
  ! DISTINTO_QUE    [ reduce using rule 81 (d -> e .) ]
  ! MENOR_QUE       [ reduce using rule 81 (d -> e .) ]
  ! MENOR_IGUAL_QUE [ reduce using rule 81 (d -> e .) ]
  ! MAYOR_QUE       [ reduce using rule 81 (d -> e .) ]
  ! MAYOR_IGUAL_QUE [ reduce using rule 81 (d -> e .) ]
  ! TRIPLE_IGUAL    [ reduce using rule 81 (d -> e .) ]
  ! AND             [ reduce using rule 81 (d -> e .) ]
  ! PUNTO           [ reduce using rule 81 (d -> e .) ]
  ! OR              [ reduce using rule 81 (d -> e .) ]


state 156

    (82) e -> e MAS f .
    (84) e -> f .

  ! reduce/reduce conflict for MAS resolved using rule 82 (e -> e MAS f .)
  ! reduce/reduce conflict for MENOS resolved using rule 82 (e -> e MAS f .)
  ! reduce/reduce conflict for DISTINTO_QUE resolved using rule 82 (e -> e MAS f .)
  ! reduce/reduce conflict for MENOR_QUE resolved using rule 82 (e -> e MAS f .)
  ! reduce/reduce conflict for MENOR_IGUAL_QUE resolved using rule 82 (e -> e MAS f .)
  ! reduce/reduce conflict for MAYOR_QUE resolved using rule 82 (e -> e MAS f .)
  ! reduce/reduce conflict for MAYOR_IGUAL_QUE resolved using rule 82 (e -> e MAS f .)
  ! reduce/reduce conflict for TRIPLE_IGUAL resolved using rule 82 (e -> e MAS f .)
  ! reduce/reduce conflict for AND resolved using rule 82 (e -> e MAS f .)
  ! reduce/reduce conflict for PUNTO resolved using rule 82 (e -> e MAS f .)
  ! reduce/reduce conflict for OR resolved using rule 82 (e -> e MAS f .)
    MAS             reduce using rule 82 (e -> e MAS f .)
    MENOS           reduce using rule 82 (e -> e MAS f .)
    DISTINTO_QUE    reduce using rule 82 (e -> e MAS f .)
    MENOR_QUE       reduce using rule 82 (e -> e MAS f .)
    MENOR_IGUAL_QUE reduce using rule 82 (e -> e MAS f .)
    MAYOR_QUE       reduce using rule 82 (e -> e MAS f .)
    MAYOR_IGUAL_QUE reduce using rule 82 (e -> e MAS f .)
    TRIPLE_IGUAL    reduce using rule 82 (e -> e MAS f .)
    AND             reduce using rule 82 (e -> e MAS f .)
    PUNTO           reduce using rule 82 (e -> e MAS f .)
    OR              reduce using rule 82 (e -> e MAS f .)
    R_PAREN         reduce using rule 82 (e -> e MAS f .)
    SEMI_COLON      reduce using rule 82 (e -> e MAS f .)
    CONSOLE         reduce using rule 82 (e -> e MAS f .)
    LET             reduce using rule 82 (e -> e MAS f .)
    LITERAL         reduce using rule 82 (e -> e MAS f .)
    IF              reduce using rule 82 (e -> e MAS f .)
    WHILE           reduce using rule 82 (e -> e MAS f .)
    FOR             reduce using rule 82 (e -> e MAS f .)
    INTERFACE       reduce using rule 82 (e -> e MAS f .)
    CONTINUE        reduce using rule 82 (e -> e MAS f .)
    BREAK           reduce using rule 82 (e -> e MAS f .)
    RETURN          reduce using rule 82 (e -> e MAS f .)
    FUNCTION        reduce using rule 82 (e -> e MAS f .)
    TOSTRING        reduce using rule 82 (e -> e MAS f .)
    NOT             reduce using rule 82 (e -> e MAS f .)
    ENTERO          reduce using rule 82 (e -> e MAS f .)
    DECIMAL         reduce using rule 82 (e -> e MAS f .)
    CADENA          reduce using rule 82 (e -> e MAS f .)
    TRUE            reduce using rule 82 (e -> e MAS f .)
    FALSE           reduce using rule 82 (e -> e MAS f .)
    L_PAREN         reduce using rule 82 (e -> e MAS f .)
    L_CORCHETE      reduce using rule 82 (e -> e MAS f .)
    L_LLAVE         reduce using rule 82 (e -> e MAS f .)
    $end            reduce using rule 82 (e -> e MAS f .)
    R_LLAVE         reduce using rule 82 (e -> e MAS f .)
    R_CORCHETE      reduce using rule 82 (e -> e MAS f .)
    COMA            reduce using rule 82 (e -> e MAS f .)

  ! MAS             [ reduce using rule 84 (e -> f .) ]
  ! MENOS           [ reduce using rule 84 (e -> f .) ]
  ! DISTINTO_QUE    [ reduce using rule 84 (e -> f .) ]
  ! MENOR_QUE       [ reduce using rule 84 (e -> f .) ]
  ! MENOR_IGUAL_QUE [ reduce using rule 84 (e -> f .) ]
  ! MAYOR_QUE       [ reduce using rule 84 (e -> f .) ]
  ! MAYOR_IGUAL_QUE [ reduce using rule 84 (e -> f .) ]
  ! TRIPLE_IGUAL    [ reduce using rule 84 (e -> f .) ]
  ! AND             [ reduce using rule 84 (e -> f .) ]
  ! PUNTO           [ reduce using rule 84 (e -> f .) ]
  ! OR              [ reduce using rule 84 (e -> f .) ]


state 157

    (83) e -> e MENOS f .
    (84) e -> f .

  ! reduce/reduce conflict for MAS resolved using rule 83 (e -> e MENOS f .)
  ! reduce/reduce conflict for MENOS resolved using rule 83 (e -> e MENOS f .)
  ! reduce/reduce conflict for DISTINTO_QUE resolved using rule 83 (e -> e MENOS f .)
  ! reduce/reduce conflict for MENOR_QUE resolved using rule 83 (e -> e MENOS f .)
  ! reduce/reduce conflict for MENOR_IGUAL_QUE resolved using rule 83 (e -> e MENOS f .)
  ! reduce/reduce conflict for MAYOR_QUE resolved using rule 83 (e -> e MENOS f .)
  ! reduce/reduce conflict for MAYOR_IGUAL_QUE resolved using rule 83 (e -> e MENOS f .)
  ! reduce/reduce conflict for TRIPLE_IGUAL resolved using rule 83 (e -> e MENOS f .)
  ! reduce/reduce conflict for AND resolved using rule 83 (e -> e MENOS f .)
  ! reduce/reduce conflict for PUNTO resolved using rule 83 (e -> e MENOS f .)
  ! reduce/reduce conflict for OR resolved using rule 83 (e -> e MENOS f .)
    MAS             reduce using rule 83 (e -> e MENOS f .)
    MENOS           reduce using rule 83 (e -> e MENOS f .)
    DISTINTO_QUE    reduce using rule 83 (e -> e MENOS f .)
    MENOR_QUE       reduce using rule 83 (e -> e MENOS f .)
    MENOR_IGUAL_QUE reduce using rule 83 (e -> e MENOS f .)
    MAYOR_QUE       reduce using rule 83 (e -> e MENOS f .)
    MAYOR_IGUAL_QUE reduce using rule 83 (e -> e MENOS f .)
    TRIPLE_IGUAL    reduce using rule 83 (e -> e MENOS f .)
    AND             reduce using rule 83 (e -> e MENOS f .)
    PUNTO           reduce using rule 83 (e -> e MENOS f .)
    OR              reduce using rule 83 (e -> e MENOS f .)
    R_PAREN         reduce using rule 83 (e -> e MENOS f .)
    SEMI_COLON      reduce using rule 83 (e -> e MENOS f .)
    CONSOLE         reduce using rule 83 (e -> e MENOS f .)
    LET             reduce using rule 83 (e -> e MENOS f .)
    LITERAL         reduce using rule 83 (e -> e MENOS f .)
    IF              reduce using rule 83 (e -> e MENOS f .)
    WHILE           reduce using rule 83 (e -> e MENOS f .)
    FOR             reduce using rule 83 (e -> e MENOS f .)
    INTERFACE       reduce using rule 83 (e -> e MENOS f .)
    CONTINUE        reduce using rule 83 (e -> e MENOS f .)
    BREAK           reduce using rule 83 (e -> e MENOS f .)
    RETURN          reduce using rule 83 (e -> e MENOS f .)
    FUNCTION        reduce using rule 83 (e -> e MENOS f .)
    TOSTRING        reduce using rule 83 (e -> e MENOS f .)
    NOT             reduce using rule 83 (e -> e MENOS f .)
    ENTERO          reduce using rule 83 (e -> e MENOS f .)
    DECIMAL         reduce using rule 83 (e -> e MENOS f .)
    CADENA          reduce using rule 83 (e -> e MENOS f .)
    TRUE            reduce using rule 83 (e -> e MENOS f .)
    FALSE           reduce using rule 83 (e -> e MENOS f .)
    L_PAREN         reduce using rule 83 (e -> e MENOS f .)
    L_CORCHETE      reduce using rule 83 (e -> e MENOS f .)
    L_LLAVE         reduce using rule 83 (e -> e MENOS f .)
    $end            reduce using rule 83 (e -> e MENOS f .)
    R_LLAVE         reduce using rule 83 (e -> e MENOS f .)
    R_CORCHETE      reduce using rule 83 (e -> e MENOS f .)
    COMA            reduce using rule 83 (e -> e MENOS f .)

  ! MAS             [ reduce using rule 84 (e -> f .) ]
  ! MENOS           [ reduce using rule 84 (e -> f .) ]
  ! DISTINTO_QUE    [ reduce using rule 84 (e -> f .) ]
  ! MENOR_QUE       [ reduce using rule 84 (e -> f .) ]
  ! MENOR_IGUAL_QUE [ reduce using rule 84 (e -> f .) ]
  ! MAYOR_QUE       [ reduce using rule 84 (e -> f .) ]
  ! MAYOR_IGUAL_QUE [ reduce using rule 84 (e -> f .) ]
  ! TRIPLE_IGUAL    [ reduce using rule 84 (e -> f .) ]
  ! AND             [ reduce using rule 84 (e -> f .) ]
  ! PUNTO           [ reduce using rule 84 (e -> f .) ]
  ! OR              [ reduce using rule 84 (e -> f .) ]


state 158

    (88) g -> g TIMES h .
    (92) g -> h .

  ! reduce/reduce conflict for TIMES resolved using rule 88 (g -> g TIMES h .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 88 (g -> g TIMES h .)
  ! reduce/reduce conflict for MOD resolved using rule 88 (g -> g TIMES h .)
  ! reduce/reduce conflict for POTENCIA resolved using rule 88 (g -> g TIMES h .)
  ! reduce/reduce conflict for MAS resolved using rule 88 (g -> g TIMES h .)
  ! reduce/reduce conflict for MENOS resolved using rule 88 (g -> g TIMES h .)
  ! reduce/reduce conflict for DISTINTO_QUE resolved using rule 88 (g -> g TIMES h .)
  ! reduce/reduce conflict for MENOR_QUE resolved using rule 88 (g -> g TIMES h .)
  ! reduce/reduce conflict for MENOR_IGUAL_QUE resolved using rule 88 (g -> g TIMES h .)
  ! reduce/reduce conflict for MAYOR_QUE resolved using rule 88 (g -> g TIMES h .)
  ! reduce/reduce conflict for MAYOR_IGUAL_QUE resolved using rule 88 (g -> g TIMES h .)
  ! reduce/reduce conflict for TRIPLE_IGUAL resolved using rule 88 (g -> g TIMES h .)
  ! reduce/reduce conflict for AND resolved using rule 88 (g -> g TIMES h .)
  ! reduce/reduce conflict for PUNTO resolved using rule 88 (g -> g TIMES h .)
  ! reduce/reduce conflict for OR resolved using rule 88 (g -> g TIMES h .)
    TIMES           reduce using rule 88 (g -> g TIMES h .)
    DIVIDE          reduce using rule 88 (g -> g TIMES h .)
    MOD             reduce using rule 88 (g -> g TIMES h .)
    POTENCIA        reduce using rule 88 (g -> g TIMES h .)
    MAS             reduce using rule 88 (g -> g TIMES h .)
    MENOS           reduce using rule 88 (g -> g TIMES h .)
    DISTINTO_QUE    reduce using rule 88 (g -> g TIMES h .)
    MENOR_QUE       reduce using rule 88 (g -> g TIMES h .)
    MENOR_IGUAL_QUE reduce using rule 88 (g -> g TIMES h .)
    MAYOR_QUE       reduce using rule 88 (g -> g TIMES h .)
    MAYOR_IGUAL_QUE reduce using rule 88 (g -> g TIMES h .)
    TRIPLE_IGUAL    reduce using rule 88 (g -> g TIMES h .)
    AND             reduce using rule 88 (g -> g TIMES h .)
    PUNTO           reduce using rule 88 (g -> g TIMES h .)
    OR              reduce using rule 88 (g -> g TIMES h .)
    R_PAREN         reduce using rule 88 (g -> g TIMES h .)
    SEMI_COLON      reduce using rule 88 (g -> g TIMES h .)
    CONSOLE         reduce using rule 88 (g -> g TIMES h .)
    LET             reduce using rule 88 (g -> g TIMES h .)
    LITERAL         reduce using rule 88 (g -> g TIMES h .)
    IF              reduce using rule 88 (g -> g TIMES h .)
    WHILE           reduce using rule 88 (g -> g TIMES h .)
    FOR             reduce using rule 88 (g -> g TIMES h .)
    INTERFACE       reduce using rule 88 (g -> g TIMES h .)
    CONTINUE        reduce using rule 88 (g -> g TIMES h .)
    BREAK           reduce using rule 88 (g -> g TIMES h .)
    RETURN          reduce using rule 88 (g -> g TIMES h .)
    FUNCTION        reduce using rule 88 (g -> g TIMES h .)
    TOSTRING        reduce using rule 88 (g -> g TIMES h .)
    NOT             reduce using rule 88 (g -> g TIMES h .)
    ENTERO          reduce using rule 88 (g -> g TIMES h .)
    DECIMAL         reduce using rule 88 (g -> g TIMES h .)
    CADENA          reduce using rule 88 (g -> g TIMES h .)
    TRUE            reduce using rule 88 (g -> g TIMES h .)
    FALSE           reduce using rule 88 (g -> g TIMES h .)
    L_PAREN         reduce using rule 88 (g -> g TIMES h .)
    L_CORCHETE      reduce using rule 88 (g -> g TIMES h .)
    L_LLAVE         reduce using rule 88 (g -> g TIMES h .)
    $end            reduce using rule 88 (g -> g TIMES h .)
    R_LLAVE         reduce using rule 88 (g -> g TIMES h .)
    R_CORCHETE      reduce using rule 88 (g -> g TIMES h .)
    COMA            reduce using rule 88 (g -> g TIMES h .)

  ! TIMES           [ reduce using rule 92 (g -> h .) ]
  ! DIVIDE          [ reduce using rule 92 (g -> h .) ]
  ! MOD             [ reduce using rule 92 (g -> h .) ]
  ! POTENCIA        [ reduce using rule 92 (g -> h .) ]
  ! MAS             [ reduce using rule 92 (g -> h .) ]
  ! MENOS           [ reduce using rule 92 (g -> h .) ]
  ! DISTINTO_QUE    [ reduce using rule 92 (g -> h .) ]
  ! MENOR_QUE       [ reduce using rule 92 (g -> h .) ]
  ! MENOR_IGUAL_QUE [ reduce using rule 92 (g -> h .) ]
  ! MAYOR_QUE       [ reduce using rule 92 (g -> h .) ]
  ! MAYOR_IGUAL_QUE [ reduce using rule 92 (g -> h .) ]
  ! TRIPLE_IGUAL    [ reduce using rule 92 (g -> h .) ]
  ! AND             [ reduce using rule 92 (g -> h .) ]
  ! PUNTO           [ reduce using rule 92 (g -> h .) ]
  ! OR              [ reduce using rule 92 (g -> h .) ]


state 159

    (89) g -> g DIVIDE h .
    (92) g -> h .

  ! reduce/reduce conflict for TIMES resolved using rule 89 (g -> g DIVIDE h .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 89 (g -> g DIVIDE h .)
  ! reduce/reduce conflict for MOD resolved using rule 89 (g -> g DIVIDE h .)
  ! reduce/reduce conflict for POTENCIA resolved using rule 89 (g -> g DIVIDE h .)
  ! reduce/reduce conflict for MAS resolved using rule 89 (g -> g DIVIDE h .)
  ! reduce/reduce conflict for MENOS resolved using rule 89 (g -> g DIVIDE h .)
  ! reduce/reduce conflict for DISTINTO_QUE resolved using rule 89 (g -> g DIVIDE h .)
  ! reduce/reduce conflict for MENOR_QUE resolved using rule 89 (g -> g DIVIDE h .)
  ! reduce/reduce conflict for MENOR_IGUAL_QUE resolved using rule 89 (g -> g DIVIDE h .)
  ! reduce/reduce conflict for MAYOR_QUE resolved using rule 89 (g -> g DIVIDE h .)
  ! reduce/reduce conflict for MAYOR_IGUAL_QUE resolved using rule 89 (g -> g DIVIDE h .)
  ! reduce/reduce conflict for TRIPLE_IGUAL resolved using rule 89 (g -> g DIVIDE h .)
  ! reduce/reduce conflict for AND resolved using rule 89 (g -> g DIVIDE h .)
  ! reduce/reduce conflict for PUNTO resolved using rule 89 (g -> g DIVIDE h .)
  ! reduce/reduce conflict for OR resolved using rule 89 (g -> g DIVIDE h .)
    TIMES           reduce using rule 89 (g -> g DIVIDE h .)
    DIVIDE          reduce using rule 89 (g -> g DIVIDE h .)
    MOD             reduce using rule 89 (g -> g DIVIDE h .)
    POTENCIA        reduce using rule 89 (g -> g DIVIDE h .)
    MAS             reduce using rule 89 (g -> g DIVIDE h .)
    MENOS           reduce using rule 89 (g -> g DIVIDE h .)
    DISTINTO_QUE    reduce using rule 89 (g -> g DIVIDE h .)
    MENOR_QUE       reduce using rule 89 (g -> g DIVIDE h .)
    MENOR_IGUAL_QUE reduce using rule 89 (g -> g DIVIDE h .)
    MAYOR_QUE       reduce using rule 89 (g -> g DIVIDE h .)
    MAYOR_IGUAL_QUE reduce using rule 89 (g -> g DIVIDE h .)
    TRIPLE_IGUAL    reduce using rule 89 (g -> g DIVIDE h .)
    AND             reduce using rule 89 (g -> g DIVIDE h .)
    PUNTO           reduce using rule 89 (g -> g DIVIDE h .)
    OR              reduce using rule 89 (g -> g DIVIDE h .)
    R_PAREN         reduce using rule 89 (g -> g DIVIDE h .)
    SEMI_COLON      reduce using rule 89 (g -> g DIVIDE h .)
    CONSOLE         reduce using rule 89 (g -> g DIVIDE h .)
    LET             reduce using rule 89 (g -> g DIVIDE h .)
    LITERAL         reduce using rule 89 (g -> g DIVIDE h .)
    IF              reduce using rule 89 (g -> g DIVIDE h .)
    WHILE           reduce using rule 89 (g -> g DIVIDE h .)
    FOR             reduce using rule 89 (g -> g DIVIDE h .)
    INTERFACE       reduce using rule 89 (g -> g DIVIDE h .)
    CONTINUE        reduce using rule 89 (g -> g DIVIDE h .)
    BREAK           reduce using rule 89 (g -> g DIVIDE h .)
    RETURN          reduce using rule 89 (g -> g DIVIDE h .)
    FUNCTION        reduce using rule 89 (g -> g DIVIDE h .)
    TOSTRING        reduce using rule 89 (g -> g DIVIDE h .)
    NOT             reduce using rule 89 (g -> g DIVIDE h .)
    ENTERO          reduce using rule 89 (g -> g DIVIDE h .)
    DECIMAL         reduce using rule 89 (g -> g DIVIDE h .)
    CADENA          reduce using rule 89 (g -> g DIVIDE h .)
    TRUE            reduce using rule 89 (g -> g DIVIDE h .)
    FALSE           reduce using rule 89 (g -> g DIVIDE h .)
    L_PAREN         reduce using rule 89 (g -> g DIVIDE h .)
    L_CORCHETE      reduce using rule 89 (g -> g DIVIDE h .)
    L_LLAVE         reduce using rule 89 (g -> g DIVIDE h .)
    $end            reduce using rule 89 (g -> g DIVIDE h .)
    R_LLAVE         reduce using rule 89 (g -> g DIVIDE h .)
    R_CORCHETE      reduce using rule 89 (g -> g DIVIDE h .)
    COMA            reduce using rule 89 (g -> g DIVIDE h .)

  ! TIMES           [ reduce using rule 92 (g -> h .) ]
  ! DIVIDE          [ reduce using rule 92 (g -> h .) ]
  ! MOD             [ reduce using rule 92 (g -> h .) ]
  ! POTENCIA        [ reduce using rule 92 (g -> h .) ]
  ! MAS             [ reduce using rule 92 (g -> h .) ]
  ! MENOS           [ reduce using rule 92 (g -> h .) ]
  ! DISTINTO_QUE    [ reduce using rule 92 (g -> h .) ]
  ! MENOR_QUE       [ reduce using rule 92 (g -> h .) ]
  ! MENOR_IGUAL_QUE [ reduce using rule 92 (g -> h .) ]
  ! MAYOR_QUE       [ reduce using rule 92 (g -> h .) ]
  ! MAYOR_IGUAL_QUE [ reduce using rule 92 (g -> h .) ]
  ! TRIPLE_IGUAL    [ reduce using rule 92 (g -> h .) ]
  ! AND             [ reduce using rule 92 (g -> h .) ]
  ! PUNTO           [ reduce using rule 92 (g -> h .) ]
  ! OR              [ reduce using rule 92 (g -> h .) ]


state 160

    (90) g -> g MOD h .
    (92) g -> h .

  ! reduce/reduce conflict for TIMES resolved using rule 90 (g -> g MOD h .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 90 (g -> g MOD h .)
  ! reduce/reduce conflict for MOD resolved using rule 90 (g -> g MOD h .)
  ! reduce/reduce conflict for POTENCIA resolved using rule 90 (g -> g MOD h .)
  ! reduce/reduce conflict for MAS resolved using rule 90 (g -> g MOD h .)
  ! reduce/reduce conflict for MENOS resolved using rule 90 (g -> g MOD h .)
  ! reduce/reduce conflict for DISTINTO_QUE resolved using rule 90 (g -> g MOD h .)
  ! reduce/reduce conflict for MENOR_QUE resolved using rule 90 (g -> g MOD h .)
  ! reduce/reduce conflict for MENOR_IGUAL_QUE resolved using rule 90 (g -> g MOD h .)
  ! reduce/reduce conflict for MAYOR_QUE resolved using rule 90 (g -> g MOD h .)
  ! reduce/reduce conflict for MAYOR_IGUAL_QUE resolved using rule 90 (g -> g MOD h .)
  ! reduce/reduce conflict for TRIPLE_IGUAL resolved using rule 90 (g -> g MOD h .)
  ! reduce/reduce conflict for AND resolved using rule 90 (g -> g MOD h .)
  ! reduce/reduce conflict for PUNTO resolved using rule 90 (g -> g MOD h .)
  ! reduce/reduce conflict for OR resolved using rule 90 (g -> g MOD h .)
    TIMES           reduce using rule 90 (g -> g MOD h .)
    DIVIDE          reduce using rule 90 (g -> g MOD h .)
    MOD             reduce using rule 90 (g -> g MOD h .)
    POTENCIA        reduce using rule 90 (g -> g MOD h .)
    MAS             reduce using rule 90 (g -> g MOD h .)
    MENOS           reduce using rule 90 (g -> g MOD h .)
    DISTINTO_QUE    reduce using rule 90 (g -> g MOD h .)
    MENOR_QUE       reduce using rule 90 (g -> g MOD h .)
    MENOR_IGUAL_QUE reduce using rule 90 (g -> g MOD h .)
    MAYOR_QUE       reduce using rule 90 (g -> g MOD h .)
    MAYOR_IGUAL_QUE reduce using rule 90 (g -> g MOD h .)
    TRIPLE_IGUAL    reduce using rule 90 (g -> g MOD h .)
    AND             reduce using rule 90 (g -> g MOD h .)
    PUNTO           reduce using rule 90 (g -> g MOD h .)
    OR              reduce using rule 90 (g -> g MOD h .)
    R_PAREN         reduce using rule 90 (g -> g MOD h .)
    SEMI_COLON      reduce using rule 90 (g -> g MOD h .)
    CONSOLE         reduce using rule 90 (g -> g MOD h .)
    LET             reduce using rule 90 (g -> g MOD h .)
    LITERAL         reduce using rule 90 (g -> g MOD h .)
    IF              reduce using rule 90 (g -> g MOD h .)
    WHILE           reduce using rule 90 (g -> g MOD h .)
    FOR             reduce using rule 90 (g -> g MOD h .)
    INTERFACE       reduce using rule 90 (g -> g MOD h .)
    CONTINUE        reduce using rule 90 (g -> g MOD h .)
    BREAK           reduce using rule 90 (g -> g MOD h .)
    RETURN          reduce using rule 90 (g -> g MOD h .)
    FUNCTION        reduce using rule 90 (g -> g MOD h .)
    TOSTRING        reduce using rule 90 (g -> g MOD h .)
    NOT             reduce using rule 90 (g -> g MOD h .)
    ENTERO          reduce using rule 90 (g -> g MOD h .)
    DECIMAL         reduce using rule 90 (g -> g MOD h .)
    CADENA          reduce using rule 90 (g -> g MOD h .)
    TRUE            reduce using rule 90 (g -> g MOD h .)
    FALSE           reduce using rule 90 (g -> g MOD h .)
    L_PAREN         reduce using rule 90 (g -> g MOD h .)
    L_CORCHETE      reduce using rule 90 (g -> g MOD h .)
    L_LLAVE         reduce using rule 90 (g -> g MOD h .)
    $end            reduce using rule 90 (g -> g MOD h .)
    R_LLAVE         reduce using rule 90 (g -> g MOD h .)
    R_CORCHETE      reduce using rule 90 (g -> g MOD h .)
    COMA            reduce using rule 90 (g -> g MOD h .)

  ! TIMES           [ reduce using rule 92 (g -> h .) ]
  ! DIVIDE          [ reduce using rule 92 (g -> h .) ]
  ! MOD             [ reduce using rule 92 (g -> h .) ]
  ! POTENCIA        [ reduce using rule 92 (g -> h .) ]
  ! MAS             [ reduce using rule 92 (g -> h .) ]
  ! MENOS           [ reduce using rule 92 (g -> h .) ]
  ! DISTINTO_QUE    [ reduce using rule 92 (g -> h .) ]
  ! MENOR_QUE       [ reduce using rule 92 (g -> h .) ]
  ! MENOR_IGUAL_QUE [ reduce using rule 92 (g -> h .) ]
  ! MAYOR_QUE       [ reduce using rule 92 (g -> h .) ]
  ! MAYOR_IGUAL_QUE [ reduce using rule 92 (g -> h .) ]
  ! TRIPLE_IGUAL    [ reduce using rule 92 (g -> h .) ]
  ! AND             [ reduce using rule 92 (g -> h .) ]
  ! PUNTO           [ reduce using rule 92 (g -> h .) ]
  ! OR              [ reduce using rule 92 (g -> h .) ]


state 161

    (91) g -> g POTENCIA h .
    (92) g -> h .

  ! reduce/reduce conflict for TIMES resolved using rule 91 (g -> g POTENCIA h .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 91 (g -> g POTENCIA h .)
  ! reduce/reduce conflict for MOD resolved using rule 91 (g -> g POTENCIA h .)
  ! reduce/reduce conflict for POTENCIA resolved using rule 91 (g -> g POTENCIA h .)
  ! reduce/reduce conflict for MAS resolved using rule 91 (g -> g POTENCIA h .)
  ! reduce/reduce conflict for MENOS resolved using rule 91 (g -> g POTENCIA h .)
  ! reduce/reduce conflict for DISTINTO_QUE resolved using rule 91 (g -> g POTENCIA h .)
  ! reduce/reduce conflict for MENOR_QUE resolved using rule 91 (g -> g POTENCIA h .)
  ! reduce/reduce conflict for MENOR_IGUAL_QUE resolved using rule 91 (g -> g POTENCIA h .)
  ! reduce/reduce conflict for MAYOR_QUE resolved using rule 91 (g -> g POTENCIA h .)
  ! reduce/reduce conflict for MAYOR_IGUAL_QUE resolved using rule 91 (g -> g POTENCIA h .)
  ! reduce/reduce conflict for TRIPLE_IGUAL resolved using rule 91 (g -> g POTENCIA h .)
  ! reduce/reduce conflict for AND resolved using rule 91 (g -> g POTENCIA h .)
  ! reduce/reduce conflict for PUNTO resolved using rule 91 (g -> g POTENCIA h .)
  ! reduce/reduce conflict for OR resolved using rule 91 (g -> g POTENCIA h .)
    TIMES           reduce using rule 91 (g -> g POTENCIA h .)
    DIVIDE          reduce using rule 91 (g -> g POTENCIA h .)
    MOD             reduce using rule 91 (g -> g POTENCIA h .)
    POTENCIA        reduce using rule 91 (g -> g POTENCIA h .)
    MAS             reduce using rule 91 (g -> g POTENCIA h .)
    MENOS           reduce using rule 91 (g -> g POTENCIA h .)
    DISTINTO_QUE    reduce using rule 91 (g -> g POTENCIA h .)
    MENOR_QUE       reduce using rule 91 (g -> g POTENCIA h .)
    MENOR_IGUAL_QUE reduce using rule 91 (g -> g POTENCIA h .)
    MAYOR_QUE       reduce using rule 91 (g -> g POTENCIA h .)
    MAYOR_IGUAL_QUE reduce using rule 91 (g -> g POTENCIA h .)
    TRIPLE_IGUAL    reduce using rule 91 (g -> g POTENCIA h .)
    AND             reduce using rule 91 (g -> g POTENCIA h .)
    PUNTO           reduce using rule 91 (g -> g POTENCIA h .)
    OR              reduce using rule 91 (g -> g POTENCIA h .)
    R_PAREN         reduce using rule 91 (g -> g POTENCIA h .)
    SEMI_COLON      reduce using rule 91 (g -> g POTENCIA h .)
    CONSOLE         reduce using rule 91 (g -> g POTENCIA h .)
    LET             reduce using rule 91 (g -> g POTENCIA h .)
    LITERAL         reduce using rule 91 (g -> g POTENCIA h .)
    IF              reduce using rule 91 (g -> g POTENCIA h .)
    WHILE           reduce using rule 91 (g -> g POTENCIA h .)
    FOR             reduce using rule 91 (g -> g POTENCIA h .)
    INTERFACE       reduce using rule 91 (g -> g POTENCIA h .)
    CONTINUE        reduce using rule 91 (g -> g POTENCIA h .)
    BREAK           reduce using rule 91 (g -> g POTENCIA h .)
    RETURN          reduce using rule 91 (g -> g POTENCIA h .)
    FUNCTION        reduce using rule 91 (g -> g POTENCIA h .)
    TOSTRING        reduce using rule 91 (g -> g POTENCIA h .)
    NOT             reduce using rule 91 (g -> g POTENCIA h .)
    ENTERO          reduce using rule 91 (g -> g POTENCIA h .)
    DECIMAL         reduce using rule 91 (g -> g POTENCIA h .)
    CADENA          reduce using rule 91 (g -> g POTENCIA h .)
    TRUE            reduce using rule 91 (g -> g POTENCIA h .)
    FALSE           reduce using rule 91 (g -> g POTENCIA h .)
    L_PAREN         reduce using rule 91 (g -> g POTENCIA h .)
    L_CORCHETE      reduce using rule 91 (g -> g POTENCIA h .)
    L_LLAVE         reduce using rule 91 (g -> g POTENCIA h .)
    $end            reduce using rule 91 (g -> g POTENCIA h .)
    R_LLAVE         reduce using rule 91 (g -> g POTENCIA h .)
    R_CORCHETE      reduce using rule 91 (g -> g POTENCIA h .)
    COMA            reduce using rule 91 (g -> g POTENCIA h .)

  ! TIMES           [ reduce using rule 92 (g -> h .) ]
  ! DIVIDE          [ reduce using rule 92 (g -> h .) ]
  ! MOD             [ reduce using rule 92 (g -> h .) ]
  ! POTENCIA        [ reduce using rule 92 (g -> h .) ]
  ! MAS             [ reduce using rule 92 (g -> h .) ]
  ! MENOS           [ reduce using rule 92 (g -> h .) ]
  ! DISTINTO_QUE    [ reduce using rule 92 (g -> h .) ]
  ! MENOR_QUE       [ reduce using rule 92 (g -> h .) ]
  ! MENOR_IGUAL_QUE [ reduce using rule 92 (g -> h .) ]
  ! MAYOR_QUE       [ reduce using rule 92 (g -> h .) ]
  ! MAYOR_IGUAL_QUE [ reduce using rule 92 (g -> h .) ]
  ! TRIPLE_IGUAL    [ reduce using rule 92 (g -> h .) ]
  ! AND             [ reduce using rule 92 (g -> h .) ]
  ! PUNTO           [ reduce using rule 92 (g -> h .) ]
  ! OR              [ reduce using rule 92 (g -> h .) ]


state 162

    (115) array_pro -> L_CORCHETE values R_CORCHETE .

    TIMES           reduce using rule 115 (array_pro -> L_CORCHETE values R_CORCHETE .)
    DIVIDE          reduce using rule 115 (array_pro -> L_CORCHETE values R_CORCHETE .)
    MOD             reduce using rule 115 (array_pro -> L_CORCHETE values R_CORCHETE .)
    POTENCIA        reduce using rule 115 (array_pro -> L_CORCHETE values R_CORCHETE .)
    MAS             reduce using rule 115 (array_pro -> L_CORCHETE values R_CORCHETE .)
    MENOS           reduce using rule 115 (array_pro -> L_CORCHETE values R_CORCHETE .)
    DISTINTO_QUE    reduce using rule 115 (array_pro -> L_CORCHETE values R_CORCHETE .)
    MENOR_QUE       reduce using rule 115 (array_pro -> L_CORCHETE values R_CORCHETE .)
    MENOR_IGUAL_QUE reduce using rule 115 (array_pro -> L_CORCHETE values R_CORCHETE .)
    MAYOR_QUE       reduce using rule 115 (array_pro -> L_CORCHETE values R_CORCHETE .)
    MAYOR_IGUAL_QUE reduce using rule 115 (array_pro -> L_CORCHETE values R_CORCHETE .)
    TRIPLE_IGUAL    reduce using rule 115 (array_pro -> L_CORCHETE values R_CORCHETE .)
    AND             reduce using rule 115 (array_pro -> L_CORCHETE values R_CORCHETE .)
    PUNTO           reduce using rule 115 (array_pro -> L_CORCHETE values R_CORCHETE .)
    OR              reduce using rule 115 (array_pro -> L_CORCHETE values R_CORCHETE .)
    R_PAREN         reduce using rule 115 (array_pro -> L_CORCHETE values R_CORCHETE .)
    SEMI_COLON      reduce using rule 115 (array_pro -> L_CORCHETE values R_CORCHETE .)
    CONSOLE         reduce using rule 115 (array_pro -> L_CORCHETE values R_CORCHETE .)
    LET             reduce using rule 115 (array_pro -> L_CORCHETE values R_CORCHETE .)
    LITERAL         reduce using rule 115 (array_pro -> L_CORCHETE values R_CORCHETE .)
    IF              reduce using rule 115 (array_pro -> L_CORCHETE values R_CORCHETE .)
    WHILE           reduce using rule 115 (array_pro -> L_CORCHETE values R_CORCHETE .)
    FOR             reduce using rule 115 (array_pro -> L_CORCHETE values R_CORCHETE .)
    INTERFACE       reduce using rule 115 (array_pro -> L_CORCHETE values R_CORCHETE .)
    CONTINUE        reduce using rule 115 (array_pro -> L_CORCHETE values R_CORCHETE .)
    BREAK           reduce using rule 115 (array_pro -> L_CORCHETE values R_CORCHETE .)
    RETURN          reduce using rule 115 (array_pro -> L_CORCHETE values R_CORCHETE .)
    FUNCTION        reduce using rule 115 (array_pro -> L_CORCHETE values R_CORCHETE .)
    TOSTRING        reduce using rule 115 (array_pro -> L_CORCHETE values R_CORCHETE .)
    NOT             reduce using rule 115 (array_pro -> L_CORCHETE values R_CORCHETE .)
    ENTERO          reduce using rule 115 (array_pro -> L_CORCHETE values R_CORCHETE .)
    DECIMAL         reduce using rule 115 (array_pro -> L_CORCHETE values R_CORCHETE .)
    CADENA          reduce using rule 115 (array_pro -> L_CORCHETE values R_CORCHETE .)
    TRUE            reduce using rule 115 (array_pro -> L_CORCHETE values R_CORCHETE .)
    FALSE           reduce using rule 115 (array_pro -> L_CORCHETE values R_CORCHETE .)
    L_PAREN         reduce using rule 115 (array_pro -> L_CORCHETE values R_CORCHETE .)
    L_CORCHETE      reduce using rule 115 (array_pro -> L_CORCHETE values R_CORCHETE .)
    L_LLAVE         reduce using rule 115 (array_pro -> L_CORCHETE values R_CORCHETE .)
    $end            reduce using rule 115 (array_pro -> L_CORCHETE values R_CORCHETE .)
    R_LLAVE         reduce using rule 115 (array_pro -> L_CORCHETE values R_CORCHETE .)
    R_CORCHETE      reduce using rule 115 (array_pro -> L_CORCHETE values R_CORCHETE .)
    COMA            reduce using rule 115 (array_pro -> L_CORCHETE values R_CORCHETE .)


state 163

    (26) values -> values COMA . a
    (69) a -> . a OR b
    (70) a -> . b
    (71) b -> . b AND c
    (72) b -> . c
    (73) c -> . NOT d
    (74) c -> . d
    (75) d -> . d DISTINTO_QUE e
    (76) d -> . d MENOR_QUE e
    (77) d -> . d MENOR_IGUAL_QUE e
    (78) d -> . d MAYOR_QUE e
    (79) d -> . d MAYOR_IGUAL_QUE e
    (80) d -> . d TRIPLE_IGUAL e
    (81) d -> . e
    (82) e -> . e MAS f
    (83) e -> . e MENOS f
    (84) e -> . f
    (85) f -> . MENOS g
    (86) f -> . MAS g
    (87) f -> . g
    (88) g -> . g TIMES h
    (89) g -> . g DIVIDE h
    (90) g -> . g MOD h
    (91) g -> . g POTENCIA h
    (92) g -> . h
    (93) h -> . ENTERO
    (94) h -> . DECIMAL
    (95) h -> . CADENA
    (96) h -> . LITERAL
    (97) h -> . TRUE
    (98) h -> . FALSE
    (99) h -> . call_function_pro
    (100) h -> . array_pro
    (101) h -> . interface_assi
    (102) h -> . L_PAREN a R_PAREN
    (103) h -> . array_val_pro
    (104) h -> . a PUNTO LITERAL
    (105) h -> . a PUNTO nativeFun L_PAREN expresion R_PAREN
    (106) h -> . a PUNTO nativeFun L_PAREN R_PAREN
    (23) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (24) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (25) call_function_pro -> . TOSTRING L_PAREN values R_PAREN
    (115) array_pro -> . L_CORCHETE values R_CORCHETE
    (112) interface_assi -> . L_LLAVE atributos_assi R_LLAVE
    (107) array_val_pro -> . LITERAL dimensions

    NOT             shift and go to state 38
    MENOS           shift and go to state 35
    MAS             shift and go to state 34
    ENTERO          shift and go to state 44
    DECIMAL         shift and go to state 45
    CADENA          shift and go to state 46
    LITERAL         shift and go to state 72
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    L_PAREN         shift and go to state 20
    TOSTRING        shift and go to state 33
    L_CORCHETE      shift and go to state 52
    L_LLAVE         shift and go to state 25

    a                              shift and go to state 193
    b                              shift and go to state 36
    c                              shift and go to state 37
    d                              shift and go to state 39
    e                              shift and go to state 40
    f                              shift and go to state 41
    g                              shift and go to state 42
    h                              shift and go to state 43
    call_function_pro              shift and go to state 73
    array_pro                      shift and go to state 49
    interface_assi                 shift and go to state 50
    array_val_pro                  shift and go to state 51

state 164

    (66) console_pro -> CONSOLE PUNTO LOG L_PAREN . expresion R_PAREN
    (67) expresion -> . expresion COMA a
    (68) expresion -> . a
    (69) a -> . a OR b
    (70) a -> . b
    (71) b -> . b AND c
    (72) b -> . c
    (73) c -> . NOT d
    (74) c -> . d
    (75) d -> . d DISTINTO_QUE e
    (76) d -> . d MENOR_QUE e
    (77) d -> . d MENOR_IGUAL_QUE e
    (78) d -> . d MAYOR_QUE e
    (79) d -> . d MAYOR_IGUAL_QUE e
    (80) d -> . d TRIPLE_IGUAL e
    (81) d -> . e
    (82) e -> . e MAS f
    (83) e -> . e MENOS f
    (84) e -> . f
    (85) f -> . MENOS g
    (86) f -> . MAS g
    (87) f -> . g
    (88) g -> . g TIMES h
    (89) g -> . g DIVIDE h
    (90) g -> . g MOD h
    (91) g -> . g POTENCIA h
    (92) g -> . h
    (93) h -> . ENTERO
    (94) h -> . DECIMAL
    (95) h -> . CADENA
    (96) h -> . LITERAL
    (97) h -> . TRUE
    (98) h -> . FALSE
    (99) h -> . call_function_pro
    (100) h -> . array_pro
    (101) h -> . interface_assi
    (102) h -> . L_PAREN a R_PAREN
    (103) h -> . array_val_pro
    (104) h -> . a PUNTO LITERAL
    (105) h -> . a PUNTO nativeFun L_PAREN expresion R_PAREN
    (106) h -> . a PUNTO nativeFun L_PAREN R_PAREN
    (23) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (24) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (25) call_function_pro -> . TOSTRING L_PAREN values R_PAREN
    (115) array_pro -> . L_CORCHETE values R_CORCHETE
    (112) interface_assi -> . L_LLAVE atributos_assi R_LLAVE
    (107) array_val_pro -> . LITERAL dimensions

    NOT             shift and go to state 38
    MENOS           shift and go to state 35
    MAS             shift and go to state 34
    ENTERO          shift and go to state 44
    DECIMAL         shift and go to state 45
    CADENA          shift and go to state 46
    LITERAL         shift and go to state 72
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    L_PAREN         shift and go to state 20
    TOSTRING        shift and go to state 33
    L_CORCHETE      shift and go to state 52
    L_LLAVE         shift and go to state 25

    expresion                      shift and go to state 194
    a                              shift and go to state 195
    b                              shift and go to state 36
    c                              shift and go to state 37
    d                              shift and go to state 39
    e                              shift and go to state 40
    f                              shift and go to state 41
    g                              shift and go to state 42
    h                              shift and go to state 43
    call_function_pro              shift and go to state 73
    array_pro                      shift and go to state 49
    interface_assi                 shift and go to state 50
    array_val_pro                  shift and go to state 51

state 165

    (104) h -> a PUNTO LITERAL .

    TIMES           reduce using rule 104 (h -> a PUNTO LITERAL .)
    DIVIDE          reduce using rule 104 (h -> a PUNTO LITERAL .)
    MOD             reduce using rule 104 (h -> a PUNTO LITERAL .)
    POTENCIA        reduce using rule 104 (h -> a PUNTO LITERAL .)
    MAS             reduce using rule 104 (h -> a PUNTO LITERAL .)
    MENOS           reduce using rule 104 (h -> a PUNTO LITERAL .)
    DISTINTO_QUE    reduce using rule 104 (h -> a PUNTO LITERAL .)
    MENOR_QUE       reduce using rule 104 (h -> a PUNTO LITERAL .)
    MENOR_IGUAL_QUE reduce using rule 104 (h -> a PUNTO LITERAL .)
    MAYOR_QUE       reduce using rule 104 (h -> a PUNTO LITERAL .)
    MAYOR_IGUAL_QUE reduce using rule 104 (h -> a PUNTO LITERAL .)
    TRIPLE_IGUAL    reduce using rule 104 (h -> a PUNTO LITERAL .)
    AND             reduce using rule 104 (h -> a PUNTO LITERAL .)
    R_PAREN         reduce using rule 104 (h -> a PUNTO LITERAL .)
    OR              reduce using rule 104 (h -> a PUNTO LITERAL .)
    PUNTO           reduce using rule 104 (h -> a PUNTO LITERAL .)
    SEMI_COLON      reduce using rule 104 (h -> a PUNTO LITERAL .)
    CONSOLE         reduce using rule 104 (h -> a PUNTO LITERAL .)
    LET             reduce using rule 104 (h -> a PUNTO LITERAL .)
    LITERAL         reduce using rule 104 (h -> a PUNTO LITERAL .)
    IF              reduce using rule 104 (h -> a PUNTO LITERAL .)
    WHILE           reduce using rule 104 (h -> a PUNTO LITERAL .)
    FOR             reduce using rule 104 (h -> a PUNTO LITERAL .)
    INTERFACE       reduce using rule 104 (h -> a PUNTO LITERAL .)
    CONTINUE        reduce using rule 104 (h -> a PUNTO LITERAL .)
    BREAK           reduce using rule 104 (h -> a PUNTO LITERAL .)
    RETURN          reduce using rule 104 (h -> a PUNTO LITERAL .)
    FUNCTION        reduce using rule 104 (h -> a PUNTO LITERAL .)
    TOSTRING        reduce using rule 104 (h -> a PUNTO LITERAL .)
    NOT             reduce using rule 104 (h -> a PUNTO LITERAL .)
    ENTERO          reduce using rule 104 (h -> a PUNTO LITERAL .)
    DECIMAL         reduce using rule 104 (h -> a PUNTO LITERAL .)
    CADENA          reduce using rule 104 (h -> a PUNTO LITERAL .)
    TRUE            reduce using rule 104 (h -> a PUNTO LITERAL .)
    FALSE           reduce using rule 104 (h -> a PUNTO LITERAL .)
    L_PAREN         reduce using rule 104 (h -> a PUNTO LITERAL .)
    L_CORCHETE      reduce using rule 104 (h -> a PUNTO LITERAL .)
    L_LLAVE         reduce using rule 104 (h -> a PUNTO LITERAL .)
    $end            reduce using rule 104 (h -> a PUNTO LITERAL .)
    R_LLAVE         reduce using rule 104 (h -> a PUNTO LITERAL .)
    R_CORCHETE      reduce using rule 104 (h -> a PUNTO LITERAL .)
    COMA            reduce using rule 104 (h -> a PUNTO LITERAL .)


state 166

    (43) declaracion_list -> declaracion_list COMA assignacion_instruction .

    COMA            reduce using rule 43 (declaracion_list -> declaracion_list COMA assignacion_instruction .)
    SEMI_COLON      reduce using rule 43 (declaracion_list -> declaracion_list COMA assignacion_instruction .)
    CONSOLE         reduce using rule 43 (declaracion_list -> declaracion_list COMA assignacion_instruction .)
    LET             reduce using rule 43 (declaracion_list -> declaracion_list COMA assignacion_instruction .)
    LITERAL         reduce using rule 43 (declaracion_list -> declaracion_list COMA assignacion_instruction .)
    IF              reduce using rule 43 (declaracion_list -> declaracion_list COMA assignacion_instruction .)
    WHILE           reduce using rule 43 (declaracion_list -> declaracion_list COMA assignacion_instruction .)
    FOR             reduce using rule 43 (declaracion_list -> declaracion_list COMA assignacion_instruction .)
    INTERFACE       reduce using rule 43 (declaracion_list -> declaracion_list COMA assignacion_instruction .)
    CONTINUE        reduce using rule 43 (declaracion_list -> declaracion_list COMA assignacion_instruction .)
    BREAK           reduce using rule 43 (declaracion_list -> declaracion_list COMA assignacion_instruction .)
    RETURN          reduce using rule 43 (declaracion_list -> declaracion_list COMA assignacion_instruction .)
    FUNCTION        reduce using rule 43 (declaracion_list -> declaracion_list COMA assignacion_instruction .)
    TOSTRING        reduce using rule 43 (declaracion_list -> declaracion_list COMA assignacion_instruction .)
    NOT             reduce using rule 43 (declaracion_list -> declaracion_list COMA assignacion_instruction .)
    MENOS           reduce using rule 43 (declaracion_list -> declaracion_list COMA assignacion_instruction .)
    MAS             reduce using rule 43 (declaracion_list -> declaracion_list COMA assignacion_instruction .)
    ENTERO          reduce using rule 43 (declaracion_list -> declaracion_list COMA assignacion_instruction .)
    DECIMAL         reduce using rule 43 (declaracion_list -> declaracion_list COMA assignacion_instruction .)
    CADENA          reduce using rule 43 (declaracion_list -> declaracion_list COMA assignacion_instruction .)
    TRUE            reduce using rule 43 (declaracion_list -> declaracion_list COMA assignacion_instruction .)
    FALSE           reduce using rule 43 (declaracion_list -> declaracion_list COMA assignacion_instruction .)
    L_PAREN         reduce using rule 43 (declaracion_list -> declaracion_list COMA assignacion_instruction .)
    L_CORCHETE      reduce using rule 43 (declaracion_list -> declaracion_list COMA assignacion_instruction .)
    L_LLAVE         reduce using rule 43 (declaracion_list -> declaracion_list COMA assignacion_instruction .)
    $end            reduce using rule 43 (declaracion_list -> declaracion_list COMA assignacion_instruction .)
    R_LLAVE         reduce using rule 43 (declaracion_list -> declaracion_list COMA assignacion_instruction .)


state 167

    (53) type -> LITERAL .

    IGUAL           reduce using rule 53 (type -> LITERAL .)
    COMA            reduce using rule 53 (type -> LITERAL .)
    SEMI_COLON      reduce using rule 53 (type -> LITERAL .)
    CONSOLE         reduce using rule 53 (type -> LITERAL .)
    LET             reduce using rule 53 (type -> LITERAL .)
    LITERAL         reduce using rule 53 (type -> LITERAL .)
    IF              reduce using rule 53 (type -> LITERAL .)
    WHILE           reduce using rule 53 (type -> LITERAL .)
    FOR             reduce using rule 53 (type -> LITERAL .)
    INTERFACE       reduce using rule 53 (type -> LITERAL .)
    CONTINUE        reduce using rule 53 (type -> LITERAL .)
    BREAK           reduce using rule 53 (type -> LITERAL .)
    RETURN          reduce using rule 53 (type -> LITERAL .)
    FUNCTION        reduce using rule 53 (type -> LITERAL .)
    TOSTRING        reduce using rule 53 (type -> LITERAL .)
    NOT             reduce using rule 53 (type -> LITERAL .)
    MENOS           reduce using rule 53 (type -> LITERAL .)
    MAS             reduce using rule 53 (type -> LITERAL .)
    ENTERO          reduce using rule 53 (type -> LITERAL .)
    DECIMAL         reduce using rule 53 (type -> LITERAL .)
    CADENA          reduce using rule 53 (type -> LITERAL .)
    TRUE            reduce using rule 53 (type -> LITERAL .)
    FALSE           reduce using rule 53 (type -> LITERAL .)
    L_PAREN         reduce using rule 53 (type -> LITERAL .)
    L_CORCHETE      reduce using rule 53 (type -> LITERAL .)
    L_LLAVE         reduce using rule 53 (type -> LITERAL .)
    $end            reduce using rule 53 (type -> LITERAL .)
    R_LLAVE         reduce using rule 53 (type -> LITERAL .)
    R_PAREN         reduce using rule 53 (type -> LITERAL .)


state 168

    (45) assignacion_instruction -> LITERAL COLON type . IGUAL a
    (46) assignacion_instruction -> LITERAL COLON type .

    IGUAL           shift and go to state 196
    COMA            reduce using rule 46 (assignacion_instruction -> LITERAL COLON type .)
    SEMI_COLON      reduce using rule 46 (assignacion_instruction -> LITERAL COLON type .)
    CONSOLE         reduce using rule 46 (assignacion_instruction -> LITERAL COLON type .)
    LET             reduce using rule 46 (assignacion_instruction -> LITERAL COLON type .)
    LITERAL         reduce using rule 46 (assignacion_instruction -> LITERAL COLON type .)
    IF              reduce using rule 46 (assignacion_instruction -> LITERAL COLON type .)
    WHILE           reduce using rule 46 (assignacion_instruction -> LITERAL COLON type .)
    FOR             reduce using rule 46 (assignacion_instruction -> LITERAL COLON type .)
    INTERFACE       reduce using rule 46 (assignacion_instruction -> LITERAL COLON type .)
    CONTINUE        reduce using rule 46 (assignacion_instruction -> LITERAL COLON type .)
    BREAK           reduce using rule 46 (assignacion_instruction -> LITERAL COLON type .)
    RETURN          reduce using rule 46 (assignacion_instruction -> LITERAL COLON type .)
    FUNCTION        reduce using rule 46 (assignacion_instruction -> LITERAL COLON type .)
    TOSTRING        reduce using rule 46 (assignacion_instruction -> LITERAL COLON type .)
    NOT             reduce using rule 46 (assignacion_instruction -> LITERAL COLON type .)
    MENOS           reduce using rule 46 (assignacion_instruction -> LITERAL COLON type .)
    MAS             reduce using rule 46 (assignacion_instruction -> LITERAL COLON type .)
    ENTERO          reduce using rule 46 (assignacion_instruction -> LITERAL COLON type .)
    DECIMAL         reduce using rule 46 (assignacion_instruction -> LITERAL COLON type .)
    CADENA          reduce using rule 46 (assignacion_instruction -> LITERAL COLON type .)
    TRUE            reduce using rule 46 (assignacion_instruction -> LITERAL COLON type .)
    FALSE           reduce using rule 46 (assignacion_instruction -> LITERAL COLON type .)
    L_PAREN         reduce using rule 46 (assignacion_instruction -> LITERAL COLON type .)
    L_CORCHETE      reduce using rule 46 (assignacion_instruction -> LITERAL COLON type .)
    L_LLAVE         reduce using rule 46 (assignacion_instruction -> LITERAL COLON type .)
    $end            reduce using rule 46 (assignacion_instruction -> LITERAL COLON type .)
    R_LLAVE         reduce using rule 46 (assignacion_instruction -> LITERAL COLON type .)


state 169

    (49) type -> NUMBER .

    IGUAL           reduce using rule 49 (type -> NUMBER .)
    COMA            reduce using rule 49 (type -> NUMBER .)
    SEMI_COLON      reduce using rule 49 (type -> NUMBER .)
    CONSOLE         reduce using rule 49 (type -> NUMBER .)
    LET             reduce using rule 49 (type -> NUMBER .)
    LITERAL         reduce using rule 49 (type -> NUMBER .)
    IF              reduce using rule 49 (type -> NUMBER .)
    WHILE           reduce using rule 49 (type -> NUMBER .)
    FOR             reduce using rule 49 (type -> NUMBER .)
    INTERFACE       reduce using rule 49 (type -> NUMBER .)
    CONTINUE        reduce using rule 49 (type -> NUMBER .)
    BREAK           reduce using rule 49 (type -> NUMBER .)
    RETURN          reduce using rule 49 (type -> NUMBER .)
    FUNCTION        reduce using rule 49 (type -> NUMBER .)
    TOSTRING        reduce using rule 49 (type -> NUMBER .)
    NOT             reduce using rule 49 (type -> NUMBER .)
    MENOS           reduce using rule 49 (type -> NUMBER .)
    MAS             reduce using rule 49 (type -> NUMBER .)
    ENTERO          reduce using rule 49 (type -> NUMBER .)
    DECIMAL         reduce using rule 49 (type -> NUMBER .)
    CADENA          reduce using rule 49 (type -> NUMBER .)
    TRUE            reduce using rule 49 (type -> NUMBER .)
    FALSE           reduce using rule 49 (type -> NUMBER .)
    L_PAREN         reduce using rule 49 (type -> NUMBER .)
    L_CORCHETE      reduce using rule 49 (type -> NUMBER .)
    L_LLAVE         reduce using rule 49 (type -> NUMBER .)
    $end            reduce using rule 49 (type -> NUMBER .)
    R_LLAVE         reduce using rule 49 (type -> NUMBER .)
    R_PAREN         reduce using rule 49 (type -> NUMBER .)


state 170

    (50) type -> STRING .

    IGUAL           reduce using rule 50 (type -> STRING .)
    COMA            reduce using rule 50 (type -> STRING .)
    SEMI_COLON      reduce using rule 50 (type -> STRING .)
    CONSOLE         reduce using rule 50 (type -> STRING .)
    LET             reduce using rule 50 (type -> STRING .)
    LITERAL         reduce using rule 50 (type -> STRING .)
    IF              reduce using rule 50 (type -> STRING .)
    WHILE           reduce using rule 50 (type -> STRING .)
    FOR             reduce using rule 50 (type -> STRING .)
    INTERFACE       reduce using rule 50 (type -> STRING .)
    CONTINUE        reduce using rule 50 (type -> STRING .)
    BREAK           reduce using rule 50 (type -> STRING .)
    RETURN          reduce using rule 50 (type -> STRING .)
    FUNCTION        reduce using rule 50 (type -> STRING .)
    TOSTRING        reduce using rule 50 (type -> STRING .)
    NOT             reduce using rule 50 (type -> STRING .)
    MENOS           reduce using rule 50 (type -> STRING .)
    MAS             reduce using rule 50 (type -> STRING .)
    ENTERO          reduce using rule 50 (type -> STRING .)
    DECIMAL         reduce using rule 50 (type -> STRING .)
    CADENA          reduce using rule 50 (type -> STRING .)
    TRUE            reduce using rule 50 (type -> STRING .)
    FALSE           reduce using rule 50 (type -> STRING .)
    L_PAREN         reduce using rule 50 (type -> STRING .)
    L_CORCHETE      reduce using rule 50 (type -> STRING .)
    L_LLAVE         reduce using rule 50 (type -> STRING .)
    $end            reduce using rule 50 (type -> STRING .)
    R_LLAVE         reduce using rule 50 (type -> STRING .)
    R_PAREN         reduce using rule 50 (type -> STRING .)


state 171

    (51) type -> BOOLEAN .

    IGUAL           reduce using rule 51 (type -> BOOLEAN .)
    COMA            reduce using rule 51 (type -> BOOLEAN .)
    SEMI_COLON      reduce using rule 51 (type -> BOOLEAN .)
    CONSOLE         reduce using rule 51 (type -> BOOLEAN .)
    LET             reduce using rule 51 (type -> BOOLEAN .)
    LITERAL         reduce using rule 51 (type -> BOOLEAN .)
    IF              reduce using rule 51 (type -> BOOLEAN .)
    WHILE           reduce using rule 51 (type -> BOOLEAN .)
    FOR             reduce using rule 51 (type -> BOOLEAN .)
    INTERFACE       reduce using rule 51 (type -> BOOLEAN .)
    CONTINUE        reduce using rule 51 (type -> BOOLEAN .)
    BREAK           reduce using rule 51 (type -> BOOLEAN .)
    RETURN          reduce using rule 51 (type -> BOOLEAN .)
    FUNCTION        reduce using rule 51 (type -> BOOLEAN .)
    TOSTRING        reduce using rule 51 (type -> BOOLEAN .)
    NOT             reduce using rule 51 (type -> BOOLEAN .)
    MENOS           reduce using rule 51 (type -> BOOLEAN .)
    MAS             reduce using rule 51 (type -> BOOLEAN .)
    ENTERO          reduce using rule 51 (type -> BOOLEAN .)
    DECIMAL         reduce using rule 51 (type -> BOOLEAN .)
    CADENA          reduce using rule 51 (type -> BOOLEAN .)
    TRUE            reduce using rule 51 (type -> BOOLEAN .)
    FALSE           reduce using rule 51 (type -> BOOLEAN .)
    L_PAREN         reduce using rule 51 (type -> BOOLEAN .)
    L_CORCHETE      reduce using rule 51 (type -> BOOLEAN .)
    L_LLAVE         reduce using rule 51 (type -> BOOLEAN .)
    $end            reduce using rule 51 (type -> BOOLEAN .)
    R_LLAVE         reduce using rule 51 (type -> BOOLEAN .)
    R_PAREN         reduce using rule 51 (type -> BOOLEAN .)


state 172

    (52) type -> ANY .

    IGUAL           reduce using rule 52 (type -> ANY .)
    COMA            reduce using rule 52 (type -> ANY .)
    SEMI_COLON      reduce using rule 52 (type -> ANY .)
    CONSOLE         reduce using rule 52 (type -> ANY .)
    LET             reduce using rule 52 (type -> ANY .)
    LITERAL         reduce using rule 52 (type -> ANY .)
    IF              reduce using rule 52 (type -> ANY .)
    WHILE           reduce using rule 52 (type -> ANY .)
    FOR             reduce using rule 52 (type -> ANY .)
    INTERFACE       reduce using rule 52 (type -> ANY .)
    CONTINUE        reduce using rule 52 (type -> ANY .)
    BREAK           reduce using rule 52 (type -> ANY .)
    RETURN          reduce using rule 52 (type -> ANY .)
    FUNCTION        reduce using rule 52 (type -> ANY .)
    TOSTRING        reduce using rule 52 (type -> ANY .)
    NOT             reduce using rule 52 (type -> ANY .)
    MENOS           reduce using rule 52 (type -> ANY .)
    MAS             reduce using rule 52 (type -> ANY .)
    ENTERO          reduce using rule 52 (type -> ANY .)
    DECIMAL         reduce using rule 52 (type -> ANY .)
    CADENA          reduce using rule 52 (type -> ANY .)
    TRUE            reduce using rule 52 (type -> ANY .)
    FALSE           reduce using rule 52 (type -> ANY .)
    L_PAREN         reduce using rule 52 (type -> ANY .)
    L_CORCHETE      reduce using rule 52 (type -> ANY .)
    L_LLAVE         reduce using rule 52 (type -> ANY .)
    $end            reduce using rule 52 (type -> ANY .)
    R_LLAVE         reduce using rule 52 (type -> ANY .)
    R_PAREN         reduce using rule 52 (type -> ANY .)


state 173

    (54) type -> NULL .

    IGUAL           reduce using rule 54 (type -> NULL .)
    COMA            reduce using rule 54 (type -> NULL .)
    SEMI_COLON      reduce using rule 54 (type -> NULL .)
    CONSOLE         reduce using rule 54 (type -> NULL .)
    LET             reduce using rule 54 (type -> NULL .)
    LITERAL         reduce using rule 54 (type -> NULL .)
    IF              reduce using rule 54 (type -> NULL .)
    WHILE           reduce using rule 54 (type -> NULL .)
    FOR             reduce using rule 54 (type -> NULL .)
    INTERFACE       reduce using rule 54 (type -> NULL .)
    CONTINUE        reduce using rule 54 (type -> NULL .)
    BREAK           reduce using rule 54 (type -> NULL .)
    RETURN          reduce using rule 54 (type -> NULL .)
    FUNCTION        reduce using rule 54 (type -> NULL .)
    TOSTRING        reduce using rule 54 (type -> NULL .)
    NOT             reduce using rule 54 (type -> NULL .)
    MENOS           reduce using rule 54 (type -> NULL .)
    MAS             reduce using rule 54 (type -> NULL .)
    ENTERO          reduce using rule 54 (type -> NULL .)
    DECIMAL         reduce using rule 54 (type -> NULL .)
    CADENA          reduce using rule 54 (type -> NULL .)
    TRUE            reduce using rule 54 (type -> NULL .)
    FALSE           reduce using rule 54 (type -> NULL .)
    L_PAREN         reduce using rule 54 (type -> NULL .)
    L_CORCHETE      reduce using rule 54 (type -> NULL .)
    L_LLAVE         reduce using rule 54 (type -> NULL .)
    $end            reduce using rule 54 (type -> NULL .)
    R_LLAVE         reduce using rule 54 (type -> NULL .)
    R_PAREN         reduce using rule 54 (type -> NULL .)


state 174

    (47) assignacion_instruction -> LITERAL IGUAL a .
    (69) a -> a . OR b
    (104) h -> a . PUNTO LITERAL
    (105) h -> a . PUNTO nativeFun L_PAREN expresion R_PAREN
    (106) h -> a . PUNTO nativeFun L_PAREN R_PAREN

    COMA            reduce using rule 47 (assignacion_instruction -> LITERAL IGUAL a .)
    SEMI_COLON      reduce using rule 47 (assignacion_instruction -> LITERAL IGUAL a .)
    CONSOLE         reduce using rule 47 (assignacion_instruction -> LITERAL IGUAL a .)
    LET             reduce using rule 47 (assignacion_instruction -> LITERAL IGUAL a .)
    LITERAL         reduce using rule 47 (assignacion_instruction -> LITERAL IGUAL a .)
    IF              reduce using rule 47 (assignacion_instruction -> LITERAL IGUAL a .)
    WHILE           reduce using rule 47 (assignacion_instruction -> LITERAL IGUAL a .)
    FOR             reduce using rule 47 (assignacion_instruction -> LITERAL IGUAL a .)
    INTERFACE       reduce using rule 47 (assignacion_instruction -> LITERAL IGUAL a .)
    CONTINUE        reduce using rule 47 (assignacion_instruction -> LITERAL IGUAL a .)
    BREAK           reduce using rule 47 (assignacion_instruction -> LITERAL IGUAL a .)
    RETURN          reduce using rule 47 (assignacion_instruction -> LITERAL IGUAL a .)
    FUNCTION        reduce using rule 47 (assignacion_instruction -> LITERAL IGUAL a .)
    TOSTRING        reduce using rule 47 (assignacion_instruction -> LITERAL IGUAL a .)
    NOT             reduce using rule 47 (assignacion_instruction -> LITERAL IGUAL a .)
    MENOS           reduce using rule 47 (assignacion_instruction -> LITERAL IGUAL a .)
    MAS             reduce using rule 47 (assignacion_instruction -> LITERAL IGUAL a .)
    ENTERO          reduce using rule 47 (assignacion_instruction -> LITERAL IGUAL a .)
    DECIMAL         reduce using rule 47 (assignacion_instruction -> LITERAL IGUAL a .)
    CADENA          reduce using rule 47 (assignacion_instruction -> LITERAL IGUAL a .)
    TRUE            reduce using rule 47 (assignacion_instruction -> LITERAL IGUAL a .)
    FALSE           reduce using rule 47 (assignacion_instruction -> LITERAL IGUAL a .)
    L_PAREN         reduce using rule 47 (assignacion_instruction -> LITERAL IGUAL a .)
    L_CORCHETE      reduce using rule 47 (assignacion_instruction -> LITERAL IGUAL a .)
    L_LLAVE         reduce using rule 47 (assignacion_instruction -> LITERAL IGUAL a .)
    $end            reduce using rule 47 (assignacion_instruction -> LITERAL IGUAL a .)
    R_LLAVE         reduce using rule 47 (assignacion_instruction -> LITERAL IGUAL a .)
    OR              shift and go to state 84
    PUNTO           shift and go to state 115


state 175

    (23) call_function_pro -> LITERAL L_PAREN values R_PAREN .

    SEMI_COLON      reduce using rule 23 (call_function_pro -> LITERAL L_PAREN values R_PAREN .)
    CONSOLE         reduce using rule 23 (call_function_pro -> LITERAL L_PAREN values R_PAREN .)
    LET             reduce using rule 23 (call_function_pro -> LITERAL L_PAREN values R_PAREN .)
    LITERAL         reduce using rule 23 (call_function_pro -> LITERAL L_PAREN values R_PAREN .)
    IF              reduce using rule 23 (call_function_pro -> LITERAL L_PAREN values R_PAREN .)
    WHILE           reduce using rule 23 (call_function_pro -> LITERAL L_PAREN values R_PAREN .)
    FOR             reduce using rule 23 (call_function_pro -> LITERAL L_PAREN values R_PAREN .)
    INTERFACE       reduce using rule 23 (call_function_pro -> LITERAL L_PAREN values R_PAREN .)
    CONTINUE        reduce using rule 23 (call_function_pro -> LITERAL L_PAREN values R_PAREN .)
    BREAK           reduce using rule 23 (call_function_pro -> LITERAL L_PAREN values R_PAREN .)
    RETURN          reduce using rule 23 (call_function_pro -> LITERAL L_PAREN values R_PAREN .)
    FUNCTION        reduce using rule 23 (call_function_pro -> LITERAL L_PAREN values R_PAREN .)
    TOSTRING        reduce using rule 23 (call_function_pro -> LITERAL L_PAREN values R_PAREN .)
    NOT             reduce using rule 23 (call_function_pro -> LITERAL L_PAREN values R_PAREN .)
    MENOS           reduce using rule 23 (call_function_pro -> LITERAL L_PAREN values R_PAREN .)
    MAS             reduce using rule 23 (call_function_pro -> LITERAL L_PAREN values R_PAREN .)
    ENTERO          reduce using rule 23 (call_function_pro -> LITERAL L_PAREN values R_PAREN .)
    DECIMAL         reduce using rule 23 (call_function_pro -> LITERAL L_PAREN values R_PAREN .)
    CADENA          reduce using rule 23 (call_function_pro -> LITERAL L_PAREN values R_PAREN .)
    TRUE            reduce using rule 23 (call_function_pro -> LITERAL L_PAREN values R_PAREN .)
    FALSE           reduce using rule 23 (call_function_pro -> LITERAL L_PAREN values R_PAREN .)
    L_PAREN         reduce using rule 23 (call_function_pro -> LITERAL L_PAREN values R_PAREN .)
    L_CORCHETE      reduce using rule 23 (call_function_pro -> LITERAL L_PAREN values R_PAREN .)
    L_LLAVE         reduce using rule 23 (call_function_pro -> LITERAL L_PAREN values R_PAREN .)
    $end            reduce using rule 23 (call_function_pro -> LITERAL L_PAREN values R_PAREN .)
    TIMES           reduce using rule 23 (call_function_pro -> LITERAL L_PAREN values R_PAREN .)
    DIVIDE          reduce using rule 23 (call_function_pro -> LITERAL L_PAREN values R_PAREN .)
    MOD             reduce using rule 23 (call_function_pro -> LITERAL L_PAREN values R_PAREN .)
    POTENCIA        reduce using rule 23 (call_function_pro -> LITERAL L_PAREN values R_PAREN .)
    DISTINTO_QUE    reduce using rule 23 (call_function_pro -> LITERAL L_PAREN values R_PAREN .)
    MENOR_QUE       reduce using rule 23 (call_function_pro -> LITERAL L_PAREN values R_PAREN .)
    MENOR_IGUAL_QUE reduce using rule 23 (call_function_pro -> LITERAL L_PAREN values R_PAREN .)
    MAYOR_QUE       reduce using rule 23 (call_function_pro -> LITERAL L_PAREN values R_PAREN .)
    MAYOR_IGUAL_QUE reduce using rule 23 (call_function_pro -> LITERAL L_PAREN values R_PAREN .)
    TRIPLE_IGUAL    reduce using rule 23 (call_function_pro -> LITERAL L_PAREN values R_PAREN .)
    AND             reduce using rule 23 (call_function_pro -> LITERAL L_PAREN values R_PAREN .)
    PUNTO           reduce using rule 23 (call_function_pro -> LITERAL L_PAREN values R_PAREN .)
    OR              reduce using rule 23 (call_function_pro -> LITERAL L_PAREN values R_PAREN .)
    R_PAREN         reduce using rule 23 (call_function_pro -> LITERAL L_PAREN values R_PAREN .)
    R_LLAVE         reduce using rule 23 (call_function_pro -> LITERAL L_PAREN values R_PAREN .)
    R_CORCHETE      reduce using rule 23 (call_function_pro -> LITERAL L_PAREN values R_PAREN .)
    COMA            reduce using rule 23 (call_function_pro -> LITERAL L_PAREN values R_PAREN .)


state 176

    (108) dimensions -> dimensions L_CORCHETE a . R_CORCHETE
    (69) a -> a . OR b
    (104) h -> a . PUNTO LITERAL
    (105) h -> a . PUNTO nativeFun L_PAREN expresion R_PAREN
    (106) h -> a . PUNTO nativeFun L_PAREN R_PAREN

    R_CORCHETE      shift and go to state 197
    OR              shift and go to state 84
    PUNTO           shift and go to state 115


state 177

    (109) dimensions -> L_CORCHETE a R_CORCHETE .

    L_CORCHETE      reduce using rule 109 (dimensions -> L_CORCHETE a R_CORCHETE .)
    TIMES           reduce using rule 109 (dimensions -> L_CORCHETE a R_CORCHETE .)
    DIVIDE          reduce using rule 109 (dimensions -> L_CORCHETE a R_CORCHETE .)
    MOD             reduce using rule 109 (dimensions -> L_CORCHETE a R_CORCHETE .)
    POTENCIA        reduce using rule 109 (dimensions -> L_CORCHETE a R_CORCHETE .)
    MAS             reduce using rule 109 (dimensions -> L_CORCHETE a R_CORCHETE .)
    MENOS           reduce using rule 109 (dimensions -> L_CORCHETE a R_CORCHETE .)
    DISTINTO_QUE    reduce using rule 109 (dimensions -> L_CORCHETE a R_CORCHETE .)
    MENOR_QUE       reduce using rule 109 (dimensions -> L_CORCHETE a R_CORCHETE .)
    MENOR_IGUAL_QUE reduce using rule 109 (dimensions -> L_CORCHETE a R_CORCHETE .)
    MAYOR_QUE       reduce using rule 109 (dimensions -> L_CORCHETE a R_CORCHETE .)
    MAYOR_IGUAL_QUE reduce using rule 109 (dimensions -> L_CORCHETE a R_CORCHETE .)
    TRIPLE_IGUAL    reduce using rule 109 (dimensions -> L_CORCHETE a R_CORCHETE .)
    AND             reduce using rule 109 (dimensions -> L_CORCHETE a R_CORCHETE .)
    PUNTO           reduce using rule 109 (dimensions -> L_CORCHETE a R_CORCHETE .)
    OR              reduce using rule 109 (dimensions -> L_CORCHETE a R_CORCHETE .)
    R_PAREN         reduce using rule 109 (dimensions -> L_CORCHETE a R_CORCHETE .)
    SEMI_COLON      reduce using rule 109 (dimensions -> L_CORCHETE a R_CORCHETE .)
    CONSOLE         reduce using rule 109 (dimensions -> L_CORCHETE a R_CORCHETE .)
    LET             reduce using rule 109 (dimensions -> L_CORCHETE a R_CORCHETE .)
    LITERAL         reduce using rule 109 (dimensions -> L_CORCHETE a R_CORCHETE .)
    IF              reduce using rule 109 (dimensions -> L_CORCHETE a R_CORCHETE .)
    WHILE           reduce using rule 109 (dimensions -> L_CORCHETE a R_CORCHETE .)
    FOR             reduce using rule 109 (dimensions -> L_CORCHETE a R_CORCHETE .)
    INTERFACE       reduce using rule 109 (dimensions -> L_CORCHETE a R_CORCHETE .)
    CONTINUE        reduce using rule 109 (dimensions -> L_CORCHETE a R_CORCHETE .)
    BREAK           reduce using rule 109 (dimensions -> L_CORCHETE a R_CORCHETE .)
    RETURN          reduce using rule 109 (dimensions -> L_CORCHETE a R_CORCHETE .)
    FUNCTION        reduce using rule 109 (dimensions -> L_CORCHETE a R_CORCHETE .)
    TOSTRING        reduce using rule 109 (dimensions -> L_CORCHETE a R_CORCHETE .)
    NOT             reduce using rule 109 (dimensions -> L_CORCHETE a R_CORCHETE .)
    ENTERO          reduce using rule 109 (dimensions -> L_CORCHETE a R_CORCHETE .)
    DECIMAL         reduce using rule 109 (dimensions -> L_CORCHETE a R_CORCHETE .)
    CADENA          reduce using rule 109 (dimensions -> L_CORCHETE a R_CORCHETE .)
    TRUE            reduce using rule 109 (dimensions -> L_CORCHETE a R_CORCHETE .)
    FALSE           reduce using rule 109 (dimensions -> L_CORCHETE a R_CORCHETE .)
    L_PAREN         reduce using rule 109 (dimensions -> L_CORCHETE a R_CORCHETE .)
    L_LLAVE         reduce using rule 109 (dimensions -> L_CORCHETE a R_CORCHETE .)
    $end            reduce using rule 109 (dimensions -> L_CORCHETE a R_CORCHETE .)
    R_LLAVE         reduce using rule 109 (dimensions -> L_CORCHETE a R_CORCHETE .)
    R_CORCHETE      reduce using rule 109 (dimensions -> L_CORCHETE a R_CORCHETE .)
    COMA            reduce using rule 109 (dimensions -> L_CORCHETE a R_CORCHETE .)


state 178

    (41) interface_assign_pro -> a PUNTO LITERAL IGUAL . a
    (69) a -> . a OR b
    (70) a -> . b
    (71) b -> . b AND c
    (72) b -> . c
    (73) c -> . NOT d
    (74) c -> . d
    (75) d -> . d DISTINTO_QUE e
    (76) d -> . d MENOR_QUE e
    (77) d -> . d MENOR_IGUAL_QUE e
    (78) d -> . d MAYOR_QUE e
    (79) d -> . d MAYOR_IGUAL_QUE e
    (80) d -> . d TRIPLE_IGUAL e
    (81) d -> . e
    (82) e -> . e MAS f
    (83) e -> . e MENOS f
    (84) e -> . f
    (85) f -> . MENOS g
    (86) f -> . MAS g
    (87) f -> . g
    (88) g -> . g TIMES h
    (89) g -> . g DIVIDE h
    (90) g -> . g MOD h
    (91) g -> . g POTENCIA h
    (92) g -> . h
    (93) h -> . ENTERO
    (94) h -> . DECIMAL
    (95) h -> . CADENA
    (96) h -> . LITERAL
    (97) h -> . TRUE
    (98) h -> . FALSE
    (99) h -> . call_function_pro
    (100) h -> . array_pro
    (101) h -> . interface_assi
    (102) h -> . L_PAREN a R_PAREN
    (103) h -> . array_val_pro
    (104) h -> . a PUNTO LITERAL
    (105) h -> . a PUNTO nativeFun L_PAREN expresion R_PAREN
    (106) h -> . a PUNTO nativeFun L_PAREN R_PAREN
    (23) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (24) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (25) call_function_pro -> . TOSTRING L_PAREN values R_PAREN
    (115) array_pro -> . L_CORCHETE values R_CORCHETE
    (112) interface_assi -> . L_LLAVE atributos_assi R_LLAVE
    (107) array_val_pro -> . LITERAL dimensions

    NOT             shift and go to state 38
    MENOS           shift and go to state 35
    MAS             shift and go to state 34
    ENTERO          shift and go to state 44
    DECIMAL         shift and go to state 45
    CADENA          shift and go to state 46
    LITERAL         shift and go to state 72
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    L_PAREN         shift and go to state 20
    TOSTRING        shift and go to state 33
    L_CORCHETE      shift and go to state 52
    L_LLAVE         shift and go to state 25

    a                              shift and go to state 198
    b                              shift and go to state 36
    c                              shift and go to state 37
    d                              shift and go to state 39
    e                              shift and go to state 40
    f                              shift and go to state 41
    g                              shift and go to state 42
    h                              shift and go to state 43
    call_function_pro              shift and go to state 73
    array_pro                      shift and go to state 49
    interface_assi                 shift and go to state 50
    array_val_pro                  shift and go to state 51

state 179

    (105) h -> a PUNTO nativeFun L_PAREN . expresion R_PAREN
    (106) h -> a PUNTO nativeFun L_PAREN . R_PAREN
    (67) expresion -> . expresion COMA a
    (68) expresion -> . a
    (69) a -> . a OR b
    (70) a -> . b
    (71) b -> . b AND c
    (72) b -> . c
    (73) c -> . NOT d
    (74) c -> . d
    (75) d -> . d DISTINTO_QUE e
    (76) d -> . d MENOR_QUE e
    (77) d -> . d MENOR_IGUAL_QUE e
    (78) d -> . d MAYOR_QUE e
    (79) d -> . d MAYOR_IGUAL_QUE e
    (80) d -> . d TRIPLE_IGUAL e
    (81) d -> . e
    (82) e -> . e MAS f
    (83) e -> . e MENOS f
    (84) e -> . f
    (85) f -> . MENOS g
    (86) f -> . MAS g
    (87) f -> . g
    (88) g -> . g TIMES h
    (89) g -> . g DIVIDE h
    (90) g -> . g MOD h
    (91) g -> . g POTENCIA h
    (92) g -> . h
    (93) h -> . ENTERO
    (94) h -> . DECIMAL
    (95) h -> . CADENA
    (96) h -> . LITERAL
    (97) h -> . TRUE
    (98) h -> . FALSE
    (99) h -> . call_function_pro
    (100) h -> . array_pro
    (101) h -> . interface_assi
    (102) h -> . L_PAREN a R_PAREN
    (103) h -> . array_val_pro
    (104) h -> . a PUNTO LITERAL
    (105) h -> . a PUNTO nativeFun L_PAREN expresion R_PAREN
    (106) h -> . a PUNTO nativeFun L_PAREN R_PAREN
    (23) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (24) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (25) call_function_pro -> . TOSTRING L_PAREN values R_PAREN
    (115) array_pro -> . L_CORCHETE values R_CORCHETE
    (112) interface_assi -> . L_LLAVE atributos_assi R_LLAVE
    (107) array_val_pro -> . LITERAL dimensions

    R_PAREN         shift and go to state 200
    NOT             shift and go to state 38
    MENOS           shift and go to state 35
    MAS             shift and go to state 34
    ENTERO          shift and go to state 44
    DECIMAL         shift and go to state 45
    CADENA          shift and go to state 46
    LITERAL         shift and go to state 72
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    L_PAREN         shift and go to state 20
    TOSTRING        shift and go to state 33
    L_CORCHETE      shift and go to state 52
    L_LLAVE         shift and go to state 25

    a                              shift and go to state 195
    expresion                      shift and go to state 199
    b                              shift and go to state 36
    c                              shift and go to state 37
    d                              shift and go to state 39
    e                              shift and go to state 40
    f                              shift and go to state 41
    g                              shift and go to state 42
    h                              shift and go to state 43
    call_function_pro              shift and go to state 73
    array_pro                      shift and go to state 49
    interface_assi                 shift and go to state 50
    array_val_pro                  shift and go to state 51

state 180

    (56) if_pro -> IF L_PAREN a R_PAREN . L_LLAVE instrucciones R_LLAVE else_pro

    L_LLAVE         shift and go to state 201


state 181

    (113) atributos_assi -> atributos_assi COMA LITERAL . COLON a

    COLON           shift and go to state 202


state 182

    (114) atributos_assi -> LITERAL COLON a .
    (69) a -> a . OR b
    (104) h -> a . PUNTO LITERAL
    (105) h -> a . PUNTO nativeFun L_PAREN expresion R_PAREN
    (106) h -> a . PUNTO nativeFun L_PAREN R_PAREN

    R_LLAVE         reduce using rule 114 (atributos_assi -> LITERAL COLON a .)
    COMA            reduce using rule 114 (atributos_assi -> LITERAL COLON a .)
    OR              shift and go to state 84
    PUNTO           shift and go to state 115


state 183

    (60) while_pro -> WHILE L_PAREN a R_PAREN . L_LLAVE instrucciones R_LLAVE

    L_LLAVE         shift and go to state 203


state 184

    (61) for_pro -> FOR L_PAREN declaration_instruction SEMI_COLON . a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (69) a -> . a OR b
    (70) a -> . b
    (71) b -> . b AND c
    (72) b -> . c
    (73) c -> . NOT d
    (74) c -> . d
    (75) d -> . d DISTINTO_QUE e
    (76) d -> . d MENOR_QUE e
    (77) d -> . d MENOR_IGUAL_QUE e
    (78) d -> . d MAYOR_QUE e
    (79) d -> . d MAYOR_IGUAL_QUE e
    (80) d -> . d TRIPLE_IGUAL e
    (81) d -> . e
    (82) e -> . e MAS f
    (83) e -> . e MENOS f
    (84) e -> . f
    (85) f -> . MENOS g
    (86) f -> . MAS g
    (87) f -> . g
    (88) g -> . g TIMES h
    (89) g -> . g DIVIDE h
    (90) g -> . g MOD h
    (91) g -> . g POTENCIA h
    (92) g -> . h
    (93) h -> . ENTERO
    (94) h -> . DECIMAL
    (95) h -> . CADENA
    (96) h -> . LITERAL
    (97) h -> . TRUE
    (98) h -> . FALSE
    (99) h -> . call_function_pro
    (100) h -> . array_pro
    (101) h -> . interface_assi
    (102) h -> . L_PAREN a R_PAREN
    (103) h -> . array_val_pro
    (104) h -> . a PUNTO LITERAL
    (105) h -> . a PUNTO nativeFun L_PAREN expresion R_PAREN
    (106) h -> . a PUNTO nativeFun L_PAREN R_PAREN
    (23) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (24) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (25) call_function_pro -> . TOSTRING L_PAREN values R_PAREN
    (115) array_pro -> . L_CORCHETE values R_CORCHETE
    (112) interface_assi -> . L_LLAVE atributos_assi R_LLAVE
    (107) array_val_pro -> . LITERAL dimensions

    NOT             shift and go to state 38
    MENOS           shift and go to state 35
    MAS             shift and go to state 34
    ENTERO          shift and go to state 44
    DECIMAL         shift and go to state 45
    CADENA          shift and go to state 46
    LITERAL         shift and go to state 72
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    L_PAREN         shift and go to state 20
    TOSTRING        shift and go to state 33
    L_CORCHETE      shift and go to state 52
    L_LLAVE         shift and go to state 25

    a                              shift and go to state 204
    b                              shift and go to state 36
    c                              shift and go to state 37
    d                              shift and go to state 39
    e                              shift and go to state 40
    f                              shift and go to state 41
    g                              shift and go to state 42
    h                              shift and go to state 43
    call_function_pro              shift and go to state 73
    array_pro                      shift and go to state 49
    interface_assi                 shift and go to state 50
    array_val_pro                  shift and go to state 51

state 185

    (62) for_pro -> FOR L_PAREN assig_pro SEMI_COLON . a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (69) a -> . a OR b
    (70) a -> . b
    (71) b -> . b AND c
    (72) b -> . c
    (73) c -> . NOT d
    (74) c -> . d
    (75) d -> . d DISTINTO_QUE e
    (76) d -> . d MENOR_QUE e
    (77) d -> . d MENOR_IGUAL_QUE e
    (78) d -> . d MAYOR_QUE e
    (79) d -> . d MAYOR_IGUAL_QUE e
    (80) d -> . d TRIPLE_IGUAL e
    (81) d -> . e
    (82) e -> . e MAS f
    (83) e -> . e MENOS f
    (84) e -> . f
    (85) f -> . MENOS g
    (86) f -> . MAS g
    (87) f -> . g
    (88) g -> . g TIMES h
    (89) g -> . g DIVIDE h
    (90) g -> . g MOD h
    (91) g -> . g POTENCIA h
    (92) g -> . h
    (93) h -> . ENTERO
    (94) h -> . DECIMAL
    (95) h -> . CADENA
    (96) h -> . LITERAL
    (97) h -> . TRUE
    (98) h -> . FALSE
    (99) h -> . call_function_pro
    (100) h -> . array_pro
    (101) h -> . interface_assi
    (102) h -> . L_PAREN a R_PAREN
    (103) h -> . array_val_pro
    (104) h -> . a PUNTO LITERAL
    (105) h -> . a PUNTO nativeFun L_PAREN expresion R_PAREN
    (106) h -> . a PUNTO nativeFun L_PAREN R_PAREN
    (23) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (24) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (25) call_function_pro -> . TOSTRING L_PAREN values R_PAREN
    (115) array_pro -> . L_CORCHETE values R_CORCHETE
    (112) interface_assi -> . L_LLAVE atributos_assi R_LLAVE
    (107) array_val_pro -> . LITERAL dimensions

    NOT             shift and go to state 38
    MENOS           shift and go to state 35
    MAS             shift and go to state 34
    ENTERO          shift and go to state 44
    DECIMAL         shift and go to state 45
    CADENA          shift and go to state 46
    LITERAL         shift and go to state 72
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    L_PAREN         shift and go to state 20
    TOSTRING        shift and go to state 33
    L_CORCHETE      shift and go to state 52
    L_LLAVE         shift and go to state 25

    a                              shift and go to state 205
    b                              shift and go to state 36
    c                              shift and go to state 37
    d                              shift and go to state 39
    e                              shift and go to state 40
    f                              shift and go to state 41
    g                              shift and go to state 42
    h                              shift and go to state 43
    call_function_pro              shift and go to state 73
    array_pro                      shift and go to state 49
    interface_assi                 shift and go to state 50
    array_val_pro                  shift and go to state 51

state 186

    (65) for_each_pro -> FOR L_PAREN LET LITERAL . OF a R_PAREN L_LLAVE instrucciones R_LLAVE
    (45) assignacion_instruction -> LITERAL . COLON type IGUAL a
    (46) assignacion_instruction -> LITERAL . COLON type
    (47) assignacion_instruction -> LITERAL . IGUAL a
    (48) assignacion_instruction -> LITERAL .

    OF              shift and go to state 206
    COLON           shift and go to state 117
    IGUAL           shift and go to state 118
    COMA            reduce using rule 48 (assignacion_instruction -> LITERAL .)
    SEMI_COLON      reduce using rule 48 (assignacion_instruction -> LITERAL .)


state 187

    (36) interface_pro -> INTERFACE LITERAL L_LLAVE interface_atributos . R_LLAVE
    (37) interface_atributos -> interface_atributos . interface_atributo sc
    (39) interface_atributo -> . LITERAL COLON type
    (40) interface_atributo -> . LITERAL

    R_LLAVE         shift and go to state 208
    LITERAL         shift and go to state 207

    interface_atributo             shift and go to state 209

state 188

    (30) parameter_pro -> LITERAL . COLON type
    (31) parameter_pro -> LITERAL .

    COLON           shift and go to state 210
    R_PAREN         reduce using rule 31 (parameter_pro -> LITERAL .)
    COMA            reduce using rule 31 (parameter_pro -> LITERAL .)


state 189

    (21) function_pro -> FUNCTION LITERAL L_PAREN parameters_pro . R_PAREN L_LLAVE instrucciones R_LLAVE
    (28) parameters_pro -> parameters_pro . COMA parameter_pro

    R_PAREN         shift and go to state 211
    COMA            shift and go to state 212


state 190

    (22) function_pro -> FUNCTION LITERAL L_PAREN R_PAREN . L_LLAVE instrucciones R_LLAVE

    L_LLAVE         shift and go to state 213


state 191

    (29) parameters_pro -> parameter_pro .

    R_PAREN         reduce using rule 29 (parameters_pro -> parameter_pro .)
    COMA            reduce using rule 29 (parameters_pro -> parameter_pro .)


state 192

    (25) call_function_pro -> TOSTRING L_PAREN values R_PAREN .

    SEMI_COLON      reduce using rule 25 (call_function_pro -> TOSTRING L_PAREN values R_PAREN .)
    CONSOLE         reduce using rule 25 (call_function_pro -> TOSTRING L_PAREN values R_PAREN .)
    LET             reduce using rule 25 (call_function_pro -> TOSTRING L_PAREN values R_PAREN .)
    LITERAL         reduce using rule 25 (call_function_pro -> TOSTRING L_PAREN values R_PAREN .)
    IF              reduce using rule 25 (call_function_pro -> TOSTRING L_PAREN values R_PAREN .)
    WHILE           reduce using rule 25 (call_function_pro -> TOSTRING L_PAREN values R_PAREN .)
    FOR             reduce using rule 25 (call_function_pro -> TOSTRING L_PAREN values R_PAREN .)
    INTERFACE       reduce using rule 25 (call_function_pro -> TOSTRING L_PAREN values R_PAREN .)
    CONTINUE        reduce using rule 25 (call_function_pro -> TOSTRING L_PAREN values R_PAREN .)
    BREAK           reduce using rule 25 (call_function_pro -> TOSTRING L_PAREN values R_PAREN .)
    RETURN          reduce using rule 25 (call_function_pro -> TOSTRING L_PAREN values R_PAREN .)
    FUNCTION        reduce using rule 25 (call_function_pro -> TOSTRING L_PAREN values R_PAREN .)
    TOSTRING        reduce using rule 25 (call_function_pro -> TOSTRING L_PAREN values R_PAREN .)
    NOT             reduce using rule 25 (call_function_pro -> TOSTRING L_PAREN values R_PAREN .)
    MENOS           reduce using rule 25 (call_function_pro -> TOSTRING L_PAREN values R_PAREN .)
    MAS             reduce using rule 25 (call_function_pro -> TOSTRING L_PAREN values R_PAREN .)
    ENTERO          reduce using rule 25 (call_function_pro -> TOSTRING L_PAREN values R_PAREN .)
    DECIMAL         reduce using rule 25 (call_function_pro -> TOSTRING L_PAREN values R_PAREN .)
    CADENA          reduce using rule 25 (call_function_pro -> TOSTRING L_PAREN values R_PAREN .)
    TRUE            reduce using rule 25 (call_function_pro -> TOSTRING L_PAREN values R_PAREN .)
    FALSE           reduce using rule 25 (call_function_pro -> TOSTRING L_PAREN values R_PAREN .)
    L_PAREN         reduce using rule 25 (call_function_pro -> TOSTRING L_PAREN values R_PAREN .)
    L_CORCHETE      reduce using rule 25 (call_function_pro -> TOSTRING L_PAREN values R_PAREN .)
    L_LLAVE         reduce using rule 25 (call_function_pro -> TOSTRING L_PAREN values R_PAREN .)
    $end            reduce using rule 25 (call_function_pro -> TOSTRING L_PAREN values R_PAREN .)
    TIMES           reduce using rule 25 (call_function_pro -> TOSTRING L_PAREN values R_PAREN .)
    DIVIDE          reduce using rule 25 (call_function_pro -> TOSTRING L_PAREN values R_PAREN .)
    MOD             reduce using rule 25 (call_function_pro -> TOSTRING L_PAREN values R_PAREN .)
    POTENCIA        reduce using rule 25 (call_function_pro -> TOSTRING L_PAREN values R_PAREN .)
    DISTINTO_QUE    reduce using rule 25 (call_function_pro -> TOSTRING L_PAREN values R_PAREN .)
    MENOR_QUE       reduce using rule 25 (call_function_pro -> TOSTRING L_PAREN values R_PAREN .)
    MENOR_IGUAL_QUE reduce using rule 25 (call_function_pro -> TOSTRING L_PAREN values R_PAREN .)
    MAYOR_QUE       reduce using rule 25 (call_function_pro -> TOSTRING L_PAREN values R_PAREN .)
    MAYOR_IGUAL_QUE reduce using rule 25 (call_function_pro -> TOSTRING L_PAREN values R_PAREN .)
    TRIPLE_IGUAL    reduce using rule 25 (call_function_pro -> TOSTRING L_PAREN values R_PAREN .)
    AND             reduce using rule 25 (call_function_pro -> TOSTRING L_PAREN values R_PAREN .)
    PUNTO           reduce using rule 25 (call_function_pro -> TOSTRING L_PAREN values R_PAREN .)
    OR              reduce using rule 25 (call_function_pro -> TOSTRING L_PAREN values R_PAREN .)
    R_PAREN         reduce using rule 25 (call_function_pro -> TOSTRING L_PAREN values R_PAREN .)
    R_LLAVE         reduce using rule 25 (call_function_pro -> TOSTRING L_PAREN values R_PAREN .)
    R_CORCHETE      reduce using rule 25 (call_function_pro -> TOSTRING L_PAREN values R_PAREN .)
    COMA            reduce using rule 25 (call_function_pro -> TOSTRING L_PAREN values R_PAREN .)


state 193

    (26) values -> values COMA a .
    (69) a -> a . OR b
    (104) h -> a . PUNTO LITERAL
    (105) h -> a . PUNTO nativeFun L_PAREN expresion R_PAREN
    (106) h -> a . PUNTO nativeFun L_PAREN R_PAREN

    R_CORCHETE      reduce using rule 26 (values -> values COMA a .)
    COMA            reduce using rule 26 (values -> values COMA a .)
    R_PAREN         reduce using rule 26 (values -> values COMA a .)
    OR              shift and go to state 84
    PUNTO           shift and go to state 115


state 194

    (66) console_pro -> CONSOLE PUNTO LOG L_PAREN expresion . R_PAREN
    (67) expresion -> expresion . COMA a

    R_PAREN         shift and go to state 214
    COMA            shift and go to state 215


state 195

    (68) expresion -> a .
    (69) a -> a . OR b
    (104) h -> a . PUNTO LITERAL
    (105) h -> a . PUNTO nativeFun L_PAREN expresion R_PAREN
    (106) h -> a . PUNTO nativeFun L_PAREN R_PAREN

    R_PAREN         reduce using rule 68 (expresion -> a .)
    COMA            reduce using rule 68 (expresion -> a .)
    OR              shift and go to state 84
    PUNTO           shift and go to state 115


state 196

    (45) assignacion_instruction -> LITERAL COLON type IGUAL . a
    (69) a -> . a OR b
    (70) a -> . b
    (71) b -> . b AND c
    (72) b -> . c
    (73) c -> . NOT d
    (74) c -> . d
    (75) d -> . d DISTINTO_QUE e
    (76) d -> . d MENOR_QUE e
    (77) d -> . d MENOR_IGUAL_QUE e
    (78) d -> . d MAYOR_QUE e
    (79) d -> . d MAYOR_IGUAL_QUE e
    (80) d -> . d TRIPLE_IGUAL e
    (81) d -> . e
    (82) e -> . e MAS f
    (83) e -> . e MENOS f
    (84) e -> . f
    (85) f -> . MENOS g
    (86) f -> . MAS g
    (87) f -> . g
    (88) g -> . g TIMES h
    (89) g -> . g DIVIDE h
    (90) g -> . g MOD h
    (91) g -> . g POTENCIA h
    (92) g -> . h
    (93) h -> . ENTERO
    (94) h -> . DECIMAL
    (95) h -> . CADENA
    (96) h -> . LITERAL
    (97) h -> . TRUE
    (98) h -> . FALSE
    (99) h -> . call_function_pro
    (100) h -> . array_pro
    (101) h -> . interface_assi
    (102) h -> . L_PAREN a R_PAREN
    (103) h -> . array_val_pro
    (104) h -> . a PUNTO LITERAL
    (105) h -> . a PUNTO nativeFun L_PAREN expresion R_PAREN
    (106) h -> . a PUNTO nativeFun L_PAREN R_PAREN
    (23) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (24) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (25) call_function_pro -> . TOSTRING L_PAREN values R_PAREN
    (115) array_pro -> . L_CORCHETE values R_CORCHETE
    (112) interface_assi -> . L_LLAVE atributos_assi R_LLAVE
    (107) array_val_pro -> . LITERAL dimensions

    NOT             shift and go to state 38
    MENOS           shift and go to state 35
    MAS             shift and go to state 34
    ENTERO          shift and go to state 44
    DECIMAL         shift and go to state 45
    CADENA          shift and go to state 46
    LITERAL         shift and go to state 72
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    L_PAREN         shift and go to state 20
    TOSTRING        shift and go to state 33
    L_CORCHETE      shift and go to state 52
    L_LLAVE         shift and go to state 25

    a                              shift and go to state 216
    b                              shift and go to state 36
    c                              shift and go to state 37
    d                              shift and go to state 39
    e                              shift and go to state 40
    f                              shift and go to state 41
    g                              shift and go to state 42
    h                              shift and go to state 43
    call_function_pro              shift and go to state 73
    array_pro                      shift and go to state 49
    interface_assi                 shift and go to state 50
    array_val_pro                  shift and go to state 51

state 197

    (108) dimensions -> dimensions L_CORCHETE a R_CORCHETE .

    L_CORCHETE      reduce using rule 108 (dimensions -> dimensions L_CORCHETE a R_CORCHETE .)
    TIMES           reduce using rule 108 (dimensions -> dimensions L_CORCHETE a R_CORCHETE .)
    DIVIDE          reduce using rule 108 (dimensions -> dimensions L_CORCHETE a R_CORCHETE .)
    MOD             reduce using rule 108 (dimensions -> dimensions L_CORCHETE a R_CORCHETE .)
    POTENCIA        reduce using rule 108 (dimensions -> dimensions L_CORCHETE a R_CORCHETE .)
    MAS             reduce using rule 108 (dimensions -> dimensions L_CORCHETE a R_CORCHETE .)
    MENOS           reduce using rule 108 (dimensions -> dimensions L_CORCHETE a R_CORCHETE .)
    DISTINTO_QUE    reduce using rule 108 (dimensions -> dimensions L_CORCHETE a R_CORCHETE .)
    MENOR_QUE       reduce using rule 108 (dimensions -> dimensions L_CORCHETE a R_CORCHETE .)
    MENOR_IGUAL_QUE reduce using rule 108 (dimensions -> dimensions L_CORCHETE a R_CORCHETE .)
    MAYOR_QUE       reduce using rule 108 (dimensions -> dimensions L_CORCHETE a R_CORCHETE .)
    MAYOR_IGUAL_QUE reduce using rule 108 (dimensions -> dimensions L_CORCHETE a R_CORCHETE .)
    TRIPLE_IGUAL    reduce using rule 108 (dimensions -> dimensions L_CORCHETE a R_CORCHETE .)
    AND             reduce using rule 108 (dimensions -> dimensions L_CORCHETE a R_CORCHETE .)
    PUNTO           reduce using rule 108 (dimensions -> dimensions L_CORCHETE a R_CORCHETE .)
    OR              reduce using rule 108 (dimensions -> dimensions L_CORCHETE a R_CORCHETE .)
    R_PAREN         reduce using rule 108 (dimensions -> dimensions L_CORCHETE a R_CORCHETE .)
    SEMI_COLON      reduce using rule 108 (dimensions -> dimensions L_CORCHETE a R_CORCHETE .)
    CONSOLE         reduce using rule 108 (dimensions -> dimensions L_CORCHETE a R_CORCHETE .)
    LET             reduce using rule 108 (dimensions -> dimensions L_CORCHETE a R_CORCHETE .)
    LITERAL         reduce using rule 108 (dimensions -> dimensions L_CORCHETE a R_CORCHETE .)
    IF              reduce using rule 108 (dimensions -> dimensions L_CORCHETE a R_CORCHETE .)
    WHILE           reduce using rule 108 (dimensions -> dimensions L_CORCHETE a R_CORCHETE .)
    FOR             reduce using rule 108 (dimensions -> dimensions L_CORCHETE a R_CORCHETE .)
    INTERFACE       reduce using rule 108 (dimensions -> dimensions L_CORCHETE a R_CORCHETE .)
    CONTINUE        reduce using rule 108 (dimensions -> dimensions L_CORCHETE a R_CORCHETE .)
    BREAK           reduce using rule 108 (dimensions -> dimensions L_CORCHETE a R_CORCHETE .)
    RETURN          reduce using rule 108 (dimensions -> dimensions L_CORCHETE a R_CORCHETE .)
    FUNCTION        reduce using rule 108 (dimensions -> dimensions L_CORCHETE a R_CORCHETE .)
    TOSTRING        reduce using rule 108 (dimensions -> dimensions L_CORCHETE a R_CORCHETE .)
    NOT             reduce using rule 108 (dimensions -> dimensions L_CORCHETE a R_CORCHETE .)
    ENTERO          reduce using rule 108 (dimensions -> dimensions L_CORCHETE a R_CORCHETE .)
    DECIMAL         reduce using rule 108 (dimensions -> dimensions L_CORCHETE a R_CORCHETE .)
    CADENA          reduce using rule 108 (dimensions -> dimensions L_CORCHETE a R_CORCHETE .)
    TRUE            reduce using rule 108 (dimensions -> dimensions L_CORCHETE a R_CORCHETE .)
    FALSE           reduce using rule 108 (dimensions -> dimensions L_CORCHETE a R_CORCHETE .)
    L_PAREN         reduce using rule 108 (dimensions -> dimensions L_CORCHETE a R_CORCHETE .)
    L_LLAVE         reduce using rule 108 (dimensions -> dimensions L_CORCHETE a R_CORCHETE .)
    $end            reduce using rule 108 (dimensions -> dimensions L_CORCHETE a R_CORCHETE .)
    R_LLAVE         reduce using rule 108 (dimensions -> dimensions L_CORCHETE a R_CORCHETE .)
    R_CORCHETE      reduce using rule 108 (dimensions -> dimensions L_CORCHETE a R_CORCHETE .)
    COMA            reduce using rule 108 (dimensions -> dimensions L_CORCHETE a R_CORCHETE .)


state 198

    (41) interface_assign_pro -> a PUNTO LITERAL IGUAL a .
    (69) a -> a . OR b
    (104) h -> a . PUNTO LITERAL
    (105) h -> a . PUNTO nativeFun L_PAREN expresion R_PAREN
    (106) h -> a . PUNTO nativeFun L_PAREN R_PAREN

    SEMI_COLON      reduce using rule 41 (interface_assign_pro -> a PUNTO LITERAL IGUAL a .)
    CONSOLE         reduce using rule 41 (interface_assign_pro -> a PUNTO LITERAL IGUAL a .)
    LET             reduce using rule 41 (interface_assign_pro -> a PUNTO LITERAL IGUAL a .)
    LITERAL         reduce using rule 41 (interface_assign_pro -> a PUNTO LITERAL IGUAL a .)
    IF              reduce using rule 41 (interface_assign_pro -> a PUNTO LITERAL IGUAL a .)
    WHILE           reduce using rule 41 (interface_assign_pro -> a PUNTO LITERAL IGUAL a .)
    FOR             reduce using rule 41 (interface_assign_pro -> a PUNTO LITERAL IGUAL a .)
    INTERFACE       reduce using rule 41 (interface_assign_pro -> a PUNTO LITERAL IGUAL a .)
    CONTINUE        reduce using rule 41 (interface_assign_pro -> a PUNTO LITERAL IGUAL a .)
    BREAK           reduce using rule 41 (interface_assign_pro -> a PUNTO LITERAL IGUAL a .)
    RETURN          reduce using rule 41 (interface_assign_pro -> a PUNTO LITERAL IGUAL a .)
    FUNCTION        reduce using rule 41 (interface_assign_pro -> a PUNTO LITERAL IGUAL a .)
    TOSTRING        reduce using rule 41 (interface_assign_pro -> a PUNTO LITERAL IGUAL a .)
    NOT             reduce using rule 41 (interface_assign_pro -> a PUNTO LITERAL IGUAL a .)
    MENOS           reduce using rule 41 (interface_assign_pro -> a PUNTO LITERAL IGUAL a .)
    MAS             reduce using rule 41 (interface_assign_pro -> a PUNTO LITERAL IGUAL a .)
    ENTERO          reduce using rule 41 (interface_assign_pro -> a PUNTO LITERAL IGUAL a .)
    DECIMAL         reduce using rule 41 (interface_assign_pro -> a PUNTO LITERAL IGUAL a .)
    CADENA          reduce using rule 41 (interface_assign_pro -> a PUNTO LITERAL IGUAL a .)
    TRUE            reduce using rule 41 (interface_assign_pro -> a PUNTO LITERAL IGUAL a .)
    FALSE           reduce using rule 41 (interface_assign_pro -> a PUNTO LITERAL IGUAL a .)
    L_PAREN         reduce using rule 41 (interface_assign_pro -> a PUNTO LITERAL IGUAL a .)
    L_CORCHETE      reduce using rule 41 (interface_assign_pro -> a PUNTO LITERAL IGUAL a .)
    L_LLAVE         reduce using rule 41 (interface_assign_pro -> a PUNTO LITERAL IGUAL a .)
    $end            reduce using rule 41 (interface_assign_pro -> a PUNTO LITERAL IGUAL a .)
    R_LLAVE         reduce using rule 41 (interface_assign_pro -> a PUNTO LITERAL IGUAL a .)
    OR              shift and go to state 84
    PUNTO           shift and go to state 115


state 199

    (105) h -> a PUNTO nativeFun L_PAREN expresion . R_PAREN
    (67) expresion -> expresion . COMA a

    R_PAREN         shift and go to state 217
    COMA            shift and go to state 215


state 200

    (106) h -> a PUNTO nativeFun L_PAREN R_PAREN .

    TIMES           reduce using rule 106 (h -> a PUNTO nativeFun L_PAREN R_PAREN .)
    DIVIDE          reduce using rule 106 (h -> a PUNTO nativeFun L_PAREN R_PAREN .)
    MOD             reduce using rule 106 (h -> a PUNTO nativeFun L_PAREN R_PAREN .)
    POTENCIA        reduce using rule 106 (h -> a PUNTO nativeFun L_PAREN R_PAREN .)
    MAS             reduce using rule 106 (h -> a PUNTO nativeFun L_PAREN R_PAREN .)
    MENOS           reduce using rule 106 (h -> a PUNTO nativeFun L_PAREN R_PAREN .)
    DISTINTO_QUE    reduce using rule 106 (h -> a PUNTO nativeFun L_PAREN R_PAREN .)
    MENOR_QUE       reduce using rule 106 (h -> a PUNTO nativeFun L_PAREN R_PAREN .)
    MENOR_IGUAL_QUE reduce using rule 106 (h -> a PUNTO nativeFun L_PAREN R_PAREN .)
    MAYOR_QUE       reduce using rule 106 (h -> a PUNTO nativeFun L_PAREN R_PAREN .)
    MAYOR_IGUAL_QUE reduce using rule 106 (h -> a PUNTO nativeFun L_PAREN R_PAREN .)
    TRIPLE_IGUAL    reduce using rule 106 (h -> a PUNTO nativeFun L_PAREN R_PAREN .)
    AND             reduce using rule 106 (h -> a PUNTO nativeFun L_PAREN R_PAREN .)
    PUNTO           reduce using rule 106 (h -> a PUNTO nativeFun L_PAREN R_PAREN .)
    OR              reduce using rule 106 (h -> a PUNTO nativeFun L_PAREN R_PAREN .)
    R_PAREN         reduce using rule 106 (h -> a PUNTO nativeFun L_PAREN R_PAREN .)
    SEMI_COLON      reduce using rule 106 (h -> a PUNTO nativeFun L_PAREN R_PAREN .)
    CONSOLE         reduce using rule 106 (h -> a PUNTO nativeFun L_PAREN R_PAREN .)
    LET             reduce using rule 106 (h -> a PUNTO nativeFun L_PAREN R_PAREN .)
    LITERAL         reduce using rule 106 (h -> a PUNTO nativeFun L_PAREN R_PAREN .)
    IF              reduce using rule 106 (h -> a PUNTO nativeFun L_PAREN R_PAREN .)
    WHILE           reduce using rule 106 (h -> a PUNTO nativeFun L_PAREN R_PAREN .)
    FOR             reduce using rule 106 (h -> a PUNTO nativeFun L_PAREN R_PAREN .)
    INTERFACE       reduce using rule 106 (h -> a PUNTO nativeFun L_PAREN R_PAREN .)
    CONTINUE        reduce using rule 106 (h -> a PUNTO nativeFun L_PAREN R_PAREN .)
    BREAK           reduce using rule 106 (h -> a PUNTO nativeFun L_PAREN R_PAREN .)
    RETURN          reduce using rule 106 (h -> a PUNTO nativeFun L_PAREN R_PAREN .)
    FUNCTION        reduce using rule 106 (h -> a PUNTO nativeFun L_PAREN R_PAREN .)
    TOSTRING        reduce using rule 106 (h -> a PUNTO nativeFun L_PAREN R_PAREN .)
    NOT             reduce using rule 106 (h -> a PUNTO nativeFun L_PAREN R_PAREN .)
    ENTERO          reduce using rule 106 (h -> a PUNTO nativeFun L_PAREN R_PAREN .)
    DECIMAL         reduce using rule 106 (h -> a PUNTO nativeFun L_PAREN R_PAREN .)
    CADENA          reduce using rule 106 (h -> a PUNTO nativeFun L_PAREN R_PAREN .)
    TRUE            reduce using rule 106 (h -> a PUNTO nativeFun L_PAREN R_PAREN .)
    FALSE           reduce using rule 106 (h -> a PUNTO nativeFun L_PAREN R_PAREN .)
    L_PAREN         reduce using rule 106 (h -> a PUNTO nativeFun L_PAREN R_PAREN .)
    L_CORCHETE      reduce using rule 106 (h -> a PUNTO nativeFun L_PAREN R_PAREN .)
    L_LLAVE         reduce using rule 106 (h -> a PUNTO nativeFun L_PAREN R_PAREN .)
    $end            reduce using rule 106 (h -> a PUNTO nativeFun L_PAREN R_PAREN .)
    R_LLAVE         reduce using rule 106 (h -> a PUNTO nativeFun L_PAREN R_PAREN .)
    R_CORCHETE      reduce using rule 106 (h -> a PUNTO nativeFun L_PAREN R_PAREN .)
    COMA            reduce using rule 106 (h -> a PUNTO nativeFun L_PAREN R_PAREN .)


state 201

    (56) if_pro -> IF L_PAREN a R_PAREN L_LLAVE . instrucciones R_LLAVE else_pro
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . console_pro sc
    (5) instruccion -> . declaration_instruction sc
    (6) instruccion -> . assig_pro sc
    (7) instruccion -> . interface_assign_pro sc
    (8) instruccion -> . if_pro sc
    (9) instruccion -> . while_pro sc
    (10) instruccion -> . for_pro sc
    (11) instruccion -> . for_each_pro sc
    (12) instruccion -> . interface_pro sc
    (13) instruccion -> . continue_pro sc
    (14) instruccion -> . break_pro sc
    (15) instruccion -> . return_pro sc
    (16) instruccion -> . function_pro sc
    (17) instruccion -> . call_function_pro sc
    (18) instruccion -> . sumadores sc
    (66) console_pro -> . CONSOLE PUNTO LOG L_PAREN expresion R_PAREN
    (42) declaration_instruction -> . LET declaracion_list
    (55) assig_pro -> . LITERAL IGUAL a
    (41) interface_assign_pro -> . a PUNTO LITERAL IGUAL a
    (56) if_pro -> . IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro
    (60) while_pro -> . WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE
    (61) for_pro -> . FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (62) for_pro -> . FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (65) for_each_pro -> . FOR L_PAREN LET LITERAL OF a R_PAREN L_LLAVE instrucciones R_LLAVE
    (36) interface_pro -> . INTERFACE LITERAL L_LLAVE interface_atributos R_LLAVE
    (32) continue_pro -> . CONTINUE
    (33) break_pro -> . BREAK
    (34) return_pro -> . RETURN
    (35) return_pro -> . RETURN a
    (21) function_pro -> . FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (22) function_pro -> . FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE
    (23) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (24) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (25) call_function_pro -> . TOSTRING L_PAREN values R_PAREN
    (110) sumadores -> . LITERAL MAS MAS
    (111) sumadores -> . LITERAL MENOS MENOS
    (69) a -> . a OR b
    (70) a -> . b
    (71) b -> . b AND c
    (72) b -> . c
    (73) c -> . NOT d
    (74) c -> . d
    (75) d -> . d DISTINTO_QUE e
    (76) d -> . d MENOR_QUE e
    (77) d -> . d MENOR_IGUAL_QUE e
    (78) d -> . d MAYOR_QUE e
    (79) d -> . d MAYOR_IGUAL_QUE e
    (80) d -> . d TRIPLE_IGUAL e
    (81) d -> . e
    (82) e -> . e MAS f
    (83) e -> . e MENOS f
    (84) e -> . f
    (85) f -> . MENOS g
    (86) f -> . MAS g
    (87) f -> . g
    (88) g -> . g TIMES h
    (89) g -> . g DIVIDE h
    (90) g -> . g MOD h
    (91) g -> . g POTENCIA h
    (92) g -> . h
    (93) h -> . ENTERO
    (94) h -> . DECIMAL
    (95) h -> . CADENA
    (96) h -> . LITERAL
    (97) h -> . TRUE
    (98) h -> . FALSE
    (99) h -> . call_function_pro
    (100) h -> . array_pro
    (101) h -> . interface_assi
    (102) h -> . L_PAREN a R_PAREN
    (103) h -> . array_val_pro
    (104) h -> . a PUNTO LITERAL
    (105) h -> . a PUNTO nativeFun L_PAREN expresion R_PAREN
    (106) h -> . a PUNTO nativeFun L_PAREN R_PAREN
    (115) array_pro -> . L_CORCHETE values R_CORCHETE
    (112) interface_assi -> . L_LLAVE atributos_assi R_LLAVE
    (107) array_val_pro -> . LITERAL dimensions

    CONSOLE         shift and go to state 19
    LET             shift and go to state 21
    LITERAL         shift and go to state 22
    IF              shift and go to state 24
    WHILE           shift and go to state 26
    FOR             shift and go to state 27
    INTERFACE       shift and go to state 28
    CONTINUE        shift and go to state 29
    BREAK           shift and go to state 30
    RETURN          shift and go to state 31
    FUNCTION        shift and go to state 32
    TOSTRING        shift and go to state 33
    NOT             shift and go to state 38
    MENOS           shift and go to state 35
    MAS             shift and go to state 34
    ENTERO          shift and go to state 44
    DECIMAL         shift and go to state 45
    CADENA          shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    L_PAREN         shift and go to state 20
    L_CORCHETE      shift and go to state 52
    L_LLAVE         shift and go to state 25

    a                              shift and go to state 23
    instrucciones                  shift and go to state 218
    instruccion                    shift and go to state 3
    console_pro                    shift and go to state 4
    declaration_instruction        shift and go to state 5
    assig_pro                      shift and go to state 6
    interface_assign_pro           shift and go to state 7
    if_pro                         shift and go to state 8
    while_pro                      shift and go to state 9
    for_pro                        shift and go to state 10
    for_each_pro                   shift and go to state 11
    interface_pro                  shift and go to state 12
    continue_pro                   shift and go to state 13
    break_pro                      shift and go to state 14
    return_pro                     shift and go to state 15
    function_pro                   shift and go to state 16
    call_function_pro              shift and go to state 17
    sumadores                      shift and go to state 18
    b                              shift and go to state 36
    c                              shift and go to state 37
    d                              shift and go to state 39
    e                              shift and go to state 40
    f                              shift and go to state 41
    g                              shift and go to state 42
    h                              shift and go to state 43
    array_pro                      shift and go to state 49
    interface_assi                 shift and go to state 50
    array_val_pro                  shift and go to state 51

state 202

    (113) atributos_assi -> atributos_assi COMA LITERAL COLON . a
    (69) a -> . a OR b
    (70) a -> . b
    (71) b -> . b AND c
    (72) b -> . c
    (73) c -> . NOT d
    (74) c -> . d
    (75) d -> . d DISTINTO_QUE e
    (76) d -> . d MENOR_QUE e
    (77) d -> . d MENOR_IGUAL_QUE e
    (78) d -> . d MAYOR_QUE e
    (79) d -> . d MAYOR_IGUAL_QUE e
    (80) d -> . d TRIPLE_IGUAL e
    (81) d -> . e
    (82) e -> . e MAS f
    (83) e -> . e MENOS f
    (84) e -> . f
    (85) f -> . MENOS g
    (86) f -> . MAS g
    (87) f -> . g
    (88) g -> . g TIMES h
    (89) g -> . g DIVIDE h
    (90) g -> . g MOD h
    (91) g -> . g POTENCIA h
    (92) g -> . h
    (93) h -> . ENTERO
    (94) h -> . DECIMAL
    (95) h -> . CADENA
    (96) h -> . LITERAL
    (97) h -> . TRUE
    (98) h -> . FALSE
    (99) h -> . call_function_pro
    (100) h -> . array_pro
    (101) h -> . interface_assi
    (102) h -> . L_PAREN a R_PAREN
    (103) h -> . array_val_pro
    (104) h -> . a PUNTO LITERAL
    (105) h -> . a PUNTO nativeFun L_PAREN expresion R_PAREN
    (106) h -> . a PUNTO nativeFun L_PAREN R_PAREN
    (23) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (24) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (25) call_function_pro -> . TOSTRING L_PAREN values R_PAREN
    (115) array_pro -> . L_CORCHETE values R_CORCHETE
    (112) interface_assi -> . L_LLAVE atributos_assi R_LLAVE
    (107) array_val_pro -> . LITERAL dimensions

    NOT             shift and go to state 38
    MENOS           shift and go to state 35
    MAS             shift and go to state 34
    ENTERO          shift and go to state 44
    DECIMAL         shift and go to state 45
    CADENA          shift and go to state 46
    LITERAL         shift and go to state 72
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    L_PAREN         shift and go to state 20
    TOSTRING        shift and go to state 33
    L_CORCHETE      shift and go to state 52
    L_LLAVE         shift and go to state 25

    a                              shift and go to state 219
    b                              shift and go to state 36
    c                              shift and go to state 37
    d                              shift and go to state 39
    e                              shift and go to state 40
    f                              shift and go to state 41
    g                              shift and go to state 42
    h                              shift and go to state 43
    call_function_pro              shift and go to state 73
    array_pro                      shift and go to state 49
    interface_assi                 shift and go to state 50
    array_val_pro                  shift and go to state 51

state 203

    (60) while_pro -> WHILE L_PAREN a R_PAREN L_LLAVE . instrucciones R_LLAVE
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . console_pro sc
    (5) instruccion -> . declaration_instruction sc
    (6) instruccion -> . assig_pro sc
    (7) instruccion -> . interface_assign_pro sc
    (8) instruccion -> . if_pro sc
    (9) instruccion -> . while_pro sc
    (10) instruccion -> . for_pro sc
    (11) instruccion -> . for_each_pro sc
    (12) instruccion -> . interface_pro sc
    (13) instruccion -> . continue_pro sc
    (14) instruccion -> . break_pro sc
    (15) instruccion -> . return_pro sc
    (16) instruccion -> . function_pro sc
    (17) instruccion -> . call_function_pro sc
    (18) instruccion -> . sumadores sc
    (66) console_pro -> . CONSOLE PUNTO LOG L_PAREN expresion R_PAREN
    (42) declaration_instruction -> . LET declaracion_list
    (55) assig_pro -> . LITERAL IGUAL a
    (41) interface_assign_pro -> . a PUNTO LITERAL IGUAL a
    (56) if_pro -> . IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro
    (60) while_pro -> . WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE
    (61) for_pro -> . FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (62) for_pro -> . FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (65) for_each_pro -> . FOR L_PAREN LET LITERAL OF a R_PAREN L_LLAVE instrucciones R_LLAVE
    (36) interface_pro -> . INTERFACE LITERAL L_LLAVE interface_atributos R_LLAVE
    (32) continue_pro -> . CONTINUE
    (33) break_pro -> . BREAK
    (34) return_pro -> . RETURN
    (35) return_pro -> . RETURN a
    (21) function_pro -> . FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (22) function_pro -> . FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE
    (23) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (24) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (25) call_function_pro -> . TOSTRING L_PAREN values R_PAREN
    (110) sumadores -> . LITERAL MAS MAS
    (111) sumadores -> . LITERAL MENOS MENOS
    (69) a -> . a OR b
    (70) a -> . b
    (71) b -> . b AND c
    (72) b -> . c
    (73) c -> . NOT d
    (74) c -> . d
    (75) d -> . d DISTINTO_QUE e
    (76) d -> . d MENOR_QUE e
    (77) d -> . d MENOR_IGUAL_QUE e
    (78) d -> . d MAYOR_QUE e
    (79) d -> . d MAYOR_IGUAL_QUE e
    (80) d -> . d TRIPLE_IGUAL e
    (81) d -> . e
    (82) e -> . e MAS f
    (83) e -> . e MENOS f
    (84) e -> . f
    (85) f -> . MENOS g
    (86) f -> . MAS g
    (87) f -> . g
    (88) g -> . g TIMES h
    (89) g -> . g DIVIDE h
    (90) g -> . g MOD h
    (91) g -> . g POTENCIA h
    (92) g -> . h
    (93) h -> . ENTERO
    (94) h -> . DECIMAL
    (95) h -> . CADENA
    (96) h -> . LITERAL
    (97) h -> . TRUE
    (98) h -> . FALSE
    (99) h -> . call_function_pro
    (100) h -> . array_pro
    (101) h -> . interface_assi
    (102) h -> . L_PAREN a R_PAREN
    (103) h -> . array_val_pro
    (104) h -> . a PUNTO LITERAL
    (105) h -> . a PUNTO nativeFun L_PAREN expresion R_PAREN
    (106) h -> . a PUNTO nativeFun L_PAREN R_PAREN
    (115) array_pro -> . L_CORCHETE values R_CORCHETE
    (112) interface_assi -> . L_LLAVE atributos_assi R_LLAVE
    (107) array_val_pro -> . LITERAL dimensions

    CONSOLE         shift and go to state 19
    LET             shift and go to state 21
    LITERAL         shift and go to state 22
    IF              shift and go to state 24
    WHILE           shift and go to state 26
    FOR             shift and go to state 27
    INTERFACE       shift and go to state 28
    CONTINUE        shift and go to state 29
    BREAK           shift and go to state 30
    RETURN          shift and go to state 31
    FUNCTION        shift and go to state 32
    TOSTRING        shift and go to state 33
    NOT             shift and go to state 38
    MENOS           shift and go to state 35
    MAS             shift and go to state 34
    ENTERO          shift and go to state 44
    DECIMAL         shift and go to state 45
    CADENA          shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    L_PAREN         shift and go to state 20
    L_CORCHETE      shift and go to state 52
    L_LLAVE         shift and go to state 25

    a                              shift and go to state 23
    instrucciones                  shift and go to state 220
    instruccion                    shift and go to state 3
    console_pro                    shift and go to state 4
    declaration_instruction        shift and go to state 5
    assig_pro                      shift and go to state 6
    interface_assign_pro           shift and go to state 7
    if_pro                         shift and go to state 8
    while_pro                      shift and go to state 9
    for_pro                        shift and go to state 10
    for_each_pro                   shift and go to state 11
    interface_pro                  shift and go to state 12
    continue_pro                   shift and go to state 13
    break_pro                      shift and go to state 14
    return_pro                     shift and go to state 15
    function_pro                   shift and go to state 16
    call_function_pro              shift and go to state 17
    sumadores                      shift and go to state 18
    b                              shift and go to state 36
    c                              shift and go to state 37
    d                              shift and go to state 39
    e                              shift and go to state 40
    f                              shift and go to state 41
    g                              shift and go to state 42
    h                              shift and go to state 43
    array_pro                      shift and go to state 49
    interface_assi                 shift and go to state 50
    array_val_pro                  shift and go to state 51

state 204

    (61) for_pro -> FOR L_PAREN declaration_instruction SEMI_COLON a . SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (69) a -> a . OR b
    (104) h -> a . PUNTO LITERAL
    (105) h -> a . PUNTO nativeFun L_PAREN expresion R_PAREN
    (106) h -> a . PUNTO nativeFun L_PAREN R_PAREN

    SEMI_COLON      shift and go to state 221
    OR              shift and go to state 84
    PUNTO           shift and go to state 115


state 205

    (62) for_pro -> FOR L_PAREN assig_pro SEMI_COLON a . SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (69) a -> a . OR b
    (104) h -> a . PUNTO LITERAL
    (105) h -> a . PUNTO nativeFun L_PAREN expresion R_PAREN
    (106) h -> a . PUNTO nativeFun L_PAREN R_PAREN

    SEMI_COLON      shift and go to state 222
    OR              shift and go to state 84
    PUNTO           shift and go to state 115


state 206

    (65) for_each_pro -> FOR L_PAREN LET LITERAL OF . a R_PAREN L_LLAVE instrucciones R_LLAVE
    (69) a -> . a OR b
    (70) a -> . b
    (71) b -> . b AND c
    (72) b -> . c
    (73) c -> . NOT d
    (74) c -> . d
    (75) d -> . d DISTINTO_QUE e
    (76) d -> . d MENOR_QUE e
    (77) d -> . d MENOR_IGUAL_QUE e
    (78) d -> . d MAYOR_QUE e
    (79) d -> . d MAYOR_IGUAL_QUE e
    (80) d -> . d TRIPLE_IGUAL e
    (81) d -> . e
    (82) e -> . e MAS f
    (83) e -> . e MENOS f
    (84) e -> . f
    (85) f -> . MENOS g
    (86) f -> . MAS g
    (87) f -> . g
    (88) g -> . g TIMES h
    (89) g -> . g DIVIDE h
    (90) g -> . g MOD h
    (91) g -> . g POTENCIA h
    (92) g -> . h
    (93) h -> . ENTERO
    (94) h -> . DECIMAL
    (95) h -> . CADENA
    (96) h -> . LITERAL
    (97) h -> . TRUE
    (98) h -> . FALSE
    (99) h -> . call_function_pro
    (100) h -> . array_pro
    (101) h -> . interface_assi
    (102) h -> . L_PAREN a R_PAREN
    (103) h -> . array_val_pro
    (104) h -> . a PUNTO LITERAL
    (105) h -> . a PUNTO nativeFun L_PAREN expresion R_PAREN
    (106) h -> . a PUNTO nativeFun L_PAREN R_PAREN
    (23) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (24) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (25) call_function_pro -> . TOSTRING L_PAREN values R_PAREN
    (115) array_pro -> . L_CORCHETE values R_CORCHETE
    (112) interface_assi -> . L_LLAVE atributos_assi R_LLAVE
    (107) array_val_pro -> . LITERAL dimensions

    NOT             shift and go to state 38
    MENOS           shift and go to state 35
    MAS             shift and go to state 34
    ENTERO          shift and go to state 44
    DECIMAL         shift and go to state 45
    CADENA          shift and go to state 46
    LITERAL         shift and go to state 72
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    L_PAREN         shift and go to state 20
    TOSTRING        shift and go to state 33
    L_CORCHETE      shift and go to state 52
    L_LLAVE         shift and go to state 25

    a                              shift and go to state 223
    b                              shift and go to state 36
    c                              shift and go to state 37
    d                              shift and go to state 39
    e                              shift and go to state 40
    f                              shift and go to state 41
    g                              shift and go to state 42
    h                              shift and go to state 43
    call_function_pro              shift and go to state 73
    array_pro                      shift and go to state 49
    interface_assi                 shift and go to state 50
    array_val_pro                  shift and go to state 51

state 207

    (39) interface_atributo -> LITERAL . COLON type
    (40) interface_atributo -> LITERAL .

    COLON           shift and go to state 224
    SEMI_COLON      reduce using rule 40 (interface_atributo -> LITERAL .)
    R_LLAVE         reduce using rule 40 (interface_atributo -> LITERAL .)
    LITERAL         reduce using rule 40 (interface_atributo -> LITERAL .)


state 208

    (36) interface_pro -> INTERFACE LITERAL L_LLAVE interface_atributos R_LLAVE .

    SEMI_COLON      reduce using rule 36 (interface_pro -> INTERFACE LITERAL L_LLAVE interface_atributos R_LLAVE .)
    CONSOLE         reduce using rule 36 (interface_pro -> INTERFACE LITERAL L_LLAVE interface_atributos R_LLAVE .)
    LET             reduce using rule 36 (interface_pro -> INTERFACE LITERAL L_LLAVE interface_atributos R_LLAVE .)
    LITERAL         reduce using rule 36 (interface_pro -> INTERFACE LITERAL L_LLAVE interface_atributos R_LLAVE .)
    IF              reduce using rule 36 (interface_pro -> INTERFACE LITERAL L_LLAVE interface_atributos R_LLAVE .)
    WHILE           reduce using rule 36 (interface_pro -> INTERFACE LITERAL L_LLAVE interface_atributos R_LLAVE .)
    FOR             reduce using rule 36 (interface_pro -> INTERFACE LITERAL L_LLAVE interface_atributos R_LLAVE .)
    INTERFACE       reduce using rule 36 (interface_pro -> INTERFACE LITERAL L_LLAVE interface_atributos R_LLAVE .)
    CONTINUE        reduce using rule 36 (interface_pro -> INTERFACE LITERAL L_LLAVE interface_atributos R_LLAVE .)
    BREAK           reduce using rule 36 (interface_pro -> INTERFACE LITERAL L_LLAVE interface_atributos R_LLAVE .)
    RETURN          reduce using rule 36 (interface_pro -> INTERFACE LITERAL L_LLAVE interface_atributos R_LLAVE .)
    FUNCTION        reduce using rule 36 (interface_pro -> INTERFACE LITERAL L_LLAVE interface_atributos R_LLAVE .)
    TOSTRING        reduce using rule 36 (interface_pro -> INTERFACE LITERAL L_LLAVE interface_atributos R_LLAVE .)
    NOT             reduce using rule 36 (interface_pro -> INTERFACE LITERAL L_LLAVE interface_atributos R_LLAVE .)
    MENOS           reduce using rule 36 (interface_pro -> INTERFACE LITERAL L_LLAVE interface_atributos R_LLAVE .)
    MAS             reduce using rule 36 (interface_pro -> INTERFACE LITERAL L_LLAVE interface_atributos R_LLAVE .)
    ENTERO          reduce using rule 36 (interface_pro -> INTERFACE LITERAL L_LLAVE interface_atributos R_LLAVE .)
    DECIMAL         reduce using rule 36 (interface_pro -> INTERFACE LITERAL L_LLAVE interface_atributos R_LLAVE .)
    CADENA          reduce using rule 36 (interface_pro -> INTERFACE LITERAL L_LLAVE interface_atributos R_LLAVE .)
    TRUE            reduce using rule 36 (interface_pro -> INTERFACE LITERAL L_LLAVE interface_atributos R_LLAVE .)
    FALSE           reduce using rule 36 (interface_pro -> INTERFACE LITERAL L_LLAVE interface_atributos R_LLAVE .)
    L_PAREN         reduce using rule 36 (interface_pro -> INTERFACE LITERAL L_LLAVE interface_atributos R_LLAVE .)
    L_CORCHETE      reduce using rule 36 (interface_pro -> INTERFACE LITERAL L_LLAVE interface_atributos R_LLAVE .)
    L_LLAVE         reduce using rule 36 (interface_pro -> INTERFACE LITERAL L_LLAVE interface_atributos R_LLAVE .)
    $end            reduce using rule 36 (interface_pro -> INTERFACE LITERAL L_LLAVE interface_atributos R_LLAVE .)
    R_LLAVE         reduce using rule 36 (interface_pro -> INTERFACE LITERAL L_LLAVE interface_atributos R_LLAVE .)


state 209

    (37) interface_atributos -> interface_atributos interface_atributo . sc
    (19) sc -> . SEMI_COLON
    (20) sc -> .

    SEMI_COLON      shift and go to state 55
    R_LLAVE         reduce using rule 20 (sc -> .)
    LITERAL         reduce using rule 20 (sc -> .)

    sc                             shift and go to state 225

state 210

    (30) parameter_pro -> LITERAL COLON . type
    (49) type -> . NUMBER
    (50) type -> . STRING
    (51) type -> . BOOLEAN
    (52) type -> . ANY
    (53) type -> . LITERAL
    (54) type -> . NULL

    NUMBER          shift and go to state 169
    STRING          shift and go to state 170
    BOOLEAN         shift and go to state 171
    ANY             shift and go to state 172
    LITERAL         shift and go to state 167
    NULL            shift and go to state 173

    type                           shift and go to state 226

state 211

    (21) function_pro -> FUNCTION LITERAL L_PAREN parameters_pro R_PAREN . L_LLAVE instrucciones R_LLAVE

    L_LLAVE         shift and go to state 227


state 212

    (28) parameters_pro -> parameters_pro COMA . parameter_pro
    (30) parameter_pro -> . LITERAL COLON type
    (31) parameter_pro -> . LITERAL

    LITERAL         shift and go to state 188

    parameter_pro                  shift and go to state 228

state 213

    (22) function_pro -> FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE . instrucciones R_LLAVE
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . console_pro sc
    (5) instruccion -> . declaration_instruction sc
    (6) instruccion -> . assig_pro sc
    (7) instruccion -> . interface_assign_pro sc
    (8) instruccion -> . if_pro sc
    (9) instruccion -> . while_pro sc
    (10) instruccion -> . for_pro sc
    (11) instruccion -> . for_each_pro sc
    (12) instruccion -> . interface_pro sc
    (13) instruccion -> . continue_pro sc
    (14) instruccion -> . break_pro sc
    (15) instruccion -> . return_pro sc
    (16) instruccion -> . function_pro sc
    (17) instruccion -> . call_function_pro sc
    (18) instruccion -> . sumadores sc
    (66) console_pro -> . CONSOLE PUNTO LOG L_PAREN expresion R_PAREN
    (42) declaration_instruction -> . LET declaracion_list
    (55) assig_pro -> . LITERAL IGUAL a
    (41) interface_assign_pro -> . a PUNTO LITERAL IGUAL a
    (56) if_pro -> . IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro
    (60) while_pro -> . WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE
    (61) for_pro -> . FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (62) for_pro -> . FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (65) for_each_pro -> . FOR L_PAREN LET LITERAL OF a R_PAREN L_LLAVE instrucciones R_LLAVE
    (36) interface_pro -> . INTERFACE LITERAL L_LLAVE interface_atributos R_LLAVE
    (32) continue_pro -> . CONTINUE
    (33) break_pro -> . BREAK
    (34) return_pro -> . RETURN
    (35) return_pro -> . RETURN a
    (21) function_pro -> . FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (22) function_pro -> . FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE
    (23) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (24) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (25) call_function_pro -> . TOSTRING L_PAREN values R_PAREN
    (110) sumadores -> . LITERAL MAS MAS
    (111) sumadores -> . LITERAL MENOS MENOS
    (69) a -> . a OR b
    (70) a -> . b
    (71) b -> . b AND c
    (72) b -> . c
    (73) c -> . NOT d
    (74) c -> . d
    (75) d -> . d DISTINTO_QUE e
    (76) d -> . d MENOR_QUE e
    (77) d -> . d MENOR_IGUAL_QUE e
    (78) d -> . d MAYOR_QUE e
    (79) d -> . d MAYOR_IGUAL_QUE e
    (80) d -> . d TRIPLE_IGUAL e
    (81) d -> . e
    (82) e -> . e MAS f
    (83) e -> . e MENOS f
    (84) e -> . f
    (85) f -> . MENOS g
    (86) f -> . MAS g
    (87) f -> . g
    (88) g -> . g TIMES h
    (89) g -> . g DIVIDE h
    (90) g -> . g MOD h
    (91) g -> . g POTENCIA h
    (92) g -> . h
    (93) h -> . ENTERO
    (94) h -> . DECIMAL
    (95) h -> . CADENA
    (96) h -> . LITERAL
    (97) h -> . TRUE
    (98) h -> . FALSE
    (99) h -> . call_function_pro
    (100) h -> . array_pro
    (101) h -> . interface_assi
    (102) h -> . L_PAREN a R_PAREN
    (103) h -> . array_val_pro
    (104) h -> . a PUNTO LITERAL
    (105) h -> . a PUNTO nativeFun L_PAREN expresion R_PAREN
    (106) h -> . a PUNTO nativeFun L_PAREN R_PAREN
    (115) array_pro -> . L_CORCHETE values R_CORCHETE
    (112) interface_assi -> . L_LLAVE atributos_assi R_LLAVE
    (107) array_val_pro -> . LITERAL dimensions

    CONSOLE         shift and go to state 19
    LET             shift and go to state 21
    LITERAL         shift and go to state 22
    IF              shift and go to state 24
    WHILE           shift and go to state 26
    FOR             shift and go to state 27
    INTERFACE       shift and go to state 28
    CONTINUE        shift and go to state 29
    BREAK           shift and go to state 30
    RETURN          shift and go to state 31
    FUNCTION        shift and go to state 32
    TOSTRING        shift and go to state 33
    NOT             shift and go to state 38
    MENOS           shift and go to state 35
    MAS             shift and go to state 34
    ENTERO          shift and go to state 44
    DECIMAL         shift and go to state 45
    CADENA          shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    L_PAREN         shift and go to state 20
    L_CORCHETE      shift and go to state 52
    L_LLAVE         shift and go to state 25

    instrucciones                  shift and go to state 229
    instruccion                    shift and go to state 3
    console_pro                    shift and go to state 4
    declaration_instruction        shift and go to state 5
    assig_pro                      shift and go to state 6
    interface_assign_pro           shift and go to state 7
    if_pro                         shift and go to state 8
    while_pro                      shift and go to state 9
    for_pro                        shift and go to state 10
    for_each_pro                   shift and go to state 11
    interface_pro                  shift and go to state 12
    continue_pro                   shift and go to state 13
    break_pro                      shift and go to state 14
    return_pro                     shift and go to state 15
    function_pro                   shift and go to state 16
    call_function_pro              shift and go to state 17
    sumadores                      shift and go to state 18
    a                              shift and go to state 23
    b                              shift and go to state 36
    c                              shift and go to state 37
    d                              shift and go to state 39
    e                              shift and go to state 40
    f                              shift and go to state 41
    g                              shift and go to state 42
    h                              shift and go to state 43
    array_pro                      shift and go to state 49
    interface_assi                 shift and go to state 50
    array_val_pro                  shift and go to state 51

state 214

    (66) console_pro -> CONSOLE PUNTO LOG L_PAREN expresion R_PAREN .

    SEMI_COLON      reduce using rule 66 (console_pro -> CONSOLE PUNTO LOG L_PAREN expresion R_PAREN .)
    CONSOLE         reduce using rule 66 (console_pro -> CONSOLE PUNTO LOG L_PAREN expresion R_PAREN .)
    LET             reduce using rule 66 (console_pro -> CONSOLE PUNTO LOG L_PAREN expresion R_PAREN .)
    LITERAL         reduce using rule 66 (console_pro -> CONSOLE PUNTO LOG L_PAREN expresion R_PAREN .)
    IF              reduce using rule 66 (console_pro -> CONSOLE PUNTO LOG L_PAREN expresion R_PAREN .)
    WHILE           reduce using rule 66 (console_pro -> CONSOLE PUNTO LOG L_PAREN expresion R_PAREN .)
    FOR             reduce using rule 66 (console_pro -> CONSOLE PUNTO LOG L_PAREN expresion R_PAREN .)
    INTERFACE       reduce using rule 66 (console_pro -> CONSOLE PUNTO LOG L_PAREN expresion R_PAREN .)
    CONTINUE        reduce using rule 66 (console_pro -> CONSOLE PUNTO LOG L_PAREN expresion R_PAREN .)
    BREAK           reduce using rule 66 (console_pro -> CONSOLE PUNTO LOG L_PAREN expresion R_PAREN .)
    RETURN          reduce using rule 66 (console_pro -> CONSOLE PUNTO LOG L_PAREN expresion R_PAREN .)
    FUNCTION        reduce using rule 66 (console_pro -> CONSOLE PUNTO LOG L_PAREN expresion R_PAREN .)
    TOSTRING        reduce using rule 66 (console_pro -> CONSOLE PUNTO LOG L_PAREN expresion R_PAREN .)
    NOT             reduce using rule 66 (console_pro -> CONSOLE PUNTO LOG L_PAREN expresion R_PAREN .)
    MENOS           reduce using rule 66 (console_pro -> CONSOLE PUNTO LOG L_PAREN expresion R_PAREN .)
    MAS             reduce using rule 66 (console_pro -> CONSOLE PUNTO LOG L_PAREN expresion R_PAREN .)
    ENTERO          reduce using rule 66 (console_pro -> CONSOLE PUNTO LOG L_PAREN expresion R_PAREN .)
    DECIMAL         reduce using rule 66 (console_pro -> CONSOLE PUNTO LOG L_PAREN expresion R_PAREN .)
    CADENA          reduce using rule 66 (console_pro -> CONSOLE PUNTO LOG L_PAREN expresion R_PAREN .)
    TRUE            reduce using rule 66 (console_pro -> CONSOLE PUNTO LOG L_PAREN expresion R_PAREN .)
    FALSE           reduce using rule 66 (console_pro -> CONSOLE PUNTO LOG L_PAREN expresion R_PAREN .)
    L_PAREN         reduce using rule 66 (console_pro -> CONSOLE PUNTO LOG L_PAREN expresion R_PAREN .)
    L_CORCHETE      reduce using rule 66 (console_pro -> CONSOLE PUNTO LOG L_PAREN expresion R_PAREN .)
    L_LLAVE         reduce using rule 66 (console_pro -> CONSOLE PUNTO LOG L_PAREN expresion R_PAREN .)
    $end            reduce using rule 66 (console_pro -> CONSOLE PUNTO LOG L_PAREN expresion R_PAREN .)
    R_LLAVE         reduce using rule 66 (console_pro -> CONSOLE PUNTO LOG L_PAREN expresion R_PAREN .)


state 215

    (67) expresion -> expresion COMA . a
    (69) a -> . a OR b
    (70) a -> . b
    (71) b -> . b AND c
    (72) b -> . c
    (73) c -> . NOT d
    (74) c -> . d
    (75) d -> . d DISTINTO_QUE e
    (76) d -> . d MENOR_QUE e
    (77) d -> . d MENOR_IGUAL_QUE e
    (78) d -> . d MAYOR_QUE e
    (79) d -> . d MAYOR_IGUAL_QUE e
    (80) d -> . d TRIPLE_IGUAL e
    (81) d -> . e
    (82) e -> . e MAS f
    (83) e -> . e MENOS f
    (84) e -> . f
    (85) f -> . MENOS g
    (86) f -> . MAS g
    (87) f -> . g
    (88) g -> . g TIMES h
    (89) g -> . g DIVIDE h
    (90) g -> . g MOD h
    (91) g -> . g POTENCIA h
    (92) g -> . h
    (93) h -> . ENTERO
    (94) h -> . DECIMAL
    (95) h -> . CADENA
    (96) h -> . LITERAL
    (97) h -> . TRUE
    (98) h -> . FALSE
    (99) h -> . call_function_pro
    (100) h -> . array_pro
    (101) h -> . interface_assi
    (102) h -> . L_PAREN a R_PAREN
    (103) h -> . array_val_pro
    (104) h -> . a PUNTO LITERAL
    (105) h -> . a PUNTO nativeFun L_PAREN expresion R_PAREN
    (106) h -> . a PUNTO nativeFun L_PAREN R_PAREN
    (23) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (24) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (25) call_function_pro -> . TOSTRING L_PAREN values R_PAREN
    (115) array_pro -> . L_CORCHETE values R_CORCHETE
    (112) interface_assi -> . L_LLAVE atributos_assi R_LLAVE
    (107) array_val_pro -> . LITERAL dimensions

    NOT             shift and go to state 38
    MENOS           shift and go to state 35
    MAS             shift and go to state 34
    ENTERO          shift and go to state 44
    DECIMAL         shift and go to state 45
    CADENA          shift and go to state 46
    LITERAL         shift and go to state 72
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    L_PAREN         shift and go to state 20
    TOSTRING        shift and go to state 33
    L_CORCHETE      shift and go to state 52
    L_LLAVE         shift and go to state 25

    a                              shift and go to state 230
    b                              shift and go to state 36
    c                              shift and go to state 37
    d                              shift and go to state 39
    e                              shift and go to state 40
    f                              shift and go to state 41
    g                              shift and go to state 42
    h                              shift and go to state 43
    call_function_pro              shift and go to state 73
    array_pro                      shift and go to state 49
    interface_assi                 shift and go to state 50
    array_val_pro                  shift and go to state 51

state 216

    (45) assignacion_instruction -> LITERAL COLON type IGUAL a .
    (69) a -> a . OR b
    (104) h -> a . PUNTO LITERAL
    (105) h -> a . PUNTO nativeFun L_PAREN expresion R_PAREN
    (106) h -> a . PUNTO nativeFun L_PAREN R_PAREN

    COMA            reduce using rule 45 (assignacion_instruction -> LITERAL COLON type IGUAL a .)
    SEMI_COLON      reduce using rule 45 (assignacion_instruction -> LITERAL COLON type IGUAL a .)
    CONSOLE         reduce using rule 45 (assignacion_instruction -> LITERAL COLON type IGUAL a .)
    LET             reduce using rule 45 (assignacion_instruction -> LITERAL COLON type IGUAL a .)
    LITERAL         reduce using rule 45 (assignacion_instruction -> LITERAL COLON type IGUAL a .)
    IF              reduce using rule 45 (assignacion_instruction -> LITERAL COLON type IGUAL a .)
    WHILE           reduce using rule 45 (assignacion_instruction -> LITERAL COLON type IGUAL a .)
    FOR             reduce using rule 45 (assignacion_instruction -> LITERAL COLON type IGUAL a .)
    INTERFACE       reduce using rule 45 (assignacion_instruction -> LITERAL COLON type IGUAL a .)
    CONTINUE        reduce using rule 45 (assignacion_instruction -> LITERAL COLON type IGUAL a .)
    BREAK           reduce using rule 45 (assignacion_instruction -> LITERAL COLON type IGUAL a .)
    RETURN          reduce using rule 45 (assignacion_instruction -> LITERAL COLON type IGUAL a .)
    FUNCTION        reduce using rule 45 (assignacion_instruction -> LITERAL COLON type IGUAL a .)
    TOSTRING        reduce using rule 45 (assignacion_instruction -> LITERAL COLON type IGUAL a .)
    NOT             reduce using rule 45 (assignacion_instruction -> LITERAL COLON type IGUAL a .)
    MENOS           reduce using rule 45 (assignacion_instruction -> LITERAL COLON type IGUAL a .)
    MAS             reduce using rule 45 (assignacion_instruction -> LITERAL COLON type IGUAL a .)
    ENTERO          reduce using rule 45 (assignacion_instruction -> LITERAL COLON type IGUAL a .)
    DECIMAL         reduce using rule 45 (assignacion_instruction -> LITERAL COLON type IGUAL a .)
    CADENA          reduce using rule 45 (assignacion_instruction -> LITERAL COLON type IGUAL a .)
    TRUE            reduce using rule 45 (assignacion_instruction -> LITERAL COLON type IGUAL a .)
    FALSE           reduce using rule 45 (assignacion_instruction -> LITERAL COLON type IGUAL a .)
    L_PAREN         reduce using rule 45 (assignacion_instruction -> LITERAL COLON type IGUAL a .)
    L_CORCHETE      reduce using rule 45 (assignacion_instruction -> LITERAL COLON type IGUAL a .)
    L_LLAVE         reduce using rule 45 (assignacion_instruction -> LITERAL COLON type IGUAL a .)
    $end            reduce using rule 45 (assignacion_instruction -> LITERAL COLON type IGUAL a .)
    R_LLAVE         reduce using rule 45 (assignacion_instruction -> LITERAL COLON type IGUAL a .)
    OR              shift and go to state 84
    PUNTO           shift and go to state 115


state 217

    (105) h -> a PUNTO nativeFun L_PAREN expresion R_PAREN .

    TIMES           reduce using rule 105 (h -> a PUNTO nativeFun L_PAREN expresion R_PAREN .)
    DIVIDE          reduce using rule 105 (h -> a PUNTO nativeFun L_PAREN expresion R_PAREN .)
    MOD             reduce using rule 105 (h -> a PUNTO nativeFun L_PAREN expresion R_PAREN .)
    POTENCIA        reduce using rule 105 (h -> a PUNTO nativeFun L_PAREN expresion R_PAREN .)
    MAS             reduce using rule 105 (h -> a PUNTO nativeFun L_PAREN expresion R_PAREN .)
    MENOS           reduce using rule 105 (h -> a PUNTO nativeFun L_PAREN expresion R_PAREN .)
    DISTINTO_QUE    reduce using rule 105 (h -> a PUNTO nativeFun L_PAREN expresion R_PAREN .)
    MENOR_QUE       reduce using rule 105 (h -> a PUNTO nativeFun L_PAREN expresion R_PAREN .)
    MENOR_IGUAL_QUE reduce using rule 105 (h -> a PUNTO nativeFun L_PAREN expresion R_PAREN .)
    MAYOR_QUE       reduce using rule 105 (h -> a PUNTO nativeFun L_PAREN expresion R_PAREN .)
    MAYOR_IGUAL_QUE reduce using rule 105 (h -> a PUNTO nativeFun L_PAREN expresion R_PAREN .)
    TRIPLE_IGUAL    reduce using rule 105 (h -> a PUNTO nativeFun L_PAREN expresion R_PAREN .)
    AND             reduce using rule 105 (h -> a PUNTO nativeFun L_PAREN expresion R_PAREN .)
    PUNTO           reduce using rule 105 (h -> a PUNTO nativeFun L_PAREN expresion R_PAREN .)
    OR              reduce using rule 105 (h -> a PUNTO nativeFun L_PAREN expresion R_PAREN .)
    R_PAREN         reduce using rule 105 (h -> a PUNTO nativeFun L_PAREN expresion R_PAREN .)
    SEMI_COLON      reduce using rule 105 (h -> a PUNTO nativeFun L_PAREN expresion R_PAREN .)
    CONSOLE         reduce using rule 105 (h -> a PUNTO nativeFun L_PAREN expresion R_PAREN .)
    LET             reduce using rule 105 (h -> a PUNTO nativeFun L_PAREN expresion R_PAREN .)
    LITERAL         reduce using rule 105 (h -> a PUNTO nativeFun L_PAREN expresion R_PAREN .)
    IF              reduce using rule 105 (h -> a PUNTO nativeFun L_PAREN expresion R_PAREN .)
    WHILE           reduce using rule 105 (h -> a PUNTO nativeFun L_PAREN expresion R_PAREN .)
    FOR             reduce using rule 105 (h -> a PUNTO nativeFun L_PAREN expresion R_PAREN .)
    INTERFACE       reduce using rule 105 (h -> a PUNTO nativeFun L_PAREN expresion R_PAREN .)
    CONTINUE        reduce using rule 105 (h -> a PUNTO nativeFun L_PAREN expresion R_PAREN .)
    BREAK           reduce using rule 105 (h -> a PUNTO nativeFun L_PAREN expresion R_PAREN .)
    RETURN          reduce using rule 105 (h -> a PUNTO nativeFun L_PAREN expresion R_PAREN .)
    FUNCTION        reduce using rule 105 (h -> a PUNTO nativeFun L_PAREN expresion R_PAREN .)
    TOSTRING        reduce using rule 105 (h -> a PUNTO nativeFun L_PAREN expresion R_PAREN .)
    NOT             reduce using rule 105 (h -> a PUNTO nativeFun L_PAREN expresion R_PAREN .)
    ENTERO          reduce using rule 105 (h -> a PUNTO nativeFun L_PAREN expresion R_PAREN .)
    DECIMAL         reduce using rule 105 (h -> a PUNTO nativeFun L_PAREN expresion R_PAREN .)
    CADENA          reduce using rule 105 (h -> a PUNTO nativeFun L_PAREN expresion R_PAREN .)
    TRUE            reduce using rule 105 (h -> a PUNTO nativeFun L_PAREN expresion R_PAREN .)
    FALSE           reduce using rule 105 (h -> a PUNTO nativeFun L_PAREN expresion R_PAREN .)
    L_PAREN         reduce using rule 105 (h -> a PUNTO nativeFun L_PAREN expresion R_PAREN .)
    L_CORCHETE      reduce using rule 105 (h -> a PUNTO nativeFun L_PAREN expresion R_PAREN .)
    L_LLAVE         reduce using rule 105 (h -> a PUNTO nativeFun L_PAREN expresion R_PAREN .)
    $end            reduce using rule 105 (h -> a PUNTO nativeFun L_PAREN expresion R_PAREN .)
    R_LLAVE         reduce using rule 105 (h -> a PUNTO nativeFun L_PAREN expresion R_PAREN .)
    R_CORCHETE      reduce using rule 105 (h -> a PUNTO nativeFun L_PAREN expresion R_PAREN .)
    COMA            reduce using rule 105 (h -> a PUNTO nativeFun L_PAREN expresion R_PAREN .)


state 218

    (56) if_pro -> IF L_PAREN a R_PAREN L_LLAVE instrucciones . R_LLAVE else_pro
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . console_pro sc
    (5) instruccion -> . declaration_instruction sc
    (6) instruccion -> . assig_pro sc
    (7) instruccion -> . interface_assign_pro sc
    (8) instruccion -> . if_pro sc
    (9) instruccion -> . while_pro sc
    (10) instruccion -> . for_pro sc
    (11) instruccion -> . for_each_pro sc
    (12) instruccion -> . interface_pro sc
    (13) instruccion -> . continue_pro sc
    (14) instruccion -> . break_pro sc
    (15) instruccion -> . return_pro sc
    (16) instruccion -> . function_pro sc
    (17) instruccion -> . call_function_pro sc
    (18) instruccion -> . sumadores sc
    (66) console_pro -> . CONSOLE PUNTO LOG L_PAREN expresion R_PAREN
    (42) declaration_instruction -> . LET declaracion_list
    (55) assig_pro -> . LITERAL IGUAL a
    (41) interface_assign_pro -> . a PUNTO LITERAL IGUAL a
    (56) if_pro -> . IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro
    (60) while_pro -> . WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE
    (61) for_pro -> . FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (62) for_pro -> . FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (65) for_each_pro -> . FOR L_PAREN LET LITERAL OF a R_PAREN L_LLAVE instrucciones R_LLAVE
    (36) interface_pro -> . INTERFACE LITERAL L_LLAVE interface_atributos R_LLAVE
    (32) continue_pro -> . CONTINUE
    (33) break_pro -> . BREAK
    (34) return_pro -> . RETURN
    (35) return_pro -> . RETURN a
    (21) function_pro -> . FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (22) function_pro -> . FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE
    (23) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (24) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (25) call_function_pro -> . TOSTRING L_PAREN values R_PAREN
    (110) sumadores -> . LITERAL MAS MAS
    (111) sumadores -> . LITERAL MENOS MENOS
    (69) a -> . a OR b
    (70) a -> . b
    (71) b -> . b AND c
    (72) b -> . c
    (73) c -> . NOT d
    (74) c -> . d
    (75) d -> . d DISTINTO_QUE e
    (76) d -> . d MENOR_QUE e
    (77) d -> . d MENOR_IGUAL_QUE e
    (78) d -> . d MAYOR_QUE e
    (79) d -> . d MAYOR_IGUAL_QUE e
    (80) d -> . d TRIPLE_IGUAL e
    (81) d -> . e
    (82) e -> . e MAS f
    (83) e -> . e MENOS f
    (84) e -> . f
    (85) f -> . MENOS g
    (86) f -> . MAS g
    (87) f -> . g
    (88) g -> . g TIMES h
    (89) g -> . g DIVIDE h
    (90) g -> . g MOD h
    (91) g -> . g POTENCIA h
    (92) g -> . h
    (93) h -> . ENTERO
    (94) h -> . DECIMAL
    (95) h -> . CADENA
    (96) h -> . LITERAL
    (97) h -> . TRUE
    (98) h -> . FALSE
    (99) h -> . call_function_pro
    (100) h -> . array_pro
    (101) h -> . interface_assi
    (102) h -> . L_PAREN a R_PAREN
    (103) h -> . array_val_pro
    (104) h -> . a PUNTO LITERAL
    (105) h -> . a PUNTO nativeFun L_PAREN expresion R_PAREN
    (106) h -> . a PUNTO nativeFun L_PAREN R_PAREN
    (115) array_pro -> . L_CORCHETE values R_CORCHETE
    (112) interface_assi -> . L_LLAVE atributos_assi R_LLAVE
    (107) array_val_pro -> . LITERAL dimensions

    R_LLAVE         shift and go to state 231
    CONSOLE         shift and go to state 19
    LET             shift and go to state 21
    LITERAL         shift and go to state 22
    IF              shift and go to state 24
    WHILE           shift and go to state 26
    FOR             shift and go to state 27
    INTERFACE       shift and go to state 28
    CONTINUE        shift and go to state 29
    BREAK           shift and go to state 30
    RETURN          shift and go to state 31
    FUNCTION        shift and go to state 32
    TOSTRING        shift and go to state 33
    NOT             shift and go to state 38
    MENOS           shift and go to state 35
    MAS             shift and go to state 34
    ENTERO          shift and go to state 44
    DECIMAL         shift and go to state 45
    CADENA          shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    L_PAREN         shift and go to state 20
    L_CORCHETE      shift and go to state 52
    L_LLAVE         shift and go to state 25

    a                              shift and go to state 23
    instruccion                    shift and go to state 53
    console_pro                    shift and go to state 4
    declaration_instruction        shift and go to state 5
    assig_pro                      shift and go to state 6
    interface_assign_pro           shift and go to state 7
    if_pro                         shift and go to state 8
    while_pro                      shift and go to state 9
    for_pro                        shift and go to state 10
    for_each_pro                   shift and go to state 11
    interface_pro                  shift and go to state 12
    continue_pro                   shift and go to state 13
    break_pro                      shift and go to state 14
    return_pro                     shift and go to state 15
    function_pro                   shift and go to state 16
    call_function_pro              shift and go to state 17
    sumadores                      shift and go to state 18
    b                              shift and go to state 36
    c                              shift and go to state 37
    d                              shift and go to state 39
    e                              shift and go to state 40
    f                              shift and go to state 41
    g                              shift and go to state 42
    h                              shift and go to state 43
    array_pro                      shift and go to state 49
    interface_assi                 shift and go to state 50
    array_val_pro                  shift and go to state 51

state 219

    (113) atributos_assi -> atributos_assi COMA LITERAL COLON a .
    (69) a -> a . OR b
    (104) h -> a . PUNTO LITERAL
    (105) h -> a . PUNTO nativeFun L_PAREN expresion R_PAREN
    (106) h -> a . PUNTO nativeFun L_PAREN R_PAREN

    R_LLAVE         reduce using rule 113 (atributos_assi -> atributos_assi COMA LITERAL COLON a .)
    COMA            reduce using rule 113 (atributos_assi -> atributos_assi COMA LITERAL COLON a .)
    OR              shift and go to state 84
    PUNTO           shift and go to state 115


state 220

    (60) while_pro -> WHILE L_PAREN a R_PAREN L_LLAVE instrucciones . R_LLAVE
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . console_pro sc
    (5) instruccion -> . declaration_instruction sc
    (6) instruccion -> . assig_pro sc
    (7) instruccion -> . interface_assign_pro sc
    (8) instruccion -> . if_pro sc
    (9) instruccion -> . while_pro sc
    (10) instruccion -> . for_pro sc
    (11) instruccion -> . for_each_pro sc
    (12) instruccion -> . interface_pro sc
    (13) instruccion -> . continue_pro sc
    (14) instruccion -> . break_pro sc
    (15) instruccion -> . return_pro sc
    (16) instruccion -> . function_pro sc
    (17) instruccion -> . call_function_pro sc
    (18) instruccion -> . sumadores sc
    (66) console_pro -> . CONSOLE PUNTO LOG L_PAREN expresion R_PAREN
    (42) declaration_instruction -> . LET declaracion_list
    (55) assig_pro -> . LITERAL IGUAL a
    (41) interface_assign_pro -> . a PUNTO LITERAL IGUAL a
    (56) if_pro -> . IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro
    (60) while_pro -> . WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE
    (61) for_pro -> . FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (62) for_pro -> . FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (65) for_each_pro -> . FOR L_PAREN LET LITERAL OF a R_PAREN L_LLAVE instrucciones R_LLAVE
    (36) interface_pro -> . INTERFACE LITERAL L_LLAVE interface_atributos R_LLAVE
    (32) continue_pro -> . CONTINUE
    (33) break_pro -> . BREAK
    (34) return_pro -> . RETURN
    (35) return_pro -> . RETURN a
    (21) function_pro -> . FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (22) function_pro -> . FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE
    (23) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (24) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (25) call_function_pro -> . TOSTRING L_PAREN values R_PAREN
    (110) sumadores -> . LITERAL MAS MAS
    (111) sumadores -> . LITERAL MENOS MENOS
    (69) a -> . a OR b
    (70) a -> . b
    (71) b -> . b AND c
    (72) b -> . c
    (73) c -> . NOT d
    (74) c -> . d
    (75) d -> . d DISTINTO_QUE e
    (76) d -> . d MENOR_QUE e
    (77) d -> . d MENOR_IGUAL_QUE e
    (78) d -> . d MAYOR_QUE e
    (79) d -> . d MAYOR_IGUAL_QUE e
    (80) d -> . d TRIPLE_IGUAL e
    (81) d -> . e
    (82) e -> . e MAS f
    (83) e -> . e MENOS f
    (84) e -> . f
    (85) f -> . MENOS g
    (86) f -> . MAS g
    (87) f -> . g
    (88) g -> . g TIMES h
    (89) g -> . g DIVIDE h
    (90) g -> . g MOD h
    (91) g -> . g POTENCIA h
    (92) g -> . h
    (93) h -> . ENTERO
    (94) h -> . DECIMAL
    (95) h -> . CADENA
    (96) h -> . LITERAL
    (97) h -> . TRUE
    (98) h -> . FALSE
    (99) h -> . call_function_pro
    (100) h -> . array_pro
    (101) h -> . interface_assi
    (102) h -> . L_PAREN a R_PAREN
    (103) h -> . array_val_pro
    (104) h -> . a PUNTO LITERAL
    (105) h -> . a PUNTO nativeFun L_PAREN expresion R_PAREN
    (106) h -> . a PUNTO nativeFun L_PAREN R_PAREN
    (115) array_pro -> . L_CORCHETE values R_CORCHETE
    (112) interface_assi -> . L_LLAVE atributos_assi R_LLAVE
    (107) array_val_pro -> . LITERAL dimensions

    R_LLAVE         shift and go to state 232
    CONSOLE         shift and go to state 19
    LET             shift and go to state 21
    LITERAL         shift and go to state 22
    IF              shift and go to state 24
    WHILE           shift and go to state 26
    FOR             shift and go to state 27
    INTERFACE       shift and go to state 28
    CONTINUE        shift and go to state 29
    BREAK           shift and go to state 30
    RETURN          shift and go to state 31
    FUNCTION        shift and go to state 32
    TOSTRING        shift and go to state 33
    NOT             shift and go to state 38
    MENOS           shift and go to state 35
    MAS             shift and go to state 34
    ENTERO          shift and go to state 44
    DECIMAL         shift and go to state 45
    CADENA          shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    L_PAREN         shift and go to state 20
    L_CORCHETE      shift and go to state 52
    L_LLAVE         shift and go to state 25

    a                              shift and go to state 23
    instruccion                    shift and go to state 53
    console_pro                    shift and go to state 4
    declaration_instruction        shift and go to state 5
    assig_pro                      shift and go to state 6
    interface_assign_pro           shift and go to state 7
    if_pro                         shift and go to state 8
    while_pro                      shift and go to state 9
    for_pro                        shift and go to state 10
    for_each_pro                   shift and go to state 11
    interface_pro                  shift and go to state 12
    continue_pro                   shift and go to state 13
    break_pro                      shift and go to state 14
    return_pro                     shift and go to state 15
    function_pro                   shift and go to state 16
    call_function_pro              shift and go to state 17
    sumadores                      shift and go to state 18
    b                              shift and go to state 36
    c                              shift and go to state 37
    d                              shift and go to state 39
    e                              shift and go to state 40
    f                              shift and go to state 41
    g                              shift and go to state 42
    h                              shift and go to state 43
    array_pro                      shift and go to state 49
    interface_assi                 shift and go to state 50
    array_val_pro                  shift and go to state 51

state 221

    (61) for_pro -> FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON . inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (63) inDec_pro -> . assig_pro
    (64) inDec_pro -> . sumadores
    (55) assig_pro -> . LITERAL IGUAL a
    (110) sumadores -> . LITERAL MAS MAS
    (111) sumadores -> . LITERAL MENOS MENOS

    LITERAL         shift and go to state 236

    inDec_pro                      shift and go to state 233
    assig_pro                      shift and go to state 234
    sumadores                      shift and go to state 235

state 222

    (62) for_pro -> FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON . inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (63) inDec_pro -> . assig_pro
    (64) inDec_pro -> . sumadores
    (55) assig_pro -> . LITERAL IGUAL a
    (110) sumadores -> . LITERAL MAS MAS
    (111) sumadores -> . LITERAL MENOS MENOS

    LITERAL         shift and go to state 236

    assig_pro                      shift and go to state 234
    inDec_pro                      shift and go to state 237
    sumadores                      shift and go to state 235

state 223

    (65) for_each_pro -> FOR L_PAREN LET LITERAL OF a . R_PAREN L_LLAVE instrucciones R_LLAVE
    (69) a -> a . OR b
    (104) h -> a . PUNTO LITERAL
    (105) h -> a . PUNTO nativeFun L_PAREN expresion R_PAREN
    (106) h -> a . PUNTO nativeFun L_PAREN R_PAREN

    R_PAREN         shift and go to state 238
    OR              shift and go to state 84
    PUNTO           shift and go to state 115


state 224

    (39) interface_atributo -> LITERAL COLON . type
    (49) type -> . NUMBER
    (50) type -> . STRING
    (51) type -> . BOOLEAN
    (52) type -> . ANY
    (53) type -> . LITERAL
    (54) type -> . NULL

    NUMBER          shift and go to state 169
    STRING          shift and go to state 170
    BOOLEAN         shift and go to state 171
    ANY             shift and go to state 172
    LITERAL         shift and go to state 167
    NULL            shift and go to state 173

    type                           shift and go to state 239

state 225

    (37) interface_atributos -> interface_atributos interface_atributo sc .

    R_LLAVE         reduce using rule 37 (interface_atributos -> interface_atributos interface_atributo sc .)
    LITERAL         reduce using rule 37 (interface_atributos -> interface_atributos interface_atributo sc .)


state 226

    (30) parameter_pro -> LITERAL COLON type .

    R_PAREN         reduce using rule 30 (parameter_pro -> LITERAL COLON type .)
    COMA            reduce using rule 30 (parameter_pro -> LITERAL COLON type .)


state 227

    (21) function_pro -> FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE . instrucciones R_LLAVE
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . console_pro sc
    (5) instruccion -> . declaration_instruction sc
    (6) instruccion -> . assig_pro sc
    (7) instruccion -> . interface_assign_pro sc
    (8) instruccion -> . if_pro sc
    (9) instruccion -> . while_pro sc
    (10) instruccion -> . for_pro sc
    (11) instruccion -> . for_each_pro sc
    (12) instruccion -> . interface_pro sc
    (13) instruccion -> . continue_pro sc
    (14) instruccion -> . break_pro sc
    (15) instruccion -> . return_pro sc
    (16) instruccion -> . function_pro sc
    (17) instruccion -> . call_function_pro sc
    (18) instruccion -> . sumadores sc
    (66) console_pro -> . CONSOLE PUNTO LOG L_PAREN expresion R_PAREN
    (42) declaration_instruction -> . LET declaracion_list
    (55) assig_pro -> . LITERAL IGUAL a
    (41) interface_assign_pro -> . a PUNTO LITERAL IGUAL a
    (56) if_pro -> . IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro
    (60) while_pro -> . WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE
    (61) for_pro -> . FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (62) for_pro -> . FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (65) for_each_pro -> . FOR L_PAREN LET LITERAL OF a R_PAREN L_LLAVE instrucciones R_LLAVE
    (36) interface_pro -> . INTERFACE LITERAL L_LLAVE interface_atributos R_LLAVE
    (32) continue_pro -> . CONTINUE
    (33) break_pro -> . BREAK
    (34) return_pro -> . RETURN
    (35) return_pro -> . RETURN a
    (21) function_pro -> . FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (22) function_pro -> . FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE
    (23) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (24) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (25) call_function_pro -> . TOSTRING L_PAREN values R_PAREN
    (110) sumadores -> . LITERAL MAS MAS
    (111) sumadores -> . LITERAL MENOS MENOS
    (69) a -> . a OR b
    (70) a -> . b
    (71) b -> . b AND c
    (72) b -> . c
    (73) c -> . NOT d
    (74) c -> . d
    (75) d -> . d DISTINTO_QUE e
    (76) d -> . d MENOR_QUE e
    (77) d -> . d MENOR_IGUAL_QUE e
    (78) d -> . d MAYOR_QUE e
    (79) d -> . d MAYOR_IGUAL_QUE e
    (80) d -> . d TRIPLE_IGUAL e
    (81) d -> . e
    (82) e -> . e MAS f
    (83) e -> . e MENOS f
    (84) e -> . f
    (85) f -> . MENOS g
    (86) f -> . MAS g
    (87) f -> . g
    (88) g -> . g TIMES h
    (89) g -> . g DIVIDE h
    (90) g -> . g MOD h
    (91) g -> . g POTENCIA h
    (92) g -> . h
    (93) h -> . ENTERO
    (94) h -> . DECIMAL
    (95) h -> . CADENA
    (96) h -> . LITERAL
    (97) h -> . TRUE
    (98) h -> . FALSE
    (99) h -> . call_function_pro
    (100) h -> . array_pro
    (101) h -> . interface_assi
    (102) h -> . L_PAREN a R_PAREN
    (103) h -> . array_val_pro
    (104) h -> . a PUNTO LITERAL
    (105) h -> . a PUNTO nativeFun L_PAREN expresion R_PAREN
    (106) h -> . a PUNTO nativeFun L_PAREN R_PAREN
    (115) array_pro -> . L_CORCHETE values R_CORCHETE
    (112) interface_assi -> . L_LLAVE atributos_assi R_LLAVE
    (107) array_val_pro -> . LITERAL dimensions

    CONSOLE         shift and go to state 19
    LET             shift and go to state 21
    LITERAL         shift and go to state 22
    IF              shift and go to state 24
    WHILE           shift and go to state 26
    FOR             shift and go to state 27
    INTERFACE       shift and go to state 28
    CONTINUE        shift and go to state 29
    BREAK           shift and go to state 30
    RETURN          shift and go to state 31
    FUNCTION        shift and go to state 32
    TOSTRING        shift and go to state 33
    NOT             shift and go to state 38
    MENOS           shift and go to state 35
    MAS             shift and go to state 34
    ENTERO          shift and go to state 44
    DECIMAL         shift and go to state 45
    CADENA          shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    L_PAREN         shift and go to state 20
    L_CORCHETE      shift and go to state 52
    L_LLAVE         shift and go to state 25

    instrucciones                  shift and go to state 240
    instruccion                    shift and go to state 3
    console_pro                    shift and go to state 4
    declaration_instruction        shift and go to state 5
    assig_pro                      shift and go to state 6
    interface_assign_pro           shift and go to state 7
    if_pro                         shift and go to state 8
    while_pro                      shift and go to state 9
    for_pro                        shift and go to state 10
    for_each_pro                   shift and go to state 11
    interface_pro                  shift and go to state 12
    continue_pro                   shift and go to state 13
    break_pro                      shift and go to state 14
    return_pro                     shift and go to state 15
    function_pro                   shift and go to state 16
    call_function_pro              shift and go to state 17
    sumadores                      shift and go to state 18
    a                              shift and go to state 23
    b                              shift and go to state 36
    c                              shift and go to state 37
    d                              shift and go to state 39
    e                              shift and go to state 40
    f                              shift and go to state 41
    g                              shift and go to state 42
    h                              shift and go to state 43
    array_pro                      shift and go to state 49
    interface_assi                 shift and go to state 50
    array_val_pro                  shift and go to state 51

state 228

    (28) parameters_pro -> parameters_pro COMA parameter_pro .

    R_PAREN         reduce using rule 28 (parameters_pro -> parameters_pro COMA parameter_pro .)
    COMA            reduce using rule 28 (parameters_pro -> parameters_pro COMA parameter_pro .)


state 229

    (22) function_pro -> FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE instrucciones . R_LLAVE
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . console_pro sc
    (5) instruccion -> . declaration_instruction sc
    (6) instruccion -> . assig_pro sc
    (7) instruccion -> . interface_assign_pro sc
    (8) instruccion -> . if_pro sc
    (9) instruccion -> . while_pro sc
    (10) instruccion -> . for_pro sc
    (11) instruccion -> . for_each_pro sc
    (12) instruccion -> . interface_pro sc
    (13) instruccion -> . continue_pro sc
    (14) instruccion -> . break_pro sc
    (15) instruccion -> . return_pro sc
    (16) instruccion -> . function_pro sc
    (17) instruccion -> . call_function_pro sc
    (18) instruccion -> . sumadores sc
    (66) console_pro -> . CONSOLE PUNTO LOG L_PAREN expresion R_PAREN
    (42) declaration_instruction -> . LET declaracion_list
    (55) assig_pro -> . LITERAL IGUAL a
    (41) interface_assign_pro -> . a PUNTO LITERAL IGUAL a
    (56) if_pro -> . IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro
    (60) while_pro -> . WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE
    (61) for_pro -> . FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (62) for_pro -> . FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (65) for_each_pro -> . FOR L_PAREN LET LITERAL OF a R_PAREN L_LLAVE instrucciones R_LLAVE
    (36) interface_pro -> . INTERFACE LITERAL L_LLAVE interface_atributos R_LLAVE
    (32) continue_pro -> . CONTINUE
    (33) break_pro -> . BREAK
    (34) return_pro -> . RETURN
    (35) return_pro -> . RETURN a
    (21) function_pro -> . FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (22) function_pro -> . FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE
    (23) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (24) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (25) call_function_pro -> . TOSTRING L_PAREN values R_PAREN
    (110) sumadores -> . LITERAL MAS MAS
    (111) sumadores -> . LITERAL MENOS MENOS
    (69) a -> . a OR b
    (70) a -> . b
    (71) b -> . b AND c
    (72) b -> . c
    (73) c -> . NOT d
    (74) c -> . d
    (75) d -> . d DISTINTO_QUE e
    (76) d -> . d MENOR_QUE e
    (77) d -> . d MENOR_IGUAL_QUE e
    (78) d -> . d MAYOR_QUE e
    (79) d -> . d MAYOR_IGUAL_QUE e
    (80) d -> . d TRIPLE_IGUAL e
    (81) d -> . e
    (82) e -> . e MAS f
    (83) e -> . e MENOS f
    (84) e -> . f
    (85) f -> . MENOS g
    (86) f -> . MAS g
    (87) f -> . g
    (88) g -> . g TIMES h
    (89) g -> . g DIVIDE h
    (90) g -> . g MOD h
    (91) g -> . g POTENCIA h
    (92) g -> . h
    (93) h -> . ENTERO
    (94) h -> . DECIMAL
    (95) h -> . CADENA
    (96) h -> . LITERAL
    (97) h -> . TRUE
    (98) h -> . FALSE
    (99) h -> . call_function_pro
    (100) h -> . array_pro
    (101) h -> . interface_assi
    (102) h -> . L_PAREN a R_PAREN
    (103) h -> . array_val_pro
    (104) h -> . a PUNTO LITERAL
    (105) h -> . a PUNTO nativeFun L_PAREN expresion R_PAREN
    (106) h -> . a PUNTO nativeFun L_PAREN R_PAREN
    (115) array_pro -> . L_CORCHETE values R_CORCHETE
    (112) interface_assi -> . L_LLAVE atributos_assi R_LLAVE
    (107) array_val_pro -> . LITERAL dimensions

    R_LLAVE         shift and go to state 241
    CONSOLE         shift and go to state 19
    LET             shift and go to state 21
    LITERAL         shift and go to state 22
    IF              shift and go to state 24
    WHILE           shift and go to state 26
    FOR             shift and go to state 27
    INTERFACE       shift and go to state 28
    CONTINUE        shift and go to state 29
    BREAK           shift and go to state 30
    RETURN          shift and go to state 31
    FUNCTION        shift and go to state 32
    TOSTRING        shift and go to state 33
    NOT             shift and go to state 38
    MENOS           shift and go to state 35
    MAS             shift and go to state 34
    ENTERO          shift and go to state 44
    DECIMAL         shift and go to state 45
    CADENA          shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    L_PAREN         shift and go to state 20
    L_CORCHETE      shift and go to state 52
    L_LLAVE         shift and go to state 25

    instruccion                    shift and go to state 53
    console_pro                    shift and go to state 4
    declaration_instruction        shift and go to state 5
    assig_pro                      shift and go to state 6
    interface_assign_pro           shift and go to state 7
    if_pro                         shift and go to state 8
    while_pro                      shift and go to state 9
    for_pro                        shift and go to state 10
    for_each_pro                   shift and go to state 11
    interface_pro                  shift and go to state 12
    continue_pro                   shift and go to state 13
    break_pro                      shift and go to state 14
    return_pro                     shift and go to state 15
    function_pro                   shift and go to state 16
    call_function_pro              shift and go to state 17
    sumadores                      shift and go to state 18
    a                              shift and go to state 23
    b                              shift and go to state 36
    c                              shift and go to state 37
    d                              shift and go to state 39
    e                              shift and go to state 40
    f                              shift and go to state 41
    g                              shift and go to state 42
    h                              shift and go to state 43
    array_pro                      shift and go to state 49
    interface_assi                 shift and go to state 50
    array_val_pro                  shift and go to state 51

state 230

    (67) expresion -> expresion COMA a .
    (69) a -> a . OR b
    (104) h -> a . PUNTO LITERAL
    (105) h -> a . PUNTO nativeFun L_PAREN expresion R_PAREN
    (106) h -> a . PUNTO nativeFun L_PAREN R_PAREN

    R_PAREN         reduce using rule 67 (expresion -> expresion COMA a .)
    COMA            reduce using rule 67 (expresion -> expresion COMA a .)
    OR              shift and go to state 84
    PUNTO           shift and go to state 115


state 231

    (56) if_pro -> IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE . else_pro
    (57) else_pro -> . ELSE IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro
    (58) else_pro -> . ELSE L_LLAVE instrucciones R_LLAVE
    (59) else_pro -> .

    ELSE            shift and go to state 243
    SEMI_COLON      reduce using rule 59 (else_pro -> .)
    CONSOLE         reduce using rule 59 (else_pro -> .)
    LET             reduce using rule 59 (else_pro -> .)
    LITERAL         reduce using rule 59 (else_pro -> .)
    IF              reduce using rule 59 (else_pro -> .)
    WHILE           reduce using rule 59 (else_pro -> .)
    FOR             reduce using rule 59 (else_pro -> .)
    INTERFACE       reduce using rule 59 (else_pro -> .)
    CONTINUE        reduce using rule 59 (else_pro -> .)
    BREAK           reduce using rule 59 (else_pro -> .)
    RETURN          reduce using rule 59 (else_pro -> .)
    FUNCTION        reduce using rule 59 (else_pro -> .)
    TOSTRING        reduce using rule 59 (else_pro -> .)
    NOT             reduce using rule 59 (else_pro -> .)
    MENOS           reduce using rule 59 (else_pro -> .)
    MAS             reduce using rule 59 (else_pro -> .)
    ENTERO          reduce using rule 59 (else_pro -> .)
    DECIMAL         reduce using rule 59 (else_pro -> .)
    CADENA          reduce using rule 59 (else_pro -> .)
    TRUE            reduce using rule 59 (else_pro -> .)
    FALSE           reduce using rule 59 (else_pro -> .)
    L_PAREN         reduce using rule 59 (else_pro -> .)
    L_CORCHETE      reduce using rule 59 (else_pro -> .)
    L_LLAVE         reduce using rule 59 (else_pro -> .)
    $end            reduce using rule 59 (else_pro -> .)
    R_LLAVE         reduce using rule 59 (else_pro -> .)

    else_pro                       shift and go to state 242

state 232

    (60) while_pro -> WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE .

    SEMI_COLON      reduce using rule 60 (while_pro -> WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE .)
    CONSOLE         reduce using rule 60 (while_pro -> WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE .)
    LET             reduce using rule 60 (while_pro -> WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE .)
    LITERAL         reduce using rule 60 (while_pro -> WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE .)
    IF              reduce using rule 60 (while_pro -> WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE .)
    WHILE           reduce using rule 60 (while_pro -> WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE .)
    FOR             reduce using rule 60 (while_pro -> WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE .)
    INTERFACE       reduce using rule 60 (while_pro -> WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE .)
    CONTINUE        reduce using rule 60 (while_pro -> WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE .)
    BREAK           reduce using rule 60 (while_pro -> WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE .)
    RETURN          reduce using rule 60 (while_pro -> WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE .)
    FUNCTION        reduce using rule 60 (while_pro -> WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE .)
    TOSTRING        reduce using rule 60 (while_pro -> WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE .)
    NOT             reduce using rule 60 (while_pro -> WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE .)
    MENOS           reduce using rule 60 (while_pro -> WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE .)
    MAS             reduce using rule 60 (while_pro -> WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE .)
    ENTERO          reduce using rule 60 (while_pro -> WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE .)
    DECIMAL         reduce using rule 60 (while_pro -> WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE .)
    CADENA          reduce using rule 60 (while_pro -> WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE .)
    TRUE            reduce using rule 60 (while_pro -> WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE .)
    FALSE           reduce using rule 60 (while_pro -> WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE .)
    L_PAREN         reduce using rule 60 (while_pro -> WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE .)
    L_CORCHETE      reduce using rule 60 (while_pro -> WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE .)
    L_LLAVE         reduce using rule 60 (while_pro -> WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE .)
    $end            reduce using rule 60 (while_pro -> WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE .)
    R_LLAVE         reduce using rule 60 (while_pro -> WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE .)


state 233

    (61) for_pro -> FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON inDec_pro . R_PAREN L_LLAVE instrucciones R_LLAVE

    R_PAREN         shift and go to state 244


state 234

    (63) inDec_pro -> assig_pro .

    R_PAREN         reduce using rule 63 (inDec_pro -> assig_pro .)


state 235

    (64) inDec_pro -> sumadores .

    R_PAREN         reduce using rule 64 (inDec_pro -> sumadores .)


state 236

    (55) assig_pro -> LITERAL . IGUAL a
    (110) sumadores -> LITERAL . MAS MAS
    (111) sumadores -> LITERAL . MENOS MENOS

    IGUAL           shift and go to state 77
    MAS             shift and go to state 79
    MENOS           shift and go to state 80


state 237

    (62) for_pro -> FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON inDec_pro . R_PAREN L_LLAVE instrucciones R_LLAVE

    R_PAREN         shift and go to state 245


state 238

    (65) for_each_pro -> FOR L_PAREN LET LITERAL OF a R_PAREN . L_LLAVE instrucciones R_LLAVE

    L_LLAVE         shift and go to state 246


state 239

    (39) interface_atributo -> LITERAL COLON type .

    SEMI_COLON      reduce using rule 39 (interface_atributo -> LITERAL COLON type .)
    R_LLAVE         reduce using rule 39 (interface_atributo -> LITERAL COLON type .)
    LITERAL         reduce using rule 39 (interface_atributo -> LITERAL COLON type .)


state 240

    (21) function_pro -> FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones . R_LLAVE
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . console_pro sc
    (5) instruccion -> . declaration_instruction sc
    (6) instruccion -> . assig_pro sc
    (7) instruccion -> . interface_assign_pro sc
    (8) instruccion -> . if_pro sc
    (9) instruccion -> . while_pro sc
    (10) instruccion -> . for_pro sc
    (11) instruccion -> . for_each_pro sc
    (12) instruccion -> . interface_pro sc
    (13) instruccion -> . continue_pro sc
    (14) instruccion -> . break_pro sc
    (15) instruccion -> . return_pro sc
    (16) instruccion -> . function_pro sc
    (17) instruccion -> . call_function_pro sc
    (18) instruccion -> . sumadores sc
    (66) console_pro -> . CONSOLE PUNTO LOG L_PAREN expresion R_PAREN
    (42) declaration_instruction -> . LET declaracion_list
    (55) assig_pro -> . LITERAL IGUAL a
    (41) interface_assign_pro -> . a PUNTO LITERAL IGUAL a
    (56) if_pro -> . IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro
    (60) while_pro -> . WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE
    (61) for_pro -> . FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (62) for_pro -> . FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (65) for_each_pro -> . FOR L_PAREN LET LITERAL OF a R_PAREN L_LLAVE instrucciones R_LLAVE
    (36) interface_pro -> . INTERFACE LITERAL L_LLAVE interface_atributos R_LLAVE
    (32) continue_pro -> . CONTINUE
    (33) break_pro -> . BREAK
    (34) return_pro -> . RETURN
    (35) return_pro -> . RETURN a
    (21) function_pro -> . FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (22) function_pro -> . FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE
    (23) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (24) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (25) call_function_pro -> . TOSTRING L_PAREN values R_PAREN
    (110) sumadores -> . LITERAL MAS MAS
    (111) sumadores -> . LITERAL MENOS MENOS
    (69) a -> . a OR b
    (70) a -> . b
    (71) b -> . b AND c
    (72) b -> . c
    (73) c -> . NOT d
    (74) c -> . d
    (75) d -> . d DISTINTO_QUE e
    (76) d -> . d MENOR_QUE e
    (77) d -> . d MENOR_IGUAL_QUE e
    (78) d -> . d MAYOR_QUE e
    (79) d -> . d MAYOR_IGUAL_QUE e
    (80) d -> . d TRIPLE_IGUAL e
    (81) d -> . e
    (82) e -> . e MAS f
    (83) e -> . e MENOS f
    (84) e -> . f
    (85) f -> . MENOS g
    (86) f -> . MAS g
    (87) f -> . g
    (88) g -> . g TIMES h
    (89) g -> . g DIVIDE h
    (90) g -> . g MOD h
    (91) g -> . g POTENCIA h
    (92) g -> . h
    (93) h -> . ENTERO
    (94) h -> . DECIMAL
    (95) h -> . CADENA
    (96) h -> . LITERAL
    (97) h -> . TRUE
    (98) h -> . FALSE
    (99) h -> . call_function_pro
    (100) h -> . array_pro
    (101) h -> . interface_assi
    (102) h -> . L_PAREN a R_PAREN
    (103) h -> . array_val_pro
    (104) h -> . a PUNTO LITERAL
    (105) h -> . a PUNTO nativeFun L_PAREN expresion R_PAREN
    (106) h -> . a PUNTO nativeFun L_PAREN R_PAREN
    (115) array_pro -> . L_CORCHETE values R_CORCHETE
    (112) interface_assi -> . L_LLAVE atributos_assi R_LLAVE
    (107) array_val_pro -> . LITERAL dimensions

    R_LLAVE         shift and go to state 247
    CONSOLE         shift and go to state 19
    LET             shift and go to state 21
    LITERAL         shift and go to state 22
    IF              shift and go to state 24
    WHILE           shift and go to state 26
    FOR             shift and go to state 27
    INTERFACE       shift and go to state 28
    CONTINUE        shift and go to state 29
    BREAK           shift and go to state 30
    RETURN          shift and go to state 31
    FUNCTION        shift and go to state 32
    TOSTRING        shift and go to state 33
    NOT             shift and go to state 38
    MENOS           shift and go to state 35
    MAS             shift and go to state 34
    ENTERO          shift and go to state 44
    DECIMAL         shift and go to state 45
    CADENA          shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    L_PAREN         shift and go to state 20
    L_CORCHETE      shift and go to state 52
    L_LLAVE         shift and go to state 25

    instruccion                    shift and go to state 53
    console_pro                    shift and go to state 4
    declaration_instruction        shift and go to state 5
    assig_pro                      shift and go to state 6
    interface_assign_pro           shift and go to state 7
    if_pro                         shift and go to state 8
    while_pro                      shift and go to state 9
    for_pro                        shift and go to state 10
    for_each_pro                   shift and go to state 11
    interface_pro                  shift and go to state 12
    continue_pro                   shift and go to state 13
    break_pro                      shift and go to state 14
    return_pro                     shift and go to state 15
    function_pro                   shift and go to state 16
    call_function_pro              shift and go to state 17
    sumadores                      shift and go to state 18
    a                              shift and go to state 23
    b                              shift and go to state 36
    c                              shift and go to state 37
    d                              shift and go to state 39
    e                              shift and go to state 40
    f                              shift and go to state 41
    g                              shift and go to state 42
    h                              shift and go to state 43
    array_pro                      shift and go to state 49
    interface_assi                 shift and go to state 50
    array_val_pro                  shift and go to state 51

state 241

    (22) function_pro -> FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE .

    SEMI_COLON      reduce using rule 22 (function_pro -> FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE .)
    CONSOLE         reduce using rule 22 (function_pro -> FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE .)
    LET             reduce using rule 22 (function_pro -> FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE .)
    LITERAL         reduce using rule 22 (function_pro -> FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE .)
    IF              reduce using rule 22 (function_pro -> FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE .)
    WHILE           reduce using rule 22 (function_pro -> FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE .)
    FOR             reduce using rule 22 (function_pro -> FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE .)
    INTERFACE       reduce using rule 22 (function_pro -> FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE .)
    CONTINUE        reduce using rule 22 (function_pro -> FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE .)
    BREAK           reduce using rule 22 (function_pro -> FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE .)
    RETURN          reduce using rule 22 (function_pro -> FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE .)
    FUNCTION        reduce using rule 22 (function_pro -> FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE .)
    TOSTRING        reduce using rule 22 (function_pro -> FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE .)
    NOT             reduce using rule 22 (function_pro -> FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE .)
    MENOS           reduce using rule 22 (function_pro -> FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE .)
    MAS             reduce using rule 22 (function_pro -> FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE .)
    ENTERO          reduce using rule 22 (function_pro -> FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE .)
    DECIMAL         reduce using rule 22 (function_pro -> FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE .)
    CADENA          reduce using rule 22 (function_pro -> FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE .)
    TRUE            reduce using rule 22 (function_pro -> FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE .)
    FALSE           reduce using rule 22 (function_pro -> FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE .)
    L_PAREN         reduce using rule 22 (function_pro -> FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE .)
    L_CORCHETE      reduce using rule 22 (function_pro -> FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE .)
    L_LLAVE         reduce using rule 22 (function_pro -> FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE .)
    $end            reduce using rule 22 (function_pro -> FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE .)
    R_LLAVE         reduce using rule 22 (function_pro -> FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE .)


state 242

    (56) if_pro -> IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .

    SEMI_COLON      reduce using rule 56 (if_pro -> IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    CONSOLE         reduce using rule 56 (if_pro -> IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    LET             reduce using rule 56 (if_pro -> IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    LITERAL         reduce using rule 56 (if_pro -> IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    IF              reduce using rule 56 (if_pro -> IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    WHILE           reduce using rule 56 (if_pro -> IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    FOR             reduce using rule 56 (if_pro -> IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    INTERFACE       reduce using rule 56 (if_pro -> IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    CONTINUE        reduce using rule 56 (if_pro -> IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    BREAK           reduce using rule 56 (if_pro -> IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    RETURN          reduce using rule 56 (if_pro -> IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    FUNCTION        reduce using rule 56 (if_pro -> IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    TOSTRING        reduce using rule 56 (if_pro -> IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    NOT             reduce using rule 56 (if_pro -> IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    MENOS           reduce using rule 56 (if_pro -> IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    MAS             reduce using rule 56 (if_pro -> IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    ENTERO          reduce using rule 56 (if_pro -> IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    DECIMAL         reduce using rule 56 (if_pro -> IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    CADENA          reduce using rule 56 (if_pro -> IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    TRUE            reduce using rule 56 (if_pro -> IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    FALSE           reduce using rule 56 (if_pro -> IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    L_PAREN         reduce using rule 56 (if_pro -> IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    L_CORCHETE      reduce using rule 56 (if_pro -> IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    L_LLAVE         reduce using rule 56 (if_pro -> IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    $end            reduce using rule 56 (if_pro -> IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    R_LLAVE         reduce using rule 56 (if_pro -> IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)


state 243

    (57) else_pro -> ELSE . IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro
    (58) else_pro -> ELSE . L_LLAVE instrucciones R_LLAVE

    IF              shift and go to state 248
    L_LLAVE         shift and go to state 249


state 244

    (61) for_pro -> FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON inDec_pro R_PAREN . L_LLAVE instrucciones R_LLAVE

    L_LLAVE         shift and go to state 250


state 245

    (62) for_pro -> FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON inDec_pro R_PAREN . L_LLAVE instrucciones R_LLAVE

    L_LLAVE         shift and go to state 251


state 246

    (65) for_each_pro -> FOR L_PAREN LET LITERAL OF a R_PAREN L_LLAVE . instrucciones R_LLAVE
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . console_pro sc
    (5) instruccion -> . declaration_instruction sc
    (6) instruccion -> . assig_pro sc
    (7) instruccion -> . interface_assign_pro sc
    (8) instruccion -> . if_pro sc
    (9) instruccion -> . while_pro sc
    (10) instruccion -> . for_pro sc
    (11) instruccion -> . for_each_pro sc
    (12) instruccion -> . interface_pro sc
    (13) instruccion -> . continue_pro sc
    (14) instruccion -> . break_pro sc
    (15) instruccion -> . return_pro sc
    (16) instruccion -> . function_pro sc
    (17) instruccion -> . call_function_pro sc
    (18) instruccion -> . sumadores sc
    (66) console_pro -> . CONSOLE PUNTO LOG L_PAREN expresion R_PAREN
    (42) declaration_instruction -> . LET declaracion_list
    (55) assig_pro -> . LITERAL IGUAL a
    (41) interface_assign_pro -> . a PUNTO LITERAL IGUAL a
    (56) if_pro -> . IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro
    (60) while_pro -> . WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE
    (61) for_pro -> . FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (62) for_pro -> . FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (65) for_each_pro -> . FOR L_PAREN LET LITERAL OF a R_PAREN L_LLAVE instrucciones R_LLAVE
    (36) interface_pro -> . INTERFACE LITERAL L_LLAVE interface_atributos R_LLAVE
    (32) continue_pro -> . CONTINUE
    (33) break_pro -> . BREAK
    (34) return_pro -> . RETURN
    (35) return_pro -> . RETURN a
    (21) function_pro -> . FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (22) function_pro -> . FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE
    (23) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (24) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (25) call_function_pro -> . TOSTRING L_PAREN values R_PAREN
    (110) sumadores -> . LITERAL MAS MAS
    (111) sumadores -> . LITERAL MENOS MENOS
    (69) a -> . a OR b
    (70) a -> . b
    (71) b -> . b AND c
    (72) b -> . c
    (73) c -> . NOT d
    (74) c -> . d
    (75) d -> . d DISTINTO_QUE e
    (76) d -> . d MENOR_QUE e
    (77) d -> . d MENOR_IGUAL_QUE e
    (78) d -> . d MAYOR_QUE e
    (79) d -> . d MAYOR_IGUAL_QUE e
    (80) d -> . d TRIPLE_IGUAL e
    (81) d -> . e
    (82) e -> . e MAS f
    (83) e -> . e MENOS f
    (84) e -> . f
    (85) f -> . MENOS g
    (86) f -> . MAS g
    (87) f -> . g
    (88) g -> . g TIMES h
    (89) g -> . g DIVIDE h
    (90) g -> . g MOD h
    (91) g -> . g POTENCIA h
    (92) g -> . h
    (93) h -> . ENTERO
    (94) h -> . DECIMAL
    (95) h -> . CADENA
    (96) h -> . LITERAL
    (97) h -> . TRUE
    (98) h -> . FALSE
    (99) h -> . call_function_pro
    (100) h -> . array_pro
    (101) h -> . interface_assi
    (102) h -> . L_PAREN a R_PAREN
    (103) h -> . array_val_pro
    (104) h -> . a PUNTO LITERAL
    (105) h -> . a PUNTO nativeFun L_PAREN expresion R_PAREN
    (106) h -> . a PUNTO nativeFun L_PAREN R_PAREN
    (115) array_pro -> . L_CORCHETE values R_CORCHETE
    (112) interface_assi -> . L_LLAVE atributos_assi R_LLAVE
    (107) array_val_pro -> . LITERAL dimensions

    CONSOLE         shift and go to state 19
    LET             shift and go to state 21
    LITERAL         shift and go to state 22
    IF              shift and go to state 24
    WHILE           shift and go to state 26
    FOR             shift and go to state 27
    INTERFACE       shift and go to state 28
    CONTINUE        shift and go to state 29
    BREAK           shift and go to state 30
    RETURN          shift and go to state 31
    FUNCTION        shift and go to state 32
    TOSTRING        shift and go to state 33
    NOT             shift and go to state 38
    MENOS           shift and go to state 35
    MAS             shift and go to state 34
    ENTERO          shift and go to state 44
    DECIMAL         shift and go to state 45
    CADENA          shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    L_PAREN         shift and go to state 20
    L_CORCHETE      shift and go to state 52
    L_LLAVE         shift and go to state 25

    a                              shift and go to state 23
    instrucciones                  shift and go to state 252
    instruccion                    shift and go to state 3
    console_pro                    shift and go to state 4
    declaration_instruction        shift and go to state 5
    assig_pro                      shift and go to state 6
    interface_assign_pro           shift and go to state 7
    if_pro                         shift and go to state 8
    while_pro                      shift and go to state 9
    for_pro                        shift and go to state 10
    for_each_pro                   shift and go to state 11
    interface_pro                  shift and go to state 12
    continue_pro                   shift and go to state 13
    break_pro                      shift and go to state 14
    return_pro                     shift and go to state 15
    function_pro                   shift and go to state 16
    call_function_pro              shift and go to state 17
    sumadores                      shift and go to state 18
    b                              shift and go to state 36
    c                              shift and go to state 37
    d                              shift and go to state 39
    e                              shift and go to state 40
    f                              shift and go to state 41
    g                              shift and go to state 42
    h                              shift and go to state 43
    array_pro                      shift and go to state 49
    interface_assi                 shift and go to state 50
    array_val_pro                  shift and go to state 51

state 247

    (21) function_pro -> FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE .

    SEMI_COLON      reduce using rule 21 (function_pro -> FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    CONSOLE         reduce using rule 21 (function_pro -> FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    LET             reduce using rule 21 (function_pro -> FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    LITERAL         reduce using rule 21 (function_pro -> FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    IF              reduce using rule 21 (function_pro -> FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    WHILE           reduce using rule 21 (function_pro -> FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    FOR             reduce using rule 21 (function_pro -> FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    INTERFACE       reduce using rule 21 (function_pro -> FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    CONTINUE        reduce using rule 21 (function_pro -> FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    BREAK           reduce using rule 21 (function_pro -> FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    RETURN          reduce using rule 21 (function_pro -> FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    FUNCTION        reduce using rule 21 (function_pro -> FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    TOSTRING        reduce using rule 21 (function_pro -> FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    NOT             reduce using rule 21 (function_pro -> FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    MENOS           reduce using rule 21 (function_pro -> FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    MAS             reduce using rule 21 (function_pro -> FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    ENTERO          reduce using rule 21 (function_pro -> FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    DECIMAL         reduce using rule 21 (function_pro -> FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    CADENA          reduce using rule 21 (function_pro -> FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    TRUE            reduce using rule 21 (function_pro -> FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    FALSE           reduce using rule 21 (function_pro -> FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    L_PAREN         reduce using rule 21 (function_pro -> FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    L_CORCHETE      reduce using rule 21 (function_pro -> FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    L_LLAVE         reduce using rule 21 (function_pro -> FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    $end            reduce using rule 21 (function_pro -> FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    R_LLAVE         reduce using rule 21 (function_pro -> FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)


state 248

    (57) else_pro -> ELSE IF . L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro

    L_PAREN         shift and go to state 253


state 249

    (58) else_pro -> ELSE L_LLAVE . instrucciones R_LLAVE
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . console_pro sc
    (5) instruccion -> . declaration_instruction sc
    (6) instruccion -> . assig_pro sc
    (7) instruccion -> . interface_assign_pro sc
    (8) instruccion -> . if_pro sc
    (9) instruccion -> . while_pro sc
    (10) instruccion -> . for_pro sc
    (11) instruccion -> . for_each_pro sc
    (12) instruccion -> . interface_pro sc
    (13) instruccion -> . continue_pro sc
    (14) instruccion -> . break_pro sc
    (15) instruccion -> . return_pro sc
    (16) instruccion -> . function_pro sc
    (17) instruccion -> . call_function_pro sc
    (18) instruccion -> . sumadores sc
    (66) console_pro -> . CONSOLE PUNTO LOG L_PAREN expresion R_PAREN
    (42) declaration_instruction -> . LET declaracion_list
    (55) assig_pro -> . LITERAL IGUAL a
    (41) interface_assign_pro -> . a PUNTO LITERAL IGUAL a
    (56) if_pro -> . IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro
    (60) while_pro -> . WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE
    (61) for_pro -> . FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (62) for_pro -> . FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (65) for_each_pro -> . FOR L_PAREN LET LITERAL OF a R_PAREN L_LLAVE instrucciones R_LLAVE
    (36) interface_pro -> . INTERFACE LITERAL L_LLAVE interface_atributos R_LLAVE
    (32) continue_pro -> . CONTINUE
    (33) break_pro -> . BREAK
    (34) return_pro -> . RETURN
    (35) return_pro -> . RETURN a
    (21) function_pro -> . FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (22) function_pro -> . FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE
    (23) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (24) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (25) call_function_pro -> . TOSTRING L_PAREN values R_PAREN
    (110) sumadores -> . LITERAL MAS MAS
    (111) sumadores -> . LITERAL MENOS MENOS
    (69) a -> . a OR b
    (70) a -> . b
    (71) b -> . b AND c
    (72) b -> . c
    (73) c -> . NOT d
    (74) c -> . d
    (75) d -> . d DISTINTO_QUE e
    (76) d -> . d MENOR_QUE e
    (77) d -> . d MENOR_IGUAL_QUE e
    (78) d -> . d MAYOR_QUE e
    (79) d -> . d MAYOR_IGUAL_QUE e
    (80) d -> . d TRIPLE_IGUAL e
    (81) d -> . e
    (82) e -> . e MAS f
    (83) e -> . e MENOS f
    (84) e -> . f
    (85) f -> . MENOS g
    (86) f -> . MAS g
    (87) f -> . g
    (88) g -> . g TIMES h
    (89) g -> . g DIVIDE h
    (90) g -> . g MOD h
    (91) g -> . g POTENCIA h
    (92) g -> . h
    (93) h -> . ENTERO
    (94) h -> . DECIMAL
    (95) h -> . CADENA
    (96) h -> . LITERAL
    (97) h -> . TRUE
    (98) h -> . FALSE
    (99) h -> . call_function_pro
    (100) h -> . array_pro
    (101) h -> . interface_assi
    (102) h -> . L_PAREN a R_PAREN
    (103) h -> . array_val_pro
    (104) h -> . a PUNTO LITERAL
    (105) h -> . a PUNTO nativeFun L_PAREN expresion R_PAREN
    (106) h -> . a PUNTO nativeFun L_PAREN R_PAREN
    (115) array_pro -> . L_CORCHETE values R_CORCHETE
    (112) interface_assi -> . L_LLAVE atributos_assi R_LLAVE
    (107) array_val_pro -> . LITERAL dimensions

    CONSOLE         shift and go to state 19
    LET             shift and go to state 21
    LITERAL         shift and go to state 22
    IF              shift and go to state 24
    WHILE           shift and go to state 26
    FOR             shift and go to state 27
    INTERFACE       shift and go to state 28
    CONTINUE        shift and go to state 29
    BREAK           shift and go to state 30
    RETURN          shift and go to state 31
    FUNCTION        shift and go to state 32
    TOSTRING        shift and go to state 33
    NOT             shift and go to state 38
    MENOS           shift and go to state 35
    MAS             shift and go to state 34
    ENTERO          shift and go to state 44
    DECIMAL         shift and go to state 45
    CADENA          shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    L_PAREN         shift and go to state 20
    L_CORCHETE      shift and go to state 52
    L_LLAVE         shift and go to state 25

    instrucciones                  shift and go to state 254
    instruccion                    shift and go to state 3
    console_pro                    shift and go to state 4
    declaration_instruction        shift and go to state 5
    assig_pro                      shift and go to state 6
    interface_assign_pro           shift and go to state 7
    if_pro                         shift and go to state 8
    while_pro                      shift and go to state 9
    for_pro                        shift and go to state 10
    for_each_pro                   shift and go to state 11
    interface_pro                  shift and go to state 12
    continue_pro                   shift and go to state 13
    break_pro                      shift and go to state 14
    return_pro                     shift and go to state 15
    function_pro                   shift and go to state 16
    call_function_pro              shift and go to state 17
    sumadores                      shift and go to state 18
    a                              shift and go to state 23
    b                              shift and go to state 36
    c                              shift and go to state 37
    d                              shift and go to state 39
    e                              shift and go to state 40
    f                              shift and go to state 41
    g                              shift and go to state 42
    h                              shift and go to state 43
    array_pro                      shift and go to state 49
    interface_assi                 shift and go to state 50
    array_val_pro                  shift and go to state 51

state 250

    (61) for_pro -> FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE . instrucciones R_LLAVE
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . console_pro sc
    (5) instruccion -> . declaration_instruction sc
    (6) instruccion -> . assig_pro sc
    (7) instruccion -> . interface_assign_pro sc
    (8) instruccion -> . if_pro sc
    (9) instruccion -> . while_pro sc
    (10) instruccion -> . for_pro sc
    (11) instruccion -> . for_each_pro sc
    (12) instruccion -> . interface_pro sc
    (13) instruccion -> . continue_pro sc
    (14) instruccion -> . break_pro sc
    (15) instruccion -> . return_pro sc
    (16) instruccion -> . function_pro sc
    (17) instruccion -> . call_function_pro sc
    (18) instruccion -> . sumadores sc
    (66) console_pro -> . CONSOLE PUNTO LOG L_PAREN expresion R_PAREN
    (42) declaration_instruction -> . LET declaracion_list
    (55) assig_pro -> . LITERAL IGUAL a
    (41) interface_assign_pro -> . a PUNTO LITERAL IGUAL a
    (56) if_pro -> . IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro
    (60) while_pro -> . WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE
    (61) for_pro -> . FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (62) for_pro -> . FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (65) for_each_pro -> . FOR L_PAREN LET LITERAL OF a R_PAREN L_LLAVE instrucciones R_LLAVE
    (36) interface_pro -> . INTERFACE LITERAL L_LLAVE interface_atributos R_LLAVE
    (32) continue_pro -> . CONTINUE
    (33) break_pro -> . BREAK
    (34) return_pro -> . RETURN
    (35) return_pro -> . RETURN a
    (21) function_pro -> . FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (22) function_pro -> . FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE
    (23) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (24) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (25) call_function_pro -> . TOSTRING L_PAREN values R_PAREN
    (110) sumadores -> . LITERAL MAS MAS
    (111) sumadores -> . LITERAL MENOS MENOS
    (69) a -> . a OR b
    (70) a -> . b
    (71) b -> . b AND c
    (72) b -> . c
    (73) c -> . NOT d
    (74) c -> . d
    (75) d -> . d DISTINTO_QUE e
    (76) d -> . d MENOR_QUE e
    (77) d -> . d MENOR_IGUAL_QUE e
    (78) d -> . d MAYOR_QUE e
    (79) d -> . d MAYOR_IGUAL_QUE e
    (80) d -> . d TRIPLE_IGUAL e
    (81) d -> . e
    (82) e -> . e MAS f
    (83) e -> . e MENOS f
    (84) e -> . f
    (85) f -> . MENOS g
    (86) f -> . MAS g
    (87) f -> . g
    (88) g -> . g TIMES h
    (89) g -> . g DIVIDE h
    (90) g -> . g MOD h
    (91) g -> . g POTENCIA h
    (92) g -> . h
    (93) h -> . ENTERO
    (94) h -> . DECIMAL
    (95) h -> . CADENA
    (96) h -> . LITERAL
    (97) h -> . TRUE
    (98) h -> . FALSE
    (99) h -> . call_function_pro
    (100) h -> . array_pro
    (101) h -> . interface_assi
    (102) h -> . L_PAREN a R_PAREN
    (103) h -> . array_val_pro
    (104) h -> . a PUNTO LITERAL
    (105) h -> . a PUNTO nativeFun L_PAREN expresion R_PAREN
    (106) h -> . a PUNTO nativeFun L_PAREN R_PAREN
    (115) array_pro -> . L_CORCHETE values R_CORCHETE
    (112) interface_assi -> . L_LLAVE atributos_assi R_LLAVE
    (107) array_val_pro -> . LITERAL dimensions

    CONSOLE         shift and go to state 19
    LET             shift and go to state 21
    LITERAL         shift and go to state 22
    IF              shift and go to state 24
    WHILE           shift and go to state 26
    FOR             shift and go to state 27
    INTERFACE       shift and go to state 28
    CONTINUE        shift and go to state 29
    BREAK           shift and go to state 30
    RETURN          shift and go to state 31
    FUNCTION        shift and go to state 32
    TOSTRING        shift and go to state 33
    NOT             shift and go to state 38
    MENOS           shift and go to state 35
    MAS             shift and go to state 34
    ENTERO          shift and go to state 44
    DECIMAL         shift and go to state 45
    CADENA          shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    L_PAREN         shift and go to state 20
    L_CORCHETE      shift and go to state 52
    L_LLAVE         shift and go to state 25

    declaration_instruction        shift and go to state 5
    a                              shift and go to state 23
    instrucciones                  shift and go to state 255
    instruccion                    shift and go to state 3
    console_pro                    shift and go to state 4
    assig_pro                      shift and go to state 6
    interface_assign_pro           shift and go to state 7
    if_pro                         shift and go to state 8
    while_pro                      shift and go to state 9
    for_pro                        shift and go to state 10
    for_each_pro                   shift and go to state 11
    interface_pro                  shift and go to state 12
    continue_pro                   shift and go to state 13
    break_pro                      shift and go to state 14
    return_pro                     shift and go to state 15
    function_pro                   shift and go to state 16
    call_function_pro              shift and go to state 17
    sumadores                      shift and go to state 18
    b                              shift and go to state 36
    c                              shift and go to state 37
    d                              shift and go to state 39
    e                              shift and go to state 40
    f                              shift and go to state 41
    g                              shift and go to state 42
    h                              shift and go to state 43
    array_pro                      shift and go to state 49
    interface_assi                 shift and go to state 50
    array_val_pro                  shift and go to state 51

state 251

    (62) for_pro -> FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE . instrucciones R_LLAVE
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . console_pro sc
    (5) instruccion -> . declaration_instruction sc
    (6) instruccion -> . assig_pro sc
    (7) instruccion -> . interface_assign_pro sc
    (8) instruccion -> . if_pro sc
    (9) instruccion -> . while_pro sc
    (10) instruccion -> . for_pro sc
    (11) instruccion -> . for_each_pro sc
    (12) instruccion -> . interface_pro sc
    (13) instruccion -> . continue_pro sc
    (14) instruccion -> . break_pro sc
    (15) instruccion -> . return_pro sc
    (16) instruccion -> . function_pro sc
    (17) instruccion -> . call_function_pro sc
    (18) instruccion -> . sumadores sc
    (66) console_pro -> . CONSOLE PUNTO LOG L_PAREN expresion R_PAREN
    (42) declaration_instruction -> . LET declaracion_list
    (55) assig_pro -> . LITERAL IGUAL a
    (41) interface_assign_pro -> . a PUNTO LITERAL IGUAL a
    (56) if_pro -> . IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro
    (60) while_pro -> . WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE
    (61) for_pro -> . FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (62) for_pro -> . FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (65) for_each_pro -> . FOR L_PAREN LET LITERAL OF a R_PAREN L_LLAVE instrucciones R_LLAVE
    (36) interface_pro -> . INTERFACE LITERAL L_LLAVE interface_atributos R_LLAVE
    (32) continue_pro -> . CONTINUE
    (33) break_pro -> . BREAK
    (34) return_pro -> . RETURN
    (35) return_pro -> . RETURN a
    (21) function_pro -> . FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (22) function_pro -> . FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE
    (23) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (24) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (25) call_function_pro -> . TOSTRING L_PAREN values R_PAREN
    (110) sumadores -> . LITERAL MAS MAS
    (111) sumadores -> . LITERAL MENOS MENOS
    (69) a -> . a OR b
    (70) a -> . b
    (71) b -> . b AND c
    (72) b -> . c
    (73) c -> . NOT d
    (74) c -> . d
    (75) d -> . d DISTINTO_QUE e
    (76) d -> . d MENOR_QUE e
    (77) d -> . d MENOR_IGUAL_QUE e
    (78) d -> . d MAYOR_QUE e
    (79) d -> . d MAYOR_IGUAL_QUE e
    (80) d -> . d TRIPLE_IGUAL e
    (81) d -> . e
    (82) e -> . e MAS f
    (83) e -> . e MENOS f
    (84) e -> . f
    (85) f -> . MENOS g
    (86) f -> . MAS g
    (87) f -> . g
    (88) g -> . g TIMES h
    (89) g -> . g DIVIDE h
    (90) g -> . g MOD h
    (91) g -> . g POTENCIA h
    (92) g -> . h
    (93) h -> . ENTERO
    (94) h -> . DECIMAL
    (95) h -> . CADENA
    (96) h -> . LITERAL
    (97) h -> . TRUE
    (98) h -> . FALSE
    (99) h -> . call_function_pro
    (100) h -> . array_pro
    (101) h -> . interface_assi
    (102) h -> . L_PAREN a R_PAREN
    (103) h -> . array_val_pro
    (104) h -> . a PUNTO LITERAL
    (105) h -> . a PUNTO nativeFun L_PAREN expresion R_PAREN
    (106) h -> . a PUNTO nativeFun L_PAREN R_PAREN
    (115) array_pro -> . L_CORCHETE values R_CORCHETE
    (112) interface_assi -> . L_LLAVE atributos_assi R_LLAVE
    (107) array_val_pro -> . LITERAL dimensions

    CONSOLE         shift and go to state 19
    LET             shift and go to state 21
    LITERAL         shift and go to state 22
    IF              shift and go to state 24
    WHILE           shift and go to state 26
    FOR             shift and go to state 27
    INTERFACE       shift and go to state 28
    CONTINUE        shift and go to state 29
    BREAK           shift and go to state 30
    RETURN          shift and go to state 31
    FUNCTION        shift and go to state 32
    TOSTRING        shift and go to state 33
    NOT             shift and go to state 38
    MENOS           shift and go to state 35
    MAS             shift and go to state 34
    ENTERO          shift and go to state 44
    DECIMAL         shift and go to state 45
    CADENA          shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    L_PAREN         shift and go to state 20
    L_CORCHETE      shift and go to state 52
    L_LLAVE         shift and go to state 25

    assig_pro                      shift and go to state 6
    a                              shift and go to state 23
    instrucciones                  shift and go to state 256
    instruccion                    shift and go to state 3
    console_pro                    shift and go to state 4
    declaration_instruction        shift and go to state 5
    interface_assign_pro           shift and go to state 7
    if_pro                         shift and go to state 8
    while_pro                      shift and go to state 9
    for_pro                        shift and go to state 10
    for_each_pro                   shift and go to state 11
    interface_pro                  shift and go to state 12
    continue_pro                   shift and go to state 13
    break_pro                      shift and go to state 14
    return_pro                     shift and go to state 15
    function_pro                   shift and go to state 16
    call_function_pro              shift and go to state 17
    sumadores                      shift and go to state 18
    b                              shift and go to state 36
    c                              shift and go to state 37
    d                              shift and go to state 39
    e                              shift and go to state 40
    f                              shift and go to state 41
    g                              shift and go to state 42
    h                              shift and go to state 43
    array_pro                      shift and go to state 49
    interface_assi                 shift and go to state 50
    array_val_pro                  shift and go to state 51

state 252

    (65) for_each_pro -> FOR L_PAREN LET LITERAL OF a R_PAREN L_LLAVE instrucciones . R_LLAVE
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . console_pro sc
    (5) instruccion -> . declaration_instruction sc
    (6) instruccion -> . assig_pro sc
    (7) instruccion -> . interface_assign_pro sc
    (8) instruccion -> . if_pro sc
    (9) instruccion -> . while_pro sc
    (10) instruccion -> . for_pro sc
    (11) instruccion -> . for_each_pro sc
    (12) instruccion -> . interface_pro sc
    (13) instruccion -> . continue_pro sc
    (14) instruccion -> . break_pro sc
    (15) instruccion -> . return_pro sc
    (16) instruccion -> . function_pro sc
    (17) instruccion -> . call_function_pro sc
    (18) instruccion -> . sumadores sc
    (66) console_pro -> . CONSOLE PUNTO LOG L_PAREN expresion R_PAREN
    (42) declaration_instruction -> . LET declaracion_list
    (55) assig_pro -> . LITERAL IGUAL a
    (41) interface_assign_pro -> . a PUNTO LITERAL IGUAL a
    (56) if_pro -> . IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro
    (60) while_pro -> . WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE
    (61) for_pro -> . FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (62) for_pro -> . FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (65) for_each_pro -> . FOR L_PAREN LET LITERAL OF a R_PAREN L_LLAVE instrucciones R_LLAVE
    (36) interface_pro -> . INTERFACE LITERAL L_LLAVE interface_atributos R_LLAVE
    (32) continue_pro -> . CONTINUE
    (33) break_pro -> . BREAK
    (34) return_pro -> . RETURN
    (35) return_pro -> . RETURN a
    (21) function_pro -> . FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (22) function_pro -> . FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE
    (23) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (24) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (25) call_function_pro -> . TOSTRING L_PAREN values R_PAREN
    (110) sumadores -> . LITERAL MAS MAS
    (111) sumadores -> . LITERAL MENOS MENOS
    (69) a -> . a OR b
    (70) a -> . b
    (71) b -> . b AND c
    (72) b -> . c
    (73) c -> . NOT d
    (74) c -> . d
    (75) d -> . d DISTINTO_QUE e
    (76) d -> . d MENOR_QUE e
    (77) d -> . d MENOR_IGUAL_QUE e
    (78) d -> . d MAYOR_QUE e
    (79) d -> . d MAYOR_IGUAL_QUE e
    (80) d -> . d TRIPLE_IGUAL e
    (81) d -> . e
    (82) e -> . e MAS f
    (83) e -> . e MENOS f
    (84) e -> . f
    (85) f -> . MENOS g
    (86) f -> . MAS g
    (87) f -> . g
    (88) g -> . g TIMES h
    (89) g -> . g DIVIDE h
    (90) g -> . g MOD h
    (91) g -> . g POTENCIA h
    (92) g -> . h
    (93) h -> . ENTERO
    (94) h -> . DECIMAL
    (95) h -> . CADENA
    (96) h -> . LITERAL
    (97) h -> . TRUE
    (98) h -> . FALSE
    (99) h -> . call_function_pro
    (100) h -> . array_pro
    (101) h -> . interface_assi
    (102) h -> . L_PAREN a R_PAREN
    (103) h -> . array_val_pro
    (104) h -> . a PUNTO LITERAL
    (105) h -> . a PUNTO nativeFun L_PAREN expresion R_PAREN
    (106) h -> . a PUNTO nativeFun L_PAREN R_PAREN
    (115) array_pro -> . L_CORCHETE values R_CORCHETE
    (112) interface_assi -> . L_LLAVE atributos_assi R_LLAVE
    (107) array_val_pro -> . LITERAL dimensions

    R_LLAVE         shift and go to state 257
    CONSOLE         shift and go to state 19
    LET             shift and go to state 21
    LITERAL         shift and go to state 22
    IF              shift and go to state 24
    WHILE           shift and go to state 26
    FOR             shift and go to state 27
    INTERFACE       shift and go to state 28
    CONTINUE        shift and go to state 29
    BREAK           shift and go to state 30
    RETURN          shift and go to state 31
    FUNCTION        shift and go to state 32
    TOSTRING        shift and go to state 33
    NOT             shift and go to state 38
    MENOS           shift and go to state 35
    MAS             shift and go to state 34
    ENTERO          shift and go to state 44
    DECIMAL         shift and go to state 45
    CADENA          shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    L_PAREN         shift and go to state 20
    L_CORCHETE      shift and go to state 52
    L_LLAVE         shift and go to state 25

    a                              shift and go to state 23
    instruccion                    shift and go to state 53
    console_pro                    shift and go to state 4
    declaration_instruction        shift and go to state 5
    assig_pro                      shift and go to state 6
    interface_assign_pro           shift and go to state 7
    if_pro                         shift and go to state 8
    while_pro                      shift and go to state 9
    for_pro                        shift and go to state 10
    for_each_pro                   shift and go to state 11
    interface_pro                  shift and go to state 12
    continue_pro                   shift and go to state 13
    break_pro                      shift and go to state 14
    return_pro                     shift and go to state 15
    function_pro                   shift and go to state 16
    call_function_pro              shift and go to state 17
    sumadores                      shift and go to state 18
    b                              shift and go to state 36
    c                              shift and go to state 37
    d                              shift and go to state 39
    e                              shift and go to state 40
    f                              shift and go to state 41
    g                              shift and go to state 42
    h                              shift and go to state 43
    array_pro                      shift and go to state 49
    interface_assi                 shift and go to state 50
    array_val_pro                  shift and go to state 51

state 253

    (57) else_pro -> ELSE IF L_PAREN . a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro
    (69) a -> . a OR b
    (70) a -> . b
    (71) b -> . b AND c
    (72) b -> . c
    (73) c -> . NOT d
    (74) c -> . d
    (75) d -> . d DISTINTO_QUE e
    (76) d -> . d MENOR_QUE e
    (77) d -> . d MENOR_IGUAL_QUE e
    (78) d -> . d MAYOR_QUE e
    (79) d -> . d MAYOR_IGUAL_QUE e
    (80) d -> . d TRIPLE_IGUAL e
    (81) d -> . e
    (82) e -> . e MAS f
    (83) e -> . e MENOS f
    (84) e -> . f
    (85) f -> . MENOS g
    (86) f -> . MAS g
    (87) f -> . g
    (88) g -> . g TIMES h
    (89) g -> . g DIVIDE h
    (90) g -> . g MOD h
    (91) g -> . g POTENCIA h
    (92) g -> . h
    (93) h -> . ENTERO
    (94) h -> . DECIMAL
    (95) h -> . CADENA
    (96) h -> . LITERAL
    (97) h -> . TRUE
    (98) h -> . FALSE
    (99) h -> . call_function_pro
    (100) h -> . array_pro
    (101) h -> . interface_assi
    (102) h -> . L_PAREN a R_PAREN
    (103) h -> . array_val_pro
    (104) h -> . a PUNTO LITERAL
    (105) h -> . a PUNTO nativeFun L_PAREN expresion R_PAREN
    (106) h -> . a PUNTO nativeFun L_PAREN R_PAREN
    (23) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (24) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (25) call_function_pro -> . TOSTRING L_PAREN values R_PAREN
    (115) array_pro -> . L_CORCHETE values R_CORCHETE
    (112) interface_assi -> . L_LLAVE atributos_assi R_LLAVE
    (107) array_val_pro -> . LITERAL dimensions

    NOT             shift and go to state 38
    MENOS           shift and go to state 35
    MAS             shift and go to state 34
    ENTERO          shift and go to state 44
    DECIMAL         shift and go to state 45
    CADENA          shift and go to state 46
    LITERAL         shift and go to state 72
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    L_PAREN         shift and go to state 20
    TOSTRING        shift and go to state 33
    L_CORCHETE      shift and go to state 52
    L_LLAVE         shift and go to state 25

    a                              shift and go to state 258
    b                              shift and go to state 36
    c                              shift and go to state 37
    d                              shift and go to state 39
    e                              shift and go to state 40
    f                              shift and go to state 41
    g                              shift and go to state 42
    h                              shift and go to state 43
    call_function_pro              shift and go to state 73
    array_pro                      shift and go to state 49
    interface_assi                 shift and go to state 50
    array_val_pro                  shift and go to state 51

state 254

    (58) else_pro -> ELSE L_LLAVE instrucciones . R_LLAVE
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . console_pro sc
    (5) instruccion -> . declaration_instruction sc
    (6) instruccion -> . assig_pro sc
    (7) instruccion -> . interface_assign_pro sc
    (8) instruccion -> . if_pro sc
    (9) instruccion -> . while_pro sc
    (10) instruccion -> . for_pro sc
    (11) instruccion -> . for_each_pro sc
    (12) instruccion -> . interface_pro sc
    (13) instruccion -> . continue_pro sc
    (14) instruccion -> . break_pro sc
    (15) instruccion -> . return_pro sc
    (16) instruccion -> . function_pro sc
    (17) instruccion -> . call_function_pro sc
    (18) instruccion -> . sumadores sc
    (66) console_pro -> . CONSOLE PUNTO LOG L_PAREN expresion R_PAREN
    (42) declaration_instruction -> . LET declaracion_list
    (55) assig_pro -> . LITERAL IGUAL a
    (41) interface_assign_pro -> . a PUNTO LITERAL IGUAL a
    (56) if_pro -> . IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro
    (60) while_pro -> . WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE
    (61) for_pro -> . FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (62) for_pro -> . FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (65) for_each_pro -> . FOR L_PAREN LET LITERAL OF a R_PAREN L_LLAVE instrucciones R_LLAVE
    (36) interface_pro -> . INTERFACE LITERAL L_LLAVE interface_atributos R_LLAVE
    (32) continue_pro -> . CONTINUE
    (33) break_pro -> . BREAK
    (34) return_pro -> . RETURN
    (35) return_pro -> . RETURN a
    (21) function_pro -> . FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (22) function_pro -> . FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE
    (23) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (24) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (25) call_function_pro -> . TOSTRING L_PAREN values R_PAREN
    (110) sumadores -> . LITERAL MAS MAS
    (111) sumadores -> . LITERAL MENOS MENOS
    (69) a -> . a OR b
    (70) a -> . b
    (71) b -> . b AND c
    (72) b -> . c
    (73) c -> . NOT d
    (74) c -> . d
    (75) d -> . d DISTINTO_QUE e
    (76) d -> . d MENOR_QUE e
    (77) d -> . d MENOR_IGUAL_QUE e
    (78) d -> . d MAYOR_QUE e
    (79) d -> . d MAYOR_IGUAL_QUE e
    (80) d -> . d TRIPLE_IGUAL e
    (81) d -> . e
    (82) e -> . e MAS f
    (83) e -> . e MENOS f
    (84) e -> . f
    (85) f -> . MENOS g
    (86) f -> . MAS g
    (87) f -> . g
    (88) g -> . g TIMES h
    (89) g -> . g DIVIDE h
    (90) g -> . g MOD h
    (91) g -> . g POTENCIA h
    (92) g -> . h
    (93) h -> . ENTERO
    (94) h -> . DECIMAL
    (95) h -> . CADENA
    (96) h -> . LITERAL
    (97) h -> . TRUE
    (98) h -> . FALSE
    (99) h -> . call_function_pro
    (100) h -> . array_pro
    (101) h -> . interface_assi
    (102) h -> . L_PAREN a R_PAREN
    (103) h -> . array_val_pro
    (104) h -> . a PUNTO LITERAL
    (105) h -> . a PUNTO nativeFun L_PAREN expresion R_PAREN
    (106) h -> . a PUNTO nativeFun L_PAREN R_PAREN
    (115) array_pro -> . L_CORCHETE values R_CORCHETE
    (112) interface_assi -> . L_LLAVE atributos_assi R_LLAVE
    (107) array_val_pro -> . LITERAL dimensions

    R_LLAVE         shift and go to state 259
    CONSOLE         shift and go to state 19
    LET             shift and go to state 21
    LITERAL         shift and go to state 22
    IF              shift and go to state 24
    WHILE           shift and go to state 26
    FOR             shift and go to state 27
    INTERFACE       shift and go to state 28
    CONTINUE        shift and go to state 29
    BREAK           shift and go to state 30
    RETURN          shift and go to state 31
    FUNCTION        shift and go to state 32
    TOSTRING        shift and go to state 33
    NOT             shift and go to state 38
    MENOS           shift and go to state 35
    MAS             shift and go to state 34
    ENTERO          shift and go to state 44
    DECIMAL         shift and go to state 45
    CADENA          shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    L_PAREN         shift and go to state 20
    L_CORCHETE      shift and go to state 52
    L_LLAVE         shift and go to state 25

    instruccion                    shift and go to state 53
    console_pro                    shift and go to state 4
    declaration_instruction        shift and go to state 5
    assig_pro                      shift and go to state 6
    interface_assign_pro           shift and go to state 7
    if_pro                         shift and go to state 8
    while_pro                      shift and go to state 9
    for_pro                        shift and go to state 10
    for_each_pro                   shift and go to state 11
    interface_pro                  shift and go to state 12
    continue_pro                   shift and go to state 13
    break_pro                      shift and go to state 14
    return_pro                     shift and go to state 15
    function_pro                   shift and go to state 16
    call_function_pro              shift and go to state 17
    sumadores                      shift and go to state 18
    a                              shift and go to state 23
    b                              shift and go to state 36
    c                              shift and go to state 37
    d                              shift and go to state 39
    e                              shift and go to state 40
    f                              shift and go to state 41
    g                              shift and go to state 42
    h                              shift and go to state 43
    array_pro                      shift and go to state 49
    interface_assi                 shift and go to state 50
    array_val_pro                  shift and go to state 51

state 255

    (61) for_pro -> FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones . R_LLAVE
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . console_pro sc
    (5) instruccion -> . declaration_instruction sc
    (6) instruccion -> . assig_pro sc
    (7) instruccion -> . interface_assign_pro sc
    (8) instruccion -> . if_pro sc
    (9) instruccion -> . while_pro sc
    (10) instruccion -> . for_pro sc
    (11) instruccion -> . for_each_pro sc
    (12) instruccion -> . interface_pro sc
    (13) instruccion -> . continue_pro sc
    (14) instruccion -> . break_pro sc
    (15) instruccion -> . return_pro sc
    (16) instruccion -> . function_pro sc
    (17) instruccion -> . call_function_pro sc
    (18) instruccion -> . sumadores sc
    (66) console_pro -> . CONSOLE PUNTO LOG L_PAREN expresion R_PAREN
    (42) declaration_instruction -> . LET declaracion_list
    (55) assig_pro -> . LITERAL IGUAL a
    (41) interface_assign_pro -> . a PUNTO LITERAL IGUAL a
    (56) if_pro -> . IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro
    (60) while_pro -> . WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE
    (61) for_pro -> . FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (62) for_pro -> . FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (65) for_each_pro -> . FOR L_PAREN LET LITERAL OF a R_PAREN L_LLAVE instrucciones R_LLAVE
    (36) interface_pro -> . INTERFACE LITERAL L_LLAVE interface_atributos R_LLAVE
    (32) continue_pro -> . CONTINUE
    (33) break_pro -> . BREAK
    (34) return_pro -> . RETURN
    (35) return_pro -> . RETURN a
    (21) function_pro -> . FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (22) function_pro -> . FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE
    (23) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (24) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (25) call_function_pro -> . TOSTRING L_PAREN values R_PAREN
    (110) sumadores -> . LITERAL MAS MAS
    (111) sumadores -> . LITERAL MENOS MENOS
    (69) a -> . a OR b
    (70) a -> . b
    (71) b -> . b AND c
    (72) b -> . c
    (73) c -> . NOT d
    (74) c -> . d
    (75) d -> . d DISTINTO_QUE e
    (76) d -> . d MENOR_QUE e
    (77) d -> . d MENOR_IGUAL_QUE e
    (78) d -> . d MAYOR_QUE e
    (79) d -> . d MAYOR_IGUAL_QUE e
    (80) d -> . d TRIPLE_IGUAL e
    (81) d -> . e
    (82) e -> . e MAS f
    (83) e -> . e MENOS f
    (84) e -> . f
    (85) f -> . MENOS g
    (86) f -> . MAS g
    (87) f -> . g
    (88) g -> . g TIMES h
    (89) g -> . g DIVIDE h
    (90) g -> . g MOD h
    (91) g -> . g POTENCIA h
    (92) g -> . h
    (93) h -> . ENTERO
    (94) h -> . DECIMAL
    (95) h -> . CADENA
    (96) h -> . LITERAL
    (97) h -> . TRUE
    (98) h -> . FALSE
    (99) h -> . call_function_pro
    (100) h -> . array_pro
    (101) h -> . interface_assi
    (102) h -> . L_PAREN a R_PAREN
    (103) h -> . array_val_pro
    (104) h -> . a PUNTO LITERAL
    (105) h -> . a PUNTO nativeFun L_PAREN expresion R_PAREN
    (106) h -> . a PUNTO nativeFun L_PAREN R_PAREN
    (115) array_pro -> . L_CORCHETE values R_CORCHETE
    (112) interface_assi -> . L_LLAVE atributos_assi R_LLAVE
    (107) array_val_pro -> . LITERAL dimensions

    R_LLAVE         shift and go to state 260
    CONSOLE         shift and go to state 19
    LET             shift and go to state 21
    LITERAL         shift and go to state 22
    IF              shift and go to state 24
    WHILE           shift and go to state 26
    FOR             shift and go to state 27
    INTERFACE       shift and go to state 28
    CONTINUE        shift and go to state 29
    BREAK           shift and go to state 30
    RETURN          shift and go to state 31
    FUNCTION        shift and go to state 32
    TOSTRING        shift and go to state 33
    NOT             shift and go to state 38
    MENOS           shift and go to state 35
    MAS             shift and go to state 34
    ENTERO          shift and go to state 44
    DECIMAL         shift and go to state 45
    CADENA          shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    L_PAREN         shift and go to state 20
    L_CORCHETE      shift and go to state 52
    L_LLAVE         shift and go to state 25

    declaration_instruction        shift and go to state 5
    a                              shift and go to state 23
    instruccion                    shift and go to state 53
    console_pro                    shift and go to state 4
    assig_pro                      shift and go to state 6
    interface_assign_pro           shift and go to state 7
    if_pro                         shift and go to state 8
    while_pro                      shift and go to state 9
    for_pro                        shift and go to state 10
    for_each_pro                   shift and go to state 11
    interface_pro                  shift and go to state 12
    continue_pro                   shift and go to state 13
    break_pro                      shift and go to state 14
    return_pro                     shift and go to state 15
    function_pro                   shift and go to state 16
    call_function_pro              shift and go to state 17
    sumadores                      shift and go to state 18
    b                              shift and go to state 36
    c                              shift and go to state 37
    d                              shift and go to state 39
    e                              shift and go to state 40
    f                              shift and go to state 41
    g                              shift and go to state 42
    h                              shift and go to state 43
    array_pro                      shift and go to state 49
    interface_assi                 shift and go to state 50
    array_val_pro                  shift and go to state 51

state 256

    (62) for_pro -> FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones . R_LLAVE
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . console_pro sc
    (5) instruccion -> . declaration_instruction sc
    (6) instruccion -> . assig_pro sc
    (7) instruccion -> . interface_assign_pro sc
    (8) instruccion -> . if_pro sc
    (9) instruccion -> . while_pro sc
    (10) instruccion -> . for_pro sc
    (11) instruccion -> . for_each_pro sc
    (12) instruccion -> . interface_pro sc
    (13) instruccion -> . continue_pro sc
    (14) instruccion -> . break_pro sc
    (15) instruccion -> . return_pro sc
    (16) instruccion -> . function_pro sc
    (17) instruccion -> . call_function_pro sc
    (18) instruccion -> . sumadores sc
    (66) console_pro -> . CONSOLE PUNTO LOG L_PAREN expresion R_PAREN
    (42) declaration_instruction -> . LET declaracion_list
    (55) assig_pro -> . LITERAL IGUAL a
    (41) interface_assign_pro -> . a PUNTO LITERAL IGUAL a
    (56) if_pro -> . IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro
    (60) while_pro -> . WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE
    (61) for_pro -> . FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (62) for_pro -> . FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (65) for_each_pro -> . FOR L_PAREN LET LITERAL OF a R_PAREN L_LLAVE instrucciones R_LLAVE
    (36) interface_pro -> . INTERFACE LITERAL L_LLAVE interface_atributos R_LLAVE
    (32) continue_pro -> . CONTINUE
    (33) break_pro -> . BREAK
    (34) return_pro -> . RETURN
    (35) return_pro -> . RETURN a
    (21) function_pro -> . FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (22) function_pro -> . FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE
    (23) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (24) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (25) call_function_pro -> . TOSTRING L_PAREN values R_PAREN
    (110) sumadores -> . LITERAL MAS MAS
    (111) sumadores -> . LITERAL MENOS MENOS
    (69) a -> . a OR b
    (70) a -> . b
    (71) b -> . b AND c
    (72) b -> . c
    (73) c -> . NOT d
    (74) c -> . d
    (75) d -> . d DISTINTO_QUE e
    (76) d -> . d MENOR_QUE e
    (77) d -> . d MENOR_IGUAL_QUE e
    (78) d -> . d MAYOR_QUE e
    (79) d -> . d MAYOR_IGUAL_QUE e
    (80) d -> . d TRIPLE_IGUAL e
    (81) d -> . e
    (82) e -> . e MAS f
    (83) e -> . e MENOS f
    (84) e -> . f
    (85) f -> . MENOS g
    (86) f -> . MAS g
    (87) f -> . g
    (88) g -> . g TIMES h
    (89) g -> . g DIVIDE h
    (90) g -> . g MOD h
    (91) g -> . g POTENCIA h
    (92) g -> . h
    (93) h -> . ENTERO
    (94) h -> . DECIMAL
    (95) h -> . CADENA
    (96) h -> . LITERAL
    (97) h -> . TRUE
    (98) h -> . FALSE
    (99) h -> . call_function_pro
    (100) h -> . array_pro
    (101) h -> . interface_assi
    (102) h -> . L_PAREN a R_PAREN
    (103) h -> . array_val_pro
    (104) h -> . a PUNTO LITERAL
    (105) h -> . a PUNTO nativeFun L_PAREN expresion R_PAREN
    (106) h -> . a PUNTO nativeFun L_PAREN R_PAREN
    (115) array_pro -> . L_CORCHETE values R_CORCHETE
    (112) interface_assi -> . L_LLAVE atributos_assi R_LLAVE
    (107) array_val_pro -> . LITERAL dimensions

    R_LLAVE         shift and go to state 261
    CONSOLE         shift and go to state 19
    LET             shift and go to state 21
    LITERAL         shift and go to state 22
    IF              shift and go to state 24
    WHILE           shift and go to state 26
    FOR             shift and go to state 27
    INTERFACE       shift and go to state 28
    CONTINUE        shift and go to state 29
    BREAK           shift and go to state 30
    RETURN          shift and go to state 31
    FUNCTION        shift and go to state 32
    TOSTRING        shift and go to state 33
    NOT             shift and go to state 38
    MENOS           shift and go to state 35
    MAS             shift and go to state 34
    ENTERO          shift and go to state 44
    DECIMAL         shift and go to state 45
    CADENA          shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    L_PAREN         shift and go to state 20
    L_CORCHETE      shift and go to state 52
    L_LLAVE         shift and go to state 25

    assig_pro                      shift and go to state 6
    a                              shift and go to state 23
    instruccion                    shift and go to state 53
    console_pro                    shift and go to state 4
    declaration_instruction        shift and go to state 5
    interface_assign_pro           shift and go to state 7
    if_pro                         shift and go to state 8
    while_pro                      shift and go to state 9
    for_pro                        shift and go to state 10
    for_each_pro                   shift and go to state 11
    interface_pro                  shift and go to state 12
    continue_pro                   shift and go to state 13
    break_pro                      shift and go to state 14
    return_pro                     shift and go to state 15
    function_pro                   shift and go to state 16
    call_function_pro              shift and go to state 17
    sumadores                      shift and go to state 18
    b                              shift and go to state 36
    c                              shift and go to state 37
    d                              shift and go to state 39
    e                              shift and go to state 40
    f                              shift and go to state 41
    g                              shift and go to state 42
    h                              shift and go to state 43
    array_pro                      shift and go to state 49
    interface_assi                 shift and go to state 50
    array_val_pro                  shift and go to state 51

state 257

    (65) for_each_pro -> FOR L_PAREN LET LITERAL OF a R_PAREN L_LLAVE instrucciones R_LLAVE .

    SEMI_COLON      reduce using rule 65 (for_each_pro -> FOR L_PAREN LET LITERAL OF a R_PAREN L_LLAVE instrucciones R_LLAVE .)
    CONSOLE         reduce using rule 65 (for_each_pro -> FOR L_PAREN LET LITERAL OF a R_PAREN L_LLAVE instrucciones R_LLAVE .)
    LET             reduce using rule 65 (for_each_pro -> FOR L_PAREN LET LITERAL OF a R_PAREN L_LLAVE instrucciones R_LLAVE .)
    LITERAL         reduce using rule 65 (for_each_pro -> FOR L_PAREN LET LITERAL OF a R_PAREN L_LLAVE instrucciones R_LLAVE .)
    IF              reduce using rule 65 (for_each_pro -> FOR L_PAREN LET LITERAL OF a R_PAREN L_LLAVE instrucciones R_LLAVE .)
    WHILE           reduce using rule 65 (for_each_pro -> FOR L_PAREN LET LITERAL OF a R_PAREN L_LLAVE instrucciones R_LLAVE .)
    FOR             reduce using rule 65 (for_each_pro -> FOR L_PAREN LET LITERAL OF a R_PAREN L_LLAVE instrucciones R_LLAVE .)
    INTERFACE       reduce using rule 65 (for_each_pro -> FOR L_PAREN LET LITERAL OF a R_PAREN L_LLAVE instrucciones R_LLAVE .)
    CONTINUE        reduce using rule 65 (for_each_pro -> FOR L_PAREN LET LITERAL OF a R_PAREN L_LLAVE instrucciones R_LLAVE .)
    BREAK           reduce using rule 65 (for_each_pro -> FOR L_PAREN LET LITERAL OF a R_PAREN L_LLAVE instrucciones R_LLAVE .)
    RETURN          reduce using rule 65 (for_each_pro -> FOR L_PAREN LET LITERAL OF a R_PAREN L_LLAVE instrucciones R_LLAVE .)
    FUNCTION        reduce using rule 65 (for_each_pro -> FOR L_PAREN LET LITERAL OF a R_PAREN L_LLAVE instrucciones R_LLAVE .)
    TOSTRING        reduce using rule 65 (for_each_pro -> FOR L_PAREN LET LITERAL OF a R_PAREN L_LLAVE instrucciones R_LLAVE .)
    NOT             reduce using rule 65 (for_each_pro -> FOR L_PAREN LET LITERAL OF a R_PAREN L_LLAVE instrucciones R_LLAVE .)
    MENOS           reduce using rule 65 (for_each_pro -> FOR L_PAREN LET LITERAL OF a R_PAREN L_LLAVE instrucciones R_LLAVE .)
    MAS             reduce using rule 65 (for_each_pro -> FOR L_PAREN LET LITERAL OF a R_PAREN L_LLAVE instrucciones R_LLAVE .)
    ENTERO          reduce using rule 65 (for_each_pro -> FOR L_PAREN LET LITERAL OF a R_PAREN L_LLAVE instrucciones R_LLAVE .)
    DECIMAL         reduce using rule 65 (for_each_pro -> FOR L_PAREN LET LITERAL OF a R_PAREN L_LLAVE instrucciones R_LLAVE .)
    CADENA          reduce using rule 65 (for_each_pro -> FOR L_PAREN LET LITERAL OF a R_PAREN L_LLAVE instrucciones R_LLAVE .)
    TRUE            reduce using rule 65 (for_each_pro -> FOR L_PAREN LET LITERAL OF a R_PAREN L_LLAVE instrucciones R_LLAVE .)
    FALSE           reduce using rule 65 (for_each_pro -> FOR L_PAREN LET LITERAL OF a R_PAREN L_LLAVE instrucciones R_LLAVE .)
    L_PAREN         reduce using rule 65 (for_each_pro -> FOR L_PAREN LET LITERAL OF a R_PAREN L_LLAVE instrucciones R_LLAVE .)
    L_CORCHETE      reduce using rule 65 (for_each_pro -> FOR L_PAREN LET LITERAL OF a R_PAREN L_LLAVE instrucciones R_LLAVE .)
    L_LLAVE         reduce using rule 65 (for_each_pro -> FOR L_PAREN LET LITERAL OF a R_PAREN L_LLAVE instrucciones R_LLAVE .)
    $end            reduce using rule 65 (for_each_pro -> FOR L_PAREN LET LITERAL OF a R_PAREN L_LLAVE instrucciones R_LLAVE .)
    R_LLAVE         reduce using rule 65 (for_each_pro -> FOR L_PAREN LET LITERAL OF a R_PAREN L_LLAVE instrucciones R_LLAVE .)


state 258

    (57) else_pro -> ELSE IF L_PAREN a . R_PAREN L_LLAVE instrucciones R_LLAVE else_pro
    (69) a -> a . OR b
    (104) h -> a . PUNTO LITERAL
    (105) h -> a . PUNTO nativeFun L_PAREN expresion R_PAREN
    (106) h -> a . PUNTO nativeFun L_PAREN R_PAREN

    R_PAREN         shift and go to state 262
    OR              shift and go to state 84
    PUNTO           shift and go to state 115


state 259

    (58) else_pro -> ELSE L_LLAVE instrucciones R_LLAVE .

    SEMI_COLON      reduce using rule 58 (else_pro -> ELSE L_LLAVE instrucciones R_LLAVE .)
    CONSOLE         reduce using rule 58 (else_pro -> ELSE L_LLAVE instrucciones R_LLAVE .)
    LET             reduce using rule 58 (else_pro -> ELSE L_LLAVE instrucciones R_LLAVE .)
    LITERAL         reduce using rule 58 (else_pro -> ELSE L_LLAVE instrucciones R_LLAVE .)
    IF              reduce using rule 58 (else_pro -> ELSE L_LLAVE instrucciones R_LLAVE .)
    WHILE           reduce using rule 58 (else_pro -> ELSE L_LLAVE instrucciones R_LLAVE .)
    FOR             reduce using rule 58 (else_pro -> ELSE L_LLAVE instrucciones R_LLAVE .)
    INTERFACE       reduce using rule 58 (else_pro -> ELSE L_LLAVE instrucciones R_LLAVE .)
    CONTINUE        reduce using rule 58 (else_pro -> ELSE L_LLAVE instrucciones R_LLAVE .)
    BREAK           reduce using rule 58 (else_pro -> ELSE L_LLAVE instrucciones R_LLAVE .)
    RETURN          reduce using rule 58 (else_pro -> ELSE L_LLAVE instrucciones R_LLAVE .)
    FUNCTION        reduce using rule 58 (else_pro -> ELSE L_LLAVE instrucciones R_LLAVE .)
    TOSTRING        reduce using rule 58 (else_pro -> ELSE L_LLAVE instrucciones R_LLAVE .)
    NOT             reduce using rule 58 (else_pro -> ELSE L_LLAVE instrucciones R_LLAVE .)
    MENOS           reduce using rule 58 (else_pro -> ELSE L_LLAVE instrucciones R_LLAVE .)
    MAS             reduce using rule 58 (else_pro -> ELSE L_LLAVE instrucciones R_LLAVE .)
    ENTERO          reduce using rule 58 (else_pro -> ELSE L_LLAVE instrucciones R_LLAVE .)
    DECIMAL         reduce using rule 58 (else_pro -> ELSE L_LLAVE instrucciones R_LLAVE .)
    CADENA          reduce using rule 58 (else_pro -> ELSE L_LLAVE instrucciones R_LLAVE .)
    TRUE            reduce using rule 58 (else_pro -> ELSE L_LLAVE instrucciones R_LLAVE .)
    FALSE           reduce using rule 58 (else_pro -> ELSE L_LLAVE instrucciones R_LLAVE .)
    L_PAREN         reduce using rule 58 (else_pro -> ELSE L_LLAVE instrucciones R_LLAVE .)
    L_CORCHETE      reduce using rule 58 (else_pro -> ELSE L_LLAVE instrucciones R_LLAVE .)
    L_LLAVE         reduce using rule 58 (else_pro -> ELSE L_LLAVE instrucciones R_LLAVE .)
    $end            reduce using rule 58 (else_pro -> ELSE L_LLAVE instrucciones R_LLAVE .)
    R_LLAVE         reduce using rule 58 (else_pro -> ELSE L_LLAVE instrucciones R_LLAVE .)


state 260

    (61) for_pro -> FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE .

    SEMI_COLON      reduce using rule 61 (for_pro -> FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    CONSOLE         reduce using rule 61 (for_pro -> FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    LET             reduce using rule 61 (for_pro -> FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    LITERAL         reduce using rule 61 (for_pro -> FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    IF              reduce using rule 61 (for_pro -> FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    WHILE           reduce using rule 61 (for_pro -> FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    FOR             reduce using rule 61 (for_pro -> FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    INTERFACE       reduce using rule 61 (for_pro -> FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    CONTINUE        reduce using rule 61 (for_pro -> FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    BREAK           reduce using rule 61 (for_pro -> FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    RETURN          reduce using rule 61 (for_pro -> FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    FUNCTION        reduce using rule 61 (for_pro -> FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    TOSTRING        reduce using rule 61 (for_pro -> FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    NOT             reduce using rule 61 (for_pro -> FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    MENOS           reduce using rule 61 (for_pro -> FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    MAS             reduce using rule 61 (for_pro -> FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    ENTERO          reduce using rule 61 (for_pro -> FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    DECIMAL         reduce using rule 61 (for_pro -> FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    CADENA          reduce using rule 61 (for_pro -> FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    TRUE            reduce using rule 61 (for_pro -> FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    FALSE           reduce using rule 61 (for_pro -> FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    L_PAREN         reduce using rule 61 (for_pro -> FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    L_CORCHETE      reduce using rule 61 (for_pro -> FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    L_LLAVE         reduce using rule 61 (for_pro -> FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    $end            reduce using rule 61 (for_pro -> FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    R_LLAVE         reduce using rule 61 (for_pro -> FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)


state 261

    (62) for_pro -> FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE .

    SEMI_COLON      reduce using rule 62 (for_pro -> FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    CONSOLE         reduce using rule 62 (for_pro -> FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    LET             reduce using rule 62 (for_pro -> FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    LITERAL         reduce using rule 62 (for_pro -> FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    IF              reduce using rule 62 (for_pro -> FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    WHILE           reduce using rule 62 (for_pro -> FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    FOR             reduce using rule 62 (for_pro -> FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    INTERFACE       reduce using rule 62 (for_pro -> FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    CONTINUE        reduce using rule 62 (for_pro -> FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    BREAK           reduce using rule 62 (for_pro -> FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    RETURN          reduce using rule 62 (for_pro -> FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    FUNCTION        reduce using rule 62 (for_pro -> FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    TOSTRING        reduce using rule 62 (for_pro -> FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    NOT             reduce using rule 62 (for_pro -> FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    MENOS           reduce using rule 62 (for_pro -> FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    MAS             reduce using rule 62 (for_pro -> FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    ENTERO          reduce using rule 62 (for_pro -> FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    DECIMAL         reduce using rule 62 (for_pro -> FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    CADENA          reduce using rule 62 (for_pro -> FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    TRUE            reduce using rule 62 (for_pro -> FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    FALSE           reduce using rule 62 (for_pro -> FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    L_PAREN         reduce using rule 62 (for_pro -> FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    L_CORCHETE      reduce using rule 62 (for_pro -> FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    L_LLAVE         reduce using rule 62 (for_pro -> FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    $end            reduce using rule 62 (for_pro -> FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    R_LLAVE         reduce using rule 62 (for_pro -> FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)


state 262

    (57) else_pro -> ELSE IF L_PAREN a R_PAREN . L_LLAVE instrucciones R_LLAVE else_pro

    L_LLAVE         shift and go to state 263


state 263

    (57) else_pro -> ELSE IF L_PAREN a R_PAREN L_LLAVE . instrucciones R_LLAVE else_pro
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . console_pro sc
    (5) instruccion -> . declaration_instruction sc
    (6) instruccion -> . assig_pro sc
    (7) instruccion -> . interface_assign_pro sc
    (8) instruccion -> . if_pro sc
    (9) instruccion -> . while_pro sc
    (10) instruccion -> . for_pro sc
    (11) instruccion -> . for_each_pro sc
    (12) instruccion -> . interface_pro sc
    (13) instruccion -> . continue_pro sc
    (14) instruccion -> . break_pro sc
    (15) instruccion -> . return_pro sc
    (16) instruccion -> . function_pro sc
    (17) instruccion -> . call_function_pro sc
    (18) instruccion -> . sumadores sc
    (66) console_pro -> . CONSOLE PUNTO LOG L_PAREN expresion R_PAREN
    (42) declaration_instruction -> . LET declaracion_list
    (55) assig_pro -> . LITERAL IGUAL a
    (41) interface_assign_pro -> . a PUNTO LITERAL IGUAL a
    (56) if_pro -> . IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro
    (60) while_pro -> . WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE
    (61) for_pro -> . FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (62) for_pro -> . FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (65) for_each_pro -> . FOR L_PAREN LET LITERAL OF a R_PAREN L_LLAVE instrucciones R_LLAVE
    (36) interface_pro -> . INTERFACE LITERAL L_LLAVE interface_atributos R_LLAVE
    (32) continue_pro -> . CONTINUE
    (33) break_pro -> . BREAK
    (34) return_pro -> . RETURN
    (35) return_pro -> . RETURN a
    (21) function_pro -> . FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (22) function_pro -> . FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE
    (23) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (24) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (25) call_function_pro -> . TOSTRING L_PAREN values R_PAREN
    (110) sumadores -> . LITERAL MAS MAS
    (111) sumadores -> . LITERAL MENOS MENOS
    (69) a -> . a OR b
    (70) a -> . b
    (71) b -> . b AND c
    (72) b -> . c
    (73) c -> . NOT d
    (74) c -> . d
    (75) d -> . d DISTINTO_QUE e
    (76) d -> . d MENOR_QUE e
    (77) d -> . d MENOR_IGUAL_QUE e
    (78) d -> . d MAYOR_QUE e
    (79) d -> . d MAYOR_IGUAL_QUE e
    (80) d -> . d TRIPLE_IGUAL e
    (81) d -> . e
    (82) e -> . e MAS f
    (83) e -> . e MENOS f
    (84) e -> . f
    (85) f -> . MENOS g
    (86) f -> . MAS g
    (87) f -> . g
    (88) g -> . g TIMES h
    (89) g -> . g DIVIDE h
    (90) g -> . g MOD h
    (91) g -> . g POTENCIA h
    (92) g -> . h
    (93) h -> . ENTERO
    (94) h -> . DECIMAL
    (95) h -> . CADENA
    (96) h -> . LITERAL
    (97) h -> . TRUE
    (98) h -> . FALSE
    (99) h -> . call_function_pro
    (100) h -> . array_pro
    (101) h -> . interface_assi
    (102) h -> . L_PAREN a R_PAREN
    (103) h -> . array_val_pro
    (104) h -> . a PUNTO LITERAL
    (105) h -> . a PUNTO nativeFun L_PAREN expresion R_PAREN
    (106) h -> . a PUNTO nativeFun L_PAREN R_PAREN
    (115) array_pro -> . L_CORCHETE values R_CORCHETE
    (112) interface_assi -> . L_LLAVE atributos_assi R_LLAVE
    (107) array_val_pro -> . LITERAL dimensions

    CONSOLE         shift and go to state 19
    LET             shift and go to state 21
    LITERAL         shift and go to state 22
    IF              shift and go to state 24
    WHILE           shift and go to state 26
    FOR             shift and go to state 27
    INTERFACE       shift and go to state 28
    CONTINUE        shift and go to state 29
    BREAK           shift and go to state 30
    RETURN          shift and go to state 31
    FUNCTION        shift and go to state 32
    TOSTRING        shift and go to state 33
    NOT             shift and go to state 38
    MENOS           shift and go to state 35
    MAS             shift and go to state 34
    ENTERO          shift and go to state 44
    DECIMAL         shift and go to state 45
    CADENA          shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    L_PAREN         shift and go to state 20
    L_CORCHETE      shift and go to state 52
    L_LLAVE         shift and go to state 25

    a                              shift and go to state 23
    instrucciones                  shift and go to state 264
    instruccion                    shift and go to state 3
    console_pro                    shift and go to state 4
    declaration_instruction        shift and go to state 5
    assig_pro                      shift and go to state 6
    interface_assign_pro           shift and go to state 7
    if_pro                         shift and go to state 8
    while_pro                      shift and go to state 9
    for_pro                        shift and go to state 10
    for_each_pro                   shift and go to state 11
    interface_pro                  shift and go to state 12
    continue_pro                   shift and go to state 13
    break_pro                      shift and go to state 14
    return_pro                     shift and go to state 15
    function_pro                   shift and go to state 16
    call_function_pro              shift and go to state 17
    sumadores                      shift and go to state 18
    b                              shift and go to state 36
    c                              shift and go to state 37
    d                              shift and go to state 39
    e                              shift and go to state 40
    f                              shift and go to state 41
    g                              shift and go to state 42
    h                              shift and go to state 43
    array_pro                      shift and go to state 49
    interface_assi                 shift and go to state 50
    array_val_pro                  shift and go to state 51

state 264

    (57) else_pro -> ELSE IF L_PAREN a R_PAREN L_LLAVE instrucciones . R_LLAVE else_pro
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . console_pro sc
    (5) instruccion -> . declaration_instruction sc
    (6) instruccion -> . assig_pro sc
    (7) instruccion -> . interface_assign_pro sc
    (8) instruccion -> . if_pro sc
    (9) instruccion -> . while_pro sc
    (10) instruccion -> . for_pro sc
    (11) instruccion -> . for_each_pro sc
    (12) instruccion -> . interface_pro sc
    (13) instruccion -> . continue_pro sc
    (14) instruccion -> . break_pro sc
    (15) instruccion -> . return_pro sc
    (16) instruccion -> . function_pro sc
    (17) instruccion -> . call_function_pro sc
    (18) instruccion -> . sumadores sc
    (66) console_pro -> . CONSOLE PUNTO LOG L_PAREN expresion R_PAREN
    (42) declaration_instruction -> . LET declaracion_list
    (55) assig_pro -> . LITERAL IGUAL a
    (41) interface_assign_pro -> . a PUNTO LITERAL IGUAL a
    (56) if_pro -> . IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro
    (60) while_pro -> . WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE
    (61) for_pro -> . FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (62) for_pro -> . FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON inDec_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (65) for_each_pro -> . FOR L_PAREN LET LITERAL OF a R_PAREN L_LLAVE instrucciones R_LLAVE
    (36) interface_pro -> . INTERFACE LITERAL L_LLAVE interface_atributos R_LLAVE
    (32) continue_pro -> . CONTINUE
    (33) break_pro -> . BREAK
    (34) return_pro -> . RETURN
    (35) return_pro -> . RETURN a
    (21) function_pro -> . FUNCTION LITERAL L_PAREN parameters_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (22) function_pro -> . FUNCTION LITERAL L_PAREN R_PAREN L_LLAVE instrucciones R_LLAVE
    (23) call_function_pro -> . LITERAL L_PAREN values R_PAREN
    (24) call_function_pro -> . LITERAL L_PAREN R_PAREN
    (25) call_function_pro -> . TOSTRING L_PAREN values R_PAREN
    (110) sumadores -> . LITERAL MAS MAS
    (111) sumadores -> . LITERAL MENOS MENOS
    (69) a -> . a OR b
    (70) a -> . b
    (71) b -> . b AND c
    (72) b -> . c
    (73) c -> . NOT d
    (74) c -> . d
    (75) d -> . d DISTINTO_QUE e
    (76) d -> . d MENOR_QUE e
    (77) d -> . d MENOR_IGUAL_QUE e
    (78) d -> . d MAYOR_QUE e
    (79) d -> . d MAYOR_IGUAL_QUE e
    (80) d -> . d TRIPLE_IGUAL e
    (81) d -> . e
    (82) e -> . e MAS f
    (83) e -> . e MENOS f
    (84) e -> . f
    (85) f -> . MENOS g
    (86) f -> . MAS g
    (87) f -> . g
    (88) g -> . g TIMES h
    (89) g -> . g DIVIDE h
    (90) g -> . g MOD h
    (91) g -> . g POTENCIA h
    (92) g -> . h
    (93) h -> . ENTERO
    (94) h -> . DECIMAL
    (95) h -> . CADENA
    (96) h -> . LITERAL
    (97) h -> . TRUE
    (98) h -> . FALSE
    (99) h -> . call_function_pro
    (100) h -> . array_pro
    (101) h -> . interface_assi
    (102) h -> . L_PAREN a R_PAREN
    (103) h -> . array_val_pro
    (104) h -> . a PUNTO LITERAL
    (105) h -> . a PUNTO nativeFun L_PAREN expresion R_PAREN
    (106) h -> . a PUNTO nativeFun L_PAREN R_PAREN
    (115) array_pro -> . L_CORCHETE values R_CORCHETE
    (112) interface_assi -> . L_LLAVE atributos_assi R_LLAVE
    (107) array_val_pro -> . LITERAL dimensions

    R_LLAVE         shift and go to state 265
    CONSOLE         shift and go to state 19
    LET             shift and go to state 21
    LITERAL         shift and go to state 22
    IF              shift and go to state 24
    WHILE           shift and go to state 26
    FOR             shift and go to state 27
    INTERFACE       shift and go to state 28
    CONTINUE        shift and go to state 29
    BREAK           shift and go to state 30
    RETURN          shift and go to state 31
    FUNCTION        shift and go to state 32
    TOSTRING        shift and go to state 33
    NOT             shift and go to state 38
    MENOS           shift and go to state 35
    MAS             shift and go to state 34
    ENTERO          shift and go to state 44
    DECIMAL         shift and go to state 45
    CADENA          shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    L_PAREN         shift and go to state 20
    L_CORCHETE      shift and go to state 52
    L_LLAVE         shift and go to state 25

    a                              shift and go to state 23
    instruccion                    shift and go to state 53
    console_pro                    shift and go to state 4
    declaration_instruction        shift and go to state 5
    assig_pro                      shift and go to state 6
    interface_assign_pro           shift and go to state 7
    if_pro                         shift and go to state 8
    while_pro                      shift and go to state 9
    for_pro                        shift and go to state 10
    for_each_pro                   shift and go to state 11
    interface_pro                  shift and go to state 12
    continue_pro                   shift and go to state 13
    break_pro                      shift and go to state 14
    return_pro                     shift and go to state 15
    function_pro                   shift and go to state 16
    call_function_pro              shift and go to state 17
    sumadores                      shift and go to state 18
    b                              shift and go to state 36
    c                              shift and go to state 37
    d                              shift and go to state 39
    e                              shift and go to state 40
    f                              shift and go to state 41
    g                              shift and go to state 42
    h                              shift and go to state 43
    array_pro                      shift and go to state 49
    interface_assi                 shift and go to state 50
    array_val_pro                  shift and go to state 51

state 265

    (57) else_pro -> ELSE IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE . else_pro
    (57) else_pro -> . ELSE IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro
    (58) else_pro -> . ELSE L_LLAVE instrucciones R_LLAVE
    (59) else_pro -> .

    ELSE            shift and go to state 243
    SEMI_COLON      reduce using rule 59 (else_pro -> .)
    CONSOLE         reduce using rule 59 (else_pro -> .)
    LET             reduce using rule 59 (else_pro -> .)
    LITERAL         reduce using rule 59 (else_pro -> .)
    IF              reduce using rule 59 (else_pro -> .)
    WHILE           reduce using rule 59 (else_pro -> .)
    FOR             reduce using rule 59 (else_pro -> .)
    INTERFACE       reduce using rule 59 (else_pro -> .)
    CONTINUE        reduce using rule 59 (else_pro -> .)
    BREAK           reduce using rule 59 (else_pro -> .)
    RETURN          reduce using rule 59 (else_pro -> .)
    FUNCTION        reduce using rule 59 (else_pro -> .)
    TOSTRING        reduce using rule 59 (else_pro -> .)
    NOT             reduce using rule 59 (else_pro -> .)
    MENOS           reduce using rule 59 (else_pro -> .)
    MAS             reduce using rule 59 (else_pro -> .)
    ENTERO          reduce using rule 59 (else_pro -> .)
    DECIMAL         reduce using rule 59 (else_pro -> .)
    CADENA          reduce using rule 59 (else_pro -> .)
    TRUE            reduce using rule 59 (else_pro -> .)
    FALSE           reduce using rule 59 (else_pro -> .)
    L_PAREN         reduce using rule 59 (else_pro -> .)
    L_CORCHETE      reduce using rule 59 (else_pro -> .)
    L_LLAVE         reduce using rule 59 (else_pro -> .)
    $end            reduce using rule 59 (else_pro -> .)
    R_LLAVE         reduce using rule 59 (else_pro -> .)

    else_pro                       shift and go to state 266

state 266

    (57) else_pro -> ELSE IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .

    SEMI_COLON      reduce using rule 57 (else_pro -> ELSE IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    CONSOLE         reduce using rule 57 (else_pro -> ELSE IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    LET             reduce using rule 57 (else_pro -> ELSE IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    LITERAL         reduce using rule 57 (else_pro -> ELSE IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    IF              reduce using rule 57 (else_pro -> ELSE IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    WHILE           reduce using rule 57 (else_pro -> ELSE IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    FOR             reduce using rule 57 (else_pro -> ELSE IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    INTERFACE       reduce using rule 57 (else_pro -> ELSE IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    CONTINUE        reduce using rule 57 (else_pro -> ELSE IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    BREAK           reduce using rule 57 (else_pro -> ELSE IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    RETURN          reduce using rule 57 (else_pro -> ELSE IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    FUNCTION        reduce using rule 57 (else_pro -> ELSE IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    TOSTRING        reduce using rule 57 (else_pro -> ELSE IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    NOT             reduce using rule 57 (else_pro -> ELSE IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    MENOS           reduce using rule 57 (else_pro -> ELSE IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    MAS             reduce using rule 57 (else_pro -> ELSE IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    ENTERO          reduce using rule 57 (else_pro -> ELSE IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    DECIMAL         reduce using rule 57 (else_pro -> ELSE IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    CADENA          reduce using rule 57 (else_pro -> ELSE IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    TRUE            reduce using rule 57 (else_pro -> ELSE IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    FALSE           reduce using rule 57 (else_pro -> ELSE IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    L_PAREN         reduce using rule 57 (else_pro -> ELSE IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    L_CORCHETE      reduce using rule 57 (else_pro -> ELSE IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    L_LLAVE         reduce using rule 57 (else_pro -> ELSE IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    $end            reduce using rule 57 (else_pro -> ELSE IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    R_LLAVE         reduce using rule 57 (else_pro -> ELSE IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for MAS in state 22 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 22 resolved as shift
WARNING: shift/reduce conflict for NOT in state 31 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 31 resolved as shift
WARNING: shift/reduce conflict for MAS in state 31 resolved as shift
WARNING: shift/reduce conflict for ENTERO in state 31 resolved as shift
WARNING: shift/reduce conflict for DECIMAL in state 31 resolved as shift
WARNING: shift/reduce conflict for CADENA in state 31 resolved as shift
WARNING: shift/reduce conflict for LITERAL in state 31 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 31 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 31 resolved as shift
WARNING: shift/reduce conflict for L_PAREN in state 31 resolved as shift
WARNING: shift/reduce conflict for TOSTRING in state 31 resolved as shift
WARNING: shift/reduce conflict for L_CORCHETE in state 31 resolved as shift
WARNING: shift/reduce conflict for L_LLAVE in state 31 resolved as shift
WARNING: shift/reduce conflict for MAS in state 40 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 40 resolved as shift
WARNING: shift/reduce conflict for L_PAREN in state 72 resolved as shift
WARNING: shift/reduce conflict for L_CORCHETE in state 72 resolved as shift
WARNING: shift/reduce conflict for L_CORCHETE in state 81 resolved as shift
WARNING: shift/reduce conflict for MAS in state 150 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 150 resolved as shift
WARNING: shift/reduce conflict for MAS in state 151 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 151 resolved as shift
WARNING: shift/reduce conflict for MAS in state 152 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 152 resolved as shift
WARNING: shift/reduce conflict for MAS in state 153 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 153 resolved as shift
WARNING: shift/reduce conflict for MAS in state 154 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 154 resolved as shift
WARNING: shift/reduce conflict for MAS in state 155 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 155 resolved as shift
WARNING: reduce/reduce conflict in state 17 resolved using rule (sc -> <empty>)
WARNING: rejected rule (h -> call_function_pro) in state 17
WARNING: reduce/reduce conflict in state 94 resolved using rule (f -> MAS g)
WARNING: rejected rule (f -> g) in state 94
WARNING: reduce/reduce conflict in state 96 resolved using rule (f -> MENOS g)
WARNING: rejected rule (f -> g) in state 96
WARNING: reduce/reduce conflict in state 98 resolved using rule (c -> NOT d)
WARNING: rejected rule (c -> d) in state 98
WARNING: reduce/reduce conflict in state 136 resolved using rule (a -> a OR b)
WARNING: rejected rule (a -> b) in state 136
WARNING: reduce/reduce conflict in state 149 resolved using rule (b -> b AND c)
WARNING: rejected rule (b -> c) in state 149
WARNING: reduce/reduce conflict in state 150 resolved using rule (d -> d DISTINTO_QUE e)
WARNING: rejected rule (d -> e) in state 150
WARNING: reduce/reduce conflict in state 151 resolved using rule (d -> d MENOR_QUE e)
WARNING: rejected rule (d -> e) in state 151
WARNING: reduce/reduce conflict in state 152 resolved using rule (d -> d MENOR_IGUAL_QUE e)
WARNING: rejected rule (d -> e) in state 152
WARNING: reduce/reduce conflict in state 153 resolved using rule (d -> d MAYOR_QUE e)
WARNING: rejected rule (d -> e) in state 153
WARNING: reduce/reduce conflict in state 154 resolved using rule (d -> d MAYOR_IGUAL_QUE e)
WARNING: rejected rule (d -> e) in state 154
WARNING: reduce/reduce conflict in state 155 resolved using rule (d -> d TRIPLE_IGUAL e)
WARNING: rejected rule (d -> e) in state 155
WARNING: reduce/reduce conflict in state 156 resolved using rule (e -> e MAS f)
WARNING: rejected rule (e -> f) in state 156
WARNING: reduce/reduce conflict in state 157 resolved using rule (e -> e MENOS f)
WARNING: rejected rule (e -> f) in state 157
WARNING: reduce/reduce conflict in state 158 resolved using rule (g -> g TIMES h)
WARNING: rejected rule (g -> h) in state 158
WARNING: reduce/reduce conflict in state 159 resolved using rule (g -> g DIVIDE h)
WARNING: rejected rule (g -> h) in state 159
WARNING: reduce/reduce conflict in state 160 resolved using rule (g -> g MOD h)
WARNING: rejected rule (g -> h) in state 160
WARNING: reduce/reduce conflict in state 161 resolved using rule (g -> g POTENCIA h)
WARNING: rejected rule (g -> h) in state 161
