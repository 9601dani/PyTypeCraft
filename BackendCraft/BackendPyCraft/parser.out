Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ANY
    BOOLEAN
    BREAK
    COLON
    CONCAT
    CONTINUE
    ELSE
    FOR
    FUNCTION
    IF
    IGUAL
    INTERFACE
    LET
    LITERAL
    L_CORCHETE
    L_LLAVE
    NULL
    NUMBER
    RETURN
    R_CORCHETE
    R_LLAVE
    SPLIT
    STRING
    TOEXPONENTIAL
    TOFIXED
    TOLOWERCASE
    TOSTRING
    TOUPPERCASE
    WHILE

Grammar

Rule 0     S' -> init
Rule 1     init -> instrucciones
Rule 2     instrucciones -> instrucciones instruccion
Rule 3     instrucciones -> instruccion
Rule 4     instruccion -> console_pro
Rule 5     console_pro -> CONSOLE PUNTO LOG L_PAREN expresion R_PAREN SEMI_COLON
Rule 6     expresion -> expresion COMA a
Rule 7     expresion -> a
Rule 8     a -> a OR b
Rule 9     a -> b
Rule 10    b -> b AND c
Rule 11    b -> c
Rule 12    c -> NOT d
Rule 13    c -> d
Rule 14    d -> d DISTINTO_QUE e
Rule 15    d -> d MENOR_QUE e
Rule 16    d -> d MENOR_IGUAL_QUE e
Rule 17    d -> d MAYOR_QUE e
Rule 18    d -> d MAYOR_IGUAL_QUE e
Rule 19    d -> d TRIPLE_IGUAL e
Rule 20    d -> e
Rule 21    e -> e MAS f
Rule 22    e -> e MENOS f
Rule 23    e -> f
Rule 24    f -> f TIMES g
Rule 25    f -> f DIVIDE g
Rule 26    f -> f MOD g
Rule 27    f -> f POTENCIA g
Rule 28    f -> g
Rule 29    g -> ENTERO
Rule 30    g -> DECIMAL
Rule 31    g -> CADENA
Rule 32    g -> L_PAREN a R_PAREN

Terminals, with rules where they appear

AND                  : 10
ANY                  : 
BOOLEAN              : 
BREAK                : 
CADENA               : 31
COLON                : 
COMA                 : 6
CONCAT               : 
CONSOLE              : 5
CONTINUE             : 
DECIMAL              : 30
DISTINTO_QUE         : 14
DIVIDE               : 25
ELSE                 : 
ENTERO               : 29
FOR                  : 
FUNCTION             : 
IF                   : 
IGUAL                : 
INTERFACE            : 
LET                  : 
LITERAL              : 
LOG                  : 5
L_CORCHETE           : 
L_LLAVE              : 
L_PAREN              : 5 32
MAS                  : 21
MAYOR_IGUAL_QUE      : 18
MAYOR_QUE            : 17
MENOR_IGUAL_QUE      : 16
MENOR_QUE            : 15
MENOS                : 22
MOD                  : 26
NOT                  : 12
NULL                 : 
NUMBER               : 
OR                   : 8
POTENCIA             : 27
PUNTO                : 5
RETURN               : 
R_CORCHETE           : 
R_LLAVE              : 
R_PAREN              : 5 32
SEMI_COLON           : 5
SPLIT                : 
STRING               : 
TIMES                : 24
TOEXPONENTIAL        : 
TOFIXED              : 
TOLOWERCASE          : 
TOSTRING             : 
TOUPPERCASE          : 
TRIPLE_IGUAL         : 19
WHILE                : 
error                : 

Nonterminals, with rules where they appear

a                    : 6 7 8 32
b                    : 8 9 10
c                    : 10 11
console_pro          : 4
d                    : 12 13 14 15 16 17 18 19
e                    : 14 15 16 17 18 19 20 21 22
expresion            : 5 6
f                    : 21 22 23 24 25 26 27
g                    : 24 25 26 27 28
init                 : 0
instruccion          : 2 3
instrucciones        : 1 2

Parsing method: LALR

state 0

    (0) S' -> . init
    (1) init -> . instrucciones
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . console_pro
    (5) console_pro -> . CONSOLE PUNTO LOG L_PAREN expresion R_PAREN SEMI_COLON

    CONSOLE         shift and go to state 5

    init                           shift and go to state 1
    instrucciones                  shift and go to state 2
    instruccion                    shift and go to state 3
    console_pro                    shift and go to state 4

state 1

    (0) S' -> init .



state 2

    (1) init -> instrucciones .
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . console_pro
    (5) console_pro -> . CONSOLE PUNTO LOG L_PAREN expresion R_PAREN SEMI_COLON

    $end            reduce using rule 1 (init -> instrucciones .)
    CONSOLE         shift and go to state 5

    instruccion                    shift and go to state 6
    console_pro                    shift and go to state 4

state 3

    (3) instrucciones -> instruccion .

    CONSOLE         reduce using rule 3 (instrucciones -> instruccion .)
    $end            reduce using rule 3 (instrucciones -> instruccion .)


state 4

    (4) instruccion -> console_pro .

    CONSOLE         reduce using rule 4 (instruccion -> console_pro .)
    $end            reduce using rule 4 (instruccion -> console_pro .)


state 5

    (5) console_pro -> CONSOLE . PUNTO LOG L_PAREN expresion R_PAREN SEMI_COLON

    PUNTO           shift and go to state 7


state 6

    (2) instrucciones -> instrucciones instruccion .

    CONSOLE         reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    $end            reduce using rule 2 (instrucciones -> instrucciones instruccion .)


state 7

    (5) console_pro -> CONSOLE PUNTO . LOG L_PAREN expresion R_PAREN SEMI_COLON

    LOG             shift and go to state 8


state 8

    (5) console_pro -> CONSOLE PUNTO LOG . L_PAREN expresion R_PAREN SEMI_COLON

    L_PAREN         shift and go to state 9


state 9

    (5) console_pro -> CONSOLE PUNTO LOG L_PAREN . expresion R_PAREN SEMI_COLON
    (6) expresion -> . expresion COMA a
    (7) expresion -> . a
    (8) a -> . a OR b
    (9) a -> . b
    (10) b -> . b AND c
    (11) b -> . c
    (12) c -> . NOT d
    (13) c -> . d
    (14) d -> . d DISTINTO_QUE e
    (15) d -> . d MENOR_QUE e
    (16) d -> . d MENOR_IGUAL_QUE e
    (17) d -> . d MAYOR_QUE e
    (18) d -> . d MAYOR_IGUAL_QUE e
    (19) d -> . d TRIPLE_IGUAL e
    (20) d -> . e
    (21) e -> . e MAS f
    (22) e -> . e MENOS f
    (23) e -> . f
    (24) f -> . f TIMES g
    (25) f -> . f DIVIDE g
    (26) f -> . f MOD g
    (27) f -> . f POTENCIA g
    (28) f -> . g
    (29) g -> . ENTERO
    (30) g -> . DECIMAL
    (31) g -> . CADENA
    (32) g -> . L_PAREN a R_PAREN

    NOT             shift and go to state 15
    ENTERO          shift and go to state 20
    DECIMAL         shift and go to state 21
    CADENA          shift and go to state 22
    L_PAREN         shift and go to state 10

    expresion                      shift and go to state 11
    a                              shift and go to state 12
    b                              shift and go to state 13
    c                              shift and go to state 14
    d                              shift and go to state 16
    e                              shift and go to state 17
    f                              shift and go to state 18
    g                              shift and go to state 19

state 10

    (32) g -> L_PAREN . a R_PAREN
    (8) a -> . a OR b
    (9) a -> . b
    (10) b -> . b AND c
    (11) b -> . c
    (12) c -> . NOT d
    (13) c -> . d
    (14) d -> . d DISTINTO_QUE e
    (15) d -> . d MENOR_QUE e
    (16) d -> . d MENOR_IGUAL_QUE e
    (17) d -> . d MAYOR_QUE e
    (18) d -> . d MAYOR_IGUAL_QUE e
    (19) d -> . d TRIPLE_IGUAL e
    (20) d -> . e
    (21) e -> . e MAS f
    (22) e -> . e MENOS f
    (23) e -> . f
    (24) f -> . f TIMES g
    (25) f -> . f DIVIDE g
    (26) f -> . f MOD g
    (27) f -> . f POTENCIA g
    (28) f -> . g
    (29) g -> . ENTERO
    (30) g -> . DECIMAL
    (31) g -> . CADENA
    (32) g -> . L_PAREN a R_PAREN

    NOT             shift and go to state 15
    ENTERO          shift and go to state 20
    DECIMAL         shift and go to state 21
    CADENA          shift and go to state 22
    L_PAREN         shift and go to state 10

    a                              shift and go to state 23
    b                              shift and go to state 13
    c                              shift and go to state 14
    d                              shift and go to state 16
    e                              shift and go to state 17
    f                              shift and go to state 18
    g                              shift and go to state 19

state 11

    (5) console_pro -> CONSOLE PUNTO LOG L_PAREN expresion . R_PAREN SEMI_COLON
    (6) expresion -> expresion . COMA a

    R_PAREN         shift and go to state 24
    COMA            shift and go to state 25


state 12

    (7) expresion -> a .
    (8) a -> a . OR b

    R_PAREN         reduce using rule 7 (expresion -> a .)
    COMA            reduce using rule 7 (expresion -> a .)
    OR              shift and go to state 26


state 13

    (9) a -> b .
    (10) b -> b . AND c

    OR              reduce using rule 9 (a -> b .)
    R_PAREN         reduce using rule 9 (a -> b .)
    COMA            reduce using rule 9 (a -> b .)
    AND             shift and go to state 27


state 14

    (11) b -> c .

    AND             reduce using rule 11 (b -> c .)
    OR              reduce using rule 11 (b -> c .)
    R_PAREN         reduce using rule 11 (b -> c .)
    COMA            reduce using rule 11 (b -> c .)


state 15

    (12) c -> NOT . d
    (14) d -> . d DISTINTO_QUE e
    (15) d -> . d MENOR_QUE e
    (16) d -> . d MENOR_IGUAL_QUE e
    (17) d -> . d MAYOR_QUE e
    (18) d -> . d MAYOR_IGUAL_QUE e
    (19) d -> . d TRIPLE_IGUAL e
    (20) d -> . e
    (21) e -> . e MAS f
    (22) e -> . e MENOS f
    (23) e -> . f
    (24) f -> . f TIMES g
    (25) f -> . f DIVIDE g
    (26) f -> . f MOD g
    (27) f -> . f POTENCIA g
    (28) f -> . g
    (29) g -> . ENTERO
    (30) g -> . DECIMAL
    (31) g -> . CADENA
    (32) g -> . L_PAREN a R_PAREN

    ENTERO          shift and go to state 20
    DECIMAL         shift and go to state 21
    CADENA          shift and go to state 22
    L_PAREN         shift and go to state 10

    d                              shift and go to state 28
    e                              shift and go to state 17
    f                              shift and go to state 18
    g                              shift and go to state 19

state 16

    (13) c -> d .
    (14) d -> d . DISTINTO_QUE e
    (15) d -> d . MENOR_QUE e
    (16) d -> d . MENOR_IGUAL_QUE e
    (17) d -> d . MAYOR_QUE e
    (18) d -> d . MAYOR_IGUAL_QUE e
    (19) d -> d . TRIPLE_IGUAL e

    AND             reduce using rule 13 (c -> d .)
    OR              reduce using rule 13 (c -> d .)
    R_PAREN         reduce using rule 13 (c -> d .)
    COMA            reduce using rule 13 (c -> d .)
    DISTINTO_QUE    shift and go to state 29
    MENOR_QUE       shift and go to state 30
    MENOR_IGUAL_QUE shift and go to state 31
    MAYOR_QUE       shift and go to state 32
    MAYOR_IGUAL_QUE shift and go to state 33
    TRIPLE_IGUAL    shift and go to state 34


state 17

    (20) d -> e .
    (21) e -> e . MAS f
    (22) e -> e . MENOS f

    DISTINTO_QUE    reduce using rule 20 (d -> e .)
    MENOR_QUE       reduce using rule 20 (d -> e .)
    MENOR_IGUAL_QUE reduce using rule 20 (d -> e .)
    MAYOR_QUE       reduce using rule 20 (d -> e .)
    MAYOR_IGUAL_QUE reduce using rule 20 (d -> e .)
    TRIPLE_IGUAL    reduce using rule 20 (d -> e .)
    AND             reduce using rule 20 (d -> e .)
    OR              reduce using rule 20 (d -> e .)
    R_PAREN         reduce using rule 20 (d -> e .)
    COMA            reduce using rule 20 (d -> e .)
    MAS             shift and go to state 35
    MENOS           shift and go to state 36


state 18

    (23) e -> f .
    (24) f -> f . TIMES g
    (25) f -> f . DIVIDE g
    (26) f -> f . MOD g
    (27) f -> f . POTENCIA g

    MAS             reduce using rule 23 (e -> f .)
    MENOS           reduce using rule 23 (e -> f .)
    DISTINTO_QUE    reduce using rule 23 (e -> f .)
    MENOR_QUE       reduce using rule 23 (e -> f .)
    MENOR_IGUAL_QUE reduce using rule 23 (e -> f .)
    MAYOR_QUE       reduce using rule 23 (e -> f .)
    MAYOR_IGUAL_QUE reduce using rule 23 (e -> f .)
    TRIPLE_IGUAL    reduce using rule 23 (e -> f .)
    AND             reduce using rule 23 (e -> f .)
    OR              reduce using rule 23 (e -> f .)
    R_PAREN         reduce using rule 23 (e -> f .)
    COMA            reduce using rule 23 (e -> f .)
    TIMES           shift and go to state 37
    DIVIDE          shift and go to state 38
    MOD             shift and go to state 39
    POTENCIA        shift and go to state 40


state 19

    (28) f -> g .

    TIMES           reduce using rule 28 (f -> g .)
    DIVIDE          reduce using rule 28 (f -> g .)
    MOD             reduce using rule 28 (f -> g .)
    POTENCIA        reduce using rule 28 (f -> g .)
    MAS             reduce using rule 28 (f -> g .)
    MENOS           reduce using rule 28 (f -> g .)
    DISTINTO_QUE    reduce using rule 28 (f -> g .)
    MENOR_QUE       reduce using rule 28 (f -> g .)
    MENOR_IGUAL_QUE reduce using rule 28 (f -> g .)
    MAYOR_QUE       reduce using rule 28 (f -> g .)
    MAYOR_IGUAL_QUE reduce using rule 28 (f -> g .)
    TRIPLE_IGUAL    reduce using rule 28 (f -> g .)
    AND             reduce using rule 28 (f -> g .)
    OR              reduce using rule 28 (f -> g .)
    R_PAREN         reduce using rule 28 (f -> g .)
    COMA            reduce using rule 28 (f -> g .)


state 20

    (29) g -> ENTERO .

    TIMES           reduce using rule 29 (g -> ENTERO .)
    DIVIDE          reduce using rule 29 (g -> ENTERO .)
    MOD             reduce using rule 29 (g -> ENTERO .)
    POTENCIA        reduce using rule 29 (g -> ENTERO .)
    MAS             reduce using rule 29 (g -> ENTERO .)
    MENOS           reduce using rule 29 (g -> ENTERO .)
    DISTINTO_QUE    reduce using rule 29 (g -> ENTERO .)
    MENOR_QUE       reduce using rule 29 (g -> ENTERO .)
    MENOR_IGUAL_QUE reduce using rule 29 (g -> ENTERO .)
    MAYOR_QUE       reduce using rule 29 (g -> ENTERO .)
    MAYOR_IGUAL_QUE reduce using rule 29 (g -> ENTERO .)
    TRIPLE_IGUAL    reduce using rule 29 (g -> ENTERO .)
    AND             reduce using rule 29 (g -> ENTERO .)
    OR              reduce using rule 29 (g -> ENTERO .)
    R_PAREN         reduce using rule 29 (g -> ENTERO .)
    COMA            reduce using rule 29 (g -> ENTERO .)


state 21

    (30) g -> DECIMAL .

    TIMES           reduce using rule 30 (g -> DECIMAL .)
    DIVIDE          reduce using rule 30 (g -> DECIMAL .)
    MOD             reduce using rule 30 (g -> DECIMAL .)
    POTENCIA        reduce using rule 30 (g -> DECIMAL .)
    MAS             reduce using rule 30 (g -> DECIMAL .)
    MENOS           reduce using rule 30 (g -> DECIMAL .)
    DISTINTO_QUE    reduce using rule 30 (g -> DECIMAL .)
    MENOR_QUE       reduce using rule 30 (g -> DECIMAL .)
    MENOR_IGUAL_QUE reduce using rule 30 (g -> DECIMAL .)
    MAYOR_QUE       reduce using rule 30 (g -> DECIMAL .)
    MAYOR_IGUAL_QUE reduce using rule 30 (g -> DECIMAL .)
    TRIPLE_IGUAL    reduce using rule 30 (g -> DECIMAL .)
    AND             reduce using rule 30 (g -> DECIMAL .)
    OR              reduce using rule 30 (g -> DECIMAL .)
    R_PAREN         reduce using rule 30 (g -> DECIMAL .)
    COMA            reduce using rule 30 (g -> DECIMAL .)


state 22

    (31) g -> CADENA .

    TIMES           reduce using rule 31 (g -> CADENA .)
    DIVIDE          reduce using rule 31 (g -> CADENA .)
    MOD             reduce using rule 31 (g -> CADENA .)
    POTENCIA        reduce using rule 31 (g -> CADENA .)
    MAS             reduce using rule 31 (g -> CADENA .)
    MENOS           reduce using rule 31 (g -> CADENA .)
    DISTINTO_QUE    reduce using rule 31 (g -> CADENA .)
    MENOR_QUE       reduce using rule 31 (g -> CADENA .)
    MENOR_IGUAL_QUE reduce using rule 31 (g -> CADENA .)
    MAYOR_QUE       reduce using rule 31 (g -> CADENA .)
    MAYOR_IGUAL_QUE reduce using rule 31 (g -> CADENA .)
    TRIPLE_IGUAL    reduce using rule 31 (g -> CADENA .)
    AND             reduce using rule 31 (g -> CADENA .)
    OR              reduce using rule 31 (g -> CADENA .)
    R_PAREN         reduce using rule 31 (g -> CADENA .)
    COMA            reduce using rule 31 (g -> CADENA .)


state 23

    (32) g -> L_PAREN a . R_PAREN
    (8) a -> a . OR b

    R_PAREN         shift and go to state 41
    OR              shift and go to state 26


state 24

    (5) console_pro -> CONSOLE PUNTO LOG L_PAREN expresion R_PAREN . SEMI_COLON

    SEMI_COLON      shift and go to state 42


state 25

    (6) expresion -> expresion COMA . a
    (8) a -> . a OR b
    (9) a -> . b
    (10) b -> . b AND c
    (11) b -> . c
    (12) c -> . NOT d
    (13) c -> . d
    (14) d -> . d DISTINTO_QUE e
    (15) d -> . d MENOR_QUE e
    (16) d -> . d MENOR_IGUAL_QUE e
    (17) d -> . d MAYOR_QUE e
    (18) d -> . d MAYOR_IGUAL_QUE e
    (19) d -> . d TRIPLE_IGUAL e
    (20) d -> . e
    (21) e -> . e MAS f
    (22) e -> . e MENOS f
    (23) e -> . f
    (24) f -> . f TIMES g
    (25) f -> . f DIVIDE g
    (26) f -> . f MOD g
    (27) f -> . f POTENCIA g
    (28) f -> . g
    (29) g -> . ENTERO
    (30) g -> . DECIMAL
    (31) g -> . CADENA
    (32) g -> . L_PAREN a R_PAREN

    NOT             shift and go to state 15
    ENTERO          shift and go to state 20
    DECIMAL         shift and go to state 21
    CADENA          shift and go to state 22
    L_PAREN         shift and go to state 10

    a                              shift and go to state 43
    b                              shift and go to state 13
    c                              shift and go to state 14
    d                              shift and go to state 16
    e                              shift and go to state 17
    f                              shift and go to state 18
    g                              shift and go to state 19

state 26

    (8) a -> a OR . b
    (10) b -> . b AND c
    (11) b -> . c
    (12) c -> . NOT d
    (13) c -> . d
    (14) d -> . d DISTINTO_QUE e
    (15) d -> . d MENOR_QUE e
    (16) d -> . d MENOR_IGUAL_QUE e
    (17) d -> . d MAYOR_QUE e
    (18) d -> . d MAYOR_IGUAL_QUE e
    (19) d -> . d TRIPLE_IGUAL e
    (20) d -> . e
    (21) e -> . e MAS f
    (22) e -> . e MENOS f
    (23) e -> . f
    (24) f -> . f TIMES g
    (25) f -> . f DIVIDE g
    (26) f -> . f MOD g
    (27) f -> . f POTENCIA g
    (28) f -> . g
    (29) g -> . ENTERO
    (30) g -> . DECIMAL
    (31) g -> . CADENA
    (32) g -> . L_PAREN a R_PAREN

    NOT             shift and go to state 15
    ENTERO          shift and go to state 20
    DECIMAL         shift and go to state 21
    CADENA          shift and go to state 22
    L_PAREN         shift and go to state 10

    b                              shift and go to state 44
    c                              shift and go to state 14
    d                              shift and go to state 16
    e                              shift and go to state 17
    f                              shift and go to state 18
    g                              shift and go to state 19

state 27

    (10) b -> b AND . c
    (12) c -> . NOT d
    (13) c -> . d
    (14) d -> . d DISTINTO_QUE e
    (15) d -> . d MENOR_QUE e
    (16) d -> . d MENOR_IGUAL_QUE e
    (17) d -> . d MAYOR_QUE e
    (18) d -> . d MAYOR_IGUAL_QUE e
    (19) d -> . d TRIPLE_IGUAL e
    (20) d -> . e
    (21) e -> . e MAS f
    (22) e -> . e MENOS f
    (23) e -> . f
    (24) f -> . f TIMES g
    (25) f -> . f DIVIDE g
    (26) f -> . f MOD g
    (27) f -> . f POTENCIA g
    (28) f -> . g
    (29) g -> . ENTERO
    (30) g -> . DECIMAL
    (31) g -> . CADENA
    (32) g -> . L_PAREN a R_PAREN

    NOT             shift and go to state 15
    ENTERO          shift and go to state 20
    DECIMAL         shift and go to state 21
    CADENA          shift and go to state 22
    L_PAREN         shift and go to state 10

    c                              shift and go to state 45
    d                              shift and go to state 16
    e                              shift and go to state 17
    f                              shift and go to state 18
    g                              shift and go to state 19

state 28

    (12) c -> NOT d .
    (14) d -> d . DISTINTO_QUE e
    (15) d -> d . MENOR_QUE e
    (16) d -> d . MENOR_IGUAL_QUE e
    (17) d -> d . MAYOR_QUE e
    (18) d -> d . MAYOR_IGUAL_QUE e
    (19) d -> d . TRIPLE_IGUAL e

    AND             reduce using rule 12 (c -> NOT d .)
    OR              reduce using rule 12 (c -> NOT d .)
    R_PAREN         reduce using rule 12 (c -> NOT d .)
    COMA            reduce using rule 12 (c -> NOT d .)
    DISTINTO_QUE    shift and go to state 29
    MENOR_QUE       shift and go to state 30
    MENOR_IGUAL_QUE shift and go to state 31
    MAYOR_QUE       shift and go to state 32
    MAYOR_IGUAL_QUE shift and go to state 33
    TRIPLE_IGUAL    shift and go to state 34


state 29

    (14) d -> d DISTINTO_QUE . e
    (21) e -> . e MAS f
    (22) e -> . e MENOS f
    (23) e -> . f
    (24) f -> . f TIMES g
    (25) f -> . f DIVIDE g
    (26) f -> . f MOD g
    (27) f -> . f POTENCIA g
    (28) f -> . g
    (29) g -> . ENTERO
    (30) g -> . DECIMAL
    (31) g -> . CADENA
    (32) g -> . L_PAREN a R_PAREN

    ENTERO          shift and go to state 20
    DECIMAL         shift and go to state 21
    CADENA          shift and go to state 22
    L_PAREN         shift and go to state 10

    e                              shift and go to state 46
    f                              shift and go to state 18
    g                              shift and go to state 19

state 30

    (15) d -> d MENOR_QUE . e
    (21) e -> . e MAS f
    (22) e -> . e MENOS f
    (23) e -> . f
    (24) f -> . f TIMES g
    (25) f -> . f DIVIDE g
    (26) f -> . f MOD g
    (27) f -> . f POTENCIA g
    (28) f -> . g
    (29) g -> . ENTERO
    (30) g -> . DECIMAL
    (31) g -> . CADENA
    (32) g -> . L_PAREN a R_PAREN

    ENTERO          shift and go to state 20
    DECIMAL         shift and go to state 21
    CADENA          shift and go to state 22
    L_PAREN         shift and go to state 10

    e                              shift and go to state 47
    f                              shift and go to state 18
    g                              shift and go to state 19

state 31

    (16) d -> d MENOR_IGUAL_QUE . e
    (21) e -> . e MAS f
    (22) e -> . e MENOS f
    (23) e -> . f
    (24) f -> . f TIMES g
    (25) f -> . f DIVIDE g
    (26) f -> . f MOD g
    (27) f -> . f POTENCIA g
    (28) f -> . g
    (29) g -> . ENTERO
    (30) g -> . DECIMAL
    (31) g -> . CADENA
    (32) g -> . L_PAREN a R_PAREN

    ENTERO          shift and go to state 20
    DECIMAL         shift and go to state 21
    CADENA          shift and go to state 22
    L_PAREN         shift and go to state 10

    e                              shift and go to state 48
    f                              shift and go to state 18
    g                              shift and go to state 19

state 32

    (17) d -> d MAYOR_QUE . e
    (21) e -> . e MAS f
    (22) e -> . e MENOS f
    (23) e -> . f
    (24) f -> . f TIMES g
    (25) f -> . f DIVIDE g
    (26) f -> . f MOD g
    (27) f -> . f POTENCIA g
    (28) f -> . g
    (29) g -> . ENTERO
    (30) g -> . DECIMAL
    (31) g -> . CADENA
    (32) g -> . L_PAREN a R_PAREN

    ENTERO          shift and go to state 20
    DECIMAL         shift and go to state 21
    CADENA          shift and go to state 22
    L_PAREN         shift and go to state 10

    e                              shift and go to state 49
    f                              shift and go to state 18
    g                              shift and go to state 19

state 33

    (18) d -> d MAYOR_IGUAL_QUE . e
    (21) e -> . e MAS f
    (22) e -> . e MENOS f
    (23) e -> . f
    (24) f -> . f TIMES g
    (25) f -> . f DIVIDE g
    (26) f -> . f MOD g
    (27) f -> . f POTENCIA g
    (28) f -> . g
    (29) g -> . ENTERO
    (30) g -> . DECIMAL
    (31) g -> . CADENA
    (32) g -> . L_PAREN a R_PAREN

    ENTERO          shift and go to state 20
    DECIMAL         shift and go to state 21
    CADENA          shift and go to state 22
    L_PAREN         shift and go to state 10

    e                              shift and go to state 50
    f                              shift and go to state 18
    g                              shift and go to state 19

state 34

    (19) d -> d TRIPLE_IGUAL . e
    (21) e -> . e MAS f
    (22) e -> . e MENOS f
    (23) e -> . f
    (24) f -> . f TIMES g
    (25) f -> . f DIVIDE g
    (26) f -> . f MOD g
    (27) f -> . f POTENCIA g
    (28) f -> . g
    (29) g -> . ENTERO
    (30) g -> . DECIMAL
    (31) g -> . CADENA
    (32) g -> . L_PAREN a R_PAREN

    ENTERO          shift and go to state 20
    DECIMAL         shift and go to state 21
    CADENA          shift and go to state 22
    L_PAREN         shift and go to state 10

    e                              shift and go to state 51
    f                              shift and go to state 18
    g                              shift and go to state 19

state 35

    (21) e -> e MAS . f
    (24) f -> . f TIMES g
    (25) f -> . f DIVIDE g
    (26) f -> . f MOD g
    (27) f -> . f POTENCIA g
    (28) f -> . g
    (29) g -> . ENTERO
    (30) g -> . DECIMAL
    (31) g -> . CADENA
    (32) g -> . L_PAREN a R_PAREN

    ENTERO          shift and go to state 20
    DECIMAL         shift and go to state 21
    CADENA          shift and go to state 22
    L_PAREN         shift and go to state 10

    f                              shift and go to state 52
    g                              shift and go to state 19

state 36

    (22) e -> e MENOS . f
    (24) f -> . f TIMES g
    (25) f -> . f DIVIDE g
    (26) f -> . f MOD g
    (27) f -> . f POTENCIA g
    (28) f -> . g
    (29) g -> . ENTERO
    (30) g -> . DECIMAL
    (31) g -> . CADENA
    (32) g -> . L_PAREN a R_PAREN

    ENTERO          shift and go to state 20
    DECIMAL         shift and go to state 21
    CADENA          shift and go to state 22
    L_PAREN         shift and go to state 10

    f                              shift and go to state 53
    g                              shift and go to state 19

state 37

    (24) f -> f TIMES . g
    (29) g -> . ENTERO
    (30) g -> . DECIMAL
    (31) g -> . CADENA
    (32) g -> . L_PAREN a R_PAREN

    ENTERO          shift and go to state 20
    DECIMAL         shift and go to state 21
    CADENA          shift and go to state 22
    L_PAREN         shift and go to state 10

    g                              shift and go to state 54

state 38

    (25) f -> f DIVIDE . g
    (29) g -> . ENTERO
    (30) g -> . DECIMAL
    (31) g -> . CADENA
    (32) g -> . L_PAREN a R_PAREN

    ENTERO          shift and go to state 20
    DECIMAL         shift and go to state 21
    CADENA          shift and go to state 22
    L_PAREN         shift and go to state 10

    g                              shift and go to state 55

state 39

    (26) f -> f MOD . g
    (29) g -> . ENTERO
    (30) g -> . DECIMAL
    (31) g -> . CADENA
    (32) g -> . L_PAREN a R_PAREN

    ENTERO          shift and go to state 20
    DECIMAL         shift and go to state 21
    CADENA          shift and go to state 22
    L_PAREN         shift and go to state 10

    g                              shift and go to state 56

state 40

    (27) f -> f POTENCIA . g
    (29) g -> . ENTERO
    (30) g -> . DECIMAL
    (31) g -> . CADENA
    (32) g -> . L_PAREN a R_PAREN

    ENTERO          shift and go to state 20
    DECIMAL         shift and go to state 21
    CADENA          shift and go to state 22
    L_PAREN         shift and go to state 10

    g                              shift and go to state 57

state 41

    (32) g -> L_PAREN a R_PAREN .

    TIMES           reduce using rule 32 (g -> L_PAREN a R_PAREN .)
    DIVIDE          reduce using rule 32 (g -> L_PAREN a R_PAREN .)
    MOD             reduce using rule 32 (g -> L_PAREN a R_PAREN .)
    POTENCIA        reduce using rule 32 (g -> L_PAREN a R_PAREN .)
    MAS             reduce using rule 32 (g -> L_PAREN a R_PAREN .)
    MENOS           reduce using rule 32 (g -> L_PAREN a R_PAREN .)
    DISTINTO_QUE    reduce using rule 32 (g -> L_PAREN a R_PAREN .)
    MENOR_QUE       reduce using rule 32 (g -> L_PAREN a R_PAREN .)
    MENOR_IGUAL_QUE reduce using rule 32 (g -> L_PAREN a R_PAREN .)
    MAYOR_QUE       reduce using rule 32 (g -> L_PAREN a R_PAREN .)
    MAYOR_IGUAL_QUE reduce using rule 32 (g -> L_PAREN a R_PAREN .)
    TRIPLE_IGUAL    reduce using rule 32 (g -> L_PAREN a R_PAREN .)
    AND             reduce using rule 32 (g -> L_PAREN a R_PAREN .)
    OR              reduce using rule 32 (g -> L_PAREN a R_PAREN .)
    R_PAREN         reduce using rule 32 (g -> L_PAREN a R_PAREN .)
    COMA            reduce using rule 32 (g -> L_PAREN a R_PAREN .)


state 42

    (5) console_pro -> CONSOLE PUNTO LOG L_PAREN expresion R_PAREN SEMI_COLON .

    CONSOLE         reduce using rule 5 (console_pro -> CONSOLE PUNTO LOG L_PAREN expresion R_PAREN SEMI_COLON .)
    $end            reduce using rule 5 (console_pro -> CONSOLE PUNTO LOG L_PAREN expresion R_PAREN SEMI_COLON .)


state 43

    (6) expresion -> expresion COMA a .
    (8) a -> a . OR b

    R_PAREN         reduce using rule 6 (expresion -> expresion COMA a .)
    COMA            reduce using rule 6 (expresion -> expresion COMA a .)
    OR              shift and go to state 26


state 44

    (8) a -> a OR b .
    (10) b -> b . AND c

    OR              reduce using rule 8 (a -> a OR b .)
    R_PAREN         reduce using rule 8 (a -> a OR b .)
    COMA            reduce using rule 8 (a -> a OR b .)
    AND             shift and go to state 27


state 45

    (10) b -> b AND c .

    AND             reduce using rule 10 (b -> b AND c .)
    OR              reduce using rule 10 (b -> b AND c .)
    R_PAREN         reduce using rule 10 (b -> b AND c .)
    COMA            reduce using rule 10 (b -> b AND c .)


state 46

    (14) d -> d DISTINTO_QUE e .
    (21) e -> e . MAS f
    (22) e -> e . MENOS f

    DISTINTO_QUE    reduce using rule 14 (d -> d DISTINTO_QUE e .)
    MENOR_QUE       reduce using rule 14 (d -> d DISTINTO_QUE e .)
    MENOR_IGUAL_QUE reduce using rule 14 (d -> d DISTINTO_QUE e .)
    MAYOR_QUE       reduce using rule 14 (d -> d DISTINTO_QUE e .)
    MAYOR_IGUAL_QUE reduce using rule 14 (d -> d DISTINTO_QUE e .)
    TRIPLE_IGUAL    reduce using rule 14 (d -> d DISTINTO_QUE e .)
    AND             reduce using rule 14 (d -> d DISTINTO_QUE e .)
    OR              reduce using rule 14 (d -> d DISTINTO_QUE e .)
    R_PAREN         reduce using rule 14 (d -> d DISTINTO_QUE e .)
    COMA            reduce using rule 14 (d -> d DISTINTO_QUE e .)
    MAS             shift and go to state 35
    MENOS           shift and go to state 36


state 47

    (15) d -> d MENOR_QUE e .
    (21) e -> e . MAS f
    (22) e -> e . MENOS f

    DISTINTO_QUE    reduce using rule 15 (d -> d MENOR_QUE e .)
    MENOR_QUE       reduce using rule 15 (d -> d MENOR_QUE e .)
    MENOR_IGUAL_QUE reduce using rule 15 (d -> d MENOR_QUE e .)
    MAYOR_QUE       reduce using rule 15 (d -> d MENOR_QUE e .)
    MAYOR_IGUAL_QUE reduce using rule 15 (d -> d MENOR_QUE e .)
    TRIPLE_IGUAL    reduce using rule 15 (d -> d MENOR_QUE e .)
    AND             reduce using rule 15 (d -> d MENOR_QUE e .)
    OR              reduce using rule 15 (d -> d MENOR_QUE e .)
    R_PAREN         reduce using rule 15 (d -> d MENOR_QUE e .)
    COMA            reduce using rule 15 (d -> d MENOR_QUE e .)
    MAS             shift and go to state 35
    MENOS           shift and go to state 36


state 48

    (16) d -> d MENOR_IGUAL_QUE e .
    (21) e -> e . MAS f
    (22) e -> e . MENOS f

    DISTINTO_QUE    reduce using rule 16 (d -> d MENOR_IGUAL_QUE e .)
    MENOR_QUE       reduce using rule 16 (d -> d MENOR_IGUAL_QUE e .)
    MENOR_IGUAL_QUE reduce using rule 16 (d -> d MENOR_IGUAL_QUE e .)
    MAYOR_QUE       reduce using rule 16 (d -> d MENOR_IGUAL_QUE e .)
    MAYOR_IGUAL_QUE reduce using rule 16 (d -> d MENOR_IGUAL_QUE e .)
    TRIPLE_IGUAL    reduce using rule 16 (d -> d MENOR_IGUAL_QUE e .)
    AND             reduce using rule 16 (d -> d MENOR_IGUAL_QUE e .)
    OR              reduce using rule 16 (d -> d MENOR_IGUAL_QUE e .)
    R_PAREN         reduce using rule 16 (d -> d MENOR_IGUAL_QUE e .)
    COMA            reduce using rule 16 (d -> d MENOR_IGUAL_QUE e .)
    MAS             shift and go to state 35
    MENOS           shift and go to state 36


state 49

    (17) d -> d MAYOR_QUE e .
    (21) e -> e . MAS f
    (22) e -> e . MENOS f

    DISTINTO_QUE    reduce using rule 17 (d -> d MAYOR_QUE e .)
    MENOR_QUE       reduce using rule 17 (d -> d MAYOR_QUE e .)
    MENOR_IGUAL_QUE reduce using rule 17 (d -> d MAYOR_QUE e .)
    MAYOR_QUE       reduce using rule 17 (d -> d MAYOR_QUE e .)
    MAYOR_IGUAL_QUE reduce using rule 17 (d -> d MAYOR_QUE e .)
    TRIPLE_IGUAL    reduce using rule 17 (d -> d MAYOR_QUE e .)
    AND             reduce using rule 17 (d -> d MAYOR_QUE e .)
    OR              reduce using rule 17 (d -> d MAYOR_QUE e .)
    R_PAREN         reduce using rule 17 (d -> d MAYOR_QUE e .)
    COMA            reduce using rule 17 (d -> d MAYOR_QUE e .)
    MAS             shift and go to state 35
    MENOS           shift and go to state 36


state 50

    (18) d -> d MAYOR_IGUAL_QUE e .
    (21) e -> e . MAS f
    (22) e -> e . MENOS f

    DISTINTO_QUE    reduce using rule 18 (d -> d MAYOR_IGUAL_QUE e .)
    MENOR_QUE       reduce using rule 18 (d -> d MAYOR_IGUAL_QUE e .)
    MENOR_IGUAL_QUE reduce using rule 18 (d -> d MAYOR_IGUAL_QUE e .)
    MAYOR_QUE       reduce using rule 18 (d -> d MAYOR_IGUAL_QUE e .)
    MAYOR_IGUAL_QUE reduce using rule 18 (d -> d MAYOR_IGUAL_QUE e .)
    TRIPLE_IGUAL    reduce using rule 18 (d -> d MAYOR_IGUAL_QUE e .)
    AND             reduce using rule 18 (d -> d MAYOR_IGUAL_QUE e .)
    OR              reduce using rule 18 (d -> d MAYOR_IGUAL_QUE e .)
    R_PAREN         reduce using rule 18 (d -> d MAYOR_IGUAL_QUE e .)
    COMA            reduce using rule 18 (d -> d MAYOR_IGUAL_QUE e .)
    MAS             shift and go to state 35
    MENOS           shift and go to state 36


state 51

    (19) d -> d TRIPLE_IGUAL e .
    (21) e -> e . MAS f
    (22) e -> e . MENOS f

    DISTINTO_QUE    reduce using rule 19 (d -> d TRIPLE_IGUAL e .)
    MENOR_QUE       reduce using rule 19 (d -> d TRIPLE_IGUAL e .)
    MENOR_IGUAL_QUE reduce using rule 19 (d -> d TRIPLE_IGUAL e .)
    MAYOR_QUE       reduce using rule 19 (d -> d TRIPLE_IGUAL e .)
    MAYOR_IGUAL_QUE reduce using rule 19 (d -> d TRIPLE_IGUAL e .)
    TRIPLE_IGUAL    reduce using rule 19 (d -> d TRIPLE_IGUAL e .)
    AND             reduce using rule 19 (d -> d TRIPLE_IGUAL e .)
    OR              reduce using rule 19 (d -> d TRIPLE_IGUAL e .)
    R_PAREN         reduce using rule 19 (d -> d TRIPLE_IGUAL e .)
    COMA            reduce using rule 19 (d -> d TRIPLE_IGUAL e .)
    MAS             shift and go to state 35
    MENOS           shift and go to state 36


state 52

    (21) e -> e MAS f .
    (24) f -> f . TIMES g
    (25) f -> f . DIVIDE g
    (26) f -> f . MOD g
    (27) f -> f . POTENCIA g

    MAS             reduce using rule 21 (e -> e MAS f .)
    MENOS           reduce using rule 21 (e -> e MAS f .)
    DISTINTO_QUE    reduce using rule 21 (e -> e MAS f .)
    MENOR_QUE       reduce using rule 21 (e -> e MAS f .)
    MENOR_IGUAL_QUE reduce using rule 21 (e -> e MAS f .)
    MAYOR_QUE       reduce using rule 21 (e -> e MAS f .)
    MAYOR_IGUAL_QUE reduce using rule 21 (e -> e MAS f .)
    TRIPLE_IGUAL    reduce using rule 21 (e -> e MAS f .)
    AND             reduce using rule 21 (e -> e MAS f .)
    OR              reduce using rule 21 (e -> e MAS f .)
    R_PAREN         reduce using rule 21 (e -> e MAS f .)
    COMA            reduce using rule 21 (e -> e MAS f .)
    TIMES           shift and go to state 37
    DIVIDE          shift and go to state 38
    MOD             shift and go to state 39
    POTENCIA        shift and go to state 40


state 53

    (22) e -> e MENOS f .
    (24) f -> f . TIMES g
    (25) f -> f . DIVIDE g
    (26) f -> f . MOD g
    (27) f -> f . POTENCIA g

    MAS             reduce using rule 22 (e -> e MENOS f .)
    MENOS           reduce using rule 22 (e -> e MENOS f .)
    DISTINTO_QUE    reduce using rule 22 (e -> e MENOS f .)
    MENOR_QUE       reduce using rule 22 (e -> e MENOS f .)
    MENOR_IGUAL_QUE reduce using rule 22 (e -> e MENOS f .)
    MAYOR_QUE       reduce using rule 22 (e -> e MENOS f .)
    MAYOR_IGUAL_QUE reduce using rule 22 (e -> e MENOS f .)
    TRIPLE_IGUAL    reduce using rule 22 (e -> e MENOS f .)
    AND             reduce using rule 22 (e -> e MENOS f .)
    OR              reduce using rule 22 (e -> e MENOS f .)
    R_PAREN         reduce using rule 22 (e -> e MENOS f .)
    COMA            reduce using rule 22 (e -> e MENOS f .)
    TIMES           shift and go to state 37
    DIVIDE          shift and go to state 38
    MOD             shift and go to state 39
    POTENCIA        shift and go to state 40


state 54

    (24) f -> f TIMES g .

    TIMES           reduce using rule 24 (f -> f TIMES g .)
    DIVIDE          reduce using rule 24 (f -> f TIMES g .)
    MOD             reduce using rule 24 (f -> f TIMES g .)
    POTENCIA        reduce using rule 24 (f -> f TIMES g .)
    MAS             reduce using rule 24 (f -> f TIMES g .)
    MENOS           reduce using rule 24 (f -> f TIMES g .)
    DISTINTO_QUE    reduce using rule 24 (f -> f TIMES g .)
    MENOR_QUE       reduce using rule 24 (f -> f TIMES g .)
    MENOR_IGUAL_QUE reduce using rule 24 (f -> f TIMES g .)
    MAYOR_QUE       reduce using rule 24 (f -> f TIMES g .)
    MAYOR_IGUAL_QUE reduce using rule 24 (f -> f TIMES g .)
    TRIPLE_IGUAL    reduce using rule 24 (f -> f TIMES g .)
    AND             reduce using rule 24 (f -> f TIMES g .)
    OR              reduce using rule 24 (f -> f TIMES g .)
    R_PAREN         reduce using rule 24 (f -> f TIMES g .)
    COMA            reduce using rule 24 (f -> f TIMES g .)


state 55

    (25) f -> f DIVIDE g .

    TIMES           reduce using rule 25 (f -> f DIVIDE g .)
    DIVIDE          reduce using rule 25 (f -> f DIVIDE g .)
    MOD             reduce using rule 25 (f -> f DIVIDE g .)
    POTENCIA        reduce using rule 25 (f -> f DIVIDE g .)
    MAS             reduce using rule 25 (f -> f DIVIDE g .)
    MENOS           reduce using rule 25 (f -> f DIVIDE g .)
    DISTINTO_QUE    reduce using rule 25 (f -> f DIVIDE g .)
    MENOR_QUE       reduce using rule 25 (f -> f DIVIDE g .)
    MENOR_IGUAL_QUE reduce using rule 25 (f -> f DIVIDE g .)
    MAYOR_QUE       reduce using rule 25 (f -> f DIVIDE g .)
    MAYOR_IGUAL_QUE reduce using rule 25 (f -> f DIVIDE g .)
    TRIPLE_IGUAL    reduce using rule 25 (f -> f DIVIDE g .)
    AND             reduce using rule 25 (f -> f DIVIDE g .)
    OR              reduce using rule 25 (f -> f DIVIDE g .)
    R_PAREN         reduce using rule 25 (f -> f DIVIDE g .)
    COMA            reduce using rule 25 (f -> f DIVIDE g .)


state 56

    (26) f -> f MOD g .

    TIMES           reduce using rule 26 (f -> f MOD g .)
    DIVIDE          reduce using rule 26 (f -> f MOD g .)
    MOD             reduce using rule 26 (f -> f MOD g .)
    POTENCIA        reduce using rule 26 (f -> f MOD g .)
    MAS             reduce using rule 26 (f -> f MOD g .)
    MENOS           reduce using rule 26 (f -> f MOD g .)
    DISTINTO_QUE    reduce using rule 26 (f -> f MOD g .)
    MENOR_QUE       reduce using rule 26 (f -> f MOD g .)
    MENOR_IGUAL_QUE reduce using rule 26 (f -> f MOD g .)
    MAYOR_QUE       reduce using rule 26 (f -> f MOD g .)
    MAYOR_IGUAL_QUE reduce using rule 26 (f -> f MOD g .)
    TRIPLE_IGUAL    reduce using rule 26 (f -> f MOD g .)
    AND             reduce using rule 26 (f -> f MOD g .)
    OR              reduce using rule 26 (f -> f MOD g .)
    R_PAREN         reduce using rule 26 (f -> f MOD g .)
    COMA            reduce using rule 26 (f -> f MOD g .)


state 57

    (27) f -> f POTENCIA g .

    TIMES           reduce using rule 27 (f -> f POTENCIA g .)
    DIVIDE          reduce using rule 27 (f -> f POTENCIA g .)
    MOD             reduce using rule 27 (f -> f POTENCIA g .)
    POTENCIA        reduce using rule 27 (f -> f POTENCIA g .)
    MAS             reduce using rule 27 (f -> f POTENCIA g .)
    MENOS           reduce using rule 27 (f -> f POTENCIA g .)
    DISTINTO_QUE    reduce using rule 27 (f -> f POTENCIA g .)
    MENOR_QUE       reduce using rule 27 (f -> f POTENCIA g .)
    MENOR_IGUAL_QUE reduce using rule 27 (f -> f POTENCIA g .)
    MAYOR_QUE       reduce using rule 27 (f -> f POTENCIA g .)
    MAYOR_IGUAL_QUE reduce using rule 27 (f -> f POTENCIA g .)
    TRIPLE_IGUAL    reduce using rule 27 (f -> f POTENCIA g .)
    AND             reduce using rule 27 (f -> f POTENCIA g .)
    OR              reduce using rule 27 (f -> f POTENCIA g .)
    R_PAREN         reduce using rule 27 (f -> f POTENCIA g .)
    COMA            reduce using rule 27 (f -> f POTENCIA g .)

