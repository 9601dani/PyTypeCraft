Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    BREAK
    CONCAT
    CONTINUE
    FUNCTION
    INTERFACE
    L_CORCHETE
    NULL
    RETURN
    R_CORCHETE
    SPLIT
    TOEXPONENTIAL
    TOFIXED
    TOLOWERCASE
    TOSTRING
    TOUPPERCASE

Grammar

Rule 0     S' -> init
Rule 1     init -> instrucciones
Rule 2     instrucciones -> instrucciones instruccion
Rule 3     instrucciones -> instruccion
Rule 4     instruccion -> console_pro SEMI_COLON
Rule 5     instruccion -> declaration_instruction SEMI_COLON
Rule 6     instruccion -> assig_pro SEMI_COLON
Rule 7     instruccion -> if_pro
Rule 8     instruccion -> while_pro
Rule 9     instruccion -> for_pro
Rule 10    instruccion -> for_each_pro
Rule 11    instruccion -> sumadores SEMI_COLON
Rule 12    declaration_instruction -> LET declaracion_list
Rule 13    declaracion_list -> declaracion_list COMA assignacion_instruction
Rule 14    declaracion_list -> assignacion_instruction
Rule 15    assignacion_instruction -> LITERAL COLON type IGUAL a
Rule 16    assignacion_instruction -> LITERAL COLON type
Rule 17    assignacion_instruction -> LITERAL IGUAL a
Rule 18    type -> NUMBER
Rule 19    type -> STRING
Rule 20    type -> BOOLEAN
Rule 21    type -> ANY
Rule 22    assig_pro -> LITERAL IGUAL a
Rule 23    if_pro -> IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro
Rule 24    else_pro -> ELSE IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro
Rule 25    else_pro -> ELSE L_LLAVE instrucciones R_LLAVE
Rule 26    else_pro -> <empty>
Rule 27    while_pro -> WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE
Rule 28    for_pro -> FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE
Rule 29    for_pro -> FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE
Rule 30    for_each_pro -> FOR L_PAREN for_each_dec R_PAREN L_LLAVE instrucciones R_LLAVE
Rule 31    for_each_dec -> LET LITERAL OF a
Rule 32    for_each_dec -> LET LITERAL COLON type OF a
Rule 33    console_pro -> CONSOLE PUNTO LOG L_PAREN expresion R_PAREN
Rule 34    expresion -> expresion COMA a
Rule 35    expresion -> a
Rule 36    a -> a OR b
Rule 37    a -> b
Rule 38    b -> b AND c
Rule 39    b -> c
Rule 40    c -> NOT d
Rule 41    c -> d
Rule 42    d -> d DISTINTO_QUE e
Rule 43    d -> d MENOR_QUE e
Rule 44    d -> d MENOR_IGUAL_QUE e
Rule 45    d -> d MAYOR_QUE e
Rule 46    d -> d MAYOR_IGUAL_QUE e
Rule 47    d -> d TRIPLE_IGUAL e
Rule 48    d -> e
Rule 49    e -> e MAS f
Rule 50    e -> e MENOS f
Rule 51    e -> f
Rule 52    f -> f TIMES g
Rule 53    f -> f DIVIDE g
Rule 54    f -> f MOD g
Rule 55    f -> f POTENCIA g
Rule 56    f -> g
Rule 57    g -> ENTERO
Rule 58    g -> DECIMAL
Rule 59    g -> CADENA
Rule 60    g -> LITERAL
Rule 61    g -> L_PAREN a R_PAREN
Rule 62    sumadores -> LITERAL MAS MAS
Rule 63    sumadores -> LITERAL MENOS MENOS

Terminals, with rules where they appear

AND                  : 38
ANY                  : 21
BOOLEAN              : 20
BREAK                : 
CADENA               : 59
COLON                : 15 16 32
COMA                 : 13 34
CONCAT               : 
CONSOLE              : 33
CONTINUE             : 
DECIMAL              : 58
DISTINTO_QUE         : 42
DIVIDE               : 53
ELSE                 : 24 25
ENTERO               : 57
FOR                  : 28 29 30
FUNCTION             : 
IF                   : 23 24
IGUAL                : 15 17 22
INTERFACE            : 
LET                  : 12 31 32
LITERAL              : 15 16 17 22 31 32 60 62 63
LOG                  : 33
L_CORCHETE           : 
L_LLAVE              : 23 24 25 27 28 29 30
L_PAREN              : 23 24 27 28 29 30 33 61
MAS                  : 49 62 62
MAYOR_IGUAL_QUE      : 46
MAYOR_QUE            : 45
MENOR_IGUAL_QUE      : 44
MENOR_QUE            : 43
MENOS                : 50 63 63
MOD                  : 54
NOT                  : 40
NULL                 : 
NUMBER               : 18
OF                   : 31 32
OR                   : 36
POTENCIA             : 55
PUNTO                : 33
RETURN               : 
R_CORCHETE           : 
R_LLAVE              : 23 24 25 27 28 29 30
R_PAREN              : 23 24 27 28 29 30 33 61
SEMI_COLON           : 4 5 6 11 28 28 29 29
SPLIT                : 
STRING               : 19
TIMES                : 52
TOEXPONENTIAL        : 
TOFIXED              : 
TOLOWERCASE          : 
TOSTRING             : 
TOUPPERCASE          : 
TRIPLE_IGUAL         : 47
WHILE                : 27
error                : 

Nonterminals, with rules where they appear

a                    : 15 17 22 23 24 27 28 29 31 32 34 35 36 61
assig_pro            : 6 28 29 29
assignacion_instruction : 13 14
b                    : 36 37 38
c                    : 38 39
console_pro          : 4
d                    : 40 41 42 43 44 45 46 47
declaracion_list     : 12 13
declaration_instruction : 5 28
e                    : 42 43 44 45 46 47 48 49 50
else_pro             : 23 24
expresion            : 33 34
f                    : 49 50 51 52 53 54 55
for_each_dec         : 30
for_each_pro         : 10
for_pro              : 9
g                    : 52 53 54 55 56
if_pro               : 7
init                 : 0
instruccion          : 2 3
instrucciones        : 1 2 23 24 25 27 28 29 30
sumadores            : 11
type                 : 15 16 32
while_pro            : 8

Parsing method: LALR

state 0

    (0) S' -> . init
    (1) init -> . instrucciones
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . console_pro SEMI_COLON
    (5) instruccion -> . declaration_instruction SEMI_COLON
    (6) instruccion -> . assig_pro SEMI_COLON
    (7) instruccion -> . if_pro
    (8) instruccion -> . while_pro
    (9) instruccion -> . for_pro
    (10) instruccion -> . for_each_pro
    (11) instruccion -> . sumadores SEMI_COLON
    (33) console_pro -> . CONSOLE PUNTO LOG L_PAREN expresion R_PAREN
    (12) declaration_instruction -> . LET declaracion_list
    (22) assig_pro -> . LITERAL IGUAL a
    (23) if_pro -> . IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro
    (27) while_pro -> . WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE
    (28) for_pro -> . FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (29) for_pro -> . FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (30) for_each_pro -> . FOR L_PAREN for_each_dec R_PAREN L_LLAVE instrucciones R_LLAVE
    (62) sumadores -> . LITERAL MAS MAS
    (63) sumadores -> . LITERAL MENOS MENOS

    CONSOLE         shift and go to state 12
    LET             shift and go to state 13
    LITERAL         shift and go to state 14
    IF              shift and go to state 15
    WHILE           shift and go to state 16
    FOR             shift and go to state 17

    init                           shift and go to state 1
    instrucciones                  shift and go to state 2
    instruccion                    shift and go to state 3
    console_pro                    shift and go to state 4
    declaration_instruction        shift and go to state 5
    assig_pro                      shift and go to state 6
    if_pro                         shift and go to state 7
    while_pro                      shift and go to state 8
    for_pro                        shift and go to state 9
    for_each_pro                   shift and go to state 10
    sumadores                      shift and go to state 11

state 1

    (0) S' -> init .



state 2

    (1) init -> instrucciones .
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . console_pro SEMI_COLON
    (5) instruccion -> . declaration_instruction SEMI_COLON
    (6) instruccion -> . assig_pro SEMI_COLON
    (7) instruccion -> . if_pro
    (8) instruccion -> . while_pro
    (9) instruccion -> . for_pro
    (10) instruccion -> . for_each_pro
    (11) instruccion -> . sumadores SEMI_COLON
    (33) console_pro -> . CONSOLE PUNTO LOG L_PAREN expresion R_PAREN
    (12) declaration_instruction -> . LET declaracion_list
    (22) assig_pro -> . LITERAL IGUAL a
    (23) if_pro -> . IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro
    (27) while_pro -> . WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE
    (28) for_pro -> . FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (29) for_pro -> . FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (30) for_each_pro -> . FOR L_PAREN for_each_dec R_PAREN L_LLAVE instrucciones R_LLAVE
    (62) sumadores -> . LITERAL MAS MAS
    (63) sumadores -> . LITERAL MENOS MENOS

    $end            reduce using rule 1 (init -> instrucciones .)
    CONSOLE         shift and go to state 12
    LET             shift and go to state 13
    LITERAL         shift and go to state 14
    IF              shift and go to state 15
    WHILE           shift and go to state 16
    FOR             shift and go to state 17

    instruccion                    shift and go to state 18
    console_pro                    shift and go to state 4
    declaration_instruction        shift and go to state 5
    assig_pro                      shift and go to state 6
    if_pro                         shift and go to state 7
    while_pro                      shift and go to state 8
    for_pro                        shift and go to state 9
    for_each_pro                   shift and go to state 10
    sumadores                      shift and go to state 11

state 3

    (3) instrucciones -> instruccion .

    CONSOLE         reduce using rule 3 (instrucciones -> instruccion .)
    LET             reduce using rule 3 (instrucciones -> instruccion .)
    LITERAL         reduce using rule 3 (instrucciones -> instruccion .)
    IF              reduce using rule 3 (instrucciones -> instruccion .)
    WHILE           reduce using rule 3 (instrucciones -> instruccion .)
    FOR             reduce using rule 3 (instrucciones -> instruccion .)
    $end            reduce using rule 3 (instrucciones -> instruccion .)
    R_LLAVE         reduce using rule 3 (instrucciones -> instruccion .)


state 4

    (4) instruccion -> console_pro . SEMI_COLON

    SEMI_COLON      shift and go to state 19


state 5

    (5) instruccion -> declaration_instruction . SEMI_COLON

    SEMI_COLON      shift and go to state 20


state 6

    (6) instruccion -> assig_pro . SEMI_COLON

    SEMI_COLON      shift and go to state 21


state 7

    (7) instruccion -> if_pro .

    CONSOLE         reduce using rule 7 (instruccion -> if_pro .)
    LET             reduce using rule 7 (instruccion -> if_pro .)
    LITERAL         reduce using rule 7 (instruccion -> if_pro .)
    IF              reduce using rule 7 (instruccion -> if_pro .)
    WHILE           reduce using rule 7 (instruccion -> if_pro .)
    FOR             reduce using rule 7 (instruccion -> if_pro .)
    $end            reduce using rule 7 (instruccion -> if_pro .)
    R_LLAVE         reduce using rule 7 (instruccion -> if_pro .)


state 8

    (8) instruccion -> while_pro .

    CONSOLE         reduce using rule 8 (instruccion -> while_pro .)
    LET             reduce using rule 8 (instruccion -> while_pro .)
    LITERAL         reduce using rule 8 (instruccion -> while_pro .)
    IF              reduce using rule 8 (instruccion -> while_pro .)
    WHILE           reduce using rule 8 (instruccion -> while_pro .)
    FOR             reduce using rule 8 (instruccion -> while_pro .)
    $end            reduce using rule 8 (instruccion -> while_pro .)
    R_LLAVE         reduce using rule 8 (instruccion -> while_pro .)


state 9

    (9) instruccion -> for_pro .

    CONSOLE         reduce using rule 9 (instruccion -> for_pro .)
    LET             reduce using rule 9 (instruccion -> for_pro .)
    LITERAL         reduce using rule 9 (instruccion -> for_pro .)
    IF              reduce using rule 9 (instruccion -> for_pro .)
    WHILE           reduce using rule 9 (instruccion -> for_pro .)
    FOR             reduce using rule 9 (instruccion -> for_pro .)
    $end            reduce using rule 9 (instruccion -> for_pro .)
    R_LLAVE         reduce using rule 9 (instruccion -> for_pro .)


state 10

    (10) instruccion -> for_each_pro .

    CONSOLE         reduce using rule 10 (instruccion -> for_each_pro .)
    LET             reduce using rule 10 (instruccion -> for_each_pro .)
    LITERAL         reduce using rule 10 (instruccion -> for_each_pro .)
    IF              reduce using rule 10 (instruccion -> for_each_pro .)
    WHILE           reduce using rule 10 (instruccion -> for_each_pro .)
    FOR             reduce using rule 10 (instruccion -> for_each_pro .)
    $end            reduce using rule 10 (instruccion -> for_each_pro .)
    R_LLAVE         reduce using rule 10 (instruccion -> for_each_pro .)


state 11

    (11) instruccion -> sumadores . SEMI_COLON

    SEMI_COLON      shift and go to state 22


state 12

    (33) console_pro -> CONSOLE . PUNTO LOG L_PAREN expresion R_PAREN

    PUNTO           shift and go to state 23


state 13

    (12) declaration_instruction -> LET . declaracion_list
    (13) declaracion_list -> . declaracion_list COMA assignacion_instruction
    (14) declaracion_list -> . assignacion_instruction
    (15) assignacion_instruction -> . LITERAL COLON type IGUAL a
    (16) assignacion_instruction -> . LITERAL COLON type
    (17) assignacion_instruction -> . LITERAL IGUAL a

    LITERAL         shift and go to state 26

    declaracion_list               shift and go to state 24
    assignacion_instruction        shift and go to state 25

state 14

    (22) assig_pro -> LITERAL . IGUAL a
    (62) sumadores -> LITERAL . MAS MAS
    (63) sumadores -> LITERAL . MENOS MENOS

    IGUAL           shift and go to state 27
    MAS             shift and go to state 28
    MENOS           shift and go to state 29


state 15

    (23) if_pro -> IF . L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro

    L_PAREN         shift and go to state 30


state 16

    (27) while_pro -> WHILE . L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE

    L_PAREN         shift and go to state 31


state 17

    (28) for_pro -> FOR . L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (29) for_pro -> FOR . L_PAREN assig_pro SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (30) for_each_pro -> FOR . L_PAREN for_each_dec R_PAREN L_LLAVE instrucciones R_LLAVE

    L_PAREN         shift and go to state 32


state 18

    (2) instrucciones -> instrucciones instruccion .

    CONSOLE         reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    LET             reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    LITERAL         reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    IF              reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    WHILE           reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    FOR             reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    $end            reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    R_LLAVE         reduce using rule 2 (instrucciones -> instrucciones instruccion .)


state 19

    (4) instruccion -> console_pro SEMI_COLON .

    CONSOLE         reduce using rule 4 (instruccion -> console_pro SEMI_COLON .)
    LET             reduce using rule 4 (instruccion -> console_pro SEMI_COLON .)
    LITERAL         reduce using rule 4 (instruccion -> console_pro SEMI_COLON .)
    IF              reduce using rule 4 (instruccion -> console_pro SEMI_COLON .)
    WHILE           reduce using rule 4 (instruccion -> console_pro SEMI_COLON .)
    FOR             reduce using rule 4 (instruccion -> console_pro SEMI_COLON .)
    $end            reduce using rule 4 (instruccion -> console_pro SEMI_COLON .)
    R_LLAVE         reduce using rule 4 (instruccion -> console_pro SEMI_COLON .)


state 20

    (5) instruccion -> declaration_instruction SEMI_COLON .

    CONSOLE         reduce using rule 5 (instruccion -> declaration_instruction SEMI_COLON .)
    LET             reduce using rule 5 (instruccion -> declaration_instruction SEMI_COLON .)
    LITERAL         reduce using rule 5 (instruccion -> declaration_instruction SEMI_COLON .)
    IF              reduce using rule 5 (instruccion -> declaration_instruction SEMI_COLON .)
    WHILE           reduce using rule 5 (instruccion -> declaration_instruction SEMI_COLON .)
    FOR             reduce using rule 5 (instruccion -> declaration_instruction SEMI_COLON .)
    $end            reduce using rule 5 (instruccion -> declaration_instruction SEMI_COLON .)
    R_LLAVE         reduce using rule 5 (instruccion -> declaration_instruction SEMI_COLON .)


state 21

    (6) instruccion -> assig_pro SEMI_COLON .

    CONSOLE         reduce using rule 6 (instruccion -> assig_pro SEMI_COLON .)
    LET             reduce using rule 6 (instruccion -> assig_pro SEMI_COLON .)
    LITERAL         reduce using rule 6 (instruccion -> assig_pro SEMI_COLON .)
    IF              reduce using rule 6 (instruccion -> assig_pro SEMI_COLON .)
    WHILE           reduce using rule 6 (instruccion -> assig_pro SEMI_COLON .)
    FOR             reduce using rule 6 (instruccion -> assig_pro SEMI_COLON .)
    $end            reduce using rule 6 (instruccion -> assig_pro SEMI_COLON .)
    R_LLAVE         reduce using rule 6 (instruccion -> assig_pro SEMI_COLON .)


state 22

    (11) instruccion -> sumadores SEMI_COLON .

    CONSOLE         reduce using rule 11 (instruccion -> sumadores SEMI_COLON .)
    LET             reduce using rule 11 (instruccion -> sumadores SEMI_COLON .)
    LITERAL         reduce using rule 11 (instruccion -> sumadores SEMI_COLON .)
    IF              reduce using rule 11 (instruccion -> sumadores SEMI_COLON .)
    WHILE           reduce using rule 11 (instruccion -> sumadores SEMI_COLON .)
    FOR             reduce using rule 11 (instruccion -> sumadores SEMI_COLON .)
    $end            reduce using rule 11 (instruccion -> sumadores SEMI_COLON .)
    R_LLAVE         reduce using rule 11 (instruccion -> sumadores SEMI_COLON .)


state 23

    (33) console_pro -> CONSOLE PUNTO . LOG L_PAREN expresion R_PAREN

    LOG             shift and go to state 33


state 24

    (12) declaration_instruction -> LET declaracion_list .
    (13) declaracion_list -> declaracion_list . COMA assignacion_instruction

    SEMI_COLON      reduce using rule 12 (declaration_instruction -> LET declaracion_list .)
    COMA            shift and go to state 34


state 25

    (14) declaracion_list -> assignacion_instruction .

    COMA            reduce using rule 14 (declaracion_list -> assignacion_instruction .)
    SEMI_COLON      reduce using rule 14 (declaracion_list -> assignacion_instruction .)


state 26

    (15) assignacion_instruction -> LITERAL . COLON type IGUAL a
    (16) assignacion_instruction -> LITERAL . COLON type
    (17) assignacion_instruction -> LITERAL . IGUAL a

    COLON           shift and go to state 35
    IGUAL           shift and go to state 36


state 27

    (22) assig_pro -> LITERAL IGUAL . a
    (36) a -> . a OR b
    (37) a -> . b
    (38) b -> . b AND c
    (39) b -> . c
    (40) c -> . NOT d
    (41) c -> . d
    (42) d -> . d DISTINTO_QUE e
    (43) d -> . d MENOR_QUE e
    (44) d -> . d MENOR_IGUAL_QUE e
    (45) d -> . d MAYOR_QUE e
    (46) d -> . d MAYOR_IGUAL_QUE e
    (47) d -> . d TRIPLE_IGUAL e
    (48) d -> . e
    (49) e -> . e MAS f
    (50) e -> . e MENOS f
    (51) e -> . f
    (52) f -> . f TIMES g
    (53) f -> . f DIVIDE g
    (54) f -> . f MOD g
    (55) f -> . f POTENCIA g
    (56) f -> . g
    (57) g -> . ENTERO
    (58) g -> . DECIMAL
    (59) g -> . CADENA
    (60) g -> . LITERAL
    (61) g -> . L_PAREN a R_PAREN

    NOT             shift and go to state 41
    ENTERO          shift and go to state 46
    DECIMAL         shift and go to state 47
    CADENA          shift and go to state 48
    LITERAL         shift and go to state 37
    L_PAREN         shift and go to state 49

    a                              shift and go to state 38
    b                              shift and go to state 39
    c                              shift and go to state 40
    d                              shift and go to state 42
    e                              shift and go to state 43
    f                              shift and go to state 44
    g                              shift and go to state 45

state 28

    (62) sumadores -> LITERAL MAS . MAS

    MAS             shift and go to state 50


state 29

    (63) sumadores -> LITERAL MENOS . MENOS

    MENOS           shift and go to state 51


state 30

    (23) if_pro -> IF L_PAREN . a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro
    (36) a -> . a OR b
    (37) a -> . b
    (38) b -> . b AND c
    (39) b -> . c
    (40) c -> . NOT d
    (41) c -> . d
    (42) d -> . d DISTINTO_QUE e
    (43) d -> . d MENOR_QUE e
    (44) d -> . d MENOR_IGUAL_QUE e
    (45) d -> . d MAYOR_QUE e
    (46) d -> . d MAYOR_IGUAL_QUE e
    (47) d -> . d TRIPLE_IGUAL e
    (48) d -> . e
    (49) e -> . e MAS f
    (50) e -> . e MENOS f
    (51) e -> . f
    (52) f -> . f TIMES g
    (53) f -> . f DIVIDE g
    (54) f -> . f MOD g
    (55) f -> . f POTENCIA g
    (56) f -> . g
    (57) g -> . ENTERO
    (58) g -> . DECIMAL
    (59) g -> . CADENA
    (60) g -> . LITERAL
    (61) g -> . L_PAREN a R_PAREN

    NOT             shift and go to state 41
    ENTERO          shift and go to state 46
    DECIMAL         shift and go to state 47
    CADENA          shift and go to state 48
    LITERAL         shift and go to state 37
    L_PAREN         shift and go to state 49

    a                              shift and go to state 52
    b                              shift and go to state 39
    c                              shift and go to state 40
    d                              shift and go to state 42
    e                              shift and go to state 43
    f                              shift and go to state 44
    g                              shift and go to state 45

state 31

    (27) while_pro -> WHILE L_PAREN . a R_PAREN L_LLAVE instrucciones R_LLAVE
    (36) a -> . a OR b
    (37) a -> . b
    (38) b -> . b AND c
    (39) b -> . c
    (40) c -> . NOT d
    (41) c -> . d
    (42) d -> . d DISTINTO_QUE e
    (43) d -> . d MENOR_QUE e
    (44) d -> . d MENOR_IGUAL_QUE e
    (45) d -> . d MAYOR_QUE e
    (46) d -> . d MAYOR_IGUAL_QUE e
    (47) d -> . d TRIPLE_IGUAL e
    (48) d -> . e
    (49) e -> . e MAS f
    (50) e -> . e MENOS f
    (51) e -> . f
    (52) f -> . f TIMES g
    (53) f -> . f DIVIDE g
    (54) f -> . f MOD g
    (55) f -> . f POTENCIA g
    (56) f -> . g
    (57) g -> . ENTERO
    (58) g -> . DECIMAL
    (59) g -> . CADENA
    (60) g -> . LITERAL
    (61) g -> . L_PAREN a R_PAREN

    NOT             shift and go to state 41
    ENTERO          shift and go to state 46
    DECIMAL         shift and go to state 47
    CADENA          shift and go to state 48
    LITERAL         shift and go to state 37
    L_PAREN         shift and go to state 49

    a                              shift and go to state 53
    b                              shift and go to state 39
    c                              shift and go to state 40
    d                              shift and go to state 42
    e                              shift and go to state 43
    f                              shift and go to state 44
    g                              shift and go to state 45

state 32

    (28) for_pro -> FOR L_PAREN . declaration_instruction SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (29) for_pro -> FOR L_PAREN . assig_pro SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (30) for_each_pro -> FOR L_PAREN . for_each_dec R_PAREN L_LLAVE instrucciones R_LLAVE
    (12) declaration_instruction -> . LET declaracion_list
    (22) assig_pro -> . LITERAL IGUAL a
    (31) for_each_dec -> . LET LITERAL OF a
    (32) for_each_dec -> . LET LITERAL COLON type OF a

    LET             shift and go to state 57
    LITERAL         shift and go to state 58

    declaration_instruction        shift and go to state 54
    assig_pro                      shift and go to state 55
    for_each_dec                   shift and go to state 56

state 33

    (33) console_pro -> CONSOLE PUNTO LOG . L_PAREN expresion R_PAREN

    L_PAREN         shift and go to state 59


state 34

    (13) declaracion_list -> declaracion_list COMA . assignacion_instruction
    (15) assignacion_instruction -> . LITERAL COLON type IGUAL a
    (16) assignacion_instruction -> . LITERAL COLON type
    (17) assignacion_instruction -> . LITERAL IGUAL a

    LITERAL         shift and go to state 26

    assignacion_instruction        shift and go to state 60

state 35

    (15) assignacion_instruction -> LITERAL COLON . type IGUAL a
    (16) assignacion_instruction -> LITERAL COLON . type
    (18) type -> . NUMBER
    (19) type -> . STRING
    (20) type -> . BOOLEAN
    (21) type -> . ANY

    NUMBER          shift and go to state 62
    STRING          shift and go to state 63
    BOOLEAN         shift and go to state 64
    ANY             shift and go to state 65

    type                           shift and go to state 61

state 36

    (17) assignacion_instruction -> LITERAL IGUAL . a
    (36) a -> . a OR b
    (37) a -> . b
    (38) b -> . b AND c
    (39) b -> . c
    (40) c -> . NOT d
    (41) c -> . d
    (42) d -> . d DISTINTO_QUE e
    (43) d -> . d MENOR_QUE e
    (44) d -> . d MENOR_IGUAL_QUE e
    (45) d -> . d MAYOR_QUE e
    (46) d -> . d MAYOR_IGUAL_QUE e
    (47) d -> . d TRIPLE_IGUAL e
    (48) d -> . e
    (49) e -> . e MAS f
    (50) e -> . e MENOS f
    (51) e -> . f
    (52) f -> . f TIMES g
    (53) f -> . f DIVIDE g
    (54) f -> . f MOD g
    (55) f -> . f POTENCIA g
    (56) f -> . g
    (57) g -> . ENTERO
    (58) g -> . DECIMAL
    (59) g -> . CADENA
    (60) g -> . LITERAL
    (61) g -> . L_PAREN a R_PAREN

    NOT             shift and go to state 41
    ENTERO          shift and go to state 46
    DECIMAL         shift and go to state 47
    CADENA          shift and go to state 48
    LITERAL         shift and go to state 37
    L_PAREN         shift and go to state 49

    a                              shift and go to state 66
    b                              shift and go to state 39
    c                              shift and go to state 40
    d                              shift and go to state 42
    e                              shift and go to state 43
    f                              shift and go to state 44
    g                              shift and go to state 45

state 37

    (60) g -> LITERAL .

    TIMES           reduce using rule 60 (g -> LITERAL .)
    DIVIDE          reduce using rule 60 (g -> LITERAL .)
    MOD             reduce using rule 60 (g -> LITERAL .)
    POTENCIA        reduce using rule 60 (g -> LITERAL .)
    MAS             reduce using rule 60 (g -> LITERAL .)
    MENOS           reduce using rule 60 (g -> LITERAL .)
    DISTINTO_QUE    reduce using rule 60 (g -> LITERAL .)
    MENOR_QUE       reduce using rule 60 (g -> LITERAL .)
    MENOR_IGUAL_QUE reduce using rule 60 (g -> LITERAL .)
    MAYOR_QUE       reduce using rule 60 (g -> LITERAL .)
    MAYOR_IGUAL_QUE reduce using rule 60 (g -> LITERAL .)
    TRIPLE_IGUAL    reduce using rule 60 (g -> LITERAL .)
    AND             reduce using rule 60 (g -> LITERAL .)
    OR              reduce using rule 60 (g -> LITERAL .)
    SEMI_COLON      reduce using rule 60 (g -> LITERAL .)
    R_PAREN         reduce using rule 60 (g -> LITERAL .)
    COMA            reduce using rule 60 (g -> LITERAL .)


state 38

    (22) assig_pro -> LITERAL IGUAL a .
    (36) a -> a . OR b

    SEMI_COLON      reduce using rule 22 (assig_pro -> LITERAL IGUAL a .)
    R_PAREN         reduce using rule 22 (assig_pro -> LITERAL IGUAL a .)
    OR              shift and go to state 67


state 39

    (37) a -> b .
    (38) b -> b . AND c

    OR              reduce using rule 37 (a -> b .)
    SEMI_COLON      reduce using rule 37 (a -> b .)
    R_PAREN         reduce using rule 37 (a -> b .)
    COMA            reduce using rule 37 (a -> b .)
    AND             shift and go to state 68


state 40

    (39) b -> c .

    AND             reduce using rule 39 (b -> c .)
    OR              reduce using rule 39 (b -> c .)
    SEMI_COLON      reduce using rule 39 (b -> c .)
    R_PAREN         reduce using rule 39 (b -> c .)
    COMA            reduce using rule 39 (b -> c .)


state 41

    (40) c -> NOT . d
    (42) d -> . d DISTINTO_QUE e
    (43) d -> . d MENOR_QUE e
    (44) d -> . d MENOR_IGUAL_QUE e
    (45) d -> . d MAYOR_QUE e
    (46) d -> . d MAYOR_IGUAL_QUE e
    (47) d -> . d TRIPLE_IGUAL e
    (48) d -> . e
    (49) e -> . e MAS f
    (50) e -> . e MENOS f
    (51) e -> . f
    (52) f -> . f TIMES g
    (53) f -> . f DIVIDE g
    (54) f -> . f MOD g
    (55) f -> . f POTENCIA g
    (56) f -> . g
    (57) g -> . ENTERO
    (58) g -> . DECIMAL
    (59) g -> . CADENA
    (60) g -> . LITERAL
    (61) g -> . L_PAREN a R_PAREN

    ENTERO          shift and go to state 46
    DECIMAL         shift and go to state 47
    CADENA          shift and go to state 48
    LITERAL         shift and go to state 37
    L_PAREN         shift and go to state 49

    d                              shift and go to state 69
    e                              shift and go to state 43
    f                              shift and go to state 44
    g                              shift and go to state 45

state 42

    (41) c -> d .
    (42) d -> d . DISTINTO_QUE e
    (43) d -> d . MENOR_QUE e
    (44) d -> d . MENOR_IGUAL_QUE e
    (45) d -> d . MAYOR_QUE e
    (46) d -> d . MAYOR_IGUAL_QUE e
    (47) d -> d . TRIPLE_IGUAL e

    AND             reduce using rule 41 (c -> d .)
    OR              reduce using rule 41 (c -> d .)
    SEMI_COLON      reduce using rule 41 (c -> d .)
    R_PAREN         reduce using rule 41 (c -> d .)
    COMA            reduce using rule 41 (c -> d .)
    DISTINTO_QUE    shift and go to state 70
    MENOR_QUE       shift and go to state 71
    MENOR_IGUAL_QUE shift and go to state 72
    MAYOR_QUE       shift and go to state 73
    MAYOR_IGUAL_QUE shift and go to state 74
    TRIPLE_IGUAL    shift and go to state 75


state 43

    (48) d -> e .
    (49) e -> e . MAS f
    (50) e -> e . MENOS f

    DISTINTO_QUE    reduce using rule 48 (d -> e .)
    MENOR_QUE       reduce using rule 48 (d -> e .)
    MENOR_IGUAL_QUE reduce using rule 48 (d -> e .)
    MAYOR_QUE       reduce using rule 48 (d -> e .)
    MAYOR_IGUAL_QUE reduce using rule 48 (d -> e .)
    TRIPLE_IGUAL    reduce using rule 48 (d -> e .)
    AND             reduce using rule 48 (d -> e .)
    OR              reduce using rule 48 (d -> e .)
    SEMI_COLON      reduce using rule 48 (d -> e .)
    R_PAREN         reduce using rule 48 (d -> e .)
    COMA            reduce using rule 48 (d -> e .)
    MAS             shift and go to state 76
    MENOS           shift and go to state 77


state 44

    (51) e -> f .
    (52) f -> f . TIMES g
    (53) f -> f . DIVIDE g
    (54) f -> f . MOD g
    (55) f -> f . POTENCIA g

    MAS             reduce using rule 51 (e -> f .)
    MENOS           reduce using rule 51 (e -> f .)
    DISTINTO_QUE    reduce using rule 51 (e -> f .)
    MENOR_QUE       reduce using rule 51 (e -> f .)
    MENOR_IGUAL_QUE reduce using rule 51 (e -> f .)
    MAYOR_QUE       reduce using rule 51 (e -> f .)
    MAYOR_IGUAL_QUE reduce using rule 51 (e -> f .)
    TRIPLE_IGUAL    reduce using rule 51 (e -> f .)
    AND             reduce using rule 51 (e -> f .)
    OR              reduce using rule 51 (e -> f .)
    SEMI_COLON      reduce using rule 51 (e -> f .)
    R_PAREN         reduce using rule 51 (e -> f .)
    COMA            reduce using rule 51 (e -> f .)
    TIMES           shift and go to state 78
    DIVIDE          shift and go to state 79
    MOD             shift and go to state 80
    POTENCIA        shift and go to state 81


state 45

    (56) f -> g .

    TIMES           reduce using rule 56 (f -> g .)
    DIVIDE          reduce using rule 56 (f -> g .)
    MOD             reduce using rule 56 (f -> g .)
    POTENCIA        reduce using rule 56 (f -> g .)
    MAS             reduce using rule 56 (f -> g .)
    MENOS           reduce using rule 56 (f -> g .)
    DISTINTO_QUE    reduce using rule 56 (f -> g .)
    MENOR_QUE       reduce using rule 56 (f -> g .)
    MENOR_IGUAL_QUE reduce using rule 56 (f -> g .)
    MAYOR_QUE       reduce using rule 56 (f -> g .)
    MAYOR_IGUAL_QUE reduce using rule 56 (f -> g .)
    TRIPLE_IGUAL    reduce using rule 56 (f -> g .)
    AND             reduce using rule 56 (f -> g .)
    OR              reduce using rule 56 (f -> g .)
    SEMI_COLON      reduce using rule 56 (f -> g .)
    R_PAREN         reduce using rule 56 (f -> g .)
    COMA            reduce using rule 56 (f -> g .)


state 46

    (57) g -> ENTERO .

    TIMES           reduce using rule 57 (g -> ENTERO .)
    DIVIDE          reduce using rule 57 (g -> ENTERO .)
    MOD             reduce using rule 57 (g -> ENTERO .)
    POTENCIA        reduce using rule 57 (g -> ENTERO .)
    MAS             reduce using rule 57 (g -> ENTERO .)
    MENOS           reduce using rule 57 (g -> ENTERO .)
    DISTINTO_QUE    reduce using rule 57 (g -> ENTERO .)
    MENOR_QUE       reduce using rule 57 (g -> ENTERO .)
    MENOR_IGUAL_QUE reduce using rule 57 (g -> ENTERO .)
    MAYOR_QUE       reduce using rule 57 (g -> ENTERO .)
    MAYOR_IGUAL_QUE reduce using rule 57 (g -> ENTERO .)
    TRIPLE_IGUAL    reduce using rule 57 (g -> ENTERO .)
    AND             reduce using rule 57 (g -> ENTERO .)
    OR              reduce using rule 57 (g -> ENTERO .)
    SEMI_COLON      reduce using rule 57 (g -> ENTERO .)
    R_PAREN         reduce using rule 57 (g -> ENTERO .)
    COMA            reduce using rule 57 (g -> ENTERO .)


state 47

    (58) g -> DECIMAL .

    TIMES           reduce using rule 58 (g -> DECIMAL .)
    DIVIDE          reduce using rule 58 (g -> DECIMAL .)
    MOD             reduce using rule 58 (g -> DECIMAL .)
    POTENCIA        reduce using rule 58 (g -> DECIMAL .)
    MAS             reduce using rule 58 (g -> DECIMAL .)
    MENOS           reduce using rule 58 (g -> DECIMAL .)
    DISTINTO_QUE    reduce using rule 58 (g -> DECIMAL .)
    MENOR_QUE       reduce using rule 58 (g -> DECIMAL .)
    MENOR_IGUAL_QUE reduce using rule 58 (g -> DECIMAL .)
    MAYOR_QUE       reduce using rule 58 (g -> DECIMAL .)
    MAYOR_IGUAL_QUE reduce using rule 58 (g -> DECIMAL .)
    TRIPLE_IGUAL    reduce using rule 58 (g -> DECIMAL .)
    AND             reduce using rule 58 (g -> DECIMAL .)
    OR              reduce using rule 58 (g -> DECIMAL .)
    SEMI_COLON      reduce using rule 58 (g -> DECIMAL .)
    R_PAREN         reduce using rule 58 (g -> DECIMAL .)
    COMA            reduce using rule 58 (g -> DECIMAL .)


state 48

    (59) g -> CADENA .

    TIMES           reduce using rule 59 (g -> CADENA .)
    DIVIDE          reduce using rule 59 (g -> CADENA .)
    MOD             reduce using rule 59 (g -> CADENA .)
    POTENCIA        reduce using rule 59 (g -> CADENA .)
    MAS             reduce using rule 59 (g -> CADENA .)
    MENOS           reduce using rule 59 (g -> CADENA .)
    DISTINTO_QUE    reduce using rule 59 (g -> CADENA .)
    MENOR_QUE       reduce using rule 59 (g -> CADENA .)
    MENOR_IGUAL_QUE reduce using rule 59 (g -> CADENA .)
    MAYOR_QUE       reduce using rule 59 (g -> CADENA .)
    MAYOR_IGUAL_QUE reduce using rule 59 (g -> CADENA .)
    TRIPLE_IGUAL    reduce using rule 59 (g -> CADENA .)
    AND             reduce using rule 59 (g -> CADENA .)
    OR              reduce using rule 59 (g -> CADENA .)
    SEMI_COLON      reduce using rule 59 (g -> CADENA .)
    R_PAREN         reduce using rule 59 (g -> CADENA .)
    COMA            reduce using rule 59 (g -> CADENA .)


state 49

    (61) g -> L_PAREN . a R_PAREN
    (36) a -> . a OR b
    (37) a -> . b
    (38) b -> . b AND c
    (39) b -> . c
    (40) c -> . NOT d
    (41) c -> . d
    (42) d -> . d DISTINTO_QUE e
    (43) d -> . d MENOR_QUE e
    (44) d -> . d MENOR_IGUAL_QUE e
    (45) d -> . d MAYOR_QUE e
    (46) d -> . d MAYOR_IGUAL_QUE e
    (47) d -> . d TRIPLE_IGUAL e
    (48) d -> . e
    (49) e -> . e MAS f
    (50) e -> . e MENOS f
    (51) e -> . f
    (52) f -> . f TIMES g
    (53) f -> . f DIVIDE g
    (54) f -> . f MOD g
    (55) f -> . f POTENCIA g
    (56) f -> . g
    (57) g -> . ENTERO
    (58) g -> . DECIMAL
    (59) g -> . CADENA
    (60) g -> . LITERAL
    (61) g -> . L_PAREN a R_PAREN

    NOT             shift and go to state 41
    ENTERO          shift and go to state 46
    DECIMAL         shift and go to state 47
    CADENA          shift and go to state 48
    LITERAL         shift and go to state 37
    L_PAREN         shift and go to state 49

    a                              shift and go to state 82
    b                              shift and go to state 39
    c                              shift and go to state 40
    d                              shift and go to state 42
    e                              shift and go to state 43
    f                              shift and go to state 44
    g                              shift and go to state 45

state 50

    (62) sumadores -> LITERAL MAS MAS .

    SEMI_COLON      reduce using rule 62 (sumadores -> LITERAL MAS MAS .)


state 51

    (63) sumadores -> LITERAL MENOS MENOS .

    SEMI_COLON      reduce using rule 63 (sumadores -> LITERAL MENOS MENOS .)


state 52

    (23) if_pro -> IF L_PAREN a . R_PAREN L_LLAVE instrucciones R_LLAVE else_pro
    (36) a -> a . OR b

    R_PAREN         shift and go to state 83
    OR              shift and go to state 67


state 53

    (27) while_pro -> WHILE L_PAREN a . R_PAREN L_LLAVE instrucciones R_LLAVE
    (36) a -> a . OR b

    R_PAREN         shift and go to state 84
    OR              shift and go to state 67


state 54

    (28) for_pro -> FOR L_PAREN declaration_instruction . SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE

    SEMI_COLON      shift and go to state 85


state 55

    (29) for_pro -> FOR L_PAREN assig_pro . SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE

    SEMI_COLON      shift and go to state 86


state 56

    (30) for_each_pro -> FOR L_PAREN for_each_dec . R_PAREN L_LLAVE instrucciones R_LLAVE

    R_PAREN         shift and go to state 87


state 57

    (12) declaration_instruction -> LET . declaracion_list
    (31) for_each_dec -> LET . LITERAL OF a
    (32) for_each_dec -> LET . LITERAL COLON type OF a
    (13) declaracion_list -> . declaracion_list COMA assignacion_instruction
    (14) declaracion_list -> . assignacion_instruction
    (15) assignacion_instruction -> . LITERAL COLON type IGUAL a
    (16) assignacion_instruction -> . LITERAL COLON type
    (17) assignacion_instruction -> . LITERAL IGUAL a

    LITERAL         shift and go to state 88

    declaracion_list               shift and go to state 24
    assignacion_instruction        shift and go to state 25

state 58

    (22) assig_pro -> LITERAL . IGUAL a

    IGUAL           shift and go to state 27


state 59

    (33) console_pro -> CONSOLE PUNTO LOG L_PAREN . expresion R_PAREN
    (34) expresion -> . expresion COMA a
    (35) expresion -> . a
    (36) a -> . a OR b
    (37) a -> . b
    (38) b -> . b AND c
    (39) b -> . c
    (40) c -> . NOT d
    (41) c -> . d
    (42) d -> . d DISTINTO_QUE e
    (43) d -> . d MENOR_QUE e
    (44) d -> . d MENOR_IGUAL_QUE e
    (45) d -> . d MAYOR_QUE e
    (46) d -> . d MAYOR_IGUAL_QUE e
    (47) d -> . d TRIPLE_IGUAL e
    (48) d -> . e
    (49) e -> . e MAS f
    (50) e -> . e MENOS f
    (51) e -> . f
    (52) f -> . f TIMES g
    (53) f -> . f DIVIDE g
    (54) f -> . f MOD g
    (55) f -> . f POTENCIA g
    (56) f -> . g
    (57) g -> . ENTERO
    (58) g -> . DECIMAL
    (59) g -> . CADENA
    (60) g -> . LITERAL
    (61) g -> . L_PAREN a R_PAREN

    NOT             shift and go to state 41
    ENTERO          shift and go to state 46
    DECIMAL         shift and go to state 47
    CADENA          shift and go to state 48
    LITERAL         shift and go to state 37
    L_PAREN         shift and go to state 49

    expresion                      shift and go to state 89
    a                              shift and go to state 90
    b                              shift and go to state 39
    c                              shift and go to state 40
    d                              shift and go to state 42
    e                              shift and go to state 43
    f                              shift and go to state 44
    g                              shift and go to state 45

state 60

    (13) declaracion_list -> declaracion_list COMA assignacion_instruction .

    COMA            reduce using rule 13 (declaracion_list -> declaracion_list COMA assignacion_instruction .)
    SEMI_COLON      reduce using rule 13 (declaracion_list -> declaracion_list COMA assignacion_instruction .)


state 61

    (15) assignacion_instruction -> LITERAL COLON type . IGUAL a
    (16) assignacion_instruction -> LITERAL COLON type .

    IGUAL           shift and go to state 91
    COMA            reduce using rule 16 (assignacion_instruction -> LITERAL COLON type .)
    SEMI_COLON      reduce using rule 16 (assignacion_instruction -> LITERAL COLON type .)


state 62

    (18) type -> NUMBER .

    IGUAL           reduce using rule 18 (type -> NUMBER .)
    COMA            reduce using rule 18 (type -> NUMBER .)
    SEMI_COLON      reduce using rule 18 (type -> NUMBER .)
    OF              reduce using rule 18 (type -> NUMBER .)


state 63

    (19) type -> STRING .

    IGUAL           reduce using rule 19 (type -> STRING .)
    COMA            reduce using rule 19 (type -> STRING .)
    SEMI_COLON      reduce using rule 19 (type -> STRING .)
    OF              reduce using rule 19 (type -> STRING .)


state 64

    (20) type -> BOOLEAN .

    IGUAL           reduce using rule 20 (type -> BOOLEAN .)
    COMA            reduce using rule 20 (type -> BOOLEAN .)
    SEMI_COLON      reduce using rule 20 (type -> BOOLEAN .)
    OF              reduce using rule 20 (type -> BOOLEAN .)


state 65

    (21) type -> ANY .

    IGUAL           reduce using rule 21 (type -> ANY .)
    COMA            reduce using rule 21 (type -> ANY .)
    SEMI_COLON      reduce using rule 21 (type -> ANY .)
    OF              reduce using rule 21 (type -> ANY .)


state 66

    (17) assignacion_instruction -> LITERAL IGUAL a .
    (36) a -> a . OR b

    COMA            reduce using rule 17 (assignacion_instruction -> LITERAL IGUAL a .)
    SEMI_COLON      reduce using rule 17 (assignacion_instruction -> LITERAL IGUAL a .)
    OR              shift and go to state 67


state 67

    (36) a -> a OR . b
    (38) b -> . b AND c
    (39) b -> . c
    (40) c -> . NOT d
    (41) c -> . d
    (42) d -> . d DISTINTO_QUE e
    (43) d -> . d MENOR_QUE e
    (44) d -> . d MENOR_IGUAL_QUE e
    (45) d -> . d MAYOR_QUE e
    (46) d -> . d MAYOR_IGUAL_QUE e
    (47) d -> . d TRIPLE_IGUAL e
    (48) d -> . e
    (49) e -> . e MAS f
    (50) e -> . e MENOS f
    (51) e -> . f
    (52) f -> . f TIMES g
    (53) f -> . f DIVIDE g
    (54) f -> . f MOD g
    (55) f -> . f POTENCIA g
    (56) f -> . g
    (57) g -> . ENTERO
    (58) g -> . DECIMAL
    (59) g -> . CADENA
    (60) g -> . LITERAL
    (61) g -> . L_PAREN a R_PAREN

    NOT             shift and go to state 41
    ENTERO          shift and go to state 46
    DECIMAL         shift and go to state 47
    CADENA          shift and go to state 48
    LITERAL         shift and go to state 37
    L_PAREN         shift and go to state 49

    b                              shift and go to state 92
    c                              shift and go to state 40
    d                              shift and go to state 42
    e                              shift and go to state 43
    f                              shift and go to state 44
    g                              shift and go to state 45

state 68

    (38) b -> b AND . c
    (40) c -> . NOT d
    (41) c -> . d
    (42) d -> . d DISTINTO_QUE e
    (43) d -> . d MENOR_QUE e
    (44) d -> . d MENOR_IGUAL_QUE e
    (45) d -> . d MAYOR_QUE e
    (46) d -> . d MAYOR_IGUAL_QUE e
    (47) d -> . d TRIPLE_IGUAL e
    (48) d -> . e
    (49) e -> . e MAS f
    (50) e -> . e MENOS f
    (51) e -> . f
    (52) f -> . f TIMES g
    (53) f -> . f DIVIDE g
    (54) f -> . f MOD g
    (55) f -> . f POTENCIA g
    (56) f -> . g
    (57) g -> . ENTERO
    (58) g -> . DECIMAL
    (59) g -> . CADENA
    (60) g -> . LITERAL
    (61) g -> . L_PAREN a R_PAREN

    NOT             shift and go to state 41
    ENTERO          shift and go to state 46
    DECIMAL         shift and go to state 47
    CADENA          shift and go to state 48
    LITERAL         shift and go to state 37
    L_PAREN         shift and go to state 49

    c                              shift and go to state 93
    d                              shift and go to state 42
    e                              shift and go to state 43
    f                              shift and go to state 44
    g                              shift and go to state 45

state 69

    (40) c -> NOT d .
    (42) d -> d . DISTINTO_QUE e
    (43) d -> d . MENOR_QUE e
    (44) d -> d . MENOR_IGUAL_QUE e
    (45) d -> d . MAYOR_QUE e
    (46) d -> d . MAYOR_IGUAL_QUE e
    (47) d -> d . TRIPLE_IGUAL e

    AND             reduce using rule 40 (c -> NOT d .)
    OR              reduce using rule 40 (c -> NOT d .)
    SEMI_COLON      reduce using rule 40 (c -> NOT d .)
    R_PAREN         reduce using rule 40 (c -> NOT d .)
    COMA            reduce using rule 40 (c -> NOT d .)
    DISTINTO_QUE    shift and go to state 70
    MENOR_QUE       shift and go to state 71
    MENOR_IGUAL_QUE shift and go to state 72
    MAYOR_QUE       shift and go to state 73
    MAYOR_IGUAL_QUE shift and go to state 74
    TRIPLE_IGUAL    shift and go to state 75


state 70

    (42) d -> d DISTINTO_QUE . e
    (49) e -> . e MAS f
    (50) e -> . e MENOS f
    (51) e -> . f
    (52) f -> . f TIMES g
    (53) f -> . f DIVIDE g
    (54) f -> . f MOD g
    (55) f -> . f POTENCIA g
    (56) f -> . g
    (57) g -> . ENTERO
    (58) g -> . DECIMAL
    (59) g -> . CADENA
    (60) g -> . LITERAL
    (61) g -> . L_PAREN a R_PAREN

    ENTERO          shift and go to state 46
    DECIMAL         shift and go to state 47
    CADENA          shift and go to state 48
    LITERAL         shift and go to state 37
    L_PAREN         shift and go to state 49

    e                              shift and go to state 94
    f                              shift and go to state 44
    g                              shift and go to state 45

state 71

    (43) d -> d MENOR_QUE . e
    (49) e -> . e MAS f
    (50) e -> . e MENOS f
    (51) e -> . f
    (52) f -> . f TIMES g
    (53) f -> . f DIVIDE g
    (54) f -> . f MOD g
    (55) f -> . f POTENCIA g
    (56) f -> . g
    (57) g -> . ENTERO
    (58) g -> . DECIMAL
    (59) g -> . CADENA
    (60) g -> . LITERAL
    (61) g -> . L_PAREN a R_PAREN

    ENTERO          shift and go to state 46
    DECIMAL         shift and go to state 47
    CADENA          shift and go to state 48
    LITERAL         shift and go to state 37
    L_PAREN         shift and go to state 49

    e                              shift and go to state 95
    f                              shift and go to state 44
    g                              shift and go to state 45

state 72

    (44) d -> d MENOR_IGUAL_QUE . e
    (49) e -> . e MAS f
    (50) e -> . e MENOS f
    (51) e -> . f
    (52) f -> . f TIMES g
    (53) f -> . f DIVIDE g
    (54) f -> . f MOD g
    (55) f -> . f POTENCIA g
    (56) f -> . g
    (57) g -> . ENTERO
    (58) g -> . DECIMAL
    (59) g -> . CADENA
    (60) g -> . LITERAL
    (61) g -> . L_PAREN a R_PAREN

    ENTERO          shift and go to state 46
    DECIMAL         shift and go to state 47
    CADENA          shift and go to state 48
    LITERAL         shift and go to state 37
    L_PAREN         shift and go to state 49

    e                              shift and go to state 96
    f                              shift and go to state 44
    g                              shift and go to state 45

state 73

    (45) d -> d MAYOR_QUE . e
    (49) e -> . e MAS f
    (50) e -> . e MENOS f
    (51) e -> . f
    (52) f -> . f TIMES g
    (53) f -> . f DIVIDE g
    (54) f -> . f MOD g
    (55) f -> . f POTENCIA g
    (56) f -> . g
    (57) g -> . ENTERO
    (58) g -> . DECIMAL
    (59) g -> . CADENA
    (60) g -> . LITERAL
    (61) g -> . L_PAREN a R_PAREN

    ENTERO          shift and go to state 46
    DECIMAL         shift and go to state 47
    CADENA          shift and go to state 48
    LITERAL         shift and go to state 37
    L_PAREN         shift and go to state 49

    e                              shift and go to state 97
    f                              shift and go to state 44
    g                              shift and go to state 45

state 74

    (46) d -> d MAYOR_IGUAL_QUE . e
    (49) e -> . e MAS f
    (50) e -> . e MENOS f
    (51) e -> . f
    (52) f -> . f TIMES g
    (53) f -> . f DIVIDE g
    (54) f -> . f MOD g
    (55) f -> . f POTENCIA g
    (56) f -> . g
    (57) g -> . ENTERO
    (58) g -> . DECIMAL
    (59) g -> . CADENA
    (60) g -> . LITERAL
    (61) g -> . L_PAREN a R_PAREN

    ENTERO          shift and go to state 46
    DECIMAL         shift and go to state 47
    CADENA          shift and go to state 48
    LITERAL         shift and go to state 37
    L_PAREN         shift and go to state 49

    e                              shift and go to state 98
    f                              shift and go to state 44
    g                              shift and go to state 45

state 75

    (47) d -> d TRIPLE_IGUAL . e
    (49) e -> . e MAS f
    (50) e -> . e MENOS f
    (51) e -> . f
    (52) f -> . f TIMES g
    (53) f -> . f DIVIDE g
    (54) f -> . f MOD g
    (55) f -> . f POTENCIA g
    (56) f -> . g
    (57) g -> . ENTERO
    (58) g -> . DECIMAL
    (59) g -> . CADENA
    (60) g -> . LITERAL
    (61) g -> . L_PAREN a R_PAREN

    ENTERO          shift and go to state 46
    DECIMAL         shift and go to state 47
    CADENA          shift and go to state 48
    LITERAL         shift and go to state 37
    L_PAREN         shift and go to state 49

    e                              shift and go to state 99
    f                              shift and go to state 44
    g                              shift and go to state 45

state 76

    (49) e -> e MAS . f
    (52) f -> . f TIMES g
    (53) f -> . f DIVIDE g
    (54) f -> . f MOD g
    (55) f -> . f POTENCIA g
    (56) f -> . g
    (57) g -> . ENTERO
    (58) g -> . DECIMAL
    (59) g -> . CADENA
    (60) g -> . LITERAL
    (61) g -> . L_PAREN a R_PAREN

    ENTERO          shift and go to state 46
    DECIMAL         shift and go to state 47
    CADENA          shift and go to state 48
    LITERAL         shift and go to state 37
    L_PAREN         shift and go to state 49

    f                              shift and go to state 100
    g                              shift and go to state 45

state 77

    (50) e -> e MENOS . f
    (52) f -> . f TIMES g
    (53) f -> . f DIVIDE g
    (54) f -> . f MOD g
    (55) f -> . f POTENCIA g
    (56) f -> . g
    (57) g -> . ENTERO
    (58) g -> . DECIMAL
    (59) g -> . CADENA
    (60) g -> . LITERAL
    (61) g -> . L_PAREN a R_PAREN

    ENTERO          shift and go to state 46
    DECIMAL         shift and go to state 47
    CADENA          shift and go to state 48
    LITERAL         shift and go to state 37
    L_PAREN         shift and go to state 49

    f                              shift and go to state 101
    g                              shift and go to state 45

state 78

    (52) f -> f TIMES . g
    (57) g -> . ENTERO
    (58) g -> . DECIMAL
    (59) g -> . CADENA
    (60) g -> . LITERAL
    (61) g -> . L_PAREN a R_PAREN

    ENTERO          shift and go to state 46
    DECIMAL         shift and go to state 47
    CADENA          shift and go to state 48
    LITERAL         shift and go to state 37
    L_PAREN         shift and go to state 49

    g                              shift and go to state 102

state 79

    (53) f -> f DIVIDE . g
    (57) g -> . ENTERO
    (58) g -> . DECIMAL
    (59) g -> . CADENA
    (60) g -> . LITERAL
    (61) g -> . L_PAREN a R_PAREN

    ENTERO          shift and go to state 46
    DECIMAL         shift and go to state 47
    CADENA          shift and go to state 48
    LITERAL         shift and go to state 37
    L_PAREN         shift and go to state 49

    g                              shift and go to state 103

state 80

    (54) f -> f MOD . g
    (57) g -> . ENTERO
    (58) g -> . DECIMAL
    (59) g -> . CADENA
    (60) g -> . LITERAL
    (61) g -> . L_PAREN a R_PAREN

    ENTERO          shift and go to state 46
    DECIMAL         shift and go to state 47
    CADENA          shift and go to state 48
    LITERAL         shift and go to state 37
    L_PAREN         shift and go to state 49

    g                              shift and go to state 104

state 81

    (55) f -> f POTENCIA . g
    (57) g -> . ENTERO
    (58) g -> . DECIMAL
    (59) g -> . CADENA
    (60) g -> . LITERAL
    (61) g -> . L_PAREN a R_PAREN

    ENTERO          shift and go to state 46
    DECIMAL         shift and go to state 47
    CADENA          shift and go to state 48
    LITERAL         shift and go to state 37
    L_PAREN         shift and go to state 49

    g                              shift and go to state 105

state 82

    (61) g -> L_PAREN a . R_PAREN
    (36) a -> a . OR b

    R_PAREN         shift and go to state 106
    OR              shift and go to state 67


state 83

    (23) if_pro -> IF L_PAREN a R_PAREN . L_LLAVE instrucciones R_LLAVE else_pro

    L_LLAVE         shift and go to state 107


state 84

    (27) while_pro -> WHILE L_PAREN a R_PAREN . L_LLAVE instrucciones R_LLAVE

    L_LLAVE         shift and go to state 108


state 85

    (28) for_pro -> FOR L_PAREN declaration_instruction SEMI_COLON . a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (36) a -> . a OR b
    (37) a -> . b
    (38) b -> . b AND c
    (39) b -> . c
    (40) c -> . NOT d
    (41) c -> . d
    (42) d -> . d DISTINTO_QUE e
    (43) d -> . d MENOR_QUE e
    (44) d -> . d MENOR_IGUAL_QUE e
    (45) d -> . d MAYOR_QUE e
    (46) d -> . d MAYOR_IGUAL_QUE e
    (47) d -> . d TRIPLE_IGUAL e
    (48) d -> . e
    (49) e -> . e MAS f
    (50) e -> . e MENOS f
    (51) e -> . f
    (52) f -> . f TIMES g
    (53) f -> . f DIVIDE g
    (54) f -> . f MOD g
    (55) f -> . f POTENCIA g
    (56) f -> . g
    (57) g -> . ENTERO
    (58) g -> . DECIMAL
    (59) g -> . CADENA
    (60) g -> . LITERAL
    (61) g -> . L_PAREN a R_PAREN

    NOT             shift and go to state 41
    ENTERO          shift and go to state 46
    DECIMAL         shift and go to state 47
    CADENA          shift and go to state 48
    LITERAL         shift and go to state 37
    L_PAREN         shift and go to state 49

    a                              shift and go to state 109
    b                              shift and go to state 39
    c                              shift and go to state 40
    d                              shift and go to state 42
    e                              shift and go to state 43
    f                              shift and go to state 44
    g                              shift and go to state 45

state 86

    (29) for_pro -> FOR L_PAREN assig_pro SEMI_COLON . a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (36) a -> . a OR b
    (37) a -> . b
    (38) b -> . b AND c
    (39) b -> . c
    (40) c -> . NOT d
    (41) c -> . d
    (42) d -> . d DISTINTO_QUE e
    (43) d -> . d MENOR_QUE e
    (44) d -> . d MENOR_IGUAL_QUE e
    (45) d -> . d MAYOR_QUE e
    (46) d -> . d MAYOR_IGUAL_QUE e
    (47) d -> . d TRIPLE_IGUAL e
    (48) d -> . e
    (49) e -> . e MAS f
    (50) e -> . e MENOS f
    (51) e -> . f
    (52) f -> . f TIMES g
    (53) f -> . f DIVIDE g
    (54) f -> . f MOD g
    (55) f -> . f POTENCIA g
    (56) f -> . g
    (57) g -> . ENTERO
    (58) g -> . DECIMAL
    (59) g -> . CADENA
    (60) g -> . LITERAL
    (61) g -> . L_PAREN a R_PAREN

    NOT             shift and go to state 41
    ENTERO          shift and go to state 46
    DECIMAL         shift and go to state 47
    CADENA          shift and go to state 48
    LITERAL         shift and go to state 37
    L_PAREN         shift and go to state 49

    a                              shift and go to state 110
    b                              shift and go to state 39
    c                              shift and go to state 40
    d                              shift and go to state 42
    e                              shift and go to state 43
    f                              shift and go to state 44
    g                              shift and go to state 45

state 87

    (30) for_each_pro -> FOR L_PAREN for_each_dec R_PAREN . L_LLAVE instrucciones R_LLAVE

    L_LLAVE         shift and go to state 111


state 88

    (31) for_each_dec -> LET LITERAL . OF a
    (32) for_each_dec -> LET LITERAL . COLON type OF a
    (15) assignacion_instruction -> LITERAL . COLON type IGUAL a
    (16) assignacion_instruction -> LITERAL . COLON type
    (17) assignacion_instruction -> LITERAL . IGUAL a

    OF              shift and go to state 112
    COLON           shift and go to state 113
    IGUAL           shift and go to state 36


state 89

    (33) console_pro -> CONSOLE PUNTO LOG L_PAREN expresion . R_PAREN
    (34) expresion -> expresion . COMA a

    R_PAREN         shift and go to state 114
    COMA            shift and go to state 115


state 90

    (35) expresion -> a .
    (36) a -> a . OR b

    R_PAREN         reduce using rule 35 (expresion -> a .)
    COMA            reduce using rule 35 (expresion -> a .)
    OR              shift and go to state 67


state 91

    (15) assignacion_instruction -> LITERAL COLON type IGUAL . a
    (36) a -> . a OR b
    (37) a -> . b
    (38) b -> . b AND c
    (39) b -> . c
    (40) c -> . NOT d
    (41) c -> . d
    (42) d -> . d DISTINTO_QUE e
    (43) d -> . d MENOR_QUE e
    (44) d -> . d MENOR_IGUAL_QUE e
    (45) d -> . d MAYOR_QUE e
    (46) d -> . d MAYOR_IGUAL_QUE e
    (47) d -> . d TRIPLE_IGUAL e
    (48) d -> . e
    (49) e -> . e MAS f
    (50) e -> . e MENOS f
    (51) e -> . f
    (52) f -> . f TIMES g
    (53) f -> . f DIVIDE g
    (54) f -> . f MOD g
    (55) f -> . f POTENCIA g
    (56) f -> . g
    (57) g -> . ENTERO
    (58) g -> . DECIMAL
    (59) g -> . CADENA
    (60) g -> . LITERAL
    (61) g -> . L_PAREN a R_PAREN

    NOT             shift and go to state 41
    ENTERO          shift and go to state 46
    DECIMAL         shift and go to state 47
    CADENA          shift and go to state 48
    LITERAL         shift and go to state 37
    L_PAREN         shift and go to state 49

    a                              shift and go to state 116
    b                              shift and go to state 39
    c                              shift and go to state 40
    d                              shift and go to state 42
    e                              shift and go to state 43
    f                              shift and go to state 44
    g                              shift and go to state 45

state 92

    (36) a -> a OR b .
    (38) b -> b . AND c

    OR              reduce using rule 36 (a -> a OR b .)
    SEMI_COLON      reduce using rule 36 (a -> a OR b .)
    R_PAREN         reduce using rule 36 (a -> a OR b .)
    COMA            reduce using rule 36 (a -> a OR b .)
    AND             shift and go to state 68


state 93

    (38) b -> b AND c .

    AND             reduce using rule 38 (b -> b AND c .)
    OR              reduce using rule 38 (b -> b AND c .)
    SEMI_COLON      reduce using rule 38 (b -> b AND c .)
    R_PAREN         reduce using rule 38 (b -> b AND c .)
    COMA            reduce using rule 38 (b -> b AND c .)


state 94

    (42) d -> d DISTINTO_QUE e .
    (49) e -> e . MAS f
    (50) e -> e . MENOS f

    DISTINTO_QUE    reduce using rule 42 (d -> d DISTINTO_QUE e .)
    MENOR_QUE       reduce using rule 42 (d -> d DISTINTO_QUE e .)
    MENOR_IGUAL_QUE reduce using rule 42 (d -> d DISTINTO_QUE e .)
    MAYOR_QUE       reduce using rule 42 (d -> d DISTINTO_QUE e .)
    MAYOR_IGUAL_QUE reduce using rule 42 (d -> d DISTINTO_QUE e .)
    TRIPLE_IGUAL    reduce using rule 42 (d -> d DISTINTO_QUE e .)
    AND             reduce using rule 42 (d -> d DISTINTO_QUE e .)
    OR              reduce using rule 42 (d -> d DISTINTO_QUE e .)
    SEMI_COLON      reduce using rule 42 (d -> d DISTINTO_QUE e .)
    R_PAREN         reduce using rule 42 (d -> d DISTINTO_QUE e .)
    COMA            reduce using rule 42 (d -> d DISTINTO_QUE e .)
    MAS             shift and go to state 76
    MENOS           shift and go to state 77


state 95

    (43) d -> d MENOR_QUE e .
    (49) e -> e . MAS f
    (50) e -> e . MENOS f

    DISTINTO_QUE    reduce using rule 43 (d -> d MENOR_QUE e .)
    MENOR_QUE       reduce using rule 43 (d -> d MENOR_QUE e .)
    MENOR_IGUAL_QUE reduce using rule 43 (d -> d MENOR_QUE e .)
    MAYOR_QUE       reduce using rule 43 (d -> d MENOR_QUE e .)
    MAYOR_IGUAL_QUE reduce using rule 43 (d -> d MENOR_QUE e .)
    TRIPLE_IGUAL    reduce using rule 43 (d -> d MENOR_QUE e .)
    AND             reduce using rule 43 (d -> d MENOR_QUE e .)
    OR              reduce using rule 43 (d -> d MENOR_QUE e .)
    SEMI_COLON      reduce using rule 43 (d -> d MENOR_QUE e .)
    R_PAREN         reduce using rule 43 (d -> d MENOR_QUE e .)
    COMA            reduce using rule 43 (d -> d MENOR_QUE e .)
    MAS             shift and go to state 76
    MENOS           shift and go to state 77


state 96

    (44) d -> d MENOR_IGUAL_QUE e .
    (49) e -> e . MAS f
    (50) e -> e . MENOS f

    DISTINTO_QUE    reduce using rule 44 (d -> d MENOR_IGUAL_QUE e .)
    MENOR_QUE       reduce using rule 44 (d -> d MENOR_IGUAL_QUE e .)
    MENOR_IGUAL_QUE reduce using rule 44 (d -> d MENOR_IGUAL_QUE e .)
    MAYOR_QUE       reduce using rule 44 (d -> d MENOR_IGUAL_QUE e .)
    MAYOR_IGUAL_QUE reduce using rule 44 (d -> d MENOR_IGUAL_QUE e .)
    TRIPLE_IGUAL    reduce using rule 44 (d -> d MENOR_IGUAL_QUE e .)
    AND             reduce using rule 44 (d -> d MENOR_IGUAL_QUE e .)
    OR              reduce using rule 44 (d -> d MENOR_IGUAL_QUE e .)
    SEMI_COLON      reduce using rule 44 (d -> d MENOR_IGUAL_QUE e .)
    R_PAREN         reduce using rule 44 (d -> d MENOR_IGUAL_QUE e .)
    COMA            reduce using rule 44 (d -> d MENOR_IGUAL_QUE e .)
    MAS             shift and go to state 76
    MENOS           shift and go to state 77


state 97

    (45) d -> d MAYOR_QUE e .
    (49) e -> e . MAS f
    (50) e -> e . MENOS f

    DISTINTO_QUE    reduce using rule 45 (d -> d MAYOR_QUE e .)
    MENOR_QUE       reduce using rule 45 (d -> d MAYOR_QUE e .)
    MENOR_IGUAL_QUE reduce using rule 45 (d -> d MAYOR_QUE e .)
    MAYOR_QUE       reduce using rule 45 (d -> d MAYOR_QUE e .)
    MAYOR_IGUAL_QUE reduce using rule 45 (d -> d MAYOR_QUE e .)
    TRIPLE_IGUAL    reduce using rule 45 (d -> d MAYOR_QUE e .)
    AND             reduce using rule 45 (d -> d MAYOR_QUE e .)
    OR              reduce using rule 45 (d -> d MAYOR_QUE e .)
    SEMI_COLON      reduce using rule 45 (d -> d MAYOR_QUE e .)
    R_PAREN         reduce using rule 45 (d -> d MAYOR_QUE e .)
    COMA            reduce using rule 45 (d -> d MAYOR_QUE e .)
    MAS             shift and go to state 76
    MENOS           shift and go to state 77


state 98

    (46) d -> d MAYOR_IGUAL_QUE e .
    (49) e -> e . MAS f
    (50) e -> e . MENOS f

    DISTINTO_QUE    reduce using rule 46 (d -> d MAYOR_IGUAL_QUE e .)
    MENOR_QUE       reduce using rule 46 (d -> d MAYOR_IGUAL_QUE e .)
    MENOR_IGUAL_QUE reduce using rule 46 (d -> d MAYOR_IGUAL_QUE e .)
    MAYOR_QUE       reduce using rule 46 (d -> d MAYOR_IGUAL_QUE e .)
    MAYOR_IGUAL_QUE reduce using rule 46 (d -> d MAYOR_IGUAL_QUE e .)
    TRIPLE_IGUAL    reduce using rule 46 (d -> d MAYOR_IGUAL_QUE e .)
    AND             reduce using rule 46 (d -> d MAYOR_IGUAL_QUE e .)
    OR              reduce using rule 46 (d -> d MAYOR_IGUAL_QUE e .)
    SEMI_COLON      reduce using rule 46 (d -> d MAYOR_IGUAL_QUE e .)
    R_PAREN         reduce using rule 46 (d -> d MAYOR_IGUAL_QUE e .)
    COMA            reduce using rule 46 (d -> d MAYOR_IGUAL_QUE e .)
    MAS             shift and go to state 76
    MENOS           shift and go to state 77


state 99

    (47) d -> d TRIPLE_IGUAL e .
    (49) e -> e . MAS f
    (50) e -> e . MENOS f

    DISTINTO_QUE    reduce using rule 47 (d -> d TRIPLE_IGUAL e .)
    MENOR_QUE       reduce using rule 47 (d -> d TRIPLE_IGUAL e .)
    MENOR_IGUAL_QUE reduce using rule 47 (d -> d TRIPLE_IGUAL e .)
    MAYOR_QUE       reduce using rule 47 (d -> d TRIPLE_IGUAL e .)
    MAYOR_IGUAL_QUE reduce using rule 47 (d -> d TRIPLE_IGUAL e .)
    TRIPLE_IGUAL    reduce using rule 47 (d -> d TRIPLE_IGUAL e .)
    AND             reduce using rule 47 (d -> d TRIPLE_IGUAL e .)
    OR              reduce using rule 47 (d -> d TRIPLE_IGUAL e .)
    SEMI_COLON      reduce using rule 47 (d -> d TRIPLE_IGUAL e .)
    R_PAREN         reduce using rule 47 (d -> d TRIPLE_IGUAL e .)
    COMA            reduce using rule 47 (d -> d TRIPLE_IGUAL e .)
    MAS             shift and go to state 76
    MENOS           shift and go to state 77


state 100

    (49) e -> e MAS f .
    (52) f -> f . TIMES g
    (53) f -> f . DIVIDE g
    (54) f -> f . MOD g
    (55) f -> f . POTENCIA g

    MAS             reduce using rule 49 (e -> e MAS f .)
    MENOS           reduce using rule 49 (e -> e MAS f .)
    DISTINTO_QUE    reduce using rule 49 (e -> e MAS f .)
    MENOR_QUE       reduce using rule 49 (e -> e MAS f .)
    MENOR_IGUAL_QUE reduce using rule 49 (e -> e MAS f .)
    MAYOR_QUE       reduce using rule 49 (e -> e MAS f .)
    MAYOR_IGUAL_QUE reduce using rule 49 (e -> e MAS f .)
    TRIPLE_IGUAL    reduce using rule 49 (e -> e MAS f .)
    AND             reduce using rule 49 (e -> e MAS f .)
    OR              reduce using rule 49 (e -> e MAS f .)
    SEMI_COLON      reduce using rule 49 (e -> e MAS f .)
    R_PAREN         reduce using rule 49 (e -> e MAS f .)
    COMA            reduce using rule 49 (e -> e MAS f .)
    TIMES           shift and go to state 78
    DIVIDE          shift and go to state 79
    MOD             shift and go to state 80
    POTENCIA        shift and go to state 81


state 101

    (50) e -> e MENOS f .
    (52) f -> f . TIMES g
    (53) f -> f . DIVIDE g
    (54) f -> f . MOD g
    (55) f -> f . POTENCIA g

    MAS             reduce using rule 50 (e -> e MENOS f .)
    MENOS           reduce using rule 50 (e -> e MENOS f .)
    DISTINTO_QUE    reduce using rule 50 (e -> e MENOS f .)
    MENOR_QUE       reduce using rule 50 (e -> e MENOS f .)
    MENOR_IGUAL_QUE reduce using rule 50 (e -> e MENOS f .)
    MAYOR_QUE       reduce using rule 50 (e -> e MENOS f .)
    MAYOR_IGUAL_QUE reduce using rule 50 (e -> e MENOS f .)
    TRIPLE_IGUAL    reduce using rule 50 (e -> e MENOS f .)
    AND             reduce using rule 50 (e -> e MENOS f .)
    OR              reduce using rule 50 (e -> e MENOS f .)
    SEMI_COLON      reduce using rule 50 (e -> e MENOS f .)
    R_PAREN         reduce using rule 50 (e -> e MENOS f .)
    COMA            reduce using rule 50 (e -> e MENOS f .)
    TIMES           shift and go to state 78
    DIVIDE          shift and go to state 79
    MOD             shift and go to state 80
    POTENCIA        shift and go to state 81


state 102

    (52) f -> f TIMES g .

    TIMES           reduce using rule 52 (f -> f TIMES g .)
    DIVIDE          reduce using rule 52 (f -> f TIMES g .)
    MOD             reduce using rule 52 (f -> f TIMES g .)
    POTENCIA        reduce using rule 52 (f -> f TIMES g .)
    MAS             reduce using rule 52 (f -> f TIMES g .)
    MENOS           reduce using rule 52 (f -> f TIMES g .)
    DISTINTO_QUE    reduce using rule 52 (f -> f TIMES g .)
    MENOR_QUE       reduce using rule 52 (f -> f TIMES g .)
    MENOR_IGUAL_QUE reduce using rule 52 (f -> f TIMES g .)
    MAYOR_QUE       reduce using rule 52 (f -> f TIMES g .)
    MAYOR_IGUAL_QUE reduce using rule 52 (f -> f TIMES g .)
    TRIPLE_IGUAL    reduce using rule 52 (f -> f TIMES g .)
    AND             reduce using rule 52 (f -> f TIMES g .)
    OR              reduce using rule 52 (f -> f TIMES g .)
    SEMI_COLON      reduce using rule 52 (f -> f TIMES g .)
    R_PAREN         reduce using rule 52 (f -> f TIMES g .)
    COMA            reduce using rule 52 (f -> f TIMES g .)


state 103

    (53) f -> f DIVIDE g .

    TIMES           reduce using rule 53 (f -> f DIVIDE g .)
    DIVIDE          reduce using rule 53 (f -> f DIVIDE g .)
    MOD             reduce using rule 53 (f -> f DIVIDE g .)
    POTENCIA        reduce using rule 53 (f -> f DIVIDE g .)
    MAS             reduce using rule 53 (f -> f DIVIDE g .)
    MENOS           reduce using rule 53 (f -> f DIVIDE g .)
    DISTINTO_QUE    reduce using rule 53 (f -> f DIVIDE g .)
    MENOR_QUE       reduce using rule 53 (f -> f DIVIDE g .)
    MENOR_IGUAL_QUE reduce using rule 53 (f -> f DIVIDE g .)
    MAYOR_QUE       reduce using rule 53 (f -> f DIVIDE g .)
    MAYOR_IGUAL_QUE reduce using rule 53 (f -> f DIVIDE g .)
    TRIPLE_IGUAL    reduce using rule 53 (f -> f DIVIDE g .)
    AND             reduce using rule 53 (f -> f DIVIDE g .)
    OR              reduce using rule 53 (f -> f DIVIDE g .)
    SEMI_COLON      reduce using rule 53 (f -> f DIVIDE g .)
    R_PAREN         reduce using rule 53 (f -> f DIVIDE g .)
    COMA            reduce using rule 53 (f -> f DIVIDE g .)


state 104

    (54) f -> f MOD g .

    TIMES           reduce using rule 54 (f -> f MOD g .)
    DIVIDE          reduce using rule 54 (f -> f MOD g .)
    MOD             reduce using rule 54 (f -> f MOD g .)
    POTENCIA        reduce using rule 54 (f -> f MOD g .)
    MAS             reduce using rule 54 (f -> f MOD g .)
    MENOS           reduce using rule 54 (f -> f MOD g .)
    DISTINTO_QUE    reduce using rule 54 (f -> f MOD g .)
    MENOR_QUE       reduce using rule 54 (f -> f MOD g .)
    MENOR_IGUAL_QUE reduce using rule 54 (f -> f MOD g .)
    MAYOR_QUE       reduce using rule 54 (f -> f MOD g .)
    MAYOR_IGUAL_QUE reduce using rule 54 (f -> f MOD g .)
    TRIPLE_IGUAL    reduce using rule 54 (f -> f MOD g .)
    AND             reduce using rule 54 (f -> f MOD g .)
    OR              reduce using rule 54 (f -> f MOD g .)
    SEMI_COLON      reduce using rule 54 (f -> f MOD g .)
    R_PAREN         reduce using rule 54 (f -> f MOD g .)
    COMA            reduce using rule 54 (f -> f MOD g .)


state 105

    (55) f -> f POTENCIA g .

    TIMES           reduce using rule 55 (f -> f POTENCIA g .)
    DIVIDE          reduce using rule 55 (f -> f POTENCIA g .)
    MOD             reduce using rule 55 (f -> f POTENCIA g .)
    POTENCIA        reduce using rule 55 (f -> f POTENCIA g .)
    MAS             reduce using rule 55 (f -> f POTENCIA g .)
    MENOS           reduce using rule 55 (f -> f POTENCIA g .)
    DISTINTO_QUE    reduce using rule 55 (f -> f POTENCIA g .)
    MENOR_QUE       reduce using rule 55 (f -> f POTENCIA g .)
    MENOR_IGUAL_QUE reduce using rule 55 (f -> f POTENCIA g .)
    MAYOR_QUE       reduce using rule 55 (f -> f POTENCIA g .)
    MAYOR_IGUAL_QUE reduce using rule 55 (f -> f POTENCIA g .)
    TRIPLE_IGUAL    reduce using rule 55 (f -> f POTENCIA g .)
    AND             reduce using rule 55 (f -> f POTENCIA g .)
    OR              reduce using rule 55 (f -> f POTENCIA g .)
    SEMI_COLON      reduce using rule 55 (f -> f POTENCIA g .)
    R_PAREN         reduce using rule 55 (f -> f POTENCIA g .)
    COMA            reduce using rule 55 (f -> f POTENCIA g .)


state 106

    (61) g -> L_PAREN a R_PAREN .

    TIMES           reduce using rule 61 (g -> L_PAREN a R_PAREN .)
    DIVIDE          reduce using rule 61 (g -> L_PAREN a R_PAREN .)
    MOD             reduce using rule 61 (g -> L_PAREN a R_PAREN .)
    POTENCIA        reduce using rule 61 (g -> L_PAREN a R_PAREN .)
    MAS             reduce using rule 61 (g -> L_PAREN a R_PAREN .)
    MENOS           reduce using rule 61 (g -> L_PAREN a R_PAREN .)
    DISTINTO_QUE    reduce using rule 61 (g -> L_PAREN a R_PAREN .)
    MENOR_QUE       reduce using rule 61 (g -> L_PAREN a R_PAREN .)
    MENOR_IGUAL_QUE reduce using rule 61 (g -> L_PAREN a R_PAREN .)
    MAYOR_QUE       reduce using rule 61 (g -> L_PAREN a R_PAREN .)
    MAYOR_IGUAL_QUE reduce using rule 61 (g -> L_PAREN a R_PAREN .)
    TRIPLE_IGUAL    reduce using rule 61 (g -> L_PAREN a R_PAREN .)
    AND             reduce using rule 61 (g -> L_PAREN a R_PAREN .)
    OR              reduce using rule 61 (g -> L_PAREN a R_PAREN .)
    SEMI_COLON      reduce using rule 61 (g -> L_PAREN a R_PAREN .)
    R_PAREN         reduce using rule 61 (g -> L_PAREN a R_PAREN .)
    COMA            reduce using rule 61 (g -> L_PAREN a R_PAREN .)


state 107

    (23) if_pro -> IF L_PAREN a R_PAREN L_LLAVE . instrucciones R_LLAVE else_pro
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . console_pro SEMI_COLON
    (5) instruccion -> . declaration_instruction SEMI_COLON
    (6) instruccion -> . assig_pro SEMI_COLON
    (7) instruccion -> . if_pro
    (8) instruccion -> . while_pro
    (9) instruccion -> . for_pro
    (10) instruccion -> . for_each_pro
    (11) instruccion -> . sumadores SEMI_COLON
    (33) console_pro -> . CONSOLE PUNTO LOG L_PAREN expresion R_PAREN
    (12) declaration_instruction -> . LET declaracion_list
    (22) assig_pro -> . LITERAL IGUAL a
    (23) if_pro -> . IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro
    (27) while_pro -> . WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE
    (28) for_pro -> . FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (29) for_pro -> . FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (30) for_each_pro -> . FOR L_PAREN for_each_dec R_PAREN L_LLAVE instrucciones R_LLAVE
    (62) sumadores -> . LITERAL MAS MAS
    (63) sumadores -> . LITERAL MENOS MENOS

    CONSOLE         shift and go to state 12
    LET             shift and go to state 13
    LITERAL         shift and go to state 14
    IF              shift and go to state 15
    WHILE           shift and go to state 16
    FOR             shift and go to state 17

    instrucciones                  shift and go to state 117
    instruccion                    shift and go to state 3
    console_pro                    shift and go to state 4
    declaration_instruction        shift and go to state 5
    assig_pro                      shift and go to state 6
    if_pro                         shift and go to state 7
    while_pro                      shift and go to state 8
    for_pro                        shift and go to state 9
    for_each_pro                   shift and go to state 10
    sumadores                      shift and go to state 11

state 108

    (27) while_pro -> WHILE L_PAREN a R_PAREN L_LLAVE . instrucciones R_LLAVE
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . console_pro SEMI_COLON
    (5) instruccion -> . declaration_instruction SEMI_COLON
    (6) instruccion -> . assig_pro SEMI_COLON
    (7) instruccion -> . if_pro
    (8) instruccion -> . while_pro
    (9) instruccion -> . for_pro
    (10) instruccion -> . for_each_pro
    (11) instruccion -> . sumadores SEMI_COLON
    (33) console_pro -> . CONSOLE PUNTO LOG L_PAREN expresion R_PAREN
    (12) declaration_instruction -> . LET declaracion_list
    (22) assig_pro -> . LITERAL IGUAL a
    (23) if_pro -> . IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro
    (27) while_pro -> . WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE
    (28) for_pro -> . FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (29) for_pro -> . FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (30) for_each_pro -> . FOR L_PAREN for_each_dec R_PAREN L_LLAVE instrucciones R_LLAVE
    (62) sumadores -> . LITERAL MAS MAS
    (63) sumadores -> . LITERAL MENOS MENOS

    CONSOLE         shift and go to state 12
    LET             shift and go to state 13
    LITERAL         shift and go to state 14
    IF              shift and go to state 15
    WHILE           shift and go to state 16
    FOR             shift and go to state 17

    instrucciones                  shift and go to state 118
    instruccion                    shift and go to state 3
    console_pro                    shift and go to state 4
    declaration_instruction        shift and go to state 5
    assig_pro                      shift and go to state 6
    if_pro                         shift and go to state 7
    while_pro                      shift and go to state 8
    for_pro                        shift and go to state 9
    for_each_pro                   shift and go to state 10
    sumadores                      shift and go to state 11

state 109

    (28) for_pro -> FOR L_PAREN declaration_instruction SEMI_COLON a . SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (36) a -> a . OR b

    SEMI_COLON      shift and go to state 119
    OR              shift and go to state 67


state 110

    (29) for_pro -> FOR L_PAREN assig_pro SEMI_COLON a . SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (36) a -> a . OR b

    SEMI_COLON      shift and go to state 120
    OR              shift and go to state 67


state 111

    (30) for_each_pro -> FOR L_PAREN for_each_dec R_PAREN L_LLAVE . instrucciones R_LLAVE
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . console_pro SEMI_COLON
    (5) instruccion -> . declaration_instruction SEMI_COLON
    (6) instruccion -> . assig_pro SEMI_COLON
    (7) instruccion -> . if_pro
    (8) instruccion -> . while_pro
    (9) instruccion -> . for_pro
    (10) instruccion -> . for_each_pro
    (11) instruccion -> . sumadores SEMI_COLON
    (33) console_pro -> . CONSOLE PUNTO LOG L_PAREN expresion R_PAREN
    (12) declaration_instruction -> . LET declaracion_list
    (22) assig_pro -> . LITERAL IGUAL a
    (23) if_pro -> . IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro
    (27) while_pro -> . WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE
    (28) for_pro -> . FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (29) for_pro -> . FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (30) for_each_pro -> . FOR L_PAREN for_each_dec R_PAREN L_LLAVE instrucciones R_LLAVE
    (62) sumadores -> . LITERAL MAS MAS
    (63) sumadores -> . LITERAL MENOS MENOS

    CONSOLE         shift and go to state 12
    LET             shift and go to state 13
    LITERAL         shift and go to state 14
    IF              shift and go to state 15
    WHILE           shift and go to state 16
    FOR             shift and go to state 17

    instrucciones                  shift and go to state 121
    instruccion                    shift and go to state 3
    console_pro                    shift and go to state 4
    declaration_instruction        shift and go to state 5
    assig_pro                      shift and go to state 6
    if_pro                         shift and go to state 7
    while_pro                      shift and go to state 8
    for_pro                        shift and go to state 9
    for_each_pro                   shift and go to state 10
    sumadores                      shift and go to state 11

state 112

    (31) for_each_dec -> LET LITERAL OF . a
    (36) a -> . a OR b
    (37) a -> . b
    (38) b -> . b AND c
    (39) b -> . c
    (40) c -> . NOT d
    (41) c -> . d
    (42) d -> . d DISTINTO_QUE e
    (43) d -> . d MENOR_QUE e
    (44) d -> . d MENOR_IGUAL_QUE e
    (45) d -> . d MAYOR_QUE e
    (46) d -> . d MAYOR_IGUAL_QUE e
    (47) d -> . d TRIPLE_IGUAL e
    (48) d -> . e
    (49) e -> . e MAS f
    (50) e -> . e MENOS f
    (51) e -> . f
    (52) f -> . f TIMES g
    (53) f -> . f DIVIDE g
    (54) f -> . f MOD g
    (55) f -> . f POTENCIA g
    (56) f -> . g
    (57) g -> . ENTERO
    (58) g -> . DECIMAL
    (59) g -> . CADENA
    (60) g -> . LITERAL
    (61) g -> . L_PAREN a R_PAREN

    NOT             shift and go to state 41
    ENTERO          shift and go to state 46
    DECIMAL         shift and go to state 47
    CADENA          shift and go to state 48
    LITERAL         shift and go to state 37
    L_PAREN         shift and go to state 49

    a                              shift and go to state 122
    b                              shift and go to state 39
    c                              shift and go to state 40
    d                              shift and go to state 42
    e                              shift and go to state 43
    f                              shift and go to state 44
    g                              shift and go to state 45

state 113

    (32) for_each_dec -> LET LITERAL COLON . type OF a
    (15) assignacion_instruction -> LITERAL COLON . type IGUAL a
    (16) assignacion_instruction -> LITERAL COLON . type
    (18) type -> . NUMBER
    (19) type -> . STRING
    (20) type -> . BOOLEAN
    (21) type -> . ANY

    NUMBER          shift and go to state 62
    STRING          shift and go to state 63
    BOOLEAN         shift and go to state 64
    ANY             shift and go to state 65

    type                           shift and go to state 123

state 114

    (33) console_pro -> CONSOLE PUNTO LOG L_PAREN expresion R_PAREN .

    SEMI_COLON      reduce using rule 33 (console_pro -> CONSOLE PUNTO LOG L_PAREN expresion R_PAREN .)


state 115

    (34) expresion -> expresion COMA . a
    (36) a -> . a OR b
    (37) a -> . b
    (38) b -> . b AND c
    (39) b -> . c
    (40) c -> . NOT d
    (41) c -> . d
    (42) d -> . d DISTINTO_QUE e
    (43) d -> . d MENOR_QUE e
    (44) d -> . d MENOR_IGUAL_QUE e
    (45) d -> . d MAYOR_QUE e
    (46) d -> . d MAYOR_IGUAL_QUE e
    (47) d -> . d TRIPLE_IGUAL e
    (48) d -> . e
    (49) e -> . e MAS f
    (50) e -> . e MENOS f
    (51) e -> . f
    (52) f -> . f TIMES g
    (53) f -> . f DIVIDE g
    (54) f -> . f MOD g
    (55) f -> . f POTENCIA g
    (56) f -> . g
    (57) g -> . ENTERO
    (58) g -> . DECIMAL
    (59) g -> . CADENA
    (60) g -> . LITERAL
    (61) g -> . L_PAREN a R_PAREN

    NOT             shift and go to state 41
    ENTERO          shift and go to state 46
    DECIMAL         shift and go to state 47
    CADENA          shift and go to state 48
    LITERAL         shift and go to state 37
    L_PAREN         shift and go to state 49

    a                              shift and go to state 124
    b                              shift and go to state 39
    c                              shift and go to state 40
    d                              shift and go to state 42
    e                              shift and go to state 43
    f                              shift and go to state 44
    g                              shift and go to state 45

state 116

    (15) assignacion_instruction -> LITERAL COLON type IGUAL a .
    (36) a -> a . OR b

    COMA            reduce using rule 15 (assignacion_instruction -> LITERAL COLON type IGUAL a .)
    SEMI_COLON      reduce using rule 15 (assignacion_instruction -> LITERAL COLON type IGUAL a .)
    OR              shift and go to state 67


state 117

    (23) if_pro -> IF L_PAREN a R_PAREN L_LLAVE instrucciones . R_LLAVE else_pro
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . console_pro SEMI_COLON
    (5) instruccion -> . declaration_instruction SEMI_COLON
    (6) instruccion -> . assig_pro SEMI_COLON
    (7) instruccion -> . if_pro
    (8) instruccion -> . while_pro
    (9) instruccion -> . for_pro
    (10) instruccion -> . for_each_pro
    (11) instruccion -> . sumadores SEMI_COLON
    (33) console_pro -> . CONSOLE PUNTO LOG L_PAREN expresion R_PAREN
    (12) declaration_instruction -> . LET declaracion_list
    (22) assig_pro -> . LITERAL IGUAL a
    (23) if_pro -> . IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro
    (27) while_pro -> . WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE
    (28) for_pro -> . FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (29) for_pro -> . FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (30) for_each_pro -> . FOR L_PAREN for_each_dec R_PAREN L_LLAVE instrucciones R_LLAVE
    (62) sumadores -> . LITERAL MAS MAS
    (63) sumadores -> . LITERAL MENOS MENOS

    R_LLAVE         shift and go to state 125
    CONSOLE         shift and go to state 12
    LET             shift and go to state 13
    LITERAL         shift and go to state 14
    IF              shift and go to state 15
    WHILE           shift and go to state 16
    FOR             shift and go to state 17

    instruccion                    shift and go to state 18
    console_pro                    shift and go to state 4
    declaration_instruction        shift and go to state 5
    assig_pro                      shift and go to state 6
    if_pro                         shift and go to state 7
    while_pro                      shift and go to state 8
    for_pro                        shift and go to state 9
    for_each_pro                   shift and go to state 10
    sumadores                      shift and go to state 11

state 118

    (27) while_pro -> WHILE L_PAREN a R_PAREN L_LLAVE instrucciones . R_LLAVE
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . console_pro SEMI_COLON
    (5) instruccion -> . declaration_instruction SEMI_COLON
    (6) instruccion -> . assig_pro SEMI_COLON
    (7) instruccion -> . if_pro
    (8) instruccion -> . while_pro
    (9) instruccion -> . for_pro
    (10) instruccion -> . for_each_pro
    (11) instruccion -> . sumadores SEMI_COLON
    (33) console_pro -> . CONSOLE PUNTO LOG L_PAREN expresion R_PAREN
    (12) declaration_instruction -> . LET declaracion_list
    (22) assig_pro -> . LITERAL IGUAL a
    (23) if_pro -> . IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro
    (27) while_pro -> . WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE
    (28) for_pro -> . FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (29) for_pro -> . FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (30) for_each_pro -> . FOR L_PAREN for_each_dec R_PAREN L_LLAVE instrucciones R_LLAVE
    (62) sumadores -> . LITERAL MAS MAS
    (63) sumadores -> . LITERAL MENOS MENOS

    R_LLAVE         shift and go to state 126
    CONSOLE         shift and go to state 12
    LET             shift and go to state 13
    LITERAL         shift and go to state 14
    IF              shift and go to state 15
    WHILE           shift and go to state 16
    FOR             shift and go to state 17

    instruccion                    shift and go to state 18
    console_pro                    shift and go to state 4
    declaration_instruction        shift and go to state 5
    assig_pro                      shift and go to state 6
    if_pro                         shift and go to state 7
    while_pro                      shift and go to state 8
    for_pro                        shift and go to state 9
    for_each_pro                   shift and go to state 10
    sumadores                      shift and go to state 11

state 119

    (28) for_pro -> FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON . assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (22) assig_pro -> . LITERAL IGUAL a

    LITERAL         shift and go to state 58

    assig_pro                      shift and go to state 127

state 120

    (29) for_pro -> FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON . assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (22) assig_pro -> . LITERAL IGUAL a

    LITERAL         shift and go to state 58

    assig_pro                      shift and go to state 128

state 121

    (30) for_each_pro -> FOR L_PAREN for_each_dec R_PAREN L_LLAVE instrucciones . R_LLAVE
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . console_pro SEMI_COLON
    (5) instruccion -> . declaration_instruction SEMI_COLON
    (6) instruccion -> . assig_pro SEMI_COLON
    (7) instruccion -> . if_pro
    (8) instruccion -> . while_pro
    (9) instruccion -> . for_pro
    (10) instruccion -> . for_each_pro
    (11) instruccion -> . sumadores SEMI_COLON
    (33) console_pro -> . CONSOLE PUNTO LOG L_PAREN expresion R_PAREN
    (12) declaration_instruction -> . LET declaracion_list
    (22) assig_pro -> . LITERAL IGUAL a
    (23) if_pro -> . IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro
    (27) while_pro -> . WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE
    (28) for_pro -> . FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (29) for_pro -> . FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (30) for_each_pro -> . FOR L_PAREN for_each_dec R_PAREN L_LLAVE instrucciones R_LLAVE
    (62) sumadores -> . LITERAL MAS MAS
    (63) sumadores -> . LITERAL MENOS MENOS

    R_LLAVE         shift and go to state 129
    CONSOLE         shift and go to state 12
    LET             shift and go to state 13
    LITERAL         shift and go to state 14
    IF              shift and go to state 15
    WHILE           shift and go to state 16
    FOR             shift and go to state 17

    instruccion                    shift and go to state 18
    console_pro                    shift and go to state 4
    declaration_instruction        shift and go to state 5
    assig_pro                      shift and go to state 6
    if_pro                         shift and go to state 7
    while_pro                      shift and go to state 8
    for_pro                        shift and go to state 9
    for_each_pro                   shift and go to state 10
    sumadores                      shift and go to state 11

state 122

    (31) for_each_dec -> LET LITERAL OF a .
    (36) a -> a . OR b

    R_PAREN         reduce using rule 31 (for_each_dec -> LET LITERAL OF a .)
    OR              shift and go to state 67


state 123

    (32) for_each_dec -> LET LITERAL COLON type . OF a
    (15) assignacion_instruction -> LITERAL COLON type . IGUAL a
    (16) assignacion_instruction -> LITERAL COLON type .

    OF              shift and go to state 130
    IGUAL           shift and go to state 91
    COMA            reduce using rule 16 (assignacion_instruction -> LITERAL COLON type .)
    SEMI_COLON      reduce using rule 16 (assignacion_instruction -> LITERAL COLON type .)


state 124

    (34) expresion -> expresion COMA a .
    (36) a -> a . OR b

    R_PAREN         reduce using rule 34 (expresion -> expresion COMA a .)
    COMA            reduce using rule 34 (expresion -> expresion COMA a .)
    OR              shift and go to state 67


state 125

    (23) if_pro -> IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE . else_pro
    (24) else_pro -> . ELSE IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro
    (25) else_pro -> . ELSE L_LLAVE instrucciones R_LLAVE
    (26) else_pro -> .

    ELSE            shift and go to state 132
    CONSOLE         reduce using rule 26 (else_pro -> .)
    LET             reduce using rule 26 (else_pro -> .)
    LITERAL         reduce using rule 26 (else_pro -> .)
    IF              reduce using rule 26 (else_pro -> .)
    WHILE           reduce using rule 26 (else_pro -> .)
    FOR             reduce using rule 26 (else_pro -> .)
    $end            reduce using rule 26 (else_pro -> .)
    R_LLAVE         reduce using rule 26 (else_pro -> .)

    else_pro                       shift and go to state 131

state 126

    (27) while_pro -> WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE .

    CONSOLE         reduce using rule 27 (while_pro -> WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE .)
    LET             reduce using rule 27 (while_pro -> WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE .)
    LITERAL         reduce using rule 27 (while_pro -> WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE .)
    IF              reduce using rule 27 (while_pro -> WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE .)
    WHILE           reduce using rule 27 (while_pro -> WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE .)
    FOR             reduce using rule 27 (while_pro -> WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE .)
    $end            reduce using rule 27 (while_pro -> WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE .)
    R_LLAVE         reduce using rule 27 (while_pro -> WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE .)


state 127

    (28) for_pro -> FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON assig_pro . R_PAREN L_LLAVE instrucciones R_LLAVE

    R_PAREN         shift and go to state 133


state 128

    (29) for_pro -> FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON assig_pro . R_PAREN L_LLAVE instrucciones R_LLAVE

    R_PAREN         shift and go to state 134


state 129

    (30) for_each_pro -> FOR L_PAREN for_each_dec R_PAREN L_LLAVE instrucciones R_LLAVE .

    CONSOLE         reduce using rule 30 (for_each_pro -> FOR L_PAREN for_each_dec R_PAREN L_LLAVE instrucciones R_LLAVE .)
    LET             reduce using rule 30 (for_each_pro -> FOR L_PAREN for_each_dec R_PAREN L_LLAVE instrucciones R_LLAVE .)
    LITERAL         reduce using rule 30 (for_each_pro -> FOR L_PAREN for_each_dec R_PAREN L_LLAVE instrucciones R_LLAVE .)
    IF              reduce using rule 30 (for_each_pro -> FOR L_PAREN for_each_dec R_PAREN L_LLAVE instrucciones R_LLAVE .)
    WHILE           reduce using rule 30 (for_each_pro -> FOR L_PAREN for_each_dec R_PAREN L_LLAVE instrucciones R_LLAVE .)
    FOR             reduce using rule 30 (for_each_pro -> FOR L_PAREN for_each_dec R_PAREN L_LLAVE instrucciones R_LLAVE .)
    $end            reduce using rule 30 (for_each_pro -> FOR L_PAREN for_each_dec R_PAREN L_LLAVE instrucciones R_LLAVE .)
    R_LLAVE         reduce using rule 30 (for_each_pro -> FOR L_PAREN for_each_dec R_PAREN L_LLAVE instrucciones R_LLAVE .)


state 130

    (32) for_each_dec -> LET LITERAL COLON type OF . a
    (36) a -> . a OR b
    (37) a -> . b
    (38) b -> . b AND c
    (39) b -> . c
    (40) c -> . NOT d
    (41) c -> . d
    (42) d -> . d DISTINTO_QUE e
    (43) d -> . d MENOR_QUE e
    (44) d -> . d MENOR_IGUAL_QUE e
    (45) d -> . d MAYOR_QUE e
    (46) d -> . d MAYOR_IGUAL_QUE e
    (47) d -> . d TRIPLE_IGUAL e
    (48) d -> . e
    (49) e -> . e MAS f
    (50) e -> . e MENOS f
    (51) e -> . f
    (52) f -> . f TIMES g
    (53) f -> . f DIVIDE g
    (54) f -> . f MOD g
    (55) f -> . f POTENCIA g
    (56) f -> . g
    (57) g -> . ENTERO
    (58) g -> . DECIMAL
    (59) g -> . CADENA
    (60) g -> . LITERAL
    (61) g -> . L_PAREN a R_PAREN

    NOT             shift and go to state 41
    ENTERO          shift and go to state 46
    DECIMAL         shift and go to state 47
    CADENA          shift and go to state 48
    LITERAL         shift and go to state 37
    L_PAREN         shift and go to state 49

    a                              shift and go to state 135
    b                              shift and go to state 39
    c                              shift and go to state 40
    d                              shift and go to state 42
    e                              shift and go to state 43
    f                              shift and go to state 44
    g                              shift and go to state 45

state 131

    (23) if_pro -> IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .

    CONSOLE         reduce using rule 23 (if_pro -> IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    LET             reduce using rule 23 (if_pro -> IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    LITERAL         reduce using rule 23 (if_pro -> IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    IF              reduce using rule 23 (if_pro -> IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    WHILE           reduce using rule 23 (if_pro -> IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    FOR             reduce using rule 23 (if_pro -> IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    $end            reduce using rule 23 (if_pro -> IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    R_LLAVE         reduce using rule 23 (if_pro -> IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)


state 132

    (24) else_pro -> ELSE . IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro
    (25) else_pro -> ELSE . L_LLAVE instrucciones R_LLAVE

    IF              shift and go to state 136
    L_LLAVE         shift and go to state 137


state 133

    (28) for_pro -> FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON assig_pro R_PAREN . L_LLAVE instrucciones R_LLAVE

    L_LLAVE         shift and go to state 138


state 134

    (29) for_pro -> FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON assig_pro R_PAREN . L_LLAVE instrucciones R_LLAVE

    L_LLAVE         shift and go to state 139


state 135

    (32) for_each_dec -> LET LITERAL COLON type OF a .
    (36) a -> a . OR b

    R_PAREN         reduce using rule 32 (for_each_dec -> LET LITERAL COLON type OF a .)
    OR              shift and go to state 67


state 136

    (24) else_pro -> ELSE IF . L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro

    L_PAREN         shift and go to state 140


state 137

    (25) else_pro -> ELSE L_LLAVE . instrucciones R_LLAVE
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . console_pro SEMI_COLON
    (5) instruccion -> . declaration_instruction SEMI_COLON
    (6) instruccion -> . assig_pro SEMI_COLON
    (7) instruccion -> . if_pro
    (8) instruccion -> . while_pro
    (9) instruccion -> . for_pro
    (10) instruccion -> . for_each_pro
    (11) instruccion -> . sumadores SEMI_COLON
    (33) console_pro -> . CONSOLE PUNTO LOG L_PAREN expresion R_PAREN
    (12) declaration_instruction -> . LET declaracion_list
    (22) assig_pro -> . LITERAL IGUAL a
    (23) if_pro -> . IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro
    (27) while_pro -> . WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE
    (28) for_pro -> . FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (29) for_pro -> . FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (30) for_each_pro -> . FOR L_PAREN for_each_dec R_PAREN L_LLAVE instrucciones R_LLAVE
    (62) sumadores -> . LITERAL MAS MAS
    (63) sumadores -> . LITERAL MENOS MENOS

    CONSOLE         shift and go to state 12
    LET             shift and go to state 13
    LITERAL         shift and go to state 14
    IF              shift and go to state 15
    WHILE           shift and go to state 16
    FOR             shift and go to state 17

    instrucciones                  shift and go to state 141
    instruccion                    shift and go to state 3
    console_pro                    shift and go to state 4
    declaration_instruction        shift and go to state 5
    assig_pro                      shift and go to state 6
    if_pro                         shift and go to state 7
    while_pro                      shift and go to state 8
    for_pro                        shift and go to state 9
    for_each_pro                   shift and go to state 10
    sumadores                      shift and go to state 11

state 138

    (28) for_pro -> FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE . instrucciones R_LLAVE
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . console_pro SEMI_COLON
    (5) instruccion -> . declaration_instruction SEMI_COLON
    (6) instruccion -> . assig_pro SEMI_COLON
    (7) instruccion -> . if_pro
    (8) instruccion -> . while_pro
    (9) instruccion -> . for_pro
    (10) instruccion -> . for_each_pro
    (11) instruccion -> . sumadores SEMI_COLON
    (33) console_pro -> . CONSOLE PUNTO LOG L_PAREN expresion R_PAREN
    (12) declaration_instruction -> . LET declaracion_list
    (22) assig_pro -> . LITERAL IGUAL a
    (23) if_pro -> . IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro
    (27) while_pro -> . WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE
    (28) for_pro -> . FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (29) for_pro -> . FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (30) for_each_pro -> . FOR L_PAREN for_each_dec R_PAREN L_LLAVE instrucciones R_LLAVE
    (62) sumadores -> . LITERAL MAS MAS
    (63) sumadores -> . LITERAL MENOS MENOS

    CONSOLE         shift and go to state 12
    LET             shift and go to state 13
    LITERAL         shift and go to state 14
    IF              shift and go to state 15
    WHILE           shift and go to state 16
    FOR             shift and go to state 17

    declaration_instruction        shift and go to state 5
    assig_pro                      shift and go to state 6
    instrucciones                  shift and go to state 142
    instruccion                    shift and go to state 3
    console_pro                    shift and go to state 4
    if_pro                         shift and go to state 7
    while_pro                      shift and go to state 8
    for_pro                        shift and go to state 9
    for_each_pro                   shift and go to state 10
    sumadores                      shift and go to state 11

state 139

    (29) for_pro -> FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE . instrucciones R_LLAVE
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . console_pro SEMI_COLON
    (5) instruccion -> . declaration_instruction SEMI_COLON
    (6) instruccion -> . assig_pro SEMI_COLON
    (7) instruccion -> . if_pro
    (8) instruccion -> . while_pro
    (9) instruccion -> . for_pro
    (10) instruccion -> . for_each_pro
    (11) instruccion -> . sumadores SEMI_COLON
    (33) console_pro -> . CONSOLE PUNTO LOG L_PAREN expresion R_PAREN
    (12) declaration_instruction -> . LET declaracion_list
    (22) assig_pro -> . LITERAL IGUAL a
    (23) if_pro -> . IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro
    (27) while_pro -> . WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE
    (28) for_pro -> . FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (29) for_pro -> . FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (30) for_each_pro -> . FOR L_PAREN for_each_dec R_PAREN L_LLAVE instrucciones R_LLAVE
    (62) sumadores -> . LITERAL MAS MAS
    (63) sumadores -> . LITERAL MENOS MENOS

    CONSOLE         shift and go to state 12
    LET             shift and go to state 13
    LITERAL         shift and go to state 14
    IF              shift and go to state 15
    WHILE           shift and go to state 16
    FOR             shift and go to state 17

    assig_pro                      shift and go to state 6
    instrucciones                  shift and go to state 143
    instruccion                    shift and go to state 3
    console_pro                    shift and go to state 4
    declaration_instruction        shift and go to state 5
    if_pro                         shift and go to state 7
    while_pro                      shift and go to state 8
    for_pro                        shift and go to state 9
    for_each_pro                   shift and go to state 10
    sumadores                      shift and go to state 11

state 140

    (24) else_pro -> ELSE IF L_PAREN . a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro
    (36) a -> . a OR b
    (37) a -> . b
    (38) b -> . b AND c
    (39) b -> . c
    (40) c -> . NOT d
    (41) c -> . d
    (42) d -> . d DISTINTO_QUE e
    (43) d -> . d MENOR_QUE e
    (44) d -> . d MENOR_IGUAL_QUE e
    (45) d -> . d MAYOR_QUE e
    (46) d -> . d MAYOR_IGUAL_QUE e
    (47) d -> . d TRIPLE_IGUAL e
    (48) d -> . e
    (49) e -> . e MAS f
    (50) e -> . e MENOS f
    (51) e -> . f
    (52) f -> . f TIMES g
    (53) f -> . f DIVIDE g
    (54) f -> . f MOD g
    (55) f -> . f POTENCIA g
    (56) f -> . g
    (57) g -> . ENTERO
    (58) g -> . DECIMAL
    (59) g -> . CADENA
    (60) g -> . LITERAL
    (61) g -> . L_PAREN a R_PAREN

    NOT             shift and go to state 41
    ENTERO          shift and go to state 46
    DECIMAL         shift and go to state 47
    CADENA          shift and go to state 48
    LITERAL         shift and go to state 37
    L_PAREN         shift and go to state 49

    a                              shift and go to state 144
    b                              shift and go to state 39
    c                              shift and go to state 40
    d                              shift and go to state 42
    e                              shift and go to state 43
    f                              shift and go to state 44
    g                              shift and go to state 45

state 141

    (25) else_pro -> ELSE L_LLAVE instrucciones . R_LLAVE
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . console_pro SEMI_COLON
    (5) instruccion -> . declaration_instruction SEMI_COLON
    (6) instruccion -> . assig_pro SEMI_COLON
    (7) instruccion -> . if_pro
    (8) instruccion -> . while_pro
    (9) instruccion -> . for_pro
    (10) instruccion -> . for_each_pro
    (11) instruccion -> . sumadores SEMI_COLON
    (33) console_pro -> . CONSOLE PUNTO LOG L_PAREN expresion R_PAREN
    (12) declaration_instruction -> . LET declaracion_list
    (22) assig_pro -> . LITERAL IGUAL a
    (23) if_pro -> . IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro
    (27) while_pro -> . WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE
    (28) for_pro -> . FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (29) for_pro -> . FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (30) for_each_pro -> . FOR L_PAREN for_each_dec R_PAREN L_LLAVE instrucciones R_LLAVE
    (62) sumadores -> . LITERAL MAS MAS
    (63) sumadores -> . LITERAL MENOS MENOS

    R_LLAVE         shift and go to state 145
    CONSOLE         shift and go to state 12
    LET             shift and go to state 13
    LITERAL         shift and go to state 14
    IF              shift and go to state 15
    WHILE           shift and go to state 16
    FOR             shift and go to state 17

    instruccion                    shift and go to state 18
    console_pro                    shift and go to state 4
    declaration_instruction        shift and go to state 5
    assig_pro                      shift and go to state 6
    if_pro                         shift and go to state 7
    while_pro                      shift and go to state 8
    for_pro                        shift and go to state 9
    for_each_pro                   shift and go to state 10
    sumadores                      shift and go to state 11

state 142

    (28) for_pro -> FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones . R_LLAVE
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . console_pro SEMI_COLON
    (5) instruccion -> . declaration_instruction SEMI_COLON
    (6) instruccion -> . assig_pro SEMI_COLON
    (7) instruccion -> . if_pro
    (8) instruccion -> . while_pro
    (9) instruccion -> . for_pro
    (10) instruccion -> . for_each_pro
    (11) instruccion -> . sumadores SEMI_COLON
    (33) console_pro -> . CONSOLE PUNTO LOG L_PAREN expresion R_PAREN
    (12) declaration_instruction -> . LET declaracion_list
    (22) assig_pro -> . LITERAL IGUAL a
    (23) if_pro -> . IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro
    (27) while_pro -> . WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE
    (28) for_pro -> . FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (29) for_pro -> . FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (30) for_each_pro -> . FOR L_PAREN for_each_dec R_PAREN L_LLAVE instrucciones R_LLAVE
    (62) sumadores -> . LITERAL MAS MAS
    (63) sumadores -> . LITERAL MENOS MENOS

    R_LLAVE         shift and go to state 146
    CONSOLE         shift and go to state 12
    LET             shift and go to state 13
    LITERAL         shift and go to state 14
    IF              shift and go to state 15
    WHILE           shift and go to state 16
    FOR             shift and go to state 17

    declaration_instruction        shift and go to state 5
    assig_pro                      shift and go to state 6
    instruccion                    shift and go to state 18
    console_pro                    shift and go to state 4
    if_pro                         shift and go to state 7
    while_pro                      shift and go to state 8
    for_pro                        shift and go to state 9
    for_each_pro                   shift and go to state 10
    sumadores                      shift and go to state 11

state 143

    (29) for_pro -> FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones . R_LLAVE
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . console_pro SEMI_COLON
    (5) instruccion -> . declaration_instruction SEMI_COLON
    (6) instruccion -> . assig_pro SEMI_COLON
    (7) instruccion -> . if_pro
    (8) instruccion -> . while_pro
    (9) instruccion -> . for_pro
    (10) instruccion -> . for_each_pro
    (11) instruccion -> . sumadores SEMI_COLON
    (33) console_pro -> . CONSOLE PUNTO LOG L_PAREN expresion R_PAREN
    (12) declaration_instruction -> . LET declaracion_list
    (22) assig_pro -> . LITERAL IGUAL a
    (23) if_pro -> . IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro
    (27) while_pro -> . WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE
    (28) for_pro -> . FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (29) for_pro -> . FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (30) for_each_pro -> . FOR L_PAREN for_each_dec R_PAREN L_LLAVE instrucciones R_LLAVE
    (62) sumadores -> . LITERAL MAS MAS
    (63) sumadores -> . LITERAL MENOS MENOS

    R_LLAVE         shift and go to state 147
    CONSOLE         shift and go to state 12
    LET             shift and go to state 13
    LITERAL         shift and go to state 14
    IF              shift and go to state 15
    WHILE           shift and go to state 16
    FOR             shift and go to state 17

    assig_pro                      shift and go to state 6
    instruccion                    shift and go to state 18
    console_pro                    shift and go to state 4
    declaration_instruction        shift and go to state 5
    if_pro                         shift and go to state 7
    while_pro                      shift and go to state 8
    for_pro                        shift and go to state 9
    for_each_pro                   shift and go to state 10
    sumadores                      shift and go to state 11

state 144

    (24) else_pro -> ELSE IF L_PAREN a . R_PAREN L_LLAVE instrucciones R_LLAVE else_pro
    (36) a -> a . OR b

    R_PAREN         shift and go to state 148
    OR              shift and go to state 67


state 145

    (25) else_pro -> ELSE L_LLAVE instrucciones R_LLAVE .

    CONSOLE         reduce using rule 25 (else_pro -> ELSE L_LLAVE instrucciones R_LLAVE .)
    LET             reduce using rule 25 (else_pro -> ELSE L_LLAVE instrucciones R_LLAVE .)
    LITERAL         reduce using rule 25 (else_pro -> ELSE L_LLAVE instrucciones R_LLAVE .)
    IF              reduce using rule 25 (else_pro -> ELSE L_LLAVE instrucciones R_LLAVE .)
    WHILE           reduce using rule 25 (else_pro -> ELSE L_LLAVE instrucciones R_LLAVE .)
    FOR             reduce using rule 25 (else_pro -> ELSE L_LLAVE instrucciones R_LLAVE .)
    $end            reduce using rule 25 (else_pro -> ELSE L_LLAVE instrucciones R_LLAVE .)
    R_LLAVE         reduce using rule 25 (else_pro -> ELSE L_LLAVE instrucciones R_LLAVE .)


state 146

    (28) for_pro -> FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE .

    CONSOLE         reduce using rule 28 (for_pro -> FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    LET             reduce using rule 28 (for_pro -> FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    LITERAL         reduce using rule 28 (for_pro -> FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    IF              reduce using rule 28 (for_pro -> FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    WHILE           reduce using rule 28 (for_pro -> FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    FOR             reduce using rule 28 (for_pro -> FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    $end            reduce using rule 28 (for_pro -> FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    R_LLAVE         reduce using rule 28 (for_pro -> FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)


state 147

    (29) for_pro -> FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE .

    CONSOLE         reduce using rule 29 (for_pro -> FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    LET             reduce using rule 29 (for_pro -> FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    LITERAL         reduce using rule 29 (for_pro -> FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    IF              reduce using rule 29 (for_pro -> FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    WHILE           reduce using rule 29 (for_pro -> FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    FOR             reduce using rule 29 (for_pro -> FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    $end            reduce using rule 29 (for_pro -> FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)
    R_LLAVE         reduce using rule 29 (for_pro -> FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE .)


state 148

    (24) else_pro -> ELSE IF L_PAREN a R_PAREN . L_LLAVE instrucciones R_LLAVE else_pro

    L_LLAVE         shift and go to state 149


state 149

    (24) else_pro -> ELSE IF L_PAREN a R_PAREN L_LLAVE . instrucciones R_LLAVE else_pro
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . console_pro SEMI_COLON
    (5) instruccion -> . declaration_instruction SEMI_COLON
    (6) instruccion -> . assig_pro SEMI_COLON
    (7) instruccion -> . if_pro
    (8) instruccion -> . while_pro
    (9) instruccion -> . for_pro
    (10) instruccion -> . for_each_pro
    (11) instruccion -> . sumadores SEMI_COLON
    (33) console_pro -> . CONSOLE PUNTO LOG L_PAREN expresion R_PAREN
    (12) declaration_instruction -> . LET declaracion_list
    (22) assig_pro -> . LITERAL IGUAL a
    (23) if_pro -> . IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro
    (27) while_pro -> . WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE
    (28) for_pro -> . FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (29) for_pro -> . FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (30) for_each_pro -> . FOR L_PAREN for_each_dec R_PAREN L_LLAVE instrucciones R_LLAVE
    (62) sumadores -> . LITERAL MAS MAS
    (63) sumadores -> . LITERAL MENOS MENOS

    CONSOLE         shift and go to state 12
    LET             shift and go to state 13
    LITERAL         shift and go to state 14
    IF              shift and go to state 15
    WHILE           shift and go to state 16
    FOR             shift and go to state 17

    instrucciones                  shift and go to state 150
    instruccion                    shift and go to state 3
    console_pro                    shift and go to state 4
    declaration_instruction        shift and go to state 5
    assig_pro                      shift and go to state 6
    if_pro                         shift and go to state 7
    while_pro                      shift and go to state 8
    for_pro                        shift and go to state 9
    for_each_pro                   shift and go to state 10
    sumadores                      shift and go to state 11

state 150

    (24) else_pro -> ELSE IF L_PAREN a R_PAREN L_LLAVE instrucciones . R_LLAVE else_pro
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . console_pro SEMI_COLON
    (5) instruccion -> . declaration_instruction SEMI_COLON
    (6) instruccion -> . assig_pro SEMI_COLON
    (7) instruccion -> . if_pro
    (8) instruccion -> . while_pro
    (9) instruccion -> . for_pro
    (10) instruccion -> . for_each_pro
    (11) instruccion -> . sumadores SEMI_COLON
    (33) console_pro -> . CONSOLE PUNTO LOG L_PAREN expresion R_PAREN
    (12) declaration_instruction -> . LET declaracion_list
    (22) assig_pro -> . LITERAL IGUAL a
    (23) if_pro -> . IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro
    (27) while_pro -> . WHILE L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE
    (28) for_pro -> . FOR L_PAREN declaration_instruction SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (29) for_pro -> . FOR L_PAREN assig_pro SEMI_COLON a SEMI_COLON assig_pro R_PAREN L_LLAVE instrucciones R_LLAVE
    (30) for_each_pro -> . FOR L_PAREN for_each_dec R_PAREN L_LLAVE instrucciones R_LLAVE
    (62) sumadores -> . LITERAL MAS MAS
    (63) sumadores -> . LITERAL MENOS MENOS

    R_LLAVE         shift and go to state 151
    CONSOLE         shift and go to state 12
    LET             shift and go to state 13
    LITERAL         shift and go to state 14
    IF              shift and go to state 15
    WHILE           shift and go to state 16
    FOR             shift and go to state 17

    instruccion                    shift and go to state 18
    console_pro                    shift and go to state 4
    declaration_instruction        shift and go to state 5
    assig_pro                      shift and go to state 6
    if_pro                         shift and go to state 7
    while_pro                      shift and go to state 8
    for_pro                        shift and go to state 9
    for_each_pro                   shift and go to state 10
    sumadores                      shift and go to state 11

state 151

    (24) else_pro -> ELSE IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE . else_pro
    (24) else_pro -> . ELSE IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro
    (25) else_pro -> . ELSE L_LLAVE instrucciones R_LLAVE
    (26) else_pro -> .

    ELSE            shift and go to state 132
    CONSOLE         reduce using rule 26 (else_pro -> .)
    LET             reduce using rule 26 (else_pro -> .)
    LITERAL         reduce using rule 26 (else_pro -> .)
    IF              reduce using rule 26 (else_pro -> .)
    WHILE           reduce using rule 26 (else_pro -> .)
    FOR             reduce using rule 26 (else_pro -> .)
    $end            reduce using rule 26 (else_pro -> .)
    R_LLAVE         reduce using rule 26 (else_pro -> .)

    else_pro                       shift and go to state 152

state 152

    (24) else_pro -> ELSE IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .

    CONSOLE         reduce using rule 24 (else_pro -> ELSE IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    LET             reduce using rule 24 (else_pro -> ELSE IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    LITERAL         reduce using rule 24 (else_pro -> ELSE IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    IF              reduce using rule 24 (else_pro -> ELSE IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    WHILE           reduce using rule 24 (else_pro -> ELSE IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    FOR             reduce using rule 24 (else_pro -> ELSE IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    $end            reduce using rule 24 (else_pro -> ELSE IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)
    R_LLAVE         reduce using rule 24 (else_pro -> ELSE IF L_PAREN a R_PAREN L_LLAVE instrucciones R_LLAVE else_pro .)

